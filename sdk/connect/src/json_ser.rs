// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_associate_approved_origin_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociateApprovedOriginInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1) = &input.origin {
        object.key("Origin").string(var_1.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_associate_bot_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociateBotInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2) = &input.lex_bot {
        let mut object_3 = object.key("LexBot").start_object();
        crate::json_ser::serialize_structure_crate_model_lex_bot(&mut object_3, var_2)?;
        object_3.finish();
    }
    if let Some(var_4) = &input.lex_v2_bot {
        let mut object_5 = object.key("LexV2Bot").start_object();
        crate::json_ser::serialize_structure_crate_model_lex_v2_bot(&mut object_5, var_4)?;
        object_5.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_associate_default_vocabulary_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociateDefaultVocabularyInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_6) = &input.vocabulary_id {
        object.key("VocabularyId").string(var_6.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_associate_instance_storage_config_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociateInstanceStorageConfigInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_7) = &input.resource_type {
        object.key("ResourceType").string(var_7.as_str());
    }
    if let Some(var_8) = &input.storage_config {
        let mut object_9 = object.key("StorageConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_instance_storage_config(
            &mut object_9,
            var_8,
        )?;
        object_9.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_associate_lambda_function_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociateLambdaFunctionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_10) = &input.function_arn {
        object.key("FunctionArn").string(var_10.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_associate_lex_bot_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociateLexBotInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_11) = &input.lex_bot {
        let mut object_12 = object.key("LexBot").start_object();
        crate::json_ser::serialize_structure_crate_model_lex_bot(&mut object_12, var_11)?;
        object_12.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_associate_phone_number_contact_flow_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociatePhoneNumberContactFlowInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_13) = &input.contact_flow_id {
        object.key("ContactFlowId").string(var_13.as_str());
    }
    if let Some(var_14) = &input.instance_id {
        object.key("InstanceId").string(var_14.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_associate_queue_quick_connects_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociateQueueQuickConnectsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_15) = &input.quick_connect_ids {
        let mut array_16 = object.key("QuickConnectIds").start_array();
        for item_17 in var_15 {
            {
                array_16.value().string(item_17.as_str());
            }
        }
        array_16.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_associate_routing_profile_queues_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociateRoutingProfileQueuesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_18) = &input.queue_configs {
        let mut array_19 = object.key("QueueConfigs").start_array();
        for item_20 in var_18 {
            {
                let mut object_21 = array_19.value().start_object();
                crate::json_ser::serialize_structure_crate_model_routing_profile_queue_config(
                    &mut object_21,
                    item_20,
                )?;
                object_21.finish();
            }
        }
        array_19.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_associate_security_key_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociateSecurityKeyInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_22) = &input.key {
        object.key("Key").string(var_22.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_claim_phone_number_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ClaimPhoneNumberInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_23) = &input.client_token {
        object.key("ClientToken").string(var_23.as_str());
    }
    if let Some(var_24) = &input.phone_number {
        object.key("PhoneNumber").string(var_24.as_str());
    }
    if let Some(var_25) = &input.phone_number_description {
        object.key("PhoneNumberDescription").string(var_25.as_str());
    }
    if let Some(var_26) = &input.tags {
        let mut object_27 = object.key("Tags").start_object();
        for (key_28, value_29) in var_26 {
            {
                object_27.key(key_28).string(value_29.as_str());
            }
        }
        object_27.finish();
    }
    if let Some(var_30) = &input.target_arn {
        object.key("TargetArn").string(var_30.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_agent_status_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateAgentStatusInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_31) = &input.description {
        object.key("Description").string(var_31.as_str());
    }
    if let Some(var_32) = &input.display_order {
        object.key("DisplayOrder").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_32).into()),
        );
    }
    if let Some(var_33) = &input.name {
        object.key("Name").string(var_33.as_str());
    }
    if let Some(var_34) = &input.state {
        object.key("State").string(var_34.as_str());
    }
    if let Some(var_35) = &input.tags {
        let mut object_36 = object.key("Tags").start_object();
        for (key_37, value_38) in var_35 {
            {
                object_36.key(key_37).string(value_38.as_str());
            }
        }
        object_36.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_contact_flow_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateContactFlowInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_39) = &input.content {
        object.key("Content").string(var_39.as_str());
    }
    if let Some(var_40) = &input.description {
        object.key("Description").string(var_40.as_str());
    }
    if let Some(var_41) = &input.name {
        object.key("Name").string(var_41.as_str());
    }
    if let Some(var_42) = &input.tags {
        let mut object_43 = object.key("Tags").start_object();
        for (key_44, value_45) in var_42 {
            {
                object_43.key(key_44).string(value_45.as_str());
            }
        }
        object_43.finish();
    }
    if let Some(var_46) = &input.r#type {
        object.key("Type").string(var_46.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_contact_flow_module_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateContactFlowModuleInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_47) = &input.client_token {
        object.key("ClientToken").string(var_47.as_str());
    }
    if let Some(var_48) = &input.content {
        object.key("Content").string(var_48.as_str());
    }
    if let Some(var_49) = &input.description {
        object.key("Description").string(var_49.as_str());
    }
    if let Some(var_50) = &input.name {
        object.key("Name").string(var_50.as_str());
    }
    if let Some(var_51) = &input.tags {
        let mut object_52 = object.key("Tags").start_object();
        for (key_53, value_54) in var_51 {
            {
                object_52.key(key_53).string(value_54.as_str());
            }
        }
        object_52.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_hours_of_operation_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateHoursOfOperationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_55) = &input.config {
        let mut array_56 = object.key("Config").start_array();
        for item_57 in var_55 {
            {
                let mut object_58 = array_56.value().start_object();
                crate::json_ser::serialize_structure_crate_model_hours_of_operation_config(
                    &mut object_58,
                    item_57,
                )?;
                object_58.finish();
            }
        }
        array_56.finish();
    }
    if let Some(var_59) = &input.description {
        object.key("Description").string(var_59.as_str());
    }
    if let Some(var_60) = &input.name {
        object.key("Name").string(var_60.as_str());
    }
    if let Some(var_61) = &input.tags {
        let mut object_62 = object.key("Tags").start_object();
        for (key_63, value_64) in var_61 {
            {
                object_62.key(key_63).string(value_64.as_str());
            }
        }
        object_62.finish();
    }
    if let Some(var_65) = &input.time_zone {
        object.key("TimeZone").string(var_65.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_instance_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateInstanceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_66) = &input.client_token {
        object.key("ClientToken").string(var_66.as_str());
    }
    if let Some(var_67) = &input.directory_id {
        object.key("DirectoryId").string(var_67.as_str());
    }
    if let Some(var_68) = &input.identity_management_type {
        object.key("IdentityManagementType").string(var_68.as_str());
    }
    if let Some(var_69) = &input.inbound_calls_enabled {
        object.key("InboundCallsEnabled").boolean(*var_69);
    }
    if let Some(var_70) = &input.instance_alias {
        object.key("InstanceAlias").string(var_70.as_str());
    }
    if let Some(var_71) = &input.outbound_calls_enabled {
        object.key("OutboundCallsEnabled").boolean(*var_71);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_integration_association_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateIntegrationAssociationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_72) = &input.integration_arn {
        object.key("IntegrationArn").string(var_72.as_str());
    }
    if let Some(var_73) = &input.integration_type {
        object.key("IntegrationType").string(var_73.as_str());
    }
    if let Some(var_74) = &input.source_application_name {
        object.key("SourceApplicationName").string(var_74.as_str());
    }
    if let Some(var_75) = &input.source_application_url {
        object.key("SourceApplicationUrl").string(var_75.as_str());
    }
    if let Some(var_76) = &input.source_type {
        object.key("SourceType").string(var_76.as_str());
    }
    if let Some(var_77) = &input.tags {
        let mut object_78 = object.key("Tags").start_object();
        for (key_79, value_80) in var_77 {
            {
                object_78.key(key_79).string(value_80.as_str());
            }
        }
        object_78.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_queue_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateQueueInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_81) = &input.description {
        object.key("Description").string(var_81.as_str());
    }
    if let Some(var_82) = &input.hours_of_operation_id {
        object.key("HoursOfOperationId").string(var_82.as_str());
    }
    if let Some(var_83) = &input.max_contacts {
        object.key("MaxContacts").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_83).into()),
        );
    }
    if let Some(var_84) = &input.name {
        object.key("Name").string(var_84.as_str());
    }
    if let Some(var_85) = &input.outbound_caller_config {
        let mut object_86 = object.key("OutboundCallerConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_outbound_caller_config(
            &mut object_86,
            var_85,
        )?;
        object_86.finish();
    }
    if let Some(var_87) = &input.quick_connect_ids {
        let mut array_88 = object.key("QuickConnectIds").start_array();
        for item_89 in var_87 {
            {
                array_88.value().string(item_89.as_str());
            }
        }
        array_88.finish();
    }
    if let Some(var_90) = &input.tags {
        let mut object_91 = object.key("Tags").start_object();
        for (key_92, value_93) in var_90 {
            {
                object_91.key(key_92).string(value_93.as_str());
            }
        }
        object_91.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_quick_connect_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateQuickConnectInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_94) = &input.description {
        object.key("Description").string(var_94.as_str());
    }
    if let Some(var_95) = &input.name {
        object.key("Name").string(var_95.as_str());
    }
    if let Some(var_96) = &input.quick_connect_config {
        let mut object_97 = object.key("QuickConnectConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_quick_connect_config(
            &mut object_97,
            var_96,
        )?;
        object_97.finish();
    }
    if let Some(var_98) = &input.tags {
        let mut object_99 = object.key("Tags").start_object();
        for (key_100, value_101) in var_98 {
            {
                object_99.key(key_100).string(value_101.as_str());
            }
        }
        object_99.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_routing_profile_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateRoutingProfileInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_102) = &input.default_outbound_queue_id {
        object
            .key("DefaultOutboundQueueId")
            .string(var_102.as_str());
    }
    if let Some(var_103) = &input.description {
        object.key("Description").string(var_103.as_str());
    }
    if let Some(var_104) = &input.media_concurrencies {
        let mut array_105 = object.key("MediaConcurrencies").start_array();
        for item_106 in var_104 {
            {
                let mut object_107 = array_105.value().start_object();
                crate::json_ser::serialize_structure_crate_model_media_concurrency(
                    &mut object_107,
                    item_106,
                )?;
                object_107.finish();
            }
        }
        array_105.finish();
    }
    if let Some(var_108) = &input.name {
        object.key("Name").string(var_108.as_str());
    }
    if let Some(var_109) = &input.queue_configs {
        let mut array_110 = object.key("QueueConfigs").start_array();
        for item_111 in var_109 {
            {
                let mut object_112 = array_110.value().start_object();
                crate::json_ser::serialize_structure_crate_model_routing_profile_queue_config(
                    &mut object_112,
                    item_111,
                )?;
                object_112.finish();
            }
        }
        array_110.finish();
    }
    if let Some(var_113) = &input.tags {
        let mut object_114 = object.key("Tags").start_object();
        for (key_115, value_116) in var_113 {
            {
                object_114.key(key_115).string(value_116.as_str());
            }
        }
        object_114.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_security_profile_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateSecurityProfileInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_117) = &input.description {
        object.key("Description").string(var_117.as_str());
    }
    if let Some(var_118) = &input.permissions {
        let mut array_119 = object.key("Permissions").start_array();
        for item_120 in var_118 {
            {
                array_119.value().string(item_120.as_str());
            }
        }
        array_119.finish();
    }
    if let Some(var_121) = &input.security_profile_name {
        object.key("SecurityProfileName").string(var_121.as_str());
    }
    if let Some(var_122) = &input.tags {
        let mut object_123 = object.key("Tags").start_object();
        for (key_124, value_125) in var_122 {
            {
                object_123.key(key_124).string(value_125.as_str());
            }
        }
        object_123.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_use_case_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateUseCaseInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_126) = &input.tags {
        let mut object_127 = object.key("Tags").start_object();
        for (key_128, value_129) in var_126 {
            {
                object_127.key(key_128).string(value_129.as_str());
            }
        }
        object_127.finish();
    }
    if let Some(var_130) = &input.use_case_type {
        object.key("UseCaseType").string(var_130.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_user_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateUserInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_131) = &input.directory_user_id {
        object.key("DirectoryUserId").string(var_131.as_str());
    }
    if let Some(var_132) = &input.hierarchy_group_id {
        object.key("HierarchyGroupId").string(var_132.as_str());
    }
    if let Some(var_133) = &input.identity_info {
        let mut object_134 = object.key("IdentityInfo").start_object();
        crate::json_ser::serialize_structure_crate_model_user_identity_info(
            &mut object_134,
            var_133,
        )?;
        object_134.finish();
    }
    if let Some(var_135) = &input.password {
        object.key("Password").string(var_135.as_str());
    }
    if let Some(var_136) = &input.phone_config {
        let mut object_137 = object.key("PhoneConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_user_phone_config(
            &mut object_137,
            var_136,
        )?;
        object_137.finish();
    }
    if let Some(var_138) = &input.routing_profile_id {
        object.key("RoutingProfileId").string(var_138.as_str());
    }
    if let Some(var_139) = &input.security_profile_ids {
        let mut array_140 = object.key("SecurityProfileIds").start_array();
        for item_141 in var_139 {
            {
                array_140.value().string(item_141.as_str());
            }
        }
        array_140.finish();
    }
    if let Some(var_142) = &input.tags {
        let mut object_143 = object.key("Tags").start_object();
        for (key_144, value_145) in var_142 {
            {
                object_143.key(key_144).string(value_145.as_str());
            }
        }
        object_143.finish();
    }
    if let Some(var_146) = &input.username {
        object.key("Username").string(var_146.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_user_hierarchy_group_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateUserHierarchyGroupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_147) = &input.name {
        object.key("Name").string(var_147.as_str());
    }
    if let Some(var_148) = &input.parent_group_id {
        object.key("ParentGroupId").string(var_148.as_str());
    }
    if let Some(var_149) = &input.tags {
        let mut object_150 = object.key("Tags").start_object();
        for (key_151, value_152) in var_149 {
            {
                object_150.key(key_151).string(value_152.as_str());
            }
        }
        object_150.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_vocabulary_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateVocabularyInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_153) = &input.client_token {
        object.key("ClientToken").string(var_153.as_str());
    }
    if let Some(var_154) = &input.content {
        object.key("Content").string(var_154.as_str());
    }
    if let Some(var_155) = &input.language_code {
        object.key("LanguageCode").string(var_155.as_str());
    }
    if let Some(var_156) = &input.tags {
        let mut object_157 = object.key("Tags").start_object();
        for (key_158, value_159) in var_156 {
            {
                object_157.key(key_158).string(value_159.as_str());
            }
        }
        object_157.finish();
    }
    if let Some(var_160) = &input.vocabulary_name {
        object.key("VocabularyName").string(var_160.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_disassociate_bot_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DisassociateBotInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_161) = &input.lex_bot {
        let mut object_162 = object.key("LexBot").start_object();
        crate::json_ser::serialize_structure_crate_model_lex_bot(&mut object_162, var_161)?;
        object_162.finish();
    }
    if let Some(var_163) = &input.lex_v2_bot {
        let mut object_164 = object.key("LexV2Bot").start_object();
        crate::json_ser::serialize_structure_crate_model_lex_v2_bot(&mut object_164, var_163)?;
        object_164.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_disassociate_queue_quick_connects_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DisassociateQueueQuickConnectsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_165) = &input.quick_connect_ids {
        let mut array_166 = object.key("QuickConnectIds").start_array();
        for item_167 in var_165 {
            {
                array_166.value().string(item_167.as_str());
            }
        }
        array_166.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_disassociate_routing_profile_queues_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DisassociateRoutingProfileQueuesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_168) = &input.queue_references {
        let mut array_169 = object.key("QueueReferences").start_array();
        for item_170 in var_168 {
            {
                let mut object_171 = array_169.value().start_object();
                crate::json_ser::serialize_structure_crate_model_routing_profile_queue_reference(
                    &mut object_171,
                    item_170,
                )?;
                object_171.finish();
            }
        }
        array_169.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_current_metric_data_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetCurrentMetricDataInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_172) = &input.current_metrics {
        let mut array_173 = object.key("CurrentMetrics").start_array();
        for item_174 in var_172 {
            {
                let mut object_175 = array_173.value().start_object();
                crate::json_ser::serialize_structure_crate_model_current_metric(
                    &mut object_175,
                    item_174,
                )?;
                object_175.finish();
            }
        }
        array_173.finish();
    }
    if let Some(var_176) = &input.filters {
        let mut object_177 = object.key("Filters").start_object();
        crate::json_ser::serialize_structure_crate_model_filters(&mut object_177, var_176)?;
        object_177.finish();
    }
    if let Some(var_178) = &input.groupings {
        let mut array_179 = object.key("Groupings").start_array();
        for item_180 in var_178 {
            {
                array_179.value().string(item_180.as_str());
            }
        }
        array_179.finish();
    }
    if let Some(var_181) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_181).into()),
        );
    }
    if let Some(var_182) = &input.next_token {
        object.key("NextToken").string(var_182.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_metric_data_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetMetricDataInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_183) = &input.end_time {
        object
            .key("EndTime")
            .date_time(var_183, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_184) = &input.filters {
        let mut object_185 = object.key("Filters").start_object();
        crate::json_ser::serialize_structure_crate_model_filters(&mut object_185, var_184)?;
        object_185.finish();
    }
    if let Some(var_186) = &input.groupings {
        let mut array_187 = object.key("Groupings").start_array();
        for item_188 in var_186 {
            {
                array_187.value().string(item_188.as_str());
            }
        }
        array_187.finish();
    }
    if let Some(var_189) = &input.historical_metrics {
        let mut array_190 = object.key("HistoricalMetrics").start_array();
        for item_191 in var_189 {
            {
                let mut object_192 = array_190.value().start_object();
                crate::json_ser::serialize_structure_crate_model_historical_metric(
                    &mut object_192,
                    item_191,
                )?;
                object_192.finish();
            }
        }
        array_190.finish();
    }
    if let Some(var_193) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_193).into()),
        );
    }
    if let Some(var_194) = &input.next_token {
        object.key("NextToken").string(var_194.as_str());
    }
    if let Some(var_195) = &input.start_time {
        object
            .key("StartTime")
            .date_time(var_195, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_default_vocabularies_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListDefaultVocabulariesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_196) = &input.language_code {
        object.key("LanguageCode").string(var_196.as_str());
    }
    if input.max_results != 0 {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_results).into()),
        );
    }
    if let Some(var_197) = &input.next_token {
        object.key("NextToken").string(var_197.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_phone_numbers_v2_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListPhoneNumbersV2Input,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_198) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_198).into()),
        );
    }
    if let Some(var_199) = &input.next_token {
        object.key("NextToken").string(var_199.as_str());
    }
    if let Some(var_200) = &input.phone_number_country_codes {
        let mut array_201 = object.key("PhoneNumberCountryCodes").start_array();
        for item_202 in var_200 {
            {
                array_201.value().string(item_202.as_str());
            }
        }
        array_201.finish();
    }
    if let Some(var_203) = &input.phone_number_prefix {
        object.key("PhoneNumberPrefix").string(var_203.as_str());
    }
    if let Some(var_204) = &input.phone_number_types {
        let mut array_205 = object.key("PhoneNumberTypes").start_array();
        for item_206 in var_204 {
            {
                array_205.value().string(item_206.as_str());
            }
        }
        array_205.finish();
    }
    if let Some(var_207) = &input.target_arn {
        object.key("TargetArn").string(var_207.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_user_status_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutUserStatusInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_208) = &input.agent_status_id {
        object.key("AgentStatusId").string(var_208.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_resume_contact_recording_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ResumeContactRecordingInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_209) = &input.contact_id {
        object.key("ContactId").string(var_209.as_str());
    }
    if let Some(var_210) = &input.initial_contact_id {
        object.key("InitialContactId").string(var_210.as_str());
    }
    if let Some(var_211) = &input.instance_id {
        object.key("InstanceId").string(var_211.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_search_available_phone_numbers_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SearchAvailablePhoneNumbersInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_212) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_212).into()),
        );
    }
    if let Some(var_213) = &input.next_token {
        object.key("NextToken").string(var_213.as_str());
    }
    if let Some(var_214) = &input.phone_number_country_code {
        object
            .key("PhoneNumberCountryCode")
            .string(var_214.as_str());
    }
    if let Some(var_215) = &input.phone_number_prefix {
        object.key("PhoneNumberPrefix").string(var_215.as_str());
    }
    if let Some(var_216) = &input.phone_number_type {
        object.key("PhoneNumberType").string(var_216.as_str());
    }
    if let Some(var_217) = &input.target_arn {
        object.key("TargetArn").string(var_217.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_search_users_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SearchUsersInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_218) = &input.instance_id {
        object.key("InstanceId").string(var_218.as_str());
    }
    if let Some(var_219) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_219).into()),
        );
    }
    if let Some(var_220) = &input.next_token {
        object.key("NextToken").string(var_220.as_str());
    }
    if let Some(var_221) = &input.search_criteria {
        let mut object_222 = object.key("SearchCriteria").start_object();
        crate::json_ser::serialize_structure_crate_model_user_search_criteria(
            &mut object_222,
            var_221,
        )?;
        object_222.finish();
    }
    if let Some(var_223) = &input.search_filter {
        let mut object_224 = object.key("SearchFilter").start_object();
        crate::json_ser::serialize_structure_crate_model_user_search_filter(
            &mut object_224,
            var_223,
        )?;
        object_224.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_search_vocabularies_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SearchVocabulariesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_225) = &input.language_code {
        object.key("LanguageCode").string(var_225.as_str());
    }
    if input.max_results != 0 {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_results).into()),
        );
    }
    if let Some(var_226) = &input.name_starts_with {
        object.key("NameStartsWith").string(var_226.as_str());
    }
    if let Some(var_227) = &input.next_token {
        object.key("NextToken").string(var_227.as_str());
    }
    if let Some(var_228) = &input.state {
        object.key("State").string(var_228.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_chat_contact_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartChatContactInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_229) = &input.attributes {
        let mut object_230 = object.key("Attributes").start_object();
        for (key_231, value_232) in var_229 {
            {
                object_230.key(key_231).string(value_232.as_str());
            }
        }
        object_230.finish();
    }
    if let Some(var_233) = &input.chat_duration_in_minutes {
        object.key("ChatDurationInMinutes").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_233).into()),
        );
    }
    if let Some(var_234) = &input.client_token {
        object.key("ClientToken").string(var_234.as_str());
    }
    if let Some(var_235) = &input.contact_flow_id {
        object.key("ContactFlowId").string(var_235.as_str());
    }
    if let Some(var_236) = &input.initial_message {
        let mut object_237 = object.key("InitialMessage").start_object();
        crate::json_ser::serialize_structure_crate_model_chat_message(&mut object_237, var_236)?;
        object_237.finish();
    }
    if let Some(var_238) = &input.instance_id {
        object.key("InstanceId").string(var_238.as_str());
    }
    if let Some(var_239) = &input.participant_details {
        let mut object_240 = object.key("ParticipantDetails").start_object();
        crate::json_ser::serialize_structure_crate_model_participant_details(
            &mut object_240,
            var_239,
        )?;
        object_240.finish();
    }
    if let Some(var_241) = &input.supported_messaging_content_types {
        let mut array_242 = object.key("SupportedMessagingContentTypes").start_array();
        for item_243 in var_241 {
            {
                array_242.value().string(item_243.as_str());
            }
        }
        array_242.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_contact_recording_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartContactRecordingInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_244) = &input.contact_id {
        object.key("ContactId").string(var_244.as_str());
    }
    if let Some(var_245) = &input.initial_contact_id {
        object.key("InitialContactId").string(var_245.as_str());
    }
    if let Some(var_246) = &input.instance_id {
        object.key("InstanceId").string(var_246.as_str());
    }
    if let Some(var_247) = &input.voice_recording_configuration {
        let mut object_248 = object.key("VoiceRecordingConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_voice_recording_configuration(
            &mut object_248,
            var_247,
        )?;
        object_248.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_contact_streaming_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartContactStreamingInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_249) = &input.chat_streaming_configuration {
        let mut object_250 = object.key("ChatStreamingConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_chat_streaming_configuration(
            &mut object_250,
            var_249,
        )?;
        object_250.finish();
    }
    if let Some(var_251) = &input.client_token {
        object.key("ClientToken").string(var_251.as_str());
    }
    if let Some(var_252) = &input.contact_id {
        object.key("ContactId").string(var_252.as_str());
    }
    if let Some(var_253) = &input.instance_id {
        object.key("InstanceId").string(var_253.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_outbound_voice_contact_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartOutboundVoiceContactInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_254) = &input.answer_machine_detection_config {
        let mut object_255 = object.key("AnswerMachineDetectionConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_answer_machine_detection_config(
            &mut object_255,
            var_254,
        )?;
        object_255.finish();
    }
    if let Some(var_256) = &input.attributes {
        let mut object_257 = object.key("Attributes").start_object();
        for (key_258, value_259) in var_256 {
            {
                object_257.key(key_258).string(value_259.as_str());
            }
        }
        object_257.finish();
    }
    if let Some(var_260) = &input.campaign_id {
        object.key("CampaignId").string(var_260.as_str());
    }
    if let Some(var_261) = &input.client_token {
        object.key("ClientToken").string(var_261.as_str());
    }
    if let Some(var_262) = &input.contact_flow_id {
        object.key("ContactFlowId").string(var_262.as_str());
    }
    if let Some(var_263) = &input.destination_phone_number {
        object
            .key("DestinationPhoneNumber")
            .string(var_263.as_str());
    }
    if let Some(var_264) = &input.instance_id {
        object.key("InstanceId").string(var_264.as_str());
    }
    if let Some(var_265) = &input.queue_id {
        object.key("QueueId").string(var_265.as_str());
    }
    if let Some(var_266) = &input.source_phone_number {
        object.key("SourcePhoneNumber").string(var_266.as_str());
    }
    if let Some(var_267) = &input.traffic_type {
        object.key("TrafficType").string(var_267.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_task_contact_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartTaskContactInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_268) = &input.attributes {
        let mut object_269 = object.key("Attributes").start_object();
        for (key_270, value_271) in var_268 {
            {
                object_269.key(key_270).string(value_271.as_str());
            }
        }
        object_269.finish();
    }
    if let Some(var_272) = &input.client_token {
        object.key("ClientToken").string(var_272.as_str());
    }
    if let Some(var_273) = &input.contact_flow_id {
        object.key("ContactFlowId").string(var_273.as_str());
    }
    if let Some(var_274) = &input.description {
        object.key("Description").string(var_274.as_str());
    }
    if let Some(var_275) = &input.instance_id {
        object.key("InstanceId").string(var_275.as_str());
    }
    if let Some(var_276) = &input.name {
        object.key("Name").string(var_276.as_str());
    }
    if let Some(var_277) = &input.previous_contact_id {
        object.key("PreviousContactId").string(var_277.as_str());
    }
    if let Some(var_278) = &input.references {
        let mut object_279 = object.key("References").start_object();
        for (key_280, value_281) in var_278 {
            {
                let mut object_282 = object_279.key(key_280).start_object();
                crate::json_ser::serialize_structure_crate_model_reference(
                    &mut object_282,
                    value_281,
                )?;
                object_282.finish();
            }
        }
        object_279.finish();
    }
    if let Some(var_283) = &input.scheduled_time {
        object
            .key("ScheduledTime")
            .date_time(var_283, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_contact_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopContactInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_284) = &input.contact_id {
        object.key("ContactId").string(var_284.as_str());
    }
    if let Some(var_285) = &input.instance_id {
        object.key("InstanceId").string(var_285.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_contact_recording_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopContactRecordingInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_286) = &input.contact_id {
        object.key("ContactId").string(var_286.as_str());
    }
    if let Some(var_287) = &input.initial_contact_id {
        object.key("InitialContactId").string(var_287.as_str());
    }
    if let Some(var_288) = &input.instance_id {
        object.key("InstanceId").string(var_288.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_contact_streaming_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopContactStreamingInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_289) = &input.contact_id {
        object.key("ContactId").string(var_289.as_str());
    }
    if let Some(var_290) = &input.instance_id {
        object.key("InstanceId").string(var_290.as_str());
    }
    if let Some(var_291) = &input.streaming_id {
        object.key("StreamingId").string(var_291.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_suspend_contact_recording_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SuspendContactRecordingInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_292) = &input.contact_id {
        object.key("ContactId").string(var_292.as_str());
    }
    if let Some(var_293) = &input.initial_contact_id {
        object.key("InitialContactId").string(var_293.as_str());
    }
    if let Some(var_294) = &input.instance_id {
        object.key("InstanceId").string(var_294.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_tag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_295) = &input.tags {
        let mut object_296 = object.key("tags").start_object();
        for (key_297, value_298) in var_295 {
            {
                object_296.key(key_297).string(value_298.as_str());
            }
        }
        object_296.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_agent_status_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateAgentStatusInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_299) = &input.description {
        object.key("Description").string(var_299.as_str());
    }
    if let Some(var_300) = &input.display_order {
        object.key("DisplayOrder").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_300).into()),
        );
    }
    if let Some(var_301) = &input.name {
        object.key("Name").string(var_301.as_str());
    }
    if input.reset_order_number {
        object
            .key("ResetOrderNumber")
            .boolean(input.reset_order_number);
    }
    if let Some(var_302) = &input.state {
        object.key("State").string(var_302.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_contact_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateContactInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_303) = &input.description {
        object.key("Description").string(var_303.as_str());
    }
    if let Some(var_304) = &input.name {
        object.key("Name").string(var_304.as_str());
    }
    if let Some(var_305) = &input.references {
        let mut object_306 = object.key("References").start_object();
        for (key_307, value_308) in var_305 {
            {
                let mut object_309 = object_306.key(key_307).start_object();
                crate::json_ser::serialize_structure_crate_model_reference(
                    &mut object_309,
                    value_308,
                )?;
                object_309.finish();
            }
        }
        object_306.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_contact_attributes_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateContactAttributesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_310) = &input.attributes {
        let mut object_311 = object.key("Attributes").start_object();
        for (key_312, value_313) in var_310 {
            {
                object_311.key(key_312).string(value_313.as_str());
            }
        }
        object_311.finish();
    }
    if let Some(var_314) = &input.initial_contact_id {
        object.key("InitialContactId").string(var_314.as_str());
    }
    if let Some(var_315) = &input.instance_id {
        object.key("InstanceId").string(var_315.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_contact_flow_content_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateContactFlowContentInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_316) = &input.content {
        object.key("Content").string(var_316.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_contact_flow_metadata_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateContactFlowMetadataInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_317) = &input.contact_flow_state {
        object.key("ContactFlowState").string(var_317.as_str());
    }
    if let Some(var_318) = &input.description {
        object.key("Description").string(var_318.as_str());
    }
    if let Some(var_319) = &input.name {
        object.key("Name").string(var_319.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_contact_flow_module_content_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateContactFlowModuleContentInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_320) = &input.content {
        object.key("Content").string(var_320.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_contact_flow_module_metadata_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateContactFlowModuleMetadataInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_321) = &input.description {
        object.key("Description").string(var_321.as_str());
    }
    if let Some(var_322) = &input.name {
        object.key("Name").string(var_322.as_str());
    }
    if let Some(var_323) = &input.state {
        object.key("State").string(var_323.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_contact_flow_name_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateContactFlowNameInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_324) = &input.description {
        object.key("Description").string(var_324.as_str());
    }
    if let Some(var_325) = &input.name {
        object.key("Name").string(var_325.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_contact_schedule_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateContactScheduleInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_326) = &input.contact_id {
        object.key("ContactId").string(var_326.as_str());
    }
    if let Some(var_327) = &input.instance_id {
        object.key("InstanceId").string(var_327.as_str());
    }
    if let Some(var_328) = &input.scheduled_time {
        object
            .key("ScheduledTime")
            .date_time(var_328, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_hours_of_operation_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateHoursOfOperationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_329) = &input.config {
        let mut array_330 = object.key("Config").start_array();
        for item_331 in var_329 {
            {
                let mut object_332 = array_330.value().start_object();
                crate::json_ser::serialize_structure_crate_model_hours_of_operation_config(
                    &mut object_332,
                    item_331,
                )?;
                object_332.finish();
            }
        }
        array_330.finish();
    }
    if let Some(var_333) = &input.description {
        object.key("Description").string(var_333.as_str());
    }
    if let Some(var_334) = &input.name {
        object.key("Name").string(var_334.as_str());
    }
    if let Some(var_335) = &input.time_zone {
        object.key("TimeZone").string(var_335.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_instance_attribute_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateInstanceAttributeInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_336) = &input.value {
        object.key("Value").string(var_336.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_instance_storage_config_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateInstanceStorageConfigInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_337) = &input.storage_config {
        let mut object_338 = object.key("StorageConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_instance_storage_config(
            &mut object_338,
            var_337,
        )?;
        object_338.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_phone_number_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdatePhoneNumberInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_339) = &input.client_token {
        object.key("ClientToken").string(var_339.as_str());
    }
    if let Some(var_340) = &input.target_arn {
        object.key("TargetArn").string(var_340.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_queue_hours_of_operation_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateQueueHoursOfOperationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_341) = &input.hours_of_operation_id {
        object.key("HoursOfOperationId").string(var_341.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_queue_max_contacts_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateQueueMaxContactsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_342) = &input.max_contacts {
        object.key("MaxContacts").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_342).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_queue_name_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateQueueNameInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_343) = &input.description {
        object.key("Description").string(var_343.as_str());
    }
    if let Some(var_344) = &input.name {
        object.key("Name").string(var_344.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_queue_outbound_caller_config_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateQueueOutboundCallerConfigInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_345) = &input.outbound_caller_config {
        let mut object_346 = object.key("OutboundCallerConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_outbound_caller_config(
            &mut object_346,
            var_345,
        )?;
        object_346.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_queue_status_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateQueueStatusInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_347) = &input.status {
        object.key("Status").string(var_347.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_quick_connect_config_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateQuickConnectConfigInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_348) = &input.quick_connect_config {
        let mut object_349 = object.key("QuickConnectConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_quick_connect_config(
            &mut object_349,
            var_348,
        )?;
        object_349.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_quick_connect_name_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateQuickConnectNameInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_350) = &input.description {
        object.key("Description").string(var_350.as_str());
    }
    if let Some(var_351) = &input.name {
        object.key("Name").string(var_351.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_routing_profile_concurrency_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateRoutingProfileConcurrencyInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_352) = &input.media_concurrencies {
        let mut array_353 = object.key("MediaConcurrencies").start_array();
        for item_354 in var_352 {
            {
                let mut object_355 = array_353.value().start_object();
                crate::json_ser::serialize_structure_crate_model_media_concurrency(
                    &mut object_355,
                    item_354,
                )?;
                object_355.finish();
            }
        }
        array_353.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_routing_profile_default_outbound_queue_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateRoutingProfileDefaultOutboundQueueInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_356) = &input.default_outbound_queue_id {
        object
            .key("DefaultOutboundQueueId")
            .string(var_356.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_routing_profile_name_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateRoutingProfileNameInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_357) = &input.description {
        object.key("Description").string(var_357.as_str());
    }
    if let Some(var_358) = &input.name {
        object.key("Name").string(var_358.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_routing_profile_queues_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateRoutingProfileQueuesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_359) = &input.queue_configs {
        let mut array_360 = object.key("QueueConfigs").start_array();
        for item_361 in var_359 {
            {
                let mut object_362 = array_360.value().start_object();
                crate::json_ser::serialize_structure_crate_model_routing_profile_queue_config(
                    &mut object_362,
                    item_361,
                )?;
                object_362.finish();
            }
        }
        array_360.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_security_profile_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateSecurityProfileInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_363) = &input.description {
        object.key("Description").string(var_363.as_str());
    }
    if let Some(var_364) = &input.permissions {
        let mut array_365 = object.key("Permissions").start_array();
        for item_366 in var_364 {
            {
                array_365.value().string(item_366.as_str());
            }
        }
        array_365.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_user_hierarchy_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateUserHierarchyInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_367) = &input.hierarchy_group_id {
        object.key("HierarchyGroupId").string(var_367.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_user_hierarchy_group_name_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateUserHierarchyGroupNameInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_368) = &input.name {
        object.key("Name").string(var_368.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_user_hierarchy_structure_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateUserHierarchyStructureInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_369) = &input.hierarchy_structure {
        let mut object_370 = object.key("HierarchyStructure").start_object();
        crate::json_ser::serialize_structure_crate_model_hierarchy_structure_update(
            &mut object_370,
            var_369,
        )?;
        object_370.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_user_identity_info_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateUserIdentityInfoInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_371) = &input.identity_info {
        let mut object_372 = object.key("IdentityInfo").start_object();
        crate::json_ser::serialize_structure_crate_model_user_identity_info(
            &mut object_372,
            var_371,
        )?;
        object_372.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_user_phone_config_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateUserPhoneConfigInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_373) = &input.phone_config {
        let mut object_374 = object.key("PhoneConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_user_phone_config(
            &mut object_374,
            var_373,
        )?;
        object_374.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_user_routing_profile_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateUserRoutingProfileInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_375) = &input.routing_profile_id {
        object.key("RoutingProfileId").string(var_375.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_user_security_profiles_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateUserSecurityProfilesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_376) = &input.security_profile_ids {
        let mut array_377 = object.key("SecurityProfileIds").start_array();
        for item_378 in var_376 {
            {
                array_377.value().string(item_378.as_str());
            }
        }
        array_377.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_lex_bot(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LexBot,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_379) = &input.name {
        object.key("Name").string(var_379.as_str());
    }
    if let Some(var_380) = &input.lex_region {
        object.key("LexRegion").string(var_380.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_lex_v2_bot(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LexV2Bot,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_381) = &input.alias_arn {
        object.key("AliasArn").string(var_381.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_instance_storage_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InstanceStorageConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_382) = &input.association_id {
        object.key("AssociationId").string(var_382.as_str());
    }
    if let Some(var_383) = &input.storage_type {
        object.key("StorageType").string(var_383.as_str());
    }
    if let Some(var_384) = &input.s3_config {
        let mut object_385 = object.key("S3Config").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_config(&mut object_385, var_384)?;
        object_385.finish();
    }
    if let Some(var_386) = &input.kinesis_video_stream_config {
        let mut object_387 = object.key("KinesisVideoStreamConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_kinesis_video_stream_config(
            &mut object_387,
            var_386,
        )?;
        object_387.finish();
    }
    if let Some(var_388) = &input.kinesis_stream_config {
        let mut object_389 = object.key("KinesisStreamConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_kinesis_stream_config(
            &mut object_389,
            var_388,
        )?;
        object_389.finish();
    }
    if let Some(var_390) = &input.kinesis_firehose_config {
        let mut object_391 = object.key("KinesisFirehoseConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_kinesis_firehose_config(
            &mut object_391,
            var_390,
        )?;
        object_391.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_routing_profile_queue_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RoutingProfileQueueConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_392) = &input.queue_reference {
        let mut object_393 = object.key("QueueReference").start_object();
        crate::json_ser::serialize_structure_crate_model_routing_profile_queue_reference(
            &mut object_393,
            var_392,
        )?;
        object_393.finish();
    }
    if let Some(var_394) = &input.priority {
        object.key("Priority").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_394).into()),
        );
    }
    if let Some(var_395) = &input.delay {
        object.key("Delay").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_395).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_hours_of_operation_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HoursOfOperationConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_396) = &input.day {
        object.key("Day").string(var_396.as_str());
    }
    if let Some(var_397) = &input.start_time {
        let mut object_398 = object.key("StartTime").start_object();
        crate::json_ser::serialize_structure_crate_model_hours_of_operation_time_slice(
            &mut object_398,
            var_397,
        )?;
        object_398.finish();
    }
    if let Some(var_399) = &input.end_time {
        let mut object_400 = object.key("EndTime").start_object();
        crate::json_ser::serialize_structure_crate_model_hours_of_operation_time_slice(
            &mut object_400,
            var_399,
        )?;
        object_400.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_outbound_caller_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OutboundCallerConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_401) = &input.outbound_caller_id_name {
        object.key("OutboundCallerIdName").string(var_401.as_str());
    }
    if let Some(var_402) = &input.outbound_caller_id_number_id {
        object
            .key("OutboundCallerIdNumberId")
            .string(var_402.as_str());
    }
    if let Some(var_403) = &input.outbound_flow_id {
        object.key("OutboundFlowId").string(var_403.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_quick_connect_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::QuickConnectConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_404) = &input.quick_connect_type {
        object.key("QuickConnectType").string(var_404.as_str());
    }
    if let Some(var_405) = &input.user_config {
        let mut object_406 = object.key("UserConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_user_quick_connect_config(
            &mut object_406,
            var_405,
        )?;
        object_406.finish();
    }
    if let Some(var_407) = &input.queue_config {
        let mut object_408 = object.key("QueueConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_queue_quick_connect_config(
            &mut object_408,
            var_407,
        )?;
        object_408.finish();
    }
    if let Some(var_409) = &input.phone_config {
        let mut object_410 = object.key("PhoneConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_phone_number_quick_connect_config(
            &mut object_410,
            var_409,
        )?;
        object_410.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_media_concurrency(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MediaConcurrency,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_411) = &input.channel {
        object.key("Channel").string(var_411.as_str());
    }
    {
        object.key("Concurrency").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.concurrency).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_user_identity_info(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UserIdentityInfo,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_412) = &input.first_name {
        object.key("FirstName").string(var_412.as_str());
    }
    if let Some(var_413) = &input.last_name {
        object.key("LastName").string(var_413.as_str());
    }
    if let Some(var_414) = &input.email {
        object.key("Email").string(var_414.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_user_phone_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UserPhoneConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_415) = &input.phone_type {
        object.key("PhoneType").string(var_415.as_str());
    }
    if input.auto_accept {
        object.key("AutoAccept").boolean(input.auto_accept);
    }
    if input.after_contact_work_time_limit != 0 {
        object.key("AfterContactWorkTimeLimit").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.after_contact_work_time_limit).into()),
        );
    }
    if let Some(var_416) = &input.desk_phone_number {
        object.key("DeskPhoneNumber").string(var_416.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_routing_profile_queue_reference(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RoutingProfileQueueReference,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_417) = &input.queue_id {
        object.key("QueueId").string(var_417.as_str());
    }
    if let Some(var_418) = &input.channel {
        object.key("Channel").string(var_418.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_current_metric(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CurrentMetric,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_419) = &input.name {
        object.key("Name").string(var_419.as_str());
    }
    if let Some(var_420) = &input.unit {
        object.key("Unit").string(var_420.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_filters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Filters,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_421) = &input.queues {
        let mut array_422 = object.key("Queues").start_array();
        for item_423 in var_421 {
            {
                array_422.value().string(item_423.as_str());
            }
        }
        array_422.finish();
    }
    if let Some(var_424) = &input.channels {
        let mut array_425 = object.key("Channels").start_array();
        for item_426 in var_424 {
            {
                array_425.value().string(item_426.as_str());
            }
        }
        array_425.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_historical_metric(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HistoricalMetric,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_427) = &input.name {
        object.key("Name").string(var_427.as_str());
    }
    if let Some(var_428) = &input.threshold {
        let mut object_429 = object.key("Threshold").start_object();
        crate::json_ser::serialize_structure_crate_model_threshold(&mut object_429, var_428)?;
        object_429.finish();
    }
    if let Some(var_430) = &input.statistic {
        object.key("Statistic").string(var_430.as_str());
    }
    if let Some(var_431) = &input.unit {
        object.key("Unit").string(var_431.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_user_search_criteria(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UserSearchCriteria,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_432) = &input.or_conditions {
        let mut array_433 = object.key("OrConditions").start_array();
        for item_434 in var_432 {
            {
                let mut object_435 = array_433.value().start_object();
                crate::json_ser::serialize_structure_crate_model_user_search_criteria(
                    &mut object_435,
                    item_434,
                )?;
                object_435.finish();
            }
        }
        array_433.finish();
    }
    if let Some(var_436) = &input.and_conditions {
        let mut array_437 = object.key("AndConditions").start_array();
        for item_438 in var_436 {
            {
                let mut object_439 = array_437.value().start_object();
                crate::json_ser::serialize_structure_crate_model_user_search_criteria(
                    &mut object_439,
                    item_438,
                )?;
                object_439.finish();
            }
        }
        array_437.finish();
    }
    if let Some(var_440) = &input.string_condition {
        let mut object_441 = object.key("StringCondition").start_object();
        crate::json_ser::serialize_structure_crate_model_string_condition(
            &mut object_441,
            var_440,
        )?;
        object_441.finish();
    }
    if let Some(var_442) = &input.hierarchy_group_condition {
        let mut object_443 = object.key("HierarchyGroupCondition").start_object();
        crate::json_ser::serialize_structure_crate_model_hierarchy_group_condition(
            &mut object_443,
            var_442,
        )?;
        object_443.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_user_search_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UserSearchFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_444) = &input.tag_filter {
        let mut object_445 = object.key("TagFilter").start_object();
        crate::json_ser::serialize_structure_crate_model_control_plane_tag_filter(
            &mut object_445,
            var_444,
        )?;
        object_445.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_chat_message(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ChatMessage,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_446) = &input.content_type {
        object.key("ContentType").string(var_446.as_str());
    }
    if let Some(var_447) = &input.content {
        object.key("Content").string(var_447.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_participant_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ParticipantDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_448) = &input.display_name {
        object.key("DisplayName").string(var_448.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_voice_recording_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VoiceRecordingConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_449) = &input.voice_recording_track {
        object.key("VoiceRecordingTrack").string(var_449.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_chat_streaming_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ChatStreamingConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_450) = &input.streaming_endpoint_arn {
        object.key("StreamingEndpointArn").string(var_450.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_answer_machine_detection_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AnswerMachineDetectionConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.enable_answer_machine_detection {
        object
            .key("EnableAnswerMachineDetection")
            .boolean(input.enable_answer_machine_detection);
    }
    if input.await_answer_machine_prompt {
        object
            .key("AwaitAnswerMachinePrompt")
            .boolean(input.await_answer_machine_prompt);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_reference(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Reference,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_451) = &input.value {
        object.key("Value").string(var_451.as_str());
    }
    if let Some(var_452) = &input.r#type {
        object.key("Type").string(var_452.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_hierarchy_structure_update(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HierarchyStructureUpdate,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_453) = &input.level_one {
        let mut object_454 = object.key("LevelOne").start_object();
        crate::json_ser::serialize_structure_crate_model_hierarchy_level_update(
            &mut object_454,
            var_453,
        )?;
        object_454.finish();
    }
    if let Some(var_455) = &input.level_two {
        let mut object_456 = object.key("LevelTwo").start_object();
        crate::json_ser::serialize_structure_crate_model_hierarchy_level_update(
            &mut object_456,
            var_455,
        )?;
        object_456.finish();
    }
    if let Some(var_457) = &input.level_three {
        let mut object_458 = object.key("LevelThree").start_object();
        crate::json_ser::serialize_structure_crate_model_hierarchy_level_update(
            &mut object_458,
            var_457,
        )?;
        object_458.finish();
    }
    if let Some(var_459) = &input.level_four {
        let mut object_460 = object.key("LevelFour").start_object();
        crate::json_ser::serialize_structure_crate_model_hierarchy_level_update(
            &mut object_460,
            var_459,
        )?;
        object_460.finish();
    }
    if let Some(var_461) = &input.level_five {
        let mut object_462 = object.key("LevelFive").start_object();
        crate::json_ser::serialize_structure_crate_model_hierarchy_level_update(
            &mut object_462,
            var_461,
        )?;
        object_462.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3Config,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_463) = &input.bucket_name {
        object.key("BucketName").string(var_463.as_str());
    }
    if let Some(var_464) = &input.bucket_prefix {
        object.key("BucketPrefix").string(var_464.as_str());
    }
    if let Some(var_465) = &input.encryption_config {
        let mut object_466 = object.key("EncryptionConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_encryption_config(
            &mut object_466,
            var_465,
        )?;
        object_466.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_kinesis_video_stream_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::KinesisVideoStreamConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_467) = &input.prefix {
        object.key("Prefix").string(var_467.as_str());
    }
    {
        object.key("RetentionPeriodHours").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.retention_period_hours).into()),
        );
    }
    if let Some(var_468) = &input.encryption_config {
        let mut object_469 = object.key("EncryptionConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_encryption_config(
            &mut object_469,
            var_468,
        )?;
        object_469.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_kinesis_stream_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::KinesisStreamConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_470) = &input.stream_arn {
        object.key("StreamArn").string(var_470.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_kinesis_firehose_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::KinesisFirehoseConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_471) = &input.firehose_arn {
        object.key("FirehoseArn").string(var_471.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_hours_of_operation_time_slice(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HoursOfOperationTimeSlice,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_472) = &input.hours {
        object.key("Hours").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_472).into()),
        );
    }
    if let Some(var_473) = &input.minutes {
        object.key("Minutes").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_473).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_user_quick_connect_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UserQuickConnectConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_474) = &input.user_id {
        object.key("UserId").string(var_474.as_str());
    }
    if let Some(var_475) = &input.contact_flow_id {
        object.key("ContactFlowId").string(var_475.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_queue_quick_connect_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::QueueQuickConnectConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_476) = &input.queue_id {
        object.key("QueueId").string(var_476.as_str());
    }
    if let Some(var_477) = &input.contact_flow_id {
        object.key("ContactFlowId").string(var_477.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_phone_number_quick_connect_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PhoneNumberQuickConnectConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_478) = &input.phone_number {
        object.key("PhoneNumber").string(var_478.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_threshold(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Threshold,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_479) = &input.comparison {
        object.key("Comparison").string(var_479.as_str());
    }
    if let Some(var_480) = &input.threshold_value {
        object.key("ThresholdValue").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_480).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_string_condition(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StringCondition,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_481) = &input.field_name {
        object.key("FieldName").string(var_481.as_str());
    }
    if let Some(var_482) = &input.value {
        object.key("Value").string(var_482.as_str());
    }
    if let Some(var_483) = &input.comparison_type {
        object.key("ComparisonType").string(var_483.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_hierarchy_group_condition(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HierarchyGroupCondition,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_484) = &input.value {
        object.key("Value").string(var_484.as_str());
    }
    if let Some(var_485) = &input.hierarchy_group_match_type {
        object
            .key("HierarchyGroupMatchType")
            .string(var_485.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_control_plane_tag_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ControlPlaneTagFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_486) = &input.or_conditions {
        let mut array_487 = object.key("OrConditions").start_array();
        for item_488 in var_486 {
            {
                let mut array_489 = array_487.value().start_array();
                for item_490 in item_488 {
                    {
                        let mut object_491 = array_489.value().start_object();
                        crate::json_ser::serialize_structure_crate_model_tag_condition(
                            &mut object_491,
                            item_490,
                        )?;
                        object_491.finish();
                    }
                }
                array_489.finish();
            }
        }
        array_487.finish();
    }
    if let Some(var_492) = &input.and_conditions {
        let mut array_493 = object.key("AndConditions").start_array();
        for item_494 in var_492 {
            {
                let mut object_495 = array_493.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag_condition(
                    &mut object_495,
                    item_494,
                )?;
                object_495.finish();
            }
        }
        array_493.finish();
    }
    if let Some(var_496) = &input.tag_condition {
        let mut object_497 = object.key("TagCondition").start_object();
        crate::json_ser::serialize_structure_crate_model_tag_condition(&mut object_497, var_496)?;
        object_497.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_hierarchy_level_update(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HierarchyLevelUpdate,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_498) = &input.name {
        object.key("Name").string(var_498.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_encryption_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EncryptionConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_499) = &input.encryption_type {
        object.key("EncryptionType").string(var_499.as_str());
    }
    if let Some(var_500) = &input.key_id {
        object.key("KeyId").string(var_500.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_tag_condition(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TagCondition,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_501) = &input.tag_key {
        object.key("TagKey").string(var_501.as_str());
    }
    if let Some(var_502) = &input.tag_value {
        object.key("TagValue").string(var_502.as_str());
    }
    Ok(())
}
