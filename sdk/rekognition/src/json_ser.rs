// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_compare_faces_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CompareFacesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1) = &input.source_image {
        let mut object_2 = object.key("SourceImage").start_object();
        crate::json_ser::serialize_structure_crate_model_image(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.target_image {
        let mut object_4 = object.key("TargetImage").start_object();
        crate::json_ser::serialize_structure_crate_model_image(&mut object_4, var_3)?;
        object_4.finish();
    }
    if let Some(var_5) = &input.similarity_threshold {
        object.key("SimilarityThreshold").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_5).into()),
        );
    }
    if let Some(var_6) = &input.quality_filter {
        object.key("QualityFilter").string(var_6.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_collection_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateCollectionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_7) = &input.collection_id {
        object.key("CollectionId").string(var_7.as_str());
    }
    if let Some(var_8) = &input.tags {
        let mut object_9 = object.key("Tags").start_object();
        for (key_10, value_11) in var_8 {
            {
                object_9.key(key_10).string(value_11.as_str());
            }
        }
        object_9.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_dataset_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDatasetInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_12) = &input.dataset_source {
        let mut object_13 = object.key("DatasetSource").start_object();
        crate::json_ser::serialize_structure_crate_model_dataset_source(&mut object_13, var_12)?;
        object_13.finish();
    }
    if let Some(var_14) = &input.dataset_type {
        object.key("DatasetType").string(var_14.as_str());
    }
    if let Some(var_15) = &input.project_arn {
        object.key("ProjectArn").string(var_15.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_project_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateProjectInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_16) = &input.project_name {
        object.key("ProjectName").string(var_16.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_project_version_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateProjectVersionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_17) = &input.project_arn {
        object.key("ProjectArn").string(var_17.as_str());
    }
    if let Some(var_18) = &input.version_name {
        object.key("VersionName").string(var_18.as_str());
    }
    if let Some(var_19) = &input.output_config {
        let mut object_20 = object.key("OutputConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_output_config(&mut object_20, var_19)?;
        object_20.finish();
    }
    if let Some(var_21) = &input.training_data {
        let mut object_22 = object.key("TrainingData").start_object();
        crate::json_ser::serialize_structure_crate_model_training_data(&mut object_22, var_21)?;
        object_22.finish();
    }
    if let Some(var_23) = &input.testing_data {
        let mut object_24 = object.key("TestingData").start_object();
        crate::json_ser::serialize_structure_crate_model_testing_data(&mut object_24, var_23)?;
        object_24.finish();
    }
    if let Some(var_25) = &input.tags {
        let mut object_26 = object.key("Tags").start_object();
        for (key_27, value_28) in var_25 {
            {
                object_26.key(key_27).string(value_28.as_str());
            }
        }
        object_26.finish();
    }
    if let Some(var_29) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_29.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_stream_processor_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateStreamProcessorInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_30) = &input.input {
        let mut object_31 = object.key("Input").start_object();
        crate::json_ser::serialize_structure_crate_model_stream_processor_input(
            &mut object_31,
            var_30,
        )?;
        object_31.finish();
    }
    if let Some(var_32) = &input.output {
        let mut object_33 = object.key("Output").start_object();
        crate::json_ser::serialize_structure_crate_model_stream_processor_output(
            &mut object_33,
            var_32,
        )?;
        object_33.finish();
    }
    if let Some(var_34) = &input.name {
        object.key("Name").string(var_34.as_str());
    }
    if let Some(var_35) = &input.settings {
        let mut object_36 = object.key("Settings").start_object();
        crate::json_ser::serialize_structure_crate_model_stream_processor_settings(
            &mut object_36,
            var_35,
        )?;
        object_36.finish();
    }
    if let Some(var_37) = &input.role_arn {
        object.key("RoleArn").string(var_37.as_str());
    }
    if let Some(var_38) = &input.tags {
        let mut object_39 = object.key("Tags").start_object();
        for (key_40, value_41) in var_38 {
            {
                object_39.key(key_40).string(value_41.as_str());
            }
        }
        object_39.finish();
    }
    if let Some(var_42) = &input.notification_channel {
        let mut object_43 = object.key("NotificationChannel").start_object();
        crate::json_ser::serialize_structure_crate_model_stream_processor_notification_channel(
            &mut object_43,
            var_42,
        )?;
        object_43.finish();
    }
    if let Some(var_44) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_44.as_str());
    }
    if let Some(var_45) = &input.regions_of_interest {
        let mut array_46 = object.key("RegionsOfInterest").start_array();
        for item_47 in var_45 {
            {
                let mut object_48 = array_46.value().start_object();
                crate::json_ser::serialize_structure_crate_model_region_of_interest(
                    &mut object_48,
                    item_47,
                )?;
                object_48.finish();
            }
        }
        array_46.finish();
    }
    if let Some(var_49) = &input.data_sharing_preference {
        let mut object_50 = object.key("DataSharingPreference").start_object();
        crate::json_ser::serialize_structure_crate_model_stream_processor_data_sharing_preference(
            &mut object_50,
            var_49,
        )?;
        object_50.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_collection_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteCollectionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_51) = &input.collection_id {
        object.key("CollectionId").string(var_51.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_dataset_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteDatasetInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_52) = &input.dataset_arn {
        object.key("DatasetArn").string(var_52.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_faces_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteFacesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_53) = &input.collection_id {
        object.key("CollectionId").string(var_53.as_str());
    }
    if let Some(var_54) = &input.face_ids {
        let mut array_55 = object.key("FaceIds").start_array();
        for item_56 in var_54 {
            {
                array_55.value().string(item_56.as_str());
            }
        }
        array_55.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_project_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteProjectInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_57) = &input.project_arn {
        object.key("ProjectArn").string(var_57.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_project_version_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteProjectVersionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_58) = &input.project_version_arn {
        object.key("ProjectVersionArn").string(var_58.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_stream_processor_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteStreamProcessorInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_59) = &input.name {
        object.key("Name").string(var_59.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_collection_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeCollectionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_60) = &input.collection_id {
        object.key("CollectionId").string(var_60.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_dataset_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeDatasetInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_61) = &input.dataset_arn {
        object.key("DatasetArn").string(var_61.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_projects_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeProjectsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_62) = &input.next_token {
        object.key("NextToken").string(var_62.as_str());
    }
    if let Some(var_63) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_63).into()),
        );
    }
    if let Some(var_64) = &input.project_names {
        let mut array_65 = object.key("ProjectNames").start_array();
        for item_66 in var_64 {
            {
                array_65.value().string(item_66.as_str());
            }
        }
        array_65.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_project_versions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeProjectVersionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_67) = &input.project_arn {
        object.key("ProjectArn").string(var_67.as_str());
    }
    if let Some(var_68) = &input.version_names {
        let mut array_69 = object.key("VersionNames").start_array();
        for item_70 in var_68 {
            {
                array_69.value().string(item_70.as_str());
            }
        }
        array_69.finish();
    }
    if let Some(var_71) = &input.next_token {
        object.key("NextToken").string(var_71.as_str());
    }
    if let Some(var_72) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_72).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_stream_processor_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeStreamProcessorInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_73) = &input.name {
        object.key("Name").string(var_73.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_detect_custom_labels_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DetectCustomLabelsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_74) = &input.project_version_arn {
        object.key("ProjectVersionArn").string(var_74.as_str());
    }
    if let Some(var_75) = &input.image {
        let mut object_76 = object.key("Image").start_object();
        crate::json_ser::serialize_structure_crate_model_image(&mut object_76, var_75)?;
        object_76.finish();
    }
    if let Some(var_77) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_77).into()),
        );
    }
    if let Some(var_78) = &input.min_confidence {
        object.key("MinConfidence").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_78).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_detect_faces_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DetectFacesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_79) = &input.image {
        let mut object_80 = object.key("Image").start_object();
        crate::json_ser::serialize_structure_crate_model_image(&mut object_80, var_79)?;
        object_80.finish();
    }
    if let Some(var_81) = &input.attributes {
        let mut array_82 = object.key("Attributes").start_array();
        for item_83 in var_81 {
            {
                array_82.value().string(item_83.as_str());
            }
        }
        array_82.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_detect_labels_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DetectLabelsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_84) = &input.image {
        let mut object_85 = object.key("Image").start_object();
        crate::json_ser::serialize_structure_crate_model_image(&mut object_85, var_84)?;
        object_85.finish();
    }
    if let Some(var_86) = &input.max_labels {
        object.key("MaxLabels").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_86).into()),
        );
    }
    if let Some(var_87) = &input.min_confidence {
        object.key("MinConfidence").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_87).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_detect_moderation_labels_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DetectModerationLabelsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_88) = &input.image {
        let mut object_89 = object.key("Image").start_object();
        crate::json_ser::serialize_structure_crate_model_image(&mut object_89, var_88)?;
        object_89.finish();
    }
    if let Some(var_90) = &input.min_confidence {
        object.key("MinConfidence").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_90).into()),
        );
    }
    if let Some(var_91) = &input.human_loop_config {
        let mut object_92 = object.key("HumanLoopConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_human_loop_config(&mut object_92, var_91)?;
        object_92.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_detect_protective_equipment_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DetectProtectiveEquipmentInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_93) = &input.image {
        let mut object_94 = object.key("Image").start_object();
        crate::json_ser::serialize_structure_crate_model_image(&mut object_94, var_93)?;
        object_94.finish();
    }
    if let Some(var_95) = &input.summarization_attributes {
        let mut object_96 = object.key("SummarizationAttributes").start_object();
        crate::json_ser::serialize_structure_crate_model_protective_equipment_summarization_attributes(&mut object_96, var_95)?;
        object_96.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_detect_text_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DetectTextInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_97) = &input.image {
        let mut object_98 = object.key("Image").start_object();
        crate::json_ser::serialize_structure_crate_model_image(&mut object_98, var_97)?;
        object_98.finish();
    }
    if let Some(var_99) = &input.filters {
        let mut object_100 = object.key("Filters").start_object();
        crate::json_ser::serialize_structure_crate_model_detect_text_filters(
            &mut object_100,
            var_99,
        )?;
        object_100.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_distribute_dataset_entries_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DistributeDatasetEntriesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_101) = &input.datasets {
        let mut array_102 = object.key("Datasets").start_array();
        for item_103 in var_101 {
            {
                let mut object_104 = array_102.value().start_object();
                crate::json_ser::serialize_structure_crate_model_distribute_dataset(
                    &mut object_104,
                    item_103,
                )?;
                object_104.finish();
            }
        }
        array_102.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_celebrity_info_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetCelebrityInfoInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_105) = &input.id {
        object.key("Id").string(var_105.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_celebrity_recognition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetCelebrityRecognitionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_106) = &input.job_id {
        object.key("JobId").string(var_106.as_str());
    }
    if let Some(var_107) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_107).into()),
        );
    }
    if let Some(var_108) = &input.next_token {
        object.key("NextToken").string(var_108.as_str());
    }
    if let Some(var_109) = &input.sort_by {
        object.key("SortBy").string(var_109.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_content_moderation_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetContentModerationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_110) = &input.job_id {
        object.key("JobId").string(var_110.as_str());
    }
    if let Some(var_111) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_111).into()),
        );
    }
    if let Some(var_112) = &input.next_token {
        object.key("NextToken").string(var_112.as_str());
    }
    if let Some(var_113) = &input.sort_by {
        object.key("SortBy").string(var_113.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_face_detection_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetFaceDetectionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_114) = &input.job_id {
        object.key("JobId").string(var_114.as_str());
    }
    if let Some(var_115) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_115).into()),
        );
    }
    if let Some(var_116) = &input.next_token {
        object.key("NextToken").string(var_116.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_face_search_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetFaceSearchInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_117) = &input.job_id {
        object.key("JobId").string(var_117.as_str());
    }
    if let Some(var_118) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_118).into()),
        );
    }
    if let Some(var_119) = &input.next_token {
        object.key("NextToken").string(var_119.as_str());
    }
    if let Some(var_120) = &input.sort_by {
        object.key("SortBy").string(var_120.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_label_detection_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetLabelDetectionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_121) = &input.job_id {
        object.key("JobId").string(var_121.as_str());
    }
    if let Some(var_122) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_122).into()),
        );
    }
    if let Some(var_123) = &input.next_token {
        object.key("NextToken").string(var_123.as_str());
    }
    if let Some(var_124) = &input.sort_by {
        object.key("SortBy").string(var_124.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_person_tracking_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetPersonTrackingInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_125) = &input.job_id {
        object.key("JobId").string(var_125.as_str());
    }
    if let Some(var_126) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_126).into()),
        );
    }
    if let Some(var_127) = &input.next_token {
        object.key("NextToken").string(var_127.as_str());
    }
    if let Some(var_128) = &input.sort_by {
        object.key("SortBy").string(var_128.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_segment_detection_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetSegmentDetectionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_129) = &input.job_id {
        object.key("JobId").string(var_129.as_str());
    }
    if let Some(var_130) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_130).into()),
        );
    }
    if let Some(var_131) = &input.next_token {
        object.key("NextToken").string(var_131.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_text_detection_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetTextDetectionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_132) = &input.job_id {
        object.key("JobId").string(var_132.as_str());
    }
    if let Some(var_133) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_133).into()),
        );
    }
    if let Some(var_134) = &input.next_token {
        object.key("NextToken").string(var_134.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_index_faces_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::IndexFacesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_135) = &input.collection_id {
        object.key("CollectionId").string(var_135.as_str());
    }
    if let Some(var_136) = &input.image {
        let mut object_137 = object.key("Image").start_object();
        crate::json_ser::serialize_structure_crate_model_image(&mut object_137, var_136)?;
        object_137.finish();
    }
    if let Some(var_138) = &input.external_image_id {
        object.key("ExternalImageId").string(var_138.as_str());
    }
    if let Some(var_139) = &input.detection_attributes {
        let mut array_140 = object.key("DetectionAttributes").start_array();
        for item_141 in var_139 {
            {
                array_140.value().string(item_141.as_str());
            }
        }
        array_140.finish();
    }
    if let Some(var_142) = &input.max_faces {
        object.key("MaxFaces").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_142).into()),
        );
    }
    if let Some(var_143) = &input.quality_filter {
        object.key("QualityFilter").string(var_143.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_collections_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListCollectionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_144) = &input.next_token {
        object.key("NextToken").string(var_144.as_str());
    }
    if let Some(var_145) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_145).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_dataset_entries_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListDatasetEntriesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_146) = &input.dataset_arn {
        object.key("DatasetArn").string(var_146.as_str());
    }
    if let Some(var_147) = &input.contains_labels {
        let mut array_148 = object.key("ContainsLabels").start_array();
        for item_149 in var_147 {
            {
                array_148.value().string(item_149.as_str());
            }
        }
        array_148.finish();
    }
    if let Some(var_150) = &input.labeled {
        object.key("Labeled").boolean(*var_150);
    }
    if let Some(var_151) = &input.source_ref_contains {
        object.key("SourceRefContains").string(var_151.as_str());
    }
    if let Some(var_152) = &input.has_errors {
        object.key("HasErrors").boolean(*var_152);
    }
    if let Some(var_153) = &input.next_token {
        object.key("NextToken").string(var_153.as_str());
    }
    if let Some(var_154) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_154).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_dataset_labels_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListDatasetLabelsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_155) = &input.dataset_arn {
        object.key("DatasetArn").string(var_155.as_str());
    }
    if let Some(var_156) = &input.next_token {
        object.key("NextToken").string(var_156.as_str());
    }
    if let Some(var_157) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_157).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_faces_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListFacesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_158) = &input.collection_id {
        object.key("CollectionId").string(var_158.as_str());
    }
    if let Some(var_159) = &input.next_token {
        object.key("NextToken").string(var_159.as_str());
    }
    if let Some(var_160) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_160).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_stream_processors_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListStreamProcessorsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_161) = &input.next_token {
        object.key("NextToken").string(var_161.as_str());
    }
    if let Some(var_162) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_162).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_tags_for_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTagsForResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_163) = &input.resource_arn {
        object.key("ResourceArn").string(var_163.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_recognize_celebrities_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RecognizeCelebritiesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_164) = &input.image {
        let mut object_165 = object.key("Image").start_object();
        crate::json_ser::serialize_structure_crate_model_image(&mut object_165, var_164)?;
        object_165.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_search_faces_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SearchFacesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_166) = &input.collection_id {
        object.key("CollectionId").string(var_166.as_str());
    }
    if let Some(var_167) = &input.face_id {
        object.key("FaceId").string(var_167.as_str());
    }
    if let Some(var_168) = &input.max_faces {
        object.key("MaxFaces").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_168).into()),
        );
    }
    if let Some(var_169) = &input.face_match_threshold {
        object.key("FaceMatchThreshold").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_169).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_search_faces_by_image_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SearchFacesByImageInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_170) = &input.collection_id {
        object.key("CollectionId").string(var_170.as_str());
    }
    if let Some(var_171) = &input.image {
        let mut object_172 = object.key("Image").start_object();
        crate::json_ser::serialize_structure_crate_model_image(&mut object_172, var_171)?;
        object_172.finish();
    }
    if let Some(var_173) = &input.max_faces {
        object.key("MaxFaces").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_173).into()),
        );
    }
    if let Some(var_174) = &input.face_match_threshold {
        object.key("FaceMatchThreshold").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_174).into()),
        );
    }
    if let Some(var_175) = &input.quality_filter {
        object.key("QualityFilter").string(var_175.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_celebrity_recognition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartCelebrityRecognitionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_176) = &input.video {
        let mut object_177 = object.key("Video").start_object();
        crate::json_ser::serialize_structure_crate_model_video(&mut object_177, var_176)?;
        object_177.finish();
    }
    if let Some(var_178) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_178.as_str());
    }
    if let Some(var_179) = &input.notification_channel {
        let mut object_180 = object.key("NotificationChannel").start_object();
        crate::json_ser::serialize_structure_crate_model_notification_channel(
            &mut object_180,
            var_179,
        )?;
        object_180.finish();
    }
    if let Some(var_181) = &input.job_tag {
        object.key("JobTag").string(var_181.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_content_moderation_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartContentModerationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_182) = &input.video {
        let mut object_183 = object.key("Video").start_object();
        crate::json_ser::serialize_structure_crate_model_video(&mut object_183, var_182)?;
        object_183.finish();
    }
    if let Some(var_184) = &input.min_confidence {
        object.key("MinConfidence").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_184).into()),
        );
    }
    if let Some(var_185) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_185.as_str());
    }
    if let Some(var_186) = &input.notification_channel {
        let mut object_187 = object.key("NotificationChannel").start_object();
        crate::json_ser::serialize_structure_crate_model_notification_channel(
            &mut object_187,
            var_186,
        )?;
        object_187.finish();
    }
    if let Some(var_188) = &input.job_tag {
        object.key("JobTag").string(var_188.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_face_detection_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartFaceDetectionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_189) = &input.video {
        let mut object_190 = object.key("Video").start_object();
        crate::json_ser::serialize_structure_crate_model_video(&mut object_190, var_189)?;
        object_190.finish();
    }
    if let Some(var_191) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_191.as_str());
    }
    if let Some(var_192) = &input.notification_channel {
        let mut object_193 = object.key("NotificationChannel").start_object();
        crate::json_ser::serialize_structure_crate_model_notification_channel(
            &mut object_193,
            var_192,
        )?;
        object_193.finish();
    }
    if let Some(var_194) = &input.face_attributes {
        object.key("FaceAttributes").string(var_194.as_str());
    }
    if let Some(var_195) = &input.job_tag {
        object.key("JobTag").string(var_195.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_face_search_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartFaceSearchInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_196) = &input.video {
        let mut object_197 = object.key("Video").start_object();
        crate::json_ser::serialize_structure_crate_model_video(&mut object_197, var_196)?;
        object_197.finish();
    }
    if let Some(var_198) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_198.as_str());
    }
    if let Some(var_199) = &input.face_match_threshold {
        object.key("FaceMatchThreshold").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_199).into()),
        );
    }
    if let Some(var_200) = &input.collection_id {
        object.key("CollectionId").string(var_200.as_str());
    }
    if let Some(var_201) = &input.notification_channel {
        let mut object_202 = object.key("NotificationChannel").start_object();
        crate::json_ser::serialize_structure_crate_model_notification_channel(
            &mut object_202,
            var_201,
        )?;
        object_202.finish();
    }
    if let Some(var_203) = &input.job_tag {
        object.key("JobTag").string(var_203.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_label_detection_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartLabelDetectionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_204) = &input.video {
        let mut object_205 = object.key("Video").start_object();
        crate::json_ser::serialize_structure_crate_model_video(&mut object_205, var_204)?;
        object_205.finish();
    }
    if let Some(var_206) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_206.as_str());
    }
    if let Some(var_207) = &input.min_confidence {
        object.key("MinConfidence").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_207).into()),
        );
    }
    if let Some(var_208) = &input.notification_channel {
        let mut object_209 = object.key("NotificationChannel").start_object();
        crate::json_ser::serialize_structure_crate_model_notification_channel(
            &mut object_209,
            var_208,
        )?;
        object_209.finish();
    }
    if let Some(var_210) = &input.job_tag {
        object.key("JobTag").string(var_210.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_person_tracking_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartPersonTrackingInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_211) = &input.video {
        let mut object_212 = object.key("Video").start_object();
        crate::json_ser::serialize_structure_crate_model_video(&mut object_212, var_211)?;
        object_212.finish();
    }
    if let Some(var_213) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_213.as_str());
    }
    if let Some(var_214) = &input.notification_channel {
        let mut object_215 = object.key("NotificationChannel").start_object();
        crate::json_ser::serialize_structure_crate_model_notification_channel(
            &mut object_215,
            var_214,
        )?;
        object_215.finish();
    }
    if let Some(var_216) = &input.job_tag {
        object.key("JobTag").string(var_216.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_project_version_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartProjectVersionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_217) = &input.project_version_arn {
        object.key("ProjectVersionArn").string(var_217.as_str());
    }
    if let Some(var_218) = &input.min_inference_units {
        object.key("MinInferenceUnits").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_218).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_segment_detection_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartSegmentDetectionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_219) = &input.video {
        let mut object_220 = object.key("Video").start_object();
        crate::json_ser::serialize_structure_crate_model_video(&mut object_220, var_219)?;
        object_220.finish();
    }
    if let Some(var_221) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_221.as_str());
    }
    if let Some(var_222) = &input.notification_channel {
        let mut object_223 = object.key("NotificationChannel").start_object();
        crate::json_ser::serialize_structure_crate_model_notification_channel(
            &mut object_223,
            var_222,
        )?;
        object_223.finish();
    }
    if let Some(var_224) = &input.job_tag {
        object.key("JobTag").string(var_224.as_str());
    }
    if let Some(var_225) = &input.filters {
        let mut object_226 = object.key("Filters").start_object();
        crate::json_ser::serialize_structure_crate_model_start_segment_detection_filters(
            &mut object_226,
            var_225,
        )?;
        object_226.finish();
    }
    if let Some(var_227) = &input.segment_types {
        let mut array_228 = object.key("SegmentTypes").start_array();
        for item_229 in var_227 {
            {
                array_228.value().string(item_229.as_str());
            }
        }
        array_228.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_stream_processor_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartStreamProcessorInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_230) = &input.name {
        object.key("Name").string(var_230.as_str());
    }
    if let Some(var_231) = &input.start_selector {
        let mut object_232 = object.key("StartSelector").start_object();
        crate::json_ser::serialize_structure_crate_model_stream_processing_start_selector(
            &mut object_232,
            var_231,
        )?;
        object_232.finish();
    }
    if let Some(var_233) = &input.stop_selector {
        let mut object_234 = object.key("StopSelector").start_object();
        crate::json_ser::serialize_structure_crate_model_stream_processing_stop_selector(
            &mut object_234,
            var_233,
        )?;
        object_234.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_text_detection_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartTextDetectionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_235) = &input.video {
        let mut object_236 = object.key("Video").start_object();
        crate::json_ser::serialize_structure_crate_model_video(&mut object_236, var_235)?;
        object_236.finish();
    }
    if let Some(var_237) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_237.as_str());
    }
    if let Some(var_238) = &input.notification_channel {
        let mut object_239 = object.key("NotificationChannel").start_object();
        crate::json_ser::serialize_structure_crate_model_notification_channel(
            &mut object_239,
            var_238,
        )?;
        object_239.finish();
    }
    if let Some(var_240) = &input.job_tag {
        object.key("JobTag").string(var_240.as_str());
    }
    if let Some(var_241) = &input.filters {
        let mut object_242 = object.key("Filters").start_object();
        crate::json_ser::serialize_structure_crate_model_start_text_detection_filters(
            &mut object_242,
            var_241,
        )?;
        object_242.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_project_version_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopProjectVersionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_243) = &input.project_version_arn {
        object.key("ProjectVersionArn").string(var_243.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_stream_processor_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopStreamProcessorInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_244) = &input.name {
        object.key("Name").string(var_244.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_tag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_245) = &input.resource_arn {
        object.key("ResourceArn").string(var_245.as_str());
    }
    if let Some(var_246) = &input.tags {
        let mut object_247 = object.key("Tags").start_object();
        for (key_248, value_249) in var_246 {
            {
                object_247.key(key_248).string(value_249.as_str());
            }
        }
        object_247.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_untag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UntagResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_250) = &input.resource_arn {
        object.key("ResourceArn").string(var_250.as_str());
    }
    if let Some(var_251) = &input.tag_keys {
        let mut array_252 = object.key("TagKeys").start_array();
        for item_253 in var_251 {
            {
                array_252.value().string(item_253.as_str());
            }
        }
        array_252.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_dataset_entries_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDatasetEntriesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_254) = &input.dataset_arn {
        object.key("DatasetArn").string(var_254.as_str());
    }
    if let Some(var_255) = &input.changes {
        let mut object_256 = object.key("Changes").start_object();
        crate::json_ser::serialize_structure_crate_model_dataset_changes(&mut object_256, var_255)?;
        object_256.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_stream_processor_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateStreamProcessorInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_257) = &input.name {
        object.key("Name").string(var_257.as_str());
    }
    if let Some(var_258) = &input.settings_for_update {
        let mut object_259 = object.key("SettingsForUpdate").start_object();
        crate::json_ser::serialize_structure_crate_model_stream_processor_settings_for_update(
            &mut object_259,
            var_258,
        )?;
        object_259.finish();
    }
    if let Some(var_260) = &input.regions_of_interest_for_update {
        let mut array_261 = object.key("RegionsOfInterestForUpdate").start_array();
        for item_262 in var_260 {
            {
                let mut object_263 = array_261.value().start_object();
                crate::json_ser::serialize_structure_crate_model_region_of_interest(
                    &mut object_263,
                    item_262,
                )?;
                object_263.finish();
            }
        }
        array_261.finish();
    }
    if let Some(var_264) = &input.data_sharing_preference_for_update {
        let mut object_265 = object.key("DataSharingPreferenceForUpdate").start_object();
        crate::json_ser::serialize_structure_crate_model_stream_processor_data_sharing_preference(
            &mut object_265,
            var_264,
        )?;
        object_265.finish();
    }
    if let Some(var_266) = &input.parameters_to_delete {
        let mut array_267 = object.key("ParametersToDelete").start_array();
        for item_268 in var_266 {
            {
                array_267.value().string(item_268.as_str());
            }
        }
        array_267.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_image(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Image,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_269) = &input.bytes {
        object
            .key("Bytes")
            .string_unchecked(&aws_smithy_types::base64::encode(var_269));
    }
    if let Some(var_270) = &input.s3_object {
        let mut object_271 = object.key("S3Object").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_object(&mut object_271, var_270)?;
        object_271.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_dataset_source(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DatasetSource,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_272) = &input.ground_truth_manifest {
        let mut object_273 = object.key("GroundTruthManifest").start_object();
        crate::json_ser::serialize_structure_crate_model_ground_truth_manifest(
            &mut object_273,
            var_272,
        )?;
        object_273.finish();
    }
    if let Some(var_274) = &input.dataset_arn {
        object.key("DatasetArn").string(var_274.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_output_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OutputConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_275) = &input.s3_bucket {
        object.key("S3Bucket").string(var_275.as_str());
    }
    if let Some(var_276) = &input.s3_key_prefix {
        object.key("S3KeyPrefix").string(var_276.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_training_data(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TrainingData,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_277) = &input.assets {
        let mut array_278 = object.key("Assets").start_array();
        for item_279 in var_277 {
            {
                let mut object_280 = array_278.value().start_object();
                crate::json_ser::serialize_structure_crate_model_asset(&mut object_280, item_279)?;
                object_280.finish();
            }
        }
        array_278.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_testing_data(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TestingData,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_281) = &input.assets {
        let mut array_282 = object.key("Assets").start_array();
        for item_283 in var_281 {
            {
                let mut object_284 = array_282.value().start_object();
                crate::json_ser::serialize_structure_crate_model_asset(&mut object_284, item_283)?;
                object_284.finish();
            }
        }
        array_282.finish();
    }
    if input.auto_create {
        object.key("AutoCreate").boolean(input.auto_create);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_stream_processor_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StreamProcessorInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_285) = &input.kinesis_video_stream {
        let mut object_286 = object.key("KinesisVideoStream").start_object();
        crate::json_ser::serialize_structure_crate_model_kinesis_video_stream(
            &mut object_286,
            var_285,
        )?;
        object_286.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_stream_processor_output(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StreamProcessorOutput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_287) = &input.kinesis_data_stream {
        let mut object_288 = object.key("KinesisDataStream").start_object();
        crate::json_ser::serialize_structure_crate_model_kinesis_data_stream(
            &mut object_288,
            var_287,
        )?;
        object_288.finish();
    }
    if let Some(var_289) = &input.s3_destination {
        let mut object_290 = object.key("S3Destination").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_destination(&mut object_290, var_289)?;
        object_290.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_stream_processor_settings(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StreamProcessorSettings,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_291) = &input.face_search {
        let mut object_292 = object.key("FaceSearch").start_object();
        crate::json_ser::serialize_structure_crate_model_face_search_settings(
            &mut object_292,
            var_291,
        )?;
        object_292.finish();
    }
    if let Some(var_293) = &input.connected_home {
        let mut object_294 = object.key("ConnectedHome").start_object();
        crate::json_ser::serialize_structure_crate_model_connected_home_settings(
            &mut object_294,
            var_293,
        )?;
        object_294.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_stream_processor_notification_channel(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StreamProcessorNotificationChannel,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_295) = &input.sns_topic_arn {
        object.key("SNSTopicArn").string(var_295.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_region_of_interest(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RegionOfInterest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_296) = &input.bounding_box {
        let mut object_297 = object.key("BoundingBox").start_object();
        crate::json_ser::serialize_structure_crate_model_bounding_box(&mut object_297, var_296)?;
        object_297.finish();
    }
    if let Some(var_298) = &input.polygon {
        let mut array_299 = object.key("Polygon").start_array();
        for item_300 in var_298 {
            {
                let mut object_301 = array_299.value().start_object();
                crate::json_ser::serialize_structure_crate_model_point(&mut object_301, item_300)?;
                object_301.finish();
            }
        }
        array_299.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_stream_processor_data_sharing_preference(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StreamProcessorDataSharingPreference,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object.key("OptIn").boolean(input.opt_in);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_human_loop_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HumanLoopConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_302) = &input.human_loop_name {
        object.key("HumanLoopName").string(var_302.as_str());
    }
    if let Some(var_303) = &input.flow_definition_arn {
        object.key("FlowDefinitionArn").string(var_303.as_str());
    }
    if let Some(var_304) = &input.data_attributes {
        let mut object_305 = object.key("DataAttributes").start_object();
        crate::json_ser::serialize_structure_crate_model_human_loop_data_attributes(
            &mut object_305,
            var_304,
        )?;
        object_305.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_protective_equipment_summarization_attributes(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProtectiveEquipmentSummarizationAttributes,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_306) = &input.min_confidence {
        object.key("MinConfidence").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_306).into()),
        );
    }
    if let Some(var_307) = &input.required_equipment_types {
        let mut array_308 = object.key("RequiredEquipmentTypes").start_array();
        for item_309 in var_307 {
            {
                array_308.value().string(item_309.as_str());
            }
        }
        array_308.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_detect_text_filters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DetectTextFilters,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_310) = &input.word_filter {
        let mut object_311 = object.key("WordFilter").start_object();
        crate::json_ser::serialize_structure_crate_model_detection_filter(
            &mut object_311,
            var_310,
        )?;
        object_311.finish();
    }
    if let Some(var_312) = &input.regions_of_interest {
        let mut array_313 = object.key("RegionsOfInterest").start_array();
        for item_314 in var_312 {
            {
                let mut object_315 = array_313.value().start_object();
                crate::json_ser::serialize_structure_crate_model_region_of_interest(
                    &mut object_315,
                    item_314,
                )?;
                object_315.finish();
            }
        }
        array_313.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_distribute_dataset(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DistributeDataset,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_316) = &input.arn {
        object.key("Arn").string(var_316.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_video(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Video,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_317) = &input.s3_object {
        let mut object_318 = object.key("S3Object").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_object(&mut object_318, var_317)?;
        object_318.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_notification_channel(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::NotificationChannel,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_319) = &input.sns_topic_arn {
        object.key("SNSTopicArn").string(var_319.as_str());
    }
    if let Some(var_320) = &input.role_arn {
        object.key("RoleArn").string(var_320.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_start_segment_detection_filters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StartSegmentDetectionFilters,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_321) = &input.technical_cue_filter {
        let mut object_322 = object.key("TechnicalCueFilter").start_object();
        crate::json_ser::serialize_structure_crate_model_start_technical_cue_detection_filter(
            &mut object_322,
            var_321,
        )?;
        object_322.finish();
    }
    if let Some(var_323) = &input.shot_filter {
        let mut object_324 = object.key("ShotFilter").start_object();
        crate::json_ser::serialize_structure_crate_model_start_shot_detection_filter(
            &mut object_324,
            var_323,
        )?;
        object_324.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_stream_processing_start_selector(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StreamProcessingStartSelector,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_325) = &input.kvs_stream_start_selector {
        let mut object_326 = object.key("KVSStreamStartSelector").start_object();
        crate::json_ser::serialize_structure_crate_model_kinesis_video_stream_start_selector(
            &mut object_326,
            var_325,
        )?;
        object_326.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_stream_processing_stop_selector(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StreamProcessingStopSelector,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_327) = &input.max_duration_in_seconds {
        object.key("MaxDurationInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_327).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_start_text_detection_filters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StartTextDetectionFilters,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_328) = &input.word_filter {
        let mut object_329 = object.key("WordFilter").start_object();
        crate::json_ser::serialize_structure_crate_model_detection_filter(
            &mut object_329,
            var_328,
        )?;
        object_329.finish();
    }
    if let Some(var_330) = &input.regions_of_interest {
        let mut array_331 = object.key("RegionsOfInterest").start_array();
        for item_332 in var_330 {
            {
                let mut object_333 = array_331.value().start_object();
                crate::json_ser::serialize_structure_crate_model_region_of_interest(
                    &mut object_333,
                    item_332,
                )?;
                object_333.finish();
            }
        }
        array_331.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_dataset_changes(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DatasetChanges,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_334) = &input.ground_truth {
        object
            .key("GroundTruth")
            .string_unchecked(&aws_smithy_types::base64::encode(var_334));
    }
    Ok(())
}

pub fn serialize_structure_crate_model_stream_processor_settings_for_update(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StreamProcessorSettingsForUpdate,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_335) = &input.connected_home_for_update {
        let mut object_336 = object.key("ConnectedHomeForUpdate").start_object();
        crate::json_ser::serialize_structure_crate_model_connected_home_settings_for_update(
            &mut object_336,
            var_335,
        )?;
        object_336.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_object(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3Object,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_337) = &input.bucket {
        object.key("Bucket").string(var_337.as_str());
    }
    if let Some(var_338) = &input.name {
        object.key("Name").string(var_338.as_str());
    }
    if let Some(var_339) = &input.version {
        object.key("Version").string(var_339.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_ground_truth_manifest(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::GroundTruthManifest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_340) = &input.s3_object {
        let mut object_341 = object.key("S3Object").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_object(&mut object_341, var_340)?;
        object_341.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_asset(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Asset,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_342) = &input.ground_truth_manifest {
        let mut object_343 = object.key("GroundTruthManifest").start_object();
        crate::json_ser::serialize_structure_crate_model_ground_truth_manifest(
            &mut object_343,
            var_342,
        )?;
        object_343.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_kinesis_video_stream(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::KinesisVideoStream,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_344) = &input.arn {
        object.key("Arn").string(var_344.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_kinesis_data_stream(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::KinesisDataStream,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_345) = &input.arn {
        object.key("Arn").string(var_345.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_destination(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3Destination,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_346) = &input.bucket {
        object.key("Bucket").string(var_346.as_str());
    }
    if let Some(var_347) = &input.key_prefix {
        object.key("KeyPrefix").string(var_347.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_face_search_settings(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FaceSearchSettings,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_348) = &input.collection_id {
        object.key("CollectionId").string(var_348.as_str());
    }
    if let Some(var_349) = &input.face_match_threshold {
        object.key("FaceMatchThreshold").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_349).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_connected_home_settings(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConnectedHomeSettings,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_350) = &input.labels {
        let mut array_351 = object.key("Labels").start_array();
        for item_352 in var_350 {
            {
                array_351.value().string(item_352.as_str());
            }
        }
        array_351.finish();
    }
    if let Some(var_353) = &input.min_confidence {
        object.key("MinConfidence").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_353).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_bounding_box(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BoundingBox,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_354) = &input.width {
        object.key("Width").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_354).into()),
        );
    }
    if let Some(var_355) = &input.height {
        object.key("Height").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_355).into()),
        );
    }
    if let Some(var_356) = &input.left {
        object.key("Left").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_356).into()),
        );
    }
    if let Some(var_357) = &input.top {
        object.key("Top").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_357).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_point(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Point,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_358) = &input.x {
        object.key("X").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_358).into()),
        );
    }
    if let Some(var_359) = &input.y {
        object.key("Y").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_359).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_human_loop_data_attributes(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HumanLoopDataAttributes,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_360) = &input.content_classifiers {
        let mut array_361 = object.key("ContentClassifiers").start_array();
        for item_362 in var_360 {
            {
                array_361.value().string(item_362.as_str());
            }
        }
        array_361.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_detection_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DetectionFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_363) = &input.min_confidence {
        object.key("MinConfidence").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_363).into()),
        );
    }
    if let Some(var_364) = &input.min_bounding_box_height {
        object.key("MinBoundingBoxHeight").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_364).into()),
        );
    }
    if let Some(var_365) = &input.min_bounding_box_width {
        object.key("MinBoundingBoxWidth").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_365).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_start_technical_cue_detection_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StartTechnicalCueDetectionFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_366) = &input.min_segment_confidence {
        object.key("MinSegmentConfidence").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_366).into()),
        );
    }
    if let Some(var_367) = &input.black_frame {
        let mut object_368 = object.key("BlackFrame").start_object();
        crate::json_ser::serialize_structure_crate_model_black_frame(&mut object_368, var_367)?;
        object_368.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_start_shot_detection_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StartShotDetectionFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_369) = &input.min_segment_confidence {
        object.key("MinSegmentConfidence").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_369).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_kinesis_video_stream_start_selector(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::KinesisVideoStreamStartSelector,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_370) = &input.producer_timestamp {
        object.key("ProducerTimestamp").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_370).into()),
        );
    }
    if let Some(var_371) = &input.fragment_number {
        object.key("FragmentNumber").string(var_371.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_connected_home_settings_for_update(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConnectedHomeSettingsForUpdate,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_372) = &input.labels {
        let mut array_373 = object.key("Labels").start_array();
        for item_374 in var_372 {
            {
                array_373.value().string(item_374.as_str());
            }
        }
        array_373.finish();
    }
    if let Some(var_375) = &input.min_confidence {
        object.key("MinConfidence").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_375).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_black_frame(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BlackFrame,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_376) = &input.max_pixel_threshold {
        object.key("MaxPixelThreshold").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_376).into()),
        );
    }
    if let Some(var_377) = &input.min_coverage_percentage {
        object.key("MinCoveragePercentage").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_377).into()),
        );
    }
    Ok(())
}
