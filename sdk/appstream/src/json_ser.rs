// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_associate_application_fleet_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociateApplicationFleetInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1) = &input.fleet_name {
        object.key("FleetName").string(var_1.as_str());
    }
    if let Some(var_2) = &input.application_arn {
        object.key("ApplicationArn").string(var_2.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_associate_application_to_entitlement_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociateApplicationToEntitlementInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3) = &input.stack_name {
        object.key("StackName").string(var_3.as_str());
    }
    if let Some(var_4) = &input.entitlement_name {
        object.key("EntitlementName").string(var_4.as_str());
    }
    if let Some(var_5) = &input.application_identifier {
        object.key("ApplicationIdentifier").string(var_5.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_associate_fleet_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociateFleetInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_6) = &input.fleet_name {
        object.key("FleetName").string(var_6.as_str());
    }
    if let Some(var_7) = &input.stack_name {
        object.key("StackName").string(var_7.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_associate_user_stack_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchAssociateUserStackInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_8) = &input.user_stack_associations {
        let mut array_9 = object.key("UserStackAssociations").start_array();
        for item_10 in var_8 {
            {
                let mut object_11 = array_9.value().start_object();
                crate::json_ser::serialize_structure_crate_model_user_stack_association(
                    &mut object_11,
                    item_10,
                )?;
                object_11.finish();
            }
        }
        array_9.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_disassociate_user_stack_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchDisassociateUserStackInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_12) = &input.user_stack_associations {
        let mut array_13 = object.key("UserStackAssociations").start_array();
        for item_14 in var_12 {
            {
                let mut object_15 = array_13.value().start_object();
                crate::json_ser::serialize_structure_crate_model_user_stack_association(
                    &mut object_15,
                    item_14,
                )?;
                object_15.finish();
            }
        }
        array_13.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_copy_image_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CopyImageInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_16) = &input.source_image_name {
        object.key("SourceImageName").string(var_16.as_str());
    }
    if let Some(var_17) = &input.destination_image_name {
        object.key("DestinationImageName").string(var_17.as_str());
    }
    if let Some(var_18) = &input.destination_region {
        object.key("DestinationRegion").string(var_18.as_str());
    }
    if let Some(var_19) = &input.destination_image_description {
        object
            .key("DestinationImageDescription")
            .string(var_19.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_app_block_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateAppBlockInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_20) = &input.name {
        object.key("Name").string(var_20.as_str());
    }
    if let Some(var_21) = &input.description {
        object.key("Description").string(var_21.as_str());
    }
    if let Some(var_22) = &input.display_name {
        object.key("DisplayName").string(var_22.as_str());
    }
    if let Some(var_23) = &input.source_s3_location {
        let mut object_24 = object.key("SourceS3Location").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_location(&mut object_24, var_23)?;
        object_24.finish();
    }
    if let Some(var_25) = &input.setup_script_details {
        let mut object_26 = object.key("SetupScriptDetails").start_object();
        crate::json_ser::serialize_structure_crate_model_script_details(&mut object_26, var_25)?;
        object_26.finish();
    }
    if let Some(var_27) = &input.tags {
        let mut object_28 = object.key("Tags").start_object();
        for (key_29, value_30) in var_27 {
            {
                object_28.key(key_29).string(value_30.as_str());
            }
        }
        object_28.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_application_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateApplicationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_31) = &input.name {
        object.key("Name").string(var_31.as_str());
    }
    if let Some(var_32) = &input.display_name {
        object.key("DisplayName").string(var_32.as_str());
    }
    if let Some(var_33) = &input.description {
        object.key("Description").string(var_33.as_str());
    }
    if let Some(var_34) = &input.icon_s3_location {
        let mut object_35 = object.key("IconS3Location").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_location(&mut object_35, var_34)?;
        object_35.finish();
    }
    if let Some(var_36) = &input.launch_path {
        object.key("LaunchPath").string(var_36.as_str());
    }
    if let Some(var_37) = &input.working_directory {
        object.key("WorkingDirectory").string(var_37.as_str());
    }
    if let Some(var_38) = &input.launch_parameters {
        object.key("LaunchParameters").string(var_38.as_str());
    }
    if let Some(var_39) = &input.platforms {
        let mut array_40 = object.key("Platforms").start_array();
        for item_41 in var_39 {
            {
                array_40.value().string(item_41.as_str());
            }
        }
        array_40.finish();
    }
    if let Some(var_42) = &input.instance_families {
        let mut array_43 = object.key("InstanceFamilies").start_array();
        for item_44 in var_42 {
            {
                array_43.value().string(item_44.as_str());
            }
        }
        array_43.finish();
    }
    if let Some(var_45) = &input.app_block_arn {
        object.key("AppBlockArn").string(var_45.as_str());
    }
    if let Some(var_46) = &input.tags {
        let mut object_47 = object.key("Tags").start_object();
        for (key_48, value_49) in var_46 {
            {
                object_47.key(key_48).string(value_49.as_str());
            }
        }
        object_47.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_directory_config_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDirectoryConfigInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_50) = &input.directory_name {
        object.key("DirectoryName").string(var_50.as_str());
    }
    if let Some(var_51) = &input.organizational_unit_distinguished_names {
        let mut array_52 = object
            .key("OrganizationalUnitDistinguishedNames")
            .start_array();
        for item_53 in var_51 {
            {
                array_52.value().string(item_53.as_str());
            }
        }
        array_52.finish();
    }
    if let Some(var_54) = &input.service_account_credentials {
        let mut object_55 = object.key("ServiceAccountCredentials").start_object();
        crate::json_ser::serialize_structure_crate_model_service_account_credentials(
            &mut object_55,
            var_54,
        )?;
        object_55.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_entitlement_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateEntitlementInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_56) = &input.name {
        object.key("Name").string(var_56.as_str());
    }
    if let Some(var_57) = &input.stack_name {
        object.key("StackName").string(var_57.as_str());
    }
    if let Some(var_58) = &input.description {
        object.key("Description").string(var_58.as_str());
    }
    if let Some(var_59) = &input.app_visibility {
        object.key("AppVisibility").string(var_59.as_str());
    }
    if let Some(var_60) = &input.attributes {
        let mut array_61 = object.key("Attributes").start_array();
        for item_62 in var_60 {
            {
                let mut object_63 = array_61.value().start_object();
                crate::json_ser::serialize_structure_crate_model_entitlement_attribute(
                    &mut object_63,
                    item_62,
                )?;
                object_63.finish();
            }
        }
        array_61.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_fleet_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateFleetInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_64) = &input.name {
        object.key("Name").string(var_64.as_str());
    }
    if let Some(var_65) = &input.image_name {
        object.key("ImageName").string(var_65.as_str());
    }
    if let Some(var_66) = &input.image_arn {
        object.key("ImageArn").string(var_66.as_str());
    }
    if let Some(var_67) = &input.instance_type {
        object.key("InstanceType").string(var_67.as_str());
    }
    if let Some(var_68) = &input.fleet_type {
        object.key("FleetType").string(var_68.as_str());
    }
    if let Some(var_69) = &input.compute_capacity {
        let mut object_70 = object.key("ComputeCapacity").start_object();
        crate::json_ser::serialize_structure_crate_model_compute_capacity(&mut object_70, var_69)?;
        object_70.finish();
    }
    if let Some(var_71) = &input.vpc_config {
        let mut object_72 = object.key("VpcConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_vpc_config(&mut object_72, var_71)?;
        object_72.finish();
    }
    if let Some(var_73) = &input.max_user_duration_in_seconds {
        object.key("MaxUserDurationInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_73).into()),
        );
    }
    if let Some(var_74) = &input.disconnect_timeout_in_seconds {
        object.key("DisconnectTimeoutInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_74).into()),
        );
    }
    if let Some(var_75) = &input.description {
        object.key("Description").string(var_75.as_str());
    }
    if let Some(var_76) = &input.display_name {
        object.key("DisplayName").string(var_76.as_str());
    }
    if let Some(var_77) = &input.enable_default_internet_access {
        object.key("EnableDefaultInternetAccess").boolean(*var_77);
    }
    if let Some(var_78) = &input.domain_join_info {
        let mut object_79 = object.key("DomainJoinInfo").start_object();
        crate::json_ser::serialize_structure_crate_model_domain_join_info(&mut object_79, var_78)?;
        object_79.finish();
    }
    if let Some(var_80) = &input.tags {
        let mut object_81 = object.key("Tags").start_object();
        for (key_82, value_83) in var_80 {
            {
                object_81.key(key_82).string(value_83.as_str());
            }
        }
        object_81.finish();
    }
    if let Some(var_84) = &input.idle_disconnect_timeout_in_seconds {
        object.key("IdleDisconnectTimeoutInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_84).into()),
        );
    }
    if let Some(var_85) = &input.iam_role_arn {
        object.key("IamRoleArn").string(var_85.as_str());
    }
    if let Some(var_86) = &input.stream_view {
        object.key("StreamView").string(var_86.as_str());
    }
    if let Some(var_87) = &input.platform {
        object.key("Platform").string(var_87.as_str());
    }
    if let Some(var_88) = &input.max_concurrent_sessions {
        object.key("MaxConcurrentSessions").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_88).into()),
        );
    }
    if let Some(var_89) = &input.usb_device_filter_strings {
        let mut array_90 = object.key("UsbDeviceFilterStrings").start_array();
        for item_91 in var_89 {
            {
                array_90.value().string(item_91.as_str());
            }
        }
        array_90.finish();
    }
    if let Some(var_92) = &input.session_script_s3_location {
        let mut object_93 = object.key("SessionScriptS3Location").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_location(&mut object_93, var_92)?;
        object_93.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_image_builder_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateImageBuilderInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_94) = &input.name {
        object.key("Name").string(var_94.as_str());
    }
    if let Some(var_95) = &input.image_name {
        object.key("ImageName").string(var_95.as_str());
    }
    if let Some(var_96) = &input.image_arn {
        object.key("ImageArn").string(var_96.as_str());
    }
    if let Some(var_97) = &input.instance_type {
        object.key("InstanceType").string(var_97.as_str());
    }
    if let Some(var_98) = &input.description {
        object.key("Description").string(var_98.as_str());
    }
    if let Some(var_99) = &input.display_name {
        object.key("DisplayName").string(var_99.as_str());
    }
    if let Some(var_100) = &input.vpc_config {
        let mut object_101 = object.key("VpcConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_vpc_config(&mut object_101, var_100)?;
        object_101.finish();
    }
    if let Some(var_102) = &input.iam_role_arn {
        object.key("IamRoleArn").string(var_102.as_str());
    }
    if let Some(var_103) = &input.enable_default_internet_access {
        object.key("EnableDefaultInternetAccess").boolean(*var_103);
    }
    if let Some(var_104) = &input.domain_join_info {
        let mut object_105 = object.key("DomainJoinInfo").start_object();
        crate::json_ser::serialize_structure_crate_model_domain_join_info(
            &mut object_105,
            var_104,
        )?;
        object_105.finish();
    }
    if let Some(var_106) = &input.appstream_agent_version {
        object.key("AppstreamAgentVersion").string(var_106.as_str());
    }
    if let Some(var_107) = &input.tags {
        let mut object_108 = object.key("Tags").start_object();
        for (key_109, value_110) in var_107 {
            {
                object_108.key(key_109).string(value_110.as_str());
            }
        }
        object_108.finish();
    }
    if let Some(var_111) = &input.access_endpoints {
        let mut array_112 = object.key("AccessEndpoints").start_array();
        for item_113 in var_111 {
            {
                let mut object_114 = array_112.value().start_object();
                crate::json_ser::serialize_structure_crate_model_access_endpoint(
                    &mut object_114,
                    item_113,
                )?;
                object_114.finish();
            }
        }
        array_112.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_image_builder_streaming_url_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateImageBuilderStreamingUrlInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_115) = &input.name {
        object.key("Name").string(var_115.as_str());
    }
    if let Some(var_116) = &input.validity {
        object.key("Validity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_116).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_stack_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateStackInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_117) = &input.name {
        object.key("Name").string(var_117.as_str());
    }
    if let Some(var_118) = &input.description {
        object.key("Description").string(var_118.as_str());
    }
    if let Some(var_119) = &input.display_name {
        object.key("DisplayName").string(var_119.as_str());
    }
    if let Some(var_120) = &input.storage_connectors {
        let mut array_121 = object.key("StorageConnectors").start_array();
        for item_122 in var_120 {
            {
                let mut object_123 = array_121.value().start_object();
                crate::json_ser::serialize_structure_crate_model_storage_connector(
                    &mut object_123,
                    item_122,
                )?;
                object_123.finish();
            }
        }
        array_121.finish();
    }
    if let Some(var_124) = &input.redirect_url {
        object.key("RedirectURL").string(var_124.as_str());
    }
    if let Some(var_125) = &input.feedback_url {
        object.key("FeedbackURL").string(var_125.as_str());
    }
    if let Some(var_126) = &input.user_settings {
        let mut array_127 = object.key("UserSettings").start_array();
        for item_128 in var_126 {
            {
                let mut object_129 = array_127.value().start_object();
                crate::json_ser::serialize_structure_crate_model_user_setting(
                    &mut object_129,
                    item_128,
                )?;
                object_129.finish();
            }
        }
        array_127.finish();
    }
    if let Some(var_130) = &input.application_settings {
        let mut object_131 = object.key("ApplicationSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_application_settings(
            &mut object_131,
            var_130,
        )?;
        object_131.finish();
    }
    if let Some(var_132) = &input.tags {
        let mut object_133 = object.key("Tags").start_object();
        for (key_134, value_135) in var_132 {
            {
                object_133.key(key_134).string(value_135.as_str());
            }
        }
        object_133.finish();
    }
    if let Some(var_136) = &input.access_endpoints {
        let mut array_137 = object.key("AccessEndpoints").start_array();
        for item_138 in var_136 {
            {
                let mut object_139 = array_137.value().start_object();
                crate::json_ser::serialize_structure_crate_model_access_endpoint(
                    &mut object_139,
                    item_138,
                )?;
                object_139.finish();
            }
        }
        array_137.finish();
    }
    if let Some(var_140) = &input.embed_host_domains {
        let mut array_141 = object.key("EmbedHostDomains").start_array();
        for item_142 in var_140 {
            {
                array_141.value().string(item_142.as_str());
            }
        }
        array_141.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_streaming_url_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateStreamingUrlInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_143) = &input.stack_name {
        object.key("StackName").string(var_143.as_str());
    }
    if let Some(var_144) = &input.fleet_name {
        object.key("FleetName").string(var_144.as_str());
    }
    if let Some(var_145) = &input.user_id {
        object.key("UserId").string(var_145.as_str());
    }
    if let Some(var_146) = &input.application_id {
        object.key("ApplicationId").string(var_146.as_str());
    }
    if let Some(var_147) = &input.validity {
        object.key("Validity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_147).into()),
        );
    }
    if let Some(var_148) = &input.session_context {
        object.key("SessionContext").string(var_148.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_updated_image_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateUpdatedImageInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_149) = &input.existing_image_name {
        object.key("existingImageName").string(var_149.as_str());
    }
    if let Some(var_150) = &input.new_image_name {
        object.key("newImageName").string(var_150.as_str());
    }
    if let Some(var_151) = &input.new_image_description {
        object.key("newImageDescription").string(var_151.as_str());
    }
    if let Some(var_152) = &input.new_image_display_name {
        object.key("newImageDisplayName").string(var_152.as_str());
    }
    if let Some(var_153) = &input.new_image_tags {
        let mut object_154 = object.key("newImageTags").start_object();
        for (key_155, value_156) in var_153 {
            {
                object_154.key(key_155).string(value_156.as_str());
            }
        }
        object_154.finish();
    }
    if input.dry_run {
        object.key("dryRun").boolean(input.dry_run);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_user_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateUserInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_157) = &input.user_name {
        object.key("UserName").string(var_157.as_str());
    }
    if let Some(var_158) = &input.message_action {
        object.key("MessageAction").string(var_158.as_str());
    }
    if let Some(var_159) = &input.first_name {
        object.key("FirstName").string(var_159.as_str());
    }
    if let Some(var_160) = &input.last_name {
        object.key("LastName").string(var_160.as_str());
    }
    if let Some(var_161) = &input.authentication_type {
        object.key("AuthenticationType").string(var_161.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_app_block_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteAppBlockInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_162) = &input.name {
        object.key("Name").string(var_162.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_application_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteApplicationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_163) = &input.name {
        object.key("Name").string(var_163.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_directory_config_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteDirectoryConfigInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_164) = &input.directory_name {
        object.key("DirectoryName").string(var_164.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_entitlement_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteEntitlementInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_165) = &input.name {
        object.key("Name").string(var_165.as_str());
    }
    if let Some(var_166) = &input.stack_name {
        object.key("StackName").string(var_166.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_fleet_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteFleetInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_167) = &input.name {
        object.key("Name").string(var_167.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_image_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteImageInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_168) = &input.name {
        object.key("Name").string(var_168.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_image_builder_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteImageBuilderInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_169) = &input.name {
        object.key("Name").string(var_169.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_image_permissions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteImagePermissionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_170) = &input.name {
        object.key("Name").string(var_170.as_str());
    }
    if let Some(var_171) = &input.shared_account_id {
        object.key("SharedAccountId").string(var_171.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_stack_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteStackInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_172) = &input.name {
        object.key("Name").string(var_172.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_user_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteUserInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_173) = &input.user_name {
        object.key("UserName").string(var_173.as_str());
    }
    if let Some(var_174) = &input.authentication_type {
        object.key("AuthenticationType").string(var_174.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_app_blocks_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeAppBlocksInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_175) = &input.arns {
        let mut array_176 = object.key("Arns").start_array();
        for item_177 in var_175 {
            {
                array_176.value().string(item_177.as_str());
            }
        }
        array_176.finish();
    }
    if let Some(var_178) = &input.next_token {
        object.key("NextToken").string(var_178.as_str());
    }
    if let Some(var_179) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_179).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_application_fleet_associations_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeApplicationFleetAssociationsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_180) = &input.fleet_name {
        object.key("FleetName").string(var_180.as_str());
    }
    if let Some(var_181) = &input.application_arn {
        object.key("ApplicationArn").string(var_181.as_str());
    }
    if let Some(var_182) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_182).into()),
        );
    }
    if let Some(var_183) = &input.next_token {
        object.key("NextToken").string(var_183.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_applications_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeApplicationsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_184) = &input.arns {
        let mut array_185 = object.key("Arns").start_array();
        for item_186 in var_184 {
            {
                array_185.value().string(item_186.as_str());
            }
        }
        array_185.finish();
    }
    if let Some(var_187) = &input.next_token {
        object.key("NextToken").string(var_187.as_str());
    }
    if let Some(var_188) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_188).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_directory_configs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeDirectoryConfigsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_189) = &input.directory_names {
        let mut array_190 = object.key("DirectoryNames").start_array();
        for item_191 in var_189 {
            {
                array_190.value().string(item_191.as_str());
            }
        }
        array_190.finish();
    }
    if let Some(var_192) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_192).into()),
        );
    }
    if let Some(var_193) = &input.next_token {
        object.key("NextToken").string(var_193.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_entitlements_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeEntitlementsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_194) = &input.name {
        object.key("Name").string(var_194.as_str());
    }
    if let Some(var_195) = &input.stack_name {
        object.key("StackName").string(var_195.as_str());
    }
    if let Some(var_196) = &input.next_token {
        object.key("NextToken").string(var_196.as_str());
    }
    if let Some(var_197) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_197).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_fleets_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeFleetsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_198) = &input.names {
        let mut array_199 = object.key("Names").start_array();
        for item_200 in var_198 {
            {
                array_199.value().string(item_200.as_str());
            }
        }
        array_199.finish();
    }
    if let Some(var_201) = &input.next_token {
        object.key("NextToken").string(var_201.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_image_builders_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeImageBuildersInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_202) = &input.names {
        let mut array_203 = object.key("Names").start_array();
        for item_204 in var_202 {
            {
                array_203.value().string(item_204.as_str());
            }
        }
        array_203.finish();
    }
    if let Some(var_205) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_205).into()),
        );
    }
    if let Some(var_206) = &input.next_token {
        object.key("NextToken").string(var_206.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_image_permissions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeImagePermissionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_207) = &input.name {
        object.key("Name").string(var_207.as_str());
    }
    if let Some(var_208) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_208).into()),
        );
    }
    if let Some(var_209) = &input.shared_aws_account_ids {
        let mut array_210 = object.key("SharedAwsAccountIds").start_array();
        for item_211 in var_209 {
            {
                array_210.value().string(item_211.as_str());
            }
        }
        array_210.finish();
    }
    if let Some(var_212) = &input.next_token {
        object.key("NextToken").string(var_212.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_images_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeImagesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_213) = &input.names {
        let mut array_214 = object.key("Names").start_array();
        for item_215 in var_213 {
            {
                array_214.value().string(item_215.as_str());
            }
        }
        array_214.finish();
    }
    if let Some(var_216) = &input.arns {
        let mut array_217 = object.key("Arns").start_array();
        for item_218 in var_216 {
            {
                array_217.value().string(item_218.as_str());
            }
        }
        array_217.finish();
    }
    if let Some(var_219) = &input.r#type {
        object.key("Type").string(var_219.as_str());
    }
    if let Some(var_220) = &input.next_token {
        object.key("NextToken").string(var_220.as_str());
    }
    if let Some(var_221) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_221).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_sessions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeSessionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_222) = &input.stack_name {
        object.key("StackName").string(var_222.as_str());
    }
    if let Some(var_223) = &input.fleet_name {
        object.key("FleetName").string(var_223.as_str());
    }
    if let Some(var_224) = &input.user_id {
        object.key("UserId").string(var_224.as_str());
    }
    if let Some(var_225) = &input.next_token {
        object.key("NextToken").string(var_225.as_str());
    }
    if let Some(var_226) = &input.limit {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_226).into()),
        );
    }
    if let Some(var_227) = &input.authentication_type {
        object.key("AuthenticationType").string(var_227.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_stacks_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeStacksInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_228) = &input.names {
        let mut array_229 = object.key("Names").start_array();
        for item_230 in var_228 {
            {
                array_229.value().string(item_230.as_str());
            }
        }
        array_229.finish();
    }
    if let Some(var_231) = &input.next_token {
        object.key("NextToken").string(var_231.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_usage_report_subscriptions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeUsageReportSubscriptionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_232) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_232).into()),
        );
    }
    if let Some(var_233) = &input.next_token {
        object.key("NextToken").string(var_233.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_users_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeUsersInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_234) = &input.authentication_type {
        object.key("AuthenticationType").string(var_234.as_str());
    }
    if let Some(var_235) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_235).into()),
        );
    }
    if let Some(var_236) = &input.next_token {
        object.key("NextToken").string(var_236.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_user_stack_associations_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeUserStackAssociationsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_237) = &input.stack_name {
        object.key("StackName").string(var_237.as_str());
    }
    if let Some(var_238) = &input.user_name {
        object.key("UserName").string(var_238.as_str());
    }
    if let Some(var_239) = &input.authentication_type {
        object.key("AuthenticationType").string(var_239.as_str());
    }
    if let Some(var_240) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_240).into()),
        );
    }
    if let Some(var_241) = &input.next_token {
        object.key("NextToken").string(var_241.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_disable_user_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DisableUserInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_242) = &input.user_name {
        object.key("UserName").string(var_242.as_str());
    }
    if let Some(var_243) = &input.authentication_type {
        object.key("AuthenticationType").string(var_243.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_disassociate_application_fleet_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DisassociateApplicationFleetInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_244) = &input.fleet_name {
        object.key("FleetName").string(var_244.as_str());
    }
    if let Some(var_245) = &input.application_arn {
        object.key("ApplicationArn").string(var_245.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_disassociate_application_from_entitlement_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DisassociateApplicationFromEntitlementInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_246) = &input.stack_name {
        object.key("StackName").string(var_246.as_str());
    }
    if let Some(var_247) = &input.entitlement_name {
        object.key("EntitlementName").string(var_247.as_str());
    }
    if let Some(var_248) = &input.application_identifier {
        object.key("ApplicationIdentifier").string(var_248.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_disassociate_fleet_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DisassociateFleetInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_249) = &input.fleet_name {
        object.key("FleetName").string(var_249.as_str());
    }
    if let Some(var_250) = &input.stack_name {
        object.key("StackName").string(var_250.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_enable_user_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::EnableUserInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_251) = &input.user_name {
        object.key("UserName").string(var_251.as_str());
    }
    if let Some(var_252) = &input.authentication_type {
        object.key("AuthenticationType").string(var_252.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_expire_session_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ExpireSessionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_253) = &input.session_id {
        object.key("SessionId").string(var_253.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_associated_fleets_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListAssociatedFleetsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_254) = &input.stack_name {
        object.key("StackName").string(var_254.as_str());
    }
    if let Some(var_255) = &input.next_token {
        object.key("NextToken").string(var_255.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_associated_stacks_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListAssociatedStacksInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_256) = &input.fleet_name {
        object.key("FleetName").string(var_256.as_str());
    }
    if let Some(var_257) = &input.next_token {
        object.key("NextToken").string(var_257.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_entitled_applications_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListEntitledApplicationsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_258) = &input.stack_name {
        object.key("StackName").string(var_258.as_str());
    }
    if let Some(var_259) = &input.entitlement_name {
        object.key("EntitlementName").string(var_259.as_str());
    }
    if let Some(var_260) = &input.next_token {
        object.key("NextToken").string(var_260.as_str());
    }
    if let Some(var_261) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_261).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_tags_for_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTagsForResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_262) = &input.resource_arn {
        object.key("ResourceArn").string(var_262.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_fleet_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartFleetInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_263) = &input.name {
        object.key("Name").string(var_263.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_image_builder_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartImageBuilderInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_264) = &input.name {
        object.key("Name").string(var_264.as_str());
    }
    if let Some(var_265) = &input.appstream_agent_version {
        object.key("AppstreamAgentVersion").string(var_265.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_fleet_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopFleetInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_266) = &input.name {
        object.key("Name").string(var_266.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_image_builder_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopImageBuilderInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_267) = &input.name {
        object.key("Name").string(var_267.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_tag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_268) = &input.resource_arn {
        object.key("ResourceArn").string(var_268.as_str());
    }
    if let Some(var_269) = &input.tags {
        let mut object_270 = object.key("Tags").start_object();
        for (key_271, value_272) in var_269 {
            {
                object_270.key(key_271).string(value_272.as_str());
            }
        }
        object_270.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_untag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UntagResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_273) = &input.resource_arn {
        object.key("ResourceArn").string(var_273.as_str());
    }
    if let Some(var_274) = &input.tag_keys {
        let mut array_275 = object.key("TagKeys").start_array();
        for item_276 in var_274 {
            {
                array_275.value().string(item_276.as_str());
            }
        }
        array_275.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_application_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateApplicationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_277) = &input.name {
        object.key("Name").string(var_277.as_str());
    }
    if let Some(var_278) = &input.display_name {
        object.key("DisplayName").string(var_278.as_str());
    }
    if let Some(var_279) = &input.description {
        object.key("Description").string(var_279.as_str());
    }
    if let Some(var_280) = &input.icon_s3_location {
        let mut object_281 = object.key("IconS3Location").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_location(&mut object_281, var_280)?;
        object_281.finish();
    }
    if let Some(var_282) = &input.launch_path {
        object.key("LaunchPath").string(var_282.as_str());
    }
    if let Some(var_283) = &input.working_directory {
        object.key("WorkingDirectory").string(var_283.as_str());
    }
    if let Some(var_284) = &input.launch_parameters {
        object.key("LaunchParameters").string(var_284.as_str());
    }
    if let Some(var_285) = &input.app_block_arn {
        object.key("AppBlockArn").string(var_285.as_str());
    }
    if let Some(var_286) = &input.attributes_to_delete {
        let mut array_287 = object.key("AttributesToDelete").start_array();
        for item_288 in var_286 {
            {
                array_287.value().string(item_288.as_str());
            }
        }
        array_287.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_directory_config_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDirectoryConfigInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_289) = &input.directory_name {
        object.key("DirectoryName").string(var_289.as_str());
    }
    if let Some(var_290) = &input.organizational_unit_distinguished_names {
        let mut array_291 = object
            .key("OrganizationalUnitDistinguishedNames")
            .start_array();
        for item_292 in var_290 {
            {
                array_291.value().string(item_292.as_str());
            }
        }
        array_291.finish();
    }
    if let Some(var_293) = &input.service_account_credentials {
        let mut object_294 = object.key("ServiceAccountCredentials").start_object();
        crate::json_ser::serialize_structure_crate_model_service_account_credentials(
            &mut object_294,
            var_293,
        )?;
        object_294.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_entitlement_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateEntitlementInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_295) = &input.name {
        object.key("Name").string(var_295.as_str());
    }
    if let Some(var_296) = &input.stack_name {
        object.key("StackName").string(var_296.as_str());
    }
    if let Some(var_297) = &input.description {
        object.key("Description").string(var_297.as_str());
    }
    if let Some(var_298) = &input.app_visibility {
        object.key("AppVisibility").string(var_298.as_str());
    }
    if let Some(var_299) = &input.attributes {
        let mut array_300 = object.key("Attributes").start_array();
        for item_301 in var_299 {
            {
                let mut object_302 = array_300.value().start_object();
                crate::json_ser::serialize_structure_crate_model_entitlement_attribute(
                    &mut object_302,
                    item_301,
                )?;
                object_302.finish();
            }
        }
        array_300.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_fleet_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateFleetInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_303) = &input.image_name {
        object.key("ImageName").string(var_303.as_str());
    }
    if let Some(var_304) = &input.image_arn {
        object.key("ImageArn").string(var_304.as_str());
    }
    if let Some(var_305) = &input.name {
        object.key("Name").string(var_305.as_str());
    }
    if let Some(var_306) = &input.instance_type {
        object.key("InstanceType").string(var_306.as_str());
    }
    if let Some(var_307) = &input.compute_capacity {
        let mut object_308 = object.key("ComputeCapacity").start_object();
        crate::json_ser::serialize_structure_crate_model_compute_capacity(
            &mut object_308,
            var_307,
        )?;
        object_308.finish();
    }
    if let Some(var_309) = &input.vpc_config {
        let mut object_310 = object.key("VpcConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_vpc_config(&mut object_310, var_309)?;
        object_310.finish();
    }
    if let Some(var_311) = &input.max_user_duration_in_seconds {
        object.key("MaxUserDurationInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_311).into()),
        );
    }
    if let Some(var_312) = &input.disconnect_timeout_in_seconds {
        object.key("DisconnectTimeoutInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_312).into()),
        );
    }
    if input.delete_vpc_config {
        object
            .key("DeleteVpcConfig")
            .boolean(input.delete_vpc_config);
    }
    if let Some(var_313) = &input.description {
        object.key("Description").string(var_313.as_str());
    }
    if let Some(var_314) = &input.display_name {
        object.key("DisplayName").string(var_314.as_str());
    }
    if let Some(var_315) = &input.enable_default_internet_access {
        object.key("EnableDefaultInternetAccess").boolean(*var_315);
    }
    if let Some(var_316) = &input.domain_join_info {
        let mut object_317 = object.key("DomainJoinInfo").start_object();
        crate::json_ser::serialize_structure_crate_model_domain_join_info(
            &mut object_317,
            var_316,
        )?;
        object_317.finish();
    }
    if let Some(var_318) = &input.idle_disconnect_timeout_in_seconds {
        object.key("IdleDisconnectTimeoutInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_318).into()),
        );
    }
    if let Some(var_319) = &input.attributes_to_delete {
        let mut array_320 = object.key("AttributesToDelete").start_array();
        for item_321 in var_319 {
            {
                array_320.value().string(item_321.as_str());
            }
        }
        array_320.finish();
    }
    if let Some(var_322) = &input.iam_role_arn {
        object.key("IamRoleArn").string(var_322.as_str());
    }
    if let Some(var_323) = &input.stream_view {
        object.key("StreamView").string(var_323.as_str());
    }
    if let Some(var_324) = &input.platform {
        object.key("Platform").string(var_324.as_str());
    }
    if let Some(var_325) = &input.max_concurrent_sessions {
        object.key("MaxConcurrentSessions").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_325).into()),
        );
    }
    if let Some(var_326) = &input.usb_device_filter_strings {
        let mut array_327 = object.key("UsbDeviceFilterStrings").start_array();
        for item_328 in var_326 {
            {
                array_327.value().string(item_328.as_str());
            }
        }
        array_327.finish();
    }
    if let Some(var_329) = &input.session_script_s3_location {
        let mut object_330 = object.key("SessionScriptS3Location").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_location(&mut object_330, var_329)?;
        object_330.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_image_permissions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateImagePermissionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_331) = &input.name {
        object.key("Name").string(var_331.as_str());
    }
    if let Some(var_332) = &input.shared_account_id {
        object.key("SharedAccountId").string(var_332.as_str());
    }
    if let Some(var_333) = &input.image_permissions {
        let mut object_334 = object.key("ImagePermissions").start_object();
        crate::json_ser::serialize_structure_crate_model_image_permissions(
            &mut object_334,
            var_333,
        )?;
        object_334.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_stack_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateStackInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_335) = &input.display_name {
        object.key("DisplayName").string(var_335.as_str());
    }
    if let Some(var_336) = &input.description {
        object.key("Description").string(var_336.as_str());
    }
    if let Some(var_337) = &input.name {
        object.key("Name").string(var_337.as_str());
    }
    if let Some(var_338) = &input.storage_connectors {
        let mut array_339 = object.key("StorageConnectors").start_array();
        for item_340 in var_338 {
            {
                let mut object_341 = array_339.value().start_object();
                crate::json_ser::serialize_structure_crate_model_storage_connector(
                    &mut object_341,
                    item_340,
                )?;
                object_341.finish();
            }
        }
        array_339.finish();
    }
    if input.delete_storage_connectors {
        object
            .key("DeleteStorageConnectors")
            .boolean(input.delete_storage_connectors);
    }
    if let Some(var_342) = &input.redirect_url {
        object.key("RedirectURL").string(var_342.as_str());
    }
    if let Some(var_343) = &input.feedback_url {
        object.key("FeedbackURL").string(var_343.as_str());
    }
    if let Some(var_344) = &input.attributes_to_delete {
        let mut array_345 = object.key("AttributesToDelete").start_array();
        for item_346 in var_344 {
            {
                array_345.value().string(item_346.as_str());
            }
        }
        array_345.finish();
    }
    if let Some(var_347) = &input.user_settings {
        let mut array_348 = object.key("UserSettings").start_array();
        for item_349 in var_347 {
            {
                let mut object_350 = array_348.value().start_object();
                crate::json_ser::serialize_structure_crate_model_user_setting(
                    &mut object_350,
                    item_349,
                )?;
                object_350.finish();
            }
        }
        array_348.finish();
    }
    if let Some(var_351) = &input.application_settings {
        let mut object_352 = object.key("ApplicationSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_application_settings(
            &mut object_352,
            var_351,
        )?;
        object_352.finish();
    }
    if let Some(var_353) = &input.access_endpoints {
        let mut array_354 = object.key("AccessEndpoints").start_array();
        for item_355 in var_353 {
            {
                let mut object_356 = array_354.value().start_object();
                crate::json_ser::serialize_structure_crate_model_access_endpoint(
                    &mut object_356,
                    item_355,
                )?;
                object_356.finish();
            }
        }
        array_354.finish();
    }
    if let Some(var_357) = &input.embed_host_domains {
        let mut array_358 = object.key("EmbedHostDomains").start_array();
        for item_359 in var_357 {
            {
                array_358.value().string(item_359.as_str());
            }
        }
        array_358.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_user_stack_association(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UserStackAssociation,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_360) = &input.stack_name {
        object.key("StackName").string(var_360.as_str());
    }
    if let Some(var_361) = &input.user_name {
        object.key("UserName").string(var_361.as_str());
    }
    if let Some(var_362) = &input.authentication_type {
        object.key("AuthenticationType").string(var_362.as_str());
    }
    if input.send_email_notification {
        object
            .key("SendEmailNotification")
            .boolean(input.send_email_notification);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_location(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3Location,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_363) = &input.s3_bucket {
        object.key("S3Bucket").string(var_363.as_str());
    }
    if let Some(var_364) = &input.s3_key {
        object.key("S3Key").string(var_364.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_script_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ScriptDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_365) = &input.script_s3_location {
        let mut object_366 = object.key("ScriptS3Location").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_location(&mut object_366, var_365)?;
        object_366.finish();
    }
    if let Some(var_367) = &input.executable_path {
        object.key("ExecutablePath").string(var_367.as_str());
    }
    if let Some(var_368) = &input.executable_parameters {
        object.key("ExecutableParameters").string(var_368.as_str());
    }
    if let Some(var_369) = &input.timeout_in_seconds {
        object.key("TimeoutInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_369).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_service_account_credentials(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ServiceAccountCredentials,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_370) = &input.account_name {
        object.key("AccountName").string(var_370.as_str());
    }
    if let Some(var_371) = &input.account_password {
        object.key("AccountPassword").string(var_371.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_entitlement_attribute(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EntitlementAttribute,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_372) = &input.name {
        object.key("Name").string(var_372.as_str());
    }
    if let Some(var_373) = &input.value {
        object.key("Value").string(var_373.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_compute_capacity(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ComputeCapacity,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_374) = &input.desired_instances {
        object.key("DesiredInstances").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_374).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_vpc_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VpcConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_375) = &input.subnet_ids {
        let mut array_376 = object.key("SubnetIds").start_array();
        for item_377 in var_375 {
            {
                array_376.value().string(item_377.as_str());
            }
        }
        array_376.finish();
    }
    if let Some(var_378) = &input.security_group_ids {
        let mut array_379 = object.key("SecurityGroupIds").start_array();
        for item_380 in var_378 {
            {
                array_379.value().string(item_380.as_str());
            }
        }
        array_379.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_domain_join_info(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DomainJoinInfo,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_381) = &input.directory_name {
        object.key("DirectoryName").string(var_381.as_str());
    }
    if let Some(var_382) = &input.organizational_unit_distinguished_name {
        object
            .key("OrganizationalUnitDistinguishedName")
            .string(var_382.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_access_endpoint(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AccessEndpoint,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_383) = &input.endpoint_type {
        object.key("EndpointType").string(var_383.as_str());
    }
    if let Some(var_384) = &input.vpce_id {
        object.key("VpceId").string(var_384.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_storage_connector(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StorageConnector,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_385) = &input.connector_type {
        object.key("ConnectorType").string(var_385.as_str());
    }
    if let Some(var_386) = &input.resource_identifier {
        object.key("ResourceIdentifier").string(var_386.as_str());
    }
    if let Some(var_387) = &input.domains {
        let mut array_388 = object.key("Domains").start_array();
        for item_389 in var_387 {
            {
                array_388.value().string(item_389.as_str());
            }
        }
        array_388.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_user_setting(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UserSetting,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_390) = &input.action {
        object.key("Action").string(var_390.as_str());
    }
    if let Some(var_391) = &input.permission {
        object.key("Permission").string(var_391.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_application_settings(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ApplicationSettings,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object.key("Enabled").boolean(input.enabled);
    }
    if let Some(var_392) = &input.settings_group {
        object.key("SettingsGroup").string(var_392.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_image_permissions(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ImagePermissions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_393) = &input.allow_fleet {
        object.key("allowFleet").boolean(*var_393);
    }
    if let Some(var_394) = &input.allow_image_builder {
        object.key("allowImageBuilder").boolean(*var_394);
    }
    Ok(())
}
