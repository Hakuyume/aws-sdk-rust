// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_accept_administrator_invitation_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AcceptAdministratorInvitationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1) = &input.administrator_id {
        object.key("AdministratorId").string(var_1.as_str());
    }
    if let Some(var_2) = &input.invitation_id {
        object.key("InvitationId").string(var_2.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_accept_invitation_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AcceptInvitationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3) = &input.invitation_id {
        object.key("InvitationId").string(var_3.as_str());
    }
    if let Some(var_4) = &input.master_id {
        object.key("MasterId").string(var_4.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_disable_standards_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchDisableStandardsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_5) = &input.standards_subscription_arns {
        let mut array_6 = object.key("StandardsSubscriptionArns").start_array();
        for item_7 in var_5 {
            {
                array_6.value().string(item_7.as_str());
            }
        }
        array_6.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_enable_standards_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchEnableStandardsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_8) = &input.standards_subscription_requests {
        let mut array_9 = object.key("StandardsSubscriptionRequests").start_array();
        for item_10 in var_8 {
            {
                let mut object_11 = array_9.value().start_object();
                crate::json_ser::serialize_structure_crate_model_standards_subscription_request(
                    &mut object_11,
                    item_10,
                )?;
                object_11.finish();
            }
        }
        array_9.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_import_findings_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchImportFindingsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_12) = &input.findings {
        let mut array_13 = object.key("Findings").start_array();
        for item_14 in var_12 {
            {
                let mut object_15 = array_13.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_security_finding(
                    &mut object_15,
                    item_14,
                )?;
                object_15.finish();
            }
        }
        array_13.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_update_findings_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchUpdateFindingsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.confidence != 0 {
        object.key("Confidence").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.confidence).into()),
        );
    }
    if input.criticality != 0 {
        object.key("Criticality").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.criticality).into()),
        );
    }
    if let Some(var_16) = &input.finding_identifiers {
        let mut array_17 = object.key("FindingIdentifiers").start_array();
        for item_18 in var_16 {
            {
                let mut object_19 = array_17.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_security_finding_identifier(
                    &mut object_19,
                    item_18,
                )?;
                object_19.finish();
            }
        }
        array_17.finish();
    }
    if let Some(var_20) = &input.note {
        let mut object_21 = object.key("Note").start_object();
        crate::json_ser::serialize_structure_crate_model_note_update(&mut object_21, var_20)?;
        object_21.finish();
    }
    if let Some(var_22) = &input.related_findings {
        let mut array_23 = object.key("RelatedFindings").start_array();
        for item_24 in var_22 {
            {
                let mut object_25 = array_23.value().start_object();
                crate::json_ser::serialize_structure_crate_model_related_finding(
                    &mut object_25,
                    item_24,
                )?;
                object_25.finish();
            }
        }
        array_23.finish();
    }
    if let Some(var_26) = &input.severity {
        let mut object_27 = object.key("Severity").start_object();
        crate::json_ser::serialize_structure_crate_model_severity_update(&mut object_27, var_26)?;
        object_27.finish();
    }
    if let Some(var_28) = &input.types {
        let mut array_29 = object.key("Types").start_array();
        for item_30 in var_28 {
            {
                array_29.value().string(item_30.as_str());
            }
        }
        array_29.finish();
    }
    if let Some(var_31) = &input.user_defined_fields {
        let mut object_32 = object.key("UserDefinedFields").start_object();
        for (key_33, value_34) in var_31 {
            {
                object_32.key(key_33).string(value_34.as_str());
            }
        }
        object_32.finish();
    }
    if let Some(var_35) = &input.verification_state {
        object.key("VerificationState").string(var_35.as_str());
    }
    if let Some(var_36) = &input.workflow {
        let mut object_37 = object.key("Workflow").start_object();
        crate::json_ser::serialize_structure_crate_model_workflow_update(&mut object_37, var_36)?;
        object_37.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_action_target_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateActionTargetInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_38) = &input.description {
        object.key("Description").string(var_38.as_str());
    }
    if let Some(var_39) = &input.id {
        object.key("Id").string(var_39.as_str());
    }
    if let Some(var_40) = &input.name {
        object.key("Name").string(var_40.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_finding_aggregator_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateFindingAggregatorInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_41) = &input.region_linking_mode {
        object.key("RegionLinkingMode").string(var_41.as_str());
    }
    if let Some(var_42) = &input.regions {
        let mut array_43 = object.key("Regions").start_array();
        for item_44 in var_42 {
            {
                array_43.value().string(item_44.as_str());
            }
        }
        array_43.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_insight_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateInsightInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_45) = &input.filters {
        let mut object_46 = object.key("Filters").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_security_finding_filters(
            &mut object_46,
            var_45,
        )?;
        object_46.finish();
    }
    if let Some(var_47) = &input.group_by_attribute {
        object.key("GroupByAttribute").string(var_47.as_str());
    }
    if let Some(var_48) = &input.name {
        object.key("Name").string(var_48.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_members_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateMembersInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_49) = &input.account_details {
        let mut array_50 = object.key("AccountDetails").start_array();
        for item_51 in var_49 {
            {
                let mut object_52 = array_50.value().start_object();
                crate::json_ser::serialize_structure_crate_model_account_details(
                    &mut object_52,
                    item_51,
                )?;
                object_52.finish();
            }
        }
        array_50.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_decline_invitations_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeclineInvitationsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_53) = &input.account_ids {
        let mut array_54 = object.key("AccountIds").start_array();
        for item_55 in var_53 {
            {
                array_54.value().string(item_55.as_str());
            }
        }
        array_54.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_invitations_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteInvitationsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_56) = &input.account_ids {
        let mut array_57 = object.key("AccountIds").start_array();
        for item_58 in var_56 {
            {
                array_57.value().string(item_58.as_str());
            }
        }
        array_57.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_members_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteMembersInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_59) = &input.account_ids {
        let mut array_60 = object.key("AccountIds").start_array();
        for item_61 in var_59 {
            {
                array_60.value().string(item_61.as_str());
            }
        }
        array_60.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_action_targets_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeActionTargetsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_62) = &input.action_target_arns {
        let mut array_63 = object.key("ActionTargetArns").start_array();
        for item_64 in var_62 {
            {
                array_63.value().string(item_64.as_str());
            }
        }
        array_63.finish();
    }
    if input.max_results != 0 {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_results).into()),
        );
    }
    if let Some(var_65) = &input.next_token {
        object.key("NextToken").string(var_65.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_disable_organization_admin_account_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DisableOrganizationAdminAccountInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_66) = &input.admin_account_id {
        object.key("AdminAccountId").string(var_66.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_disassociate_members_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DisassociateMembersInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_67) = &input.account_ids {
        let mut array_68 = object.key("AccountIds").start_array();
        for item_69 in var_67 {
            {
                array_68.value().string(item_69.as_str());
            }
        }
        array_68.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_enable_import_findings_for_product_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::EnableImportFindingsForProductInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_70) = &input.product_arn {
        object.key("ProductArn").string(var_70.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_enable_organization_admin_account_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::EnableOrganizationAdminAccountInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_71) = &input.admin_account_id {
        object.key("AdminAccountId").string(var_71.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_enable_security_hub_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::EnableSecurityHubInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.enable_default_standards {
        object
            .key("EnableDefaultStandards")
            .boolean(input.enable_default_standards);
    }
    if let Some(var_72) = &input.tags {
        let mut object_73 = object.key("Tags").start_object();
        for (key_74, value_75) in var_72 {
            {
                object_73.key(key_74).string(value_75.as_str());
            }
        }
        object_73.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_enabled_standards_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetEnabledStandardsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.max_results != 0 {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_results).into()),
        );
    }
    if let Some(var_76) = &input.next_token {
        object.key("NextToken").string(var_76.as_str());
    }
    if let Some(var_77) = &input.standards_subscription_arns {
        let mut array_78 = object.key("StandardsSubscriptionArns").start_array();
        for item_79 in var_77 {
            {
                array_78.value().string(item_79.as_str());
            }
        }
        array_78.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_findings_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetFindingsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_80) = &input.filters {
        let mut object_81 = object.key("Filters").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_security_finding_filters(
            &mut object_81,
            var_80,
        )?;
        object_81.finish();
    }
    if input.max_results != 0 {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_results).into()),
        );
    }
    if let Some(var_82) = &input.next_token {
        object.key("NextToken").string(var_82.as_str());
    }
    if let Some(var_83) = &input.sort_criteria {
        let mut array_84 = object.key("SortCriteria").start_array();
        for item_85 in var_83 {
            {
                let mut object_86 = array_84.value().start_object();
                crate::json_ser::serialize_structure_crate_model_sort_criterion(
                    &mut object_86,
                    item_85,
                )?;
                object_86.finish();
            }
        }
        array_84.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_insights_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetInsightsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_87) = &input.insight_arns {
        let mut array_88 = object.key("InsightArns").start_array();
        for item_89 in var_87 {
            {
                array_88.value().string(item_89.as_str());
            }
        }
        array_88.finish();
    }
    if input.max_results != 0 {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_results).into()),
        );
    }
    if let Some(var_90) = &input.next_token {
        object.key("NextToken").string(var_90.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_members_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetMembersInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_91) = &input.account_ids {
        let mut array_92 = object.key("AccountIds").start_array();
        for item_93 in var_91 {
            {
                array_92.value().string(item_93.as_str());
            }
        }
        array_92.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_invite_members_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::InviteMembersInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_94) = &input.account_ids {
        let mut array_95 = object.key("AccountIds").start_array();
        for item_96 in var_94 {
            {
                array_95.value().string(item_96.as_str());
            }
        }
        array_95.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_tag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_97) = &input.tags {
        let mut object_98 = object.key("Tags").start_object();
        for (key_99, value_100) in var_97 {
            {
                object_98.key(key_99).string(value_100.as_str());
            }
        }
        object_98.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_action_target_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateActionTargetInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_101) = &input.description {
        object.key("Description").string(var_101.as_str());
    }
    if let Some(var_102) = &input.name {
        object.key("Name").string(var_102.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_finding_aggregator_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateFindingAggregatorInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_103) = &input.finding_aggregator_arn {
        object.key("FindingAggregatorArn").string(var_103.as_str());
    }
    if let Some(var_104) = &input.region_linking_mode {
        object.key("RegionLinkingMode").string(var_104.as_str());
    }
    if let Some(var_105) = &input.regions {
        let mut array_106 = object.key("Regions").start_array();
        for item_107 in var_105 {
            {
                array_106.value().string(item_107.as_str());
            }
        }
        array_106.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_findings_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateFindingsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_108) = &input.filters {
        let mut object_109 = object.key("Filters").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_security_finding_filters(
            &mut object_109,
            var_108,
        )?;
        object_109.finish();
    }
    if let Some(var_110) = &input.note {
        let mut object_111 = object.key("Note").start_object();
        crate::json_ser::serialize_structure_crate_model_note_update(&mut object_111, var_110)?;
        object_111.finish();
    }
    if let Some(var_112) = &input.record_state {
        object.key("RecordState").string(var_112.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_insight_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateInsightInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_113) = &input.filters {
        let mut object_114 = object.key("Filters").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_security_finding_filters(
            &mut object_114,
            var_113,
        )?;
        object_114.finish();
    }
    if let Some(var_115) = &input.group_by_attribute {
        object.key("GroupByAttribute").string(var_115.as_str());
    }
    if let Some(var_116) = &input.name {
        object.key("Name").string(var_116.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_organization_configuration_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateOrganizationConfigurationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object.key("AutoEnable").boolean(input.auto_enable);
    }
    if let Some(var_117) = &input.auto_enable_standards {
        object.key("AutoEnableStandards").string(var_117.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_security_hub_configuration_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateSecurityHubConfigurationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.auto_enable_controls {
        object
            .key("AutoEnableControls")
            .boolean(input.auto_enable_controls);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_standards_control_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateStandardsControlInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_118) = &input.control_status {
        object.key("ControlStatus").string(var_118.as_str());
    }
    if let Some(var_119) = &input.disabled_reason {
        object.key("DisabledReason").string(var_119.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_standards_subscription_request(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StandardsSubscriptionRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_120) = &input.standards_arn {
        object.key("StandardsArn").string(var_120.as_str());
    }
    if let Some(var_121) = &input.standards_input {
        let mut object_122 = object.key("StandardsInput").start_object();
        for (key_123, value_124) in var_121 {
            {
                object_122.key(key_123).string(value_124.as_str());
            }
        }
        object_122.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_security_finding(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsSecurityFinding,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_125) = &input.schema_version {
        object.key("SchemaVersion").string(var_125.as_str());
    }
    if let Some(var_126) = &input.id {
        object.key("Id").string(var_126.as_str());
    }
    if let Some(var_127) = &input.product_arn {
        object.key("ProductArn").string(var_127.as_str());
    }
    if let Some(var_128) = &input.product_name {
        object.key("ProductName").string(var_128.as_str());
    }
    if let Some(var_129) = &input.company_name {
        object.key("CompanyName").string(var_129.as_str());
    }
    if let Some(var_130) = &input.region {
        object.key("Region").string(var_130.as_str());
    }
    if let Some(var_131) = &input.generator_id {
        object.key("GeneratorId").string(var_131.as_str());
    }
    if let Some(var_132) = &input.aws_account_id {
        object.key("AwsAccountId").string(var_132.as_str());
    }
    if let Some(var_133) = &input.types {
        let mut array_134 = object.key("Types").start_array();
        for item_135 in var_133 {
            {
                array_134.value().string(item_135.as_str());
            }
        }
        array_134.finish();
    }
    if let Some(var_136) = &input.first_observed_at {
        object.key("FirstObservedAt").string(var_136.as_str());
    }
    if let Some(var_137) = &input.last_observed_at {
        object.key("LastObservedAt").string(var_137.as_str());
    }
    if let Some(var_138) = &input.created_at {
        object.key("CreatedAt").string(var_138.as_str());
    }
    if let Some(var_139) = &input.updated_at {
        object.key("UpdatedAt").string(var_139.as_str());
    }
    if let Some(var_140) = &input.severity {
        let mut object_141 = object.key("Severity").start_object();
        crate::json_ser::serialize_structure_crate_model_severity(&mut object_141, var_140)?;
        object_141.finish();
    }
    if input.confidence != 0 {
        object.key("Confidence").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.confidence).into()),
        );
    }
    if input.criticality != 0 {
        object.key("Criticality").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.criticality).into()),
        );
    }
    if let Some(var_142) = &input.title {
        object.key("Title").string(var_142.as_str());
    }
    if let Some(var_143) = &input.description {
        object.key("Description").string(var_143.as_str());
    }
    if let Some(var_144) = &input.remediation {
        let mut object_145 = object.key("Remediation").start_object();
        crate::json_ser::serialize_structure_crate_model_remediation(&mut object_145, var_144)?;
        object_145.finish();
    }
    if let Some(var_146) = &input.source_url {
        object.key("SourceUrl").string(var_146.as_str());
    }
    if let Some(var_147) = &input.product_fields {
        let mut object_148 = object.key("ProductFields").start_object();
        for (key_149, value_150) in var_147 {
            {
                object_148.key(key_149).string(value_150.as_str());
            }
        }
        object_148.finish();
    }
    if let Some(var_151) = &input.user_defined_fields {
        let mut object_152 = object.key("UserDefinedFields").start_object();
        for (key_153, value_154) in var_151 {
            {
                object_152.key(key_153).string(value_154.as_str());
            }
        }
        object_152.finish();
    }
    if let Some(var_155) = &input.malware {
        let mut array_156 = object.key("Malware").start_array();
        for item_157 in var_155 {
            {
                let mut object_158 = array_156.value().start_object();
                crate::json_ser::serialize_structure_crate_model_malware(
                    &mut object_158,
                    item_157,
                )?;
                object_158.finish();
            }
        }
        array_156.finish();
    }
    if let Some(var_159) = &input.network {
        let mut object_160 = object.key("Network").start_object();
        crate::json_ser::serialize_structure_crate_model_network(&mut object_160, var_159)?;
        object_160.finish();
    }
    if let Some(var_161) = &input.network_path {
        let mut array_162 = object.key("NetworkPath").start_array();
        for item_163 in var_161 {
            {
                let mut object_164 = array_162.value().start_object();
                crate::json_ser::serialize_structure_crate_model_network_path_component(
                    &mut object_164,
                    item_163,
                )?;
                object_164.finish();
            }
        }
        array_162.finish();
    }
    if let Some(var_165) = &input.process {
        let mut object_166 = object.key("Process").start_object();
        crate::json_ser::serialize_structure_crate_model_process_details(&mut object_166, var_165)?;
        object_166.finish();
    }
    if let Some(var_167) = &input.threat_intel_indicators {
        let mut array_168 = object.key("ThreatIntelIndicators").start_array();
        for item_169 in var_167 {
            {
                let mut object_170 = array_168.value().start_object();
                crate::json_ser::serialize_structure_crate_model_threat_intel_indicator(
                    &mut object_170,
                    item_169,
                )?;
                object_170.finish();
            }
        }
        array_168.finish();
    }
    if let Some(var_171) = &input.resources {
        let mut array_172 = object.key("Resources").start_array();
        for item_173 in var_171 {
            {
                let mut object_174 = array_172.value().start_object();
                crate::json_ser::serialize_structure_crate_model_resource(
                    &mut object_174,
                    item_173,
                )?;
                object_174.finish();
            }
        }
        array_172.finish();
    }
    if let Some(var_175) = &input.compliance {
        let mut object_176 = object.key("Compliance").start_object();
        crate::json_ser::serialize_structure_crate_model_compliance(&mut object_176, var_175)?;
        object_176.finish();
    }
    if let Some(var_177) = &input.verification_state {
        object.key("VerificationState").string(var_177.as_str());
    }
    if let Some(var_178) = &input.workflow_state {
        object.key("WorkflowState").string(var_178.as_str());
    }
    if let Some(var_179) = &input.workflow {
        let mut object_180 = object.key("Workflow").start_object();
        crate::json_ser::serialize_structure_crate_model_workflow(&mut object_180, var_179)?;
        object_180.finish();
    }
    if let Some(var_181) = &input.record_state {
        object.key("RecordState").string(var_181.as_str());
    }
    if let Some(var_182) = &input.related_findings {
        let mut array_183 = object.key("RelatedFindings").start_array();
        for item_184 in var_182 {
            {
                let mut object_185 = array_183.value().start_object();
                crate::json_ser::serialize_structure_crate_model_related_finding(
                    &mut object_185,
                    item_184,
                )?;
                object_185.finish();
            }
        }
        array_183.finish();
    }
    if let Some(var_186) = &input.note {
        let mut object_187 = object.key("Note").start_object();
        crate::json_ser::serialize_structure_crate_model_note(&mut object_187, var_186)?;
        object_187.finish();
    }
    if let Some(var_188) = &input.vulnerabilities {
        let mut array_189 = object.key("Vulnerabilities").start_array();
        for item_190 in var_188 {
            {
                let mut object_191 = array_189.value().start_object();
                crate::json_ser::serialize_structure_crate_model_vulnerability(
                    &mut object_191,
                    item_190,
                )?;
                object_191.finish();
            }
        }
        array_189.finish();
    }
    if let Some(var_192) = &input.patch_summary {
        let mut object_193 = object.key("PatchSummary").start_object();
        crate::json_ser::serialize_structure_crate_model_patch_summary(&mut object_193, var_192)?;
        object_193.finish();
    }
    if let Some(var_194) = &input.action {
        let mut object_195 = object.key("Action").start_object();
        crate::json_ser::serialize_structure_crate_model_action(&mut object_195, var_194)?;
        object_195.finish();
    }
    if let Some(var_196) = &input.finding_provider_fields {
        let mut object_197 = object.key("FindingProviderFields").start_object();
        crate::json_ser::serialize_structure_crate_model_finding_provider_fields(
            &mut object_197,
            var_196,
        )?;
        object_197.finish();
    }
    if input.sample {
        object.key("Sample").boolean(input.sample);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_security_finding_identifier(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsSecurityFindingIdentifier,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_198) = &input.id {
        object.key("Id").string(var_198.as_str());
    }
    if let Some(var_199) = &input.product_arn {
        object.key("ProductArn").string(var_199.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_note_update(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::NoteUpdate,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_200) = &input.text {
        object.key("Text").string(var_200.as_str());
    }
    if let Some(var_201) = &input.updated_by {
        object.key("UpdatedBy").string(var_201.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_related_finding(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RelatedFinding,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_202) = &input.product_arn {
        object.key("ProductArn").string(var_202.as_str());
    }
    if let Some(var_203) = &input.id {
        object.key("Id").string(var_203.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_severity_update(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SeverityUpdate,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.normalized != 0 {
        object.key("Normalized").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.normalized).into()),
        );
    }
    if input.product != 0.0 {
        object.key("Product").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((input.product).into()),
        );
    }
    if let Some(var_204) = &input.label {
        object.key("Label").string(var_204.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_workflow_update(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::WorkflowUpdate,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_205) = &input.status {
        object.key("Status").string(var_205.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_security_finding_filters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsSecurityFindingFilters,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_206) = &input.product_arn {
        let mut array_207 = object.key("ProductArn").start_array();
        for item_208 in var_206 {
            {
                let mut object_209 = array_207.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_209,
                    item_208,
                )?;
                object_209.finish();
            }
        }
        array_207.finish();
    }
    if let Some(var_210) = &input.aws_account_id {
        let mut array_211 = object.key("AwsAccountId").start_array();
        for item_212 in var_210 {
            {
                let mut object_213 = array_211.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_213,
                    item_212,
                )?;
                object_213.finish();
            }
        }
        array_211.finish();
    }
    if let Some(var_214) = &input.id {
        let mut array_215 = object.key("Id").start_array();
        for item_216 in var_214 {
            {
                let mut object_217 = array_215.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_217,
                    item_216,
                )?;
                object_217.finish();
            }
        }
        array_215.finish();
    }
    if let Some(var_218) = &input.generator_id {
        let mut array_219 = object.key("GeneratorId").start_array();
        for item_220 in var_218 {
            {
                let mut object_221 = array_219.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_221,
                    item_220,
                )?;
                object_221.finish();
            }
        }
        array_219.finish();
    }
    if let Some(var_222) = &input.region {
        let mut array_223 = object.key("Region").start_array();
        for item_224 in var_222 {
            {
                let mut object_225 = array_223.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_225,
                    item_224,
                )?;
                object_225.finish();
            }
        }
        array_223.finish();
    }
    if let Some(var_226) = &input.r#type {
        let mut array_227 = object.key("Type").start_array();
        for item_228 in var_226 {
            {
                let mut object_229 = array_227.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_229,
                    item_228,
                )?;
                object_229.finish();
            }
        }
        array_227.finish();
    }
    if let Some(var_230) = &input.first_observed_at {
        let mut array_231 = object.key("FirstObservedAt").start_array();
        for item_232 in var_230 {
            {
                let mut object_233 = array_231.value().start_object();
                crate::json_ser::serialize_structure_crate_model_date_filter(
                    &mut object_233,
                    item_232,
                )?;
                object_233.finish();
            }
        }
        array_231.finish();
    }
    if let Some(var_234) = &input.last_observed_at {
        let mut array_235 = object.key("LastObservedAt").start_array();
        for item_236 in var_234 {
            {
                let mut object_237 = array_235.value().start_object();
                crate::json_ser::serialize_structure_crate_model_date_filter(
                    &mut object_237,
                    item_236,
                )?;
                object_237.finish();
            }
        }
        array_235.finish();
    }
    if let Some(var_238) = &input.created_at {
        let mut array_239 = object.key("CreatedAt").start_array();
        for item_240 in var_238 {
            {
                let mut object_241 = array_239.value().start_object();
                crate::json_ser::serialize_structure_crate_model_date_filter(
                    &mut object_241,
                    item_240,
                )?;
                object_241.finish();
            }
        }
        array_239.finish();
    }
    if let Some(var_242) = &input.updated_at {
        let mut array_243 = object.key("UpdatedAt").start_array();
        for item_244 in var_242 {
            {
                let mut object_245 = array_243.value().start_object();
                crate::json_ser::serialize_structure_crate_model_date_filter(
                    &mut object_245,
                    item_244,
                )?;
                object_245.finish();
            }
        }
        array_243.finish();
    }
    if let Some(var_246) = &input.severity_product {
        let mut array_247 = object.key("SeverityProduct").start_array();
        for item_248 in var_246 {
            {
                let mut object_249 = array_247.value().start_object();
                crate::json_ser::serialize_structure_crate_model_number_filter(
                    &mut object_249,
                    item_248,
                )?;
                object_249.finish();
            }
        }
        array_247.finish();
    }
    if let Some(var_250) = &input.severity_normalized {
        let mut array_251 = object.key("SeverityNormalized").start_array();
        for item_252 in var_250 {
            {
                let mut object_253 = array_251.value().start_object();
                crate::json_ser::serialize_structure_crate_model_number_filter(
                    &mut object_253,
                    item_252,
                )?;
                object_253.finish();
            }
        }
        array_251.finish();
    }
    if let Some(var_254) = &input.severity_label {
        let mut array_255 = object.key("SeverityLabel").start_array();
        for item_256 in var_254 {
            {
                let mut object_257 = array_255.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_257,
                    item_256,
                )?;
                object_257.finish();
            }
        }
        array_255.finish();
    }
    if let Some(var_258) = &input.confidence {
        let mut array_259 = object.key("Confidence").start_array();
        for item_260 in var_258 {
            {
                let mut object_261 = array_259.value().start_object();
                crate::json_ser::serialize_structure_crate_model_number_filter(
                    &mut object_261,
                    item_260,
                )?;
                object_261.finish();
            }
        }
        array_259.finish();
    }
    if let Some(var_262) = &input.criticality {
        let mut array_263 = object.key("Criticality").start_array();
        for item_264 in var_262 {
            {
                let mut object_265 = array_263.value().start_object();
                crate::json_ser::serialize_structure_crate_model_number_filter(
                    &mut object_265,
                    item_264,
                )?;
                object_265.finish();
            }
        }
        array_263.finish();
    }
    if let Some(var_266) = &input.title {
        let mut array_267 = object.key("Title").start_array();
        for item_268 in var_266 {
            {
                let mut object_269 = array_267.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_269,
                    item_268,
                )?;
                object_269.finish();
            }
        }
        array_267.finish();
    }
    if let Some(var_270) = &input.description {
        let mut array_271 = object.key("Description").start_array();
        for item_272 in var_270 {
            {
                let mut object_273 = array_271.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_273,
                    item_272,
                )?;
                object_273.finish();
            }
        }
        array_271.finish();
    }
    if let Some(var_274) = &input.recommendation_text {
        let mut array_275 = object.key("RecommendationText").start_array();
        for item_276 in var_274 {
            {
                let mut object_277 = array_275.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_277,
                    item_276,
                )?;
                object_277.finish();
            }
        }
        array_275.finish();
    }
    if let Some(var_278) = &input.source_url {
        let mut array_279 = object.key("SourceUrl").start_array();
        for item_280 in var_278 {
            {
                let mut object_281 = array_279.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_281,
                    item_280,
                )?;
                object_281.finish();
            }
        }
        array_279.finish();
    }
    if let Some(var_282) = &input.product_fields {
        let mut array_283 = object.key("ProductFields").start_array();
        for item_284 in var_282 {
            {
                let mut object_285 = array_283.value().start_object();
                crate::json_ser::serialize_structure_crate_model_map_filter(
                    &mut object_285,
                    item_284,
                )?;
                object_285.finish();
            }
        }
        array_283.finish();
    }
    if let Some(var_286) = &input.product_name {
        let mut array_287 = object.key("ProductName").start_array();
        for item_288 in var_286 {
            {
                let mut object_289 = array_287.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_289,
                    item_288,
                )?;
                object_289.finish();
            }
        }
        array_287.finish();
    }
    if let Some(var_290) = &input.company_name {
        let mut array_291 = object.key("CompanyName").start_array();
        for item_292 in var_290 {
            {
                let mut object_293 = array_291.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_293,
                    item_292,
                )?;
                object_293.finish();
            }
        }
        array_291.finish();
    }
    if let Some(var_294) = &input.user_defined_fields {
        let mut array_295 = object.key("UserDefinedFields").start_array();
        for item_296 in var_294 {
            {
                let mut object_297 = array_295.value().start_object();
                crate::json_ser::serialize_structure_crate_model_map_filter(
                    &mut object_297,
                    item_296,
                )?;
                object_297.finish();
            }
        }
        array_295.finish();
    }
    if let Some(var_298) = &input.malware_name {
        let mut array_299 = object.key("MalwareName").start_array();
        for item_300 in var_298 {
            {
                let mut object_301 = array_299.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_301,
                    item_300,
                )?;
                object_301.finish();
            }
        }
        array_299.finish();
    }
    if let Some(var_302) = &input.malware_type {
        let mut array_303 = object.key("MalwareType").start_array();
        for item_304 in var_302 {
            {
                let mut object_305 = array_303.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_305,
                    item_304,
                )?;
                object_305.finish();
            }
        }
        array_303.finish();
    }
    if let Some(var_306) = &input.malware_path {
        let mut array_307 = object.key("MalwarePath").start_array();
        for item_308 in var_306 {
            {
                let mut object_309 = array_307.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_309,
                    item_308,
                )?;
                object_309.finish();
            }
        }
        array_307.finish();
    }
    if let Some(var_310) = &input.malware_state {
        let mut array_311 = object.key("MalwareState").start_array();
        for item_312 in var_310 {
            {
                let mut object_313 = array_311.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_313,
                    item_312,
                )?;
                object_313.finish();
            }
        }
        array_311.finish();
    }
    if let Some(var_314) = &input.network_direction {
        let mut array_315 = object.key("NetworkDirection").start_array();
        for item_316 in var_314 {
            {
                let mut object_317 = array_315.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_317,
                    item_316,
                )?;
                object_317.finish();
            }
        }
        array_315.finish();
    }
    if let Some(var_318) = &input.network_protocol {
        let mut array_319 = object.key("NetworkProtocol").start_array();
        for item_320 in var_318 {
            {
                let mut object_321 = array_319.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_321,
                    item_320,
                )?;
                object_321.finish();
            }
        }
        array_319.finish();
    }
    if let Some(var_322) = &input.network_source_ip_v4 {
        let mut array_323 = object.key("NetworkSourceIpV4").start_array();
        for item_324 in var_322 {
            {
                let mut object_325 = array_323.value().start_object();
                crate::json_ser::serialize_structure_crate_model_ip_filter(
                    &mut object_325,
                    item_324,
                )?;
                object_325.finish();
            }
        }
        array_323.finish();
    }
    if let Some(var_326) = &input.network_source_ip_v6 {
        let mut array_327 = object.key("NetworkSourceIpV6").start_array();
        for item_328 in var_326 {
            {
                let mut object_329 = array_327.value().start_object();
                crate::json_ser::serialize_structure_crate_model_ip_filter(
                    &mut object_329,
                    item_328,
                )?;
                object_329.finish();
            }
        }
        array_327.finish();
    }
    if let Some(var_330) = &input.network_source_port {
        let mut array_331 = object.key("NetworkSourcePort").start_array();
        for item_332 in var_330 {
            {
                let mut object_333 = array_331.value().start_object();
                crate::json_ser::serialize_structure_crate_model_number_filter(
                    &mut object_333,
                    item_332,
                )?;
                object_333.finish();
            }
        }
        array_331.finish();
    }
    if let Some(var_334) = &input.network_source_domain {
        let mut array_335 = object.key("NetworkSourceDomain").start_array();
        for item_336 in var_334 {
            {
                let mut object_337 = array_335.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_337,
                    item_336,
                )?;
                object_337.finish();
            }
        }
        array_335.finish();
    }
    if let Some(var_338) = &input.network_source_mac {
        let mut array_339 = object.key("NetworkSourceMac").start_array();
        for item_340 in var_338 {
            {
                let mut object_341 = array_339.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_341,
                    item_340,
                )?;
                object_341.finish();
            }
        }
        array_339.finish();
    }
    if let Some(var_342) = &input.network_destination_ip_v4 {
        let mut array_343 = object.key("NetworkDestinationIpV4").start_array();
        for item_344 in var_342 {
            {
                let mut object_345 = array_343.value().start_object();
                crate::json_ser::serialize_structure_crate_model_ip_filter(
                    &mut object_345,
                    item_344,
                )?;
                object_345.finish();
            }
        }
        array_343.finish();
    }
    if let Some(var_346) = &input.network_destination_ip_v6 {
        let mut array_347 = object.key("NetworkDestinationIpV6").start_array();
        for item_348 in var_346 {
            {
                let mut object_349 = array_347.value().start_object();
                crate::json_ser::serialize_structure_crate_model_ip_filter(
                    &mut object_349,
                    item_348,
                )?;
                object_349.finish();
            }
        }
        array_347.finish();
    }
    if let Some(var_350) = &input.network_destination_port {
        let mut array_351 = object.key("NetworkDestinationPort").start_array();
        for item_352 in var_350 {
            {
                let mut object_353 = array_351.value().start_object();
                crate::json_ser::serialize_structure_crate_model_number_filter(
                    &mut object_353,
                    item_352,
                )?;
                object_353.finish();
            }
        }
        array_351.finish();
    }
    if let Some(var_354) = &input.network_destination_domain {
        let mut array_355 = object.key("NetworkDestinationDomain").start_array();
        for item_356 in var_354 {
            {
                let mut object_357 = array_355.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_357,
                    item_356,
                )?;
                object_357.finish();
            }
        }
        array_355.finish();
    }
    if let Some(var_358) = &input.process_name {
        let mut array_359 = object.key("ProcessName").start_array();
        for item_360 in var_358 {
            {
                let mut object_361 = array_359.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_361,
                    item_360,
                )?;
                object_361.finish();
            }
        }
        array_359.finish();
    }
    if let Some(var_362) = &input.process_path {
        let mut array_363 = object.key("ProcessPath").start_array();
        for item_364 in var_362 {
            {
                let mut object_365 = array_363.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_365,
                    item_364,
                )?;
                object_365.finish();
            }
        }
        array_363.finish();
    }
    if let Some(var_366) = &input.process_pid {
        let mut array_367 = object.key("ProcessPid").start_array();
        for item_368 in var_366 {
            {
                let mut object_369 = array_367.value().start_object();
                crate::json_ser::serialize_structure_crate_model_number_filter(
                    &mut object_369,
                    item_368,
                )?;
                object_369.finish();
            }
        }
        array_367.finish();
    }
    if let Some(var_370) = &input.process_parent_pid {
        let mut array_371 = object.key("ProcessParentPid").start_array();
        for item_372 in var_370 {
            {
                let mut object_373 = array_371.value().start_object();
                crate::json_ser::serialize_structure_crate_model_number_filter(
                    &mut object_373,
                    item_372,
                )?;
                object_373.finish();
            }
        }
        array_371.finish();
    }
    if let Some(var_374) = &input.process_launched_at {
        let mut array_375 = object.key("ProcessLaunchedAt").start_array();
        for item_376 in var_374 {
            {
                let mut object_377 = array_375.value().start_object();
                crate::json_ser::serialize_structure_crate_model_date_filter(
                    &mut object_377,
                    item_376,
                )?;
                object_377.finish();
            }
        }
        array_375.finish();
    }
    if let Some(var_378) = &input.process_terminated_at {
        let mut array_379 = object.key("ProcessTerminatedAt").start_array();
        for item_380 in var_378 {
            {
                let mut object_381 = array_379.value().start_object();
                crate::json_ser::serialize_structure_crate_model_date_filter(
                    &mut object_381,
                    item_380,
                )?;
                object_381.finish();
            }
        }
        array_379.finish();
    }
    if let Some(var_382) = &input.threat_intel_indicator_type {
        let mut array_383 = object.key("ThreatIntelIndicatorType").start_array();
        for item_384 in var_382 {
            {
                let mut object_385 = array_383.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_385,
                    item_384,
                )?;
                object_385.finish();
            }
        }
        array_383.finish();
    }
    if let Some(var_386) = &input.threat_intel_indicator_value {
        let mut array_387 = object.key("ThreatIntelIndicatorValue").start_array();
        for item_388 in var_386 {
            {
                let mut object_389 = array_387.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_389,
                    item_388,
                )?;
                object_389.finish();
            }
        }
        array_387.finish();
    }
    if let Some(var_390) = &input.threat_intel_indicator_category {
        let mut array_391 = object.key("ThreatIntelIndicatorCategory").start_array();
        for item_392 in var_390 {
            {
                let mut object_393 = array_391.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_393,
                    item_392,
                )?;
                object_393.finish();
            }
        }
        array_391.finish();
    }
    if let Some(var_394) = &input.threat_intel_indicator_last_observed_at {
        let mut array_395 = object
            .key("ThreatIntelIndicatorLastObservedAt")
            .start_array();
        for item_396 in var_394 {
            {
                let mut object_397 = array_395.value().start_object();
                crate::json_ser::serialize_structure_crate_model_date_filter(
                    &mut object_397,
                    item_396,
                )?;
                object_397.finish();
            }
        }
        array_395.finish();
    }
    if let Some(var_398) = &input.threat_intel_indicator_source {
        let mut array_399 = object.key("ThreatIntelIndicatorSource").start_array();
        for item_400 in var_398 {
            {
                let mut object_401 = array_399.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_401,
                    item_400,
                )?;
                object_401.finish();
            }
        }
        array_399.finish();
    }
    if let Some(var_402) = &input.threat_intel_indicator_source_url {
        let mut array_403 = object.key("ThreatIntelIndicatorSourceUrl").start_array();
        for item_404 in var_402 {
            {
                let mut object_405 = array_403.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_405,
                    item_404,
                )?;
                object_405.finish();
            }
        }
        array_403.finish();
    }
    if let Some(var_406) = &input.resource_type {
        let mut array_407 = object.key("ResourceType").start_array();
        for item_408 in var_406 {
            {
                let mut object_409 = array_407.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_409,
                    item_408,
                )?;
                object_409.finish();
            }
        }
        array_407.finish();
    }
    if let Some(var_410) = &input.resource_id {
        let mut array_411 = object.key("ResourceId").start_array();
        for item_412 in var_410 {
            {
                let mut object_413 = array_411.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_413,
                    item_412,
                )?;
                object_413.finish();
            }
        }
        array_411.finish();
    }
    if let Some(var_414) = &input.resource_partition {
        let mut array_415 = object.key("ResourcePartition").start_array();
        for item_416 in var_414 {
            {
                let mut object_417 = array_415.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_417,
                    item_416,
                )?;
                object_417.finish();
            }
        }
        array_415.finish();
    }
    if let Some(var_418) = &input.resource_region {
        let mut array_419 = object.key("ResourceRegion").start_array();
        for item_420 in var_418 {
            {
                let mut object_421 = array_419.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_421,
                    item_420,
                )?;
                object_421.finish();
            }
        }
        array_419.finish();
    }
    if let Some(var_422) = &input.resource_tags {
        let mut array_423 = object.key("ResourceTags").start_array();
        for item_424 in var_422 {
            {
                let mut object_425 = array_423.value().start_object();
                crate::json_ser::serialize_structure_crate_model_map_filter(
                    &mut object_425,
                    item_424,
                )?;
                object_425.finish();
            }
        }
        array_423.finish();
    }
    if let Some(var_426) = &input.resource_aws_ec2_instance_type {
        let mut array_427 = object.key("ResourceAwsEc2InstanceType").start_array();
        for item_428 in var_426 {
            {
                let mut object_429 = array_427.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_429,
                    item_428,
                )?;
                object_429.finish();
            }
        }
        array_427.finish();
    }
    if let Some(var_430) = &input.resource_aws_ec2_instance_image_id {
        let mut array_431 = object.key("ResourceAwsEc2InstanceImageId").start_array();
        for item_432 in var_430 {
            {
                let mut object_433 = array_431.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_433,
                    item_432,
                )?;
                object_433.finish();
            }
        }
        array_431.finish();
    }
    if let Some(var_434) = &input.resource_aws_ec2_instance_ip_v4_addresses {
        let mut array_435 = object
            .key("ResourceAwsEc2InstanceIpV4Addresses")
            .start_array();
        for item_436 in var_434 {
            {
                let mut object_437 = array_435.value().start_object();
                crate::json_ser::serialize_structure_crate_model_ip_filter(
                    &mut object_437,
                    item_436,
                )?;
                object_437.finish();
            }
        }
        array_435.finish();
    }
    if let Some(var_438) = &input.resource_aws_ec2_instance_ip_v6_addresses {
        let mut array_439 = object
            .key("ResourceAwsEc2InstanceIpV6Addresses")
            .start_array();
        for item_440 in var_438 {
            {
                let mut object_441 = array_439.value().start_object();
                crate::json_ser::serialize_structure_crate_model_ip_filter(
                    &mut object_441,
                    item_440,
                )?;
                object_441.finish();
            }
        }
        array_439.finish();
    }
    if let Some(var_442) = &input.resource_aws_ec2_instance_key_name {
        let mut array_443 = object.key("ResourceAwsEc2InstanceKeyName").start_array();
        for item_444 in var_442 {
            {
                let mut object_445 = array_443.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_445,
                    item_444,
                )?;
                object_445.finish();
            }
        }
        array_443.finish();
    }
    if let Some(var_446) = &input.resource_aws_ec2_instance_iam_instance_profile_arn {
        let mut array_447 = object
            .key("ResourceAwsEc2InstanceIamInstanceProfileArn")
            .start_array();
        for item_448 in var_446 {
            {
                let mut object_449 = array_447.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_449,
                    item_448,
                )?;
                object_449.finish();
            }
        }
        array_447.finish();
    }
    if let Some(var_450) = &input.resource_aws_ec2_instance_vpc_id {
        let mut array_451 = object.key("ResourceAwsEc2InstanceVpcId").start_array();
        for item_452 in var_450 {
            {
                let mut object_453 = array_451.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_453,
                    item_452,
                )?;
                object_453.finish();
            }
        }
        array_451.finish();
    }
    if let Some(var_454) = &input.resource_aws_ec2_instance_subnet_id {
        let mut array_455 = object.key("ResourceAwsEc2InstanceSubnetId").start_array();
        for item_456 in var_454 {
            {
                let mut object_457 = array_455.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_457,
                    item_456,
                )?;
                object_457.finish();
            }
        }
        array_455.finish();
    }
    if let Some(var_458) = &input.resource_aws_ec2_instance_launched_at {
        let mut array_459 = object.key("ResourceAwsEc2InstanceLaunchedAt").start_array();
        for item_460 in var_458 {
            {
                let mut object_461 = array_459.value().start_object();
                crate::json_ser::serialize_structure_crate_model_date_filter(
                    &mut object_461,
                    item_460,
                )?;
                object_461.finish();
            }
        }
        array_459.finish();
    }
    if let Some(var_462) = &input.resource_aws_s3_bucket_owner_id {
        let mut array_463 = object.key("ResourceAwsS3BucketOwnerId").start_array();
        for item_464 in var_462 {
            {
                let mut object_465 = array_463.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_465,
                    item_464,
                )?;
                object_465.finish();
            }
        }
        array_463.finish();
    }
    if let Some(var_466) = &input.resource_aws_s3_bucket_owner_name {
        let mut array_467 = object.key("ResourceAwsS3BucketOwnerName").start_array();
        for item_468 in var_466 {
            {
                let mut object_469 = array_467.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_469,
                    item_468,
                )?;
                object_469.finish();
            }
        }
        array_467.finish();
    }
    if let Some(var_470) = &input.resource_aws_iam_access_key_user_name {
        let mut array_471 = object.key("ResourceAwsIamAccessKeyUserName").start_array();
        for item_472 in var_470 {
            {
                let mut object_473 = array_471.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_473,
                    item_472,
                )?;
                object_473.finish();
            }
        }
        array_471.finish();
    }
    if let Some(var_474) = &input.resource_aws_iam_access_key_principal_name {
        let mut array_475 = object
            .key("ResourceAwsIamAccessKeyPrincipalName")
            .start_array();
        for item_476 in var_474 {
            {
                let mut object_477 = array_475.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_477,
                    item_476,
                )?;
                object_477.finish();
            }
        }
        array_475.finish();
    }
    if let Some(var_478) = &input.resource_aws_iam_access_key_status {
        let mut array_479 = object.key("ResourceAwsIamAccessKeyStatus").start_array();
        for item_480 in var_478 {
            {
                let mut object_481 = array_479.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_481,
                    item_480,
                )?;
                object_481.finish();
            }
        }
        array_479.finish();
    }
    if let Some(var_482) = &input.resource_aws_iam_access_key_created_at {
        let mut array_483 = object.key("ResourceAwsIamAccessKeyCreatedAt").start_array();
        for item_484 in var_482 {
            {
                let mut object_485 = array_483.value().start_object();
                crate::json_ser::serialize_structure_crate_model_date_filter(
                    &mut object_485,
                    item_484,
                )?;
                object_485.finish();
            }
        }
        array_483.finish();
    }
    if let Some(var_486) = &input.resource_aws_iam_user_user_name {
        let mut array_487 = object.key("ResourceAwsIamUserUserName").start_array();
        for item_488 in var_486 {
            {
                let mut object_489 = array_487.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_489,
                    item_488,
                )?;
                object_489.finish();
            }
        }
        array_487.finish();
    }
    if let Some(var_490) = &input.resource_container_name {
        let mut array_491 = object.key("ResourceContainerName").start_array();
        for item_492 in var_490 {
            {
                let mut object_493 = array_491.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_493,
                    item_492,
                )?;
                object_493.finish();
            }
        }
        array_491.finish();
    }
    if let Some(var_494) = &input.resource_container_image_id {
        let mut array_495 = object.key("ResourceContainerImageId").start_array();
        for item_496 in var_494 {
            {
                let mut object_497 = array_495.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_497,
                    item_496,
                )?;
                object_497.finish();
            }
        }
        array_495.finish();
    }
    if let Some(var_498) = &input.resource_container_image_name {
        let mut array_499 = object.key("ResourceContainerImageName").start_array();
        for item_500 in var_498 {
            {
                let mut object_501 = array_499.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_501,
                    item_500,
                )?;
                object_501.finish();
            }
        }
        array_499.finish();
    }
    if let Some(var_502) = &input.resource_container_launched_at {
        let mut array_503 = object.key("ResourceContainerLaunchedAt").start_array();
        for item_504 in var_502 {
            {
                let mut object_505 = array_503.value().start_object();
                crate::json_ser::serialize_structure_crate_model_date_filter(
                    &mut object_505,
                    item_504,
                )?;
                object_505.finish();
            }
        }
        array_503.finish();
    }
    if let Some(var_506) = &input.resource_details_other {
        let mut array_507 = object.key("ResourceDetailsOther").start_array();
        for item_508 in var_506 {
            {
                let mut object_509 = array_507.value().start_object();
                crate::json_ser::serialize_structure_crate_model_map_filter(
                    &mut object_509,
                    item_508,
                )?;
                object_509.finish();
            }
        }
        array_507.finish();
    }
    if let Some(var_510) = &input.compliance_status {
        let mut array_511 = object.key("ComplianceStatus").start_array();
        for item_512 in var_510 {
            {
                let mut object_513 = array_511.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_513,
                    item_512,
                )?;
                object_513.finish();
            }
        }
        array_511.finish();
    }
    if let Some(var_514) = &input.verification_state {
        let mut array_515 = object.key("VerificationState").start_array();
        for item_516 in var_514 {
            {
                let mut object_517 = array_515.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_517,
                    item_516,
                )?;
                object_517.finish();
            }
        }
        array_515.finish();
    }
    if let Some(var_518) = &input.workflow_state {
        let mut array_519 = object.key("WorkflowState").start_array();
        for item_520 in var_518 {
            {
                let mut object_521 = array_519.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_521,
                    item_520,
                )?;
                object_521.finish();
            }
        }
        array_519.finish();
    }
    if let Some(var_522) = &input.workflow_status {
        let mut array_523 = object.key("WorkflowStatus").start_array();
        for item_524 in var_522 {
            {
                let mut object_525 = array_523.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_525,
                    item_524,
                )?;
                object_525.finish();
            }
        }
        array_523.finish();
    }
    if let Some(var_526) = &input.record_state {
        let mut array_527 = object.key("RecordState").start_array();
        for item_528 in var_526 {
            {
                let mut object_529 = array_527.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_529,
                    item_528,
                )?;
                object_529.finish();
            }
        }
        array_527.finish();
    }
    if let Some(var_530) = &input.related_findings_product_arn {
        let mut array_531 = object.key("RelatedFindingsProductArn").start_array();
        for item_532 in var_530 {
            {
                let mut object_533 = array_531.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_533,
                    item_532,
                )?;
                object_533.finish();
            }
        }
        array_531.finish();
    }
    if let Some(var_534) = &input.related_findings_id {
        let mut array_535 = object.key("RelatedFindingsId").start_array();
        for item_536 in var_534 {
            {
                let mut object_537 = array_535.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_537,
                    item_536,
                )?;
                object_537.finish();
            }
        }
        array_535.finish();
    }
    if let Some(var_538) = &input.note_text {
        let mut array_539 = object.key("NoteText").start_array();
        for item_540 in var_538 {
            {
                let mut object_541 = array_539.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_541,
                    item_540,
                )?;
                object_541.finish();
            }
        }
        array_539.finish();
    }
    if let Some(var_542) = &input.note_updated_at {
        let mut array_543 = object.key("NoteUpdatedAt").start_array();
        for item_544 in var_542 {
            {
                let mut object_545 = array_543.value().start_object();
                crate::json_ser::serialize_structure_crate_model_date_filter(
                    &mut object_545,
                    item_544,
                )?;
                object_545.finish();
            }
        }
        array_543.finish();
    }
    if let Some(var_546) = &input.note_updated_by {
        let mut array_547 = object.key("NoteUpdatedBy").start_array();
        for item_548 in var_546 {
            {
                let mut object_549 = array_547.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_549,
                    item_548,
                )?;
                object_549.finish();
            }
        }
        array_547.finish();
    }
    if let Some(var_550) = &input.keyword {
        let mut array_551 = object.key("Keyword").start_array();
        for item_552 in var_550 {
            {
                let mut object_553 = array_551.value().start_object();
                crate::json_ser::serialize_structure_crate_model_keyword_filter(
                    &mut object_553,
                    item_552,
                )?;
                object_553.finish();
            }
        }
        array_551.finish();
    }
    if let Some(var_554) = &input.finding_provider_fields_confidence {
        let mut array_555 = object.key("FindingProviderFieldsConfidence").start_array();
        for item_556 in var_554 {
            {
                let mut object_557 = array_555.value().start_object();
                crate::json_ser::serialize_structure_crate_model_number_filter(
                    &mut object_557,
                    item_556,
                )?;
                object_557.finish();
            }
        }
        array_555.finish();
    }
    if let Some(var_558) = &input.finding_provider_fields_criticality {
        let mut array_559 = object.key("FindingProviderFieldsCriticality").start_array();
        for item_560 in var_558 {
            {
                let mut object_561 = array_559.value().start_object();
                crate::json_ser::serialize_structure_crate_model_number_filter(
                    &mut object_561,
                    item_560,
                )?;
                object_561.finish();
            }
        }
        array_559.finish();
    }
    if let Some(var_562) = &input.finding_provider_fields_related_findings_id {
        let mut array_563 = object
            .key("FindingProviderFieldsRelatedFindingsId")
            .start_array();
        for item_564 in var_562 {
            {
                let mut object_565 = array_563.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_565,
                    item_564,
                )?;
                object_565.finish();
            }
        }
        array_563.finish();
    }
    if let Some(var_566) = &input.finding_provider_fields_related_findings_product_arn {
        let mut array_567 = object
            .key("FindingProviderFieldsRelatedFindingsProductArn")
            .start_array();
        for item_568 in var_566 {
            {
                let mut object_569 = array_567.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_569,
                    item_568,
                )?;
                object_569.finish();
            }
        }
        array_567.finish();
    }
    if let Some(var_570) = &input.finding_provider_fields_severity_label {
        let mut array_571 = object
            .key("FindingProviderFieldsSeverityLabel")
            .start_array();
        for item_572 in var_570 {
            {
                let mut object_573 = array_571.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_573,
                    item_572,
                )?;
                object_573.finish();
            }
        }
        array_571.finish();
    }
    if let Some(var_574) = &input.finding_provider_fields_severity_original {
        let mut array_575 = object
            .key("FindingProviderFieldsSeverityOriginal")
            .start_array();
        for item_576 in var_574 {
            {
                let mut object_577 = array_575.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_577,
                    item_576,
                )?;
                object_577.finish();
            }
        }
        array_575.finish();
    }
    if let Some(var_578) = &input.finding_provider_fields_types {
        let mut array_579 = object.key("FindingProviderFieldsTypes").start_array();
        for item_580 in var_578 {
            {
                let mut object_581 = array_579.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_581,
                    item_580,
                )?;
                object_581.finish();
            }
        }
        array_579.finish();
    }
    if let Some(var_582) = &input.sample {
        let mut array_583 = object.key("Sample").start_array();
        for item_584 in var_582 {
            {
                let mut object_585 = array_583.value().start_object();
                crate::json_ser::serialize_structure_crate_model_boolean_filter(
                    &mut object_585,
                    item_584,
                )?;
                object_585.finish();
            }
        }
        array_583.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_account_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AccountDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_586) = &input.account_id {
        object.key("AccountId").string(var_586.as_str());
    }
    if let Some(var_587) = &input.email {
        object.key("Email").string(var_587.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_sort_criterion(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SortCriterion,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_588) = &input.field {
        object.key("Field").string(var_588.as_str());
    }
    if let Some(var_589) = &input.sort_order {
        object.key("SortOrder").string(var_589.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_severity(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Severity,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.product != 0.0 {
        object.key("Product").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((input.product).into()),
        );
    }
    if let Some(var_590) = &input.label {
        object.key("Label").string(var_590.as_str());
    }
    if input.normalized != 0 {
        object.key("Normalized").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.normalized).into()),
        );
    }
    if let Some(var_591) = &input.original {
        object.key("Original").string(var_591.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_remediation(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Remediation,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_592) = &input.recommendation {
        let mut object_593 = object.key("Recommendation").start_object();
        crate::json_ser::serialize_structure_crate_model_recommendation(&mut object_593, var_592)?;
        object_593.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_malware(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Malware,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_594) = &input.name {
        object.key("Name").string(var_594.as_str());
    }
    if let Some(var_595) = &input.r#type {
        object.key("Type").string(var_595.as_str());
    }
    if let Some(var_596) = &input.path {
        object.key("Path").string(var_596.as_str());
    }
    if let Some(var_597) = &input.state {
        object.key("State").string(var_597.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_network(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Network,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_598) = &input.direction {
        object.key("Direction").string(var_598.as_str());
    }
    if let Some(var_599) = &input.protocol {
        object.key("Protocol").string(var_599.as_str());
    }
    if let Some(var_600) = &input.open_port_range {
        let mut object_601 = object.key("OpenPortRange").start_object();
        crate::json_ser::serialize_structure_crate_model_port_range(&mut object_601, var_600)?;
        object_601.finish();
    }
    if let Some(var_602) = &input.source_ip_v4 {
        object.key("SourceIpV4").string(var_602.as_str());
    }
    if let Some(var_603) = &input.source_ip_v6 {
        object.key("SourceIpV6").string(var_603.as_str());
    }
    if input.source_port != 0 {
        object.key("SourcePort").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.source_port).into()),
        );
    }
    if let Some(var_604) = &input.source_domain {
        object.key("SourceDomain").string(var_604.as_str());
    }
    if let Some(var_605) = &input.source_mac {
        object.key("SourceMac").string(var_605.as_str());
    }
    if let Some(var_606) = &input.destination_ip_v4 {
        object.key("DestinationIpV4").string(var_606.as_str());
    }
    if let Some(var_607) = &input.destination_ip_v6 {
        object.key("DestinationIpV6").string(var_607.as_str());
    }
    if input.destination_port != 0 {
        object.key("DestinationPort").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.destination_port).into()),
        );
    }
    if let Some(var_608) = &input.destination_domain {
        object.key("DestinationDomain").string(var_608.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_network_path_component(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::NetworkPathComponent,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_609) = &input.component_id {
        object.key("ComponentId").string(var_609.as_str());
    }
    if let Some(var_610) = &input.component_type {
        object.key("ComponentType").string(var_610.as_str());
    }
    if let Some(var_611) = &input.egress {
        let mut object_612 = object.key("Egress").start_object();
        crate::json_ser::serialize_structure_crate_model_network_header(&mut object_612, var_611)?;
        object_612.finish();
    }
    if let Some(var_613) = &input.ingress {
        let mut object_614 = object.key("Ingress").start_object();
        crate::json_ser::serialize_structure_crate_model_network_header(&mut object_614, var_613)?;
        object_614.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_process_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProcessDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_615) = &input.name {
        object.key("Name").string(var_615.as_str());
    }
    if let Some(var_616) = &input.path {
        object.key("Path").string(var_616.as_str());
    }
    if input.pid != 0 {
        object.key("Pid").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.pid).into()),
        );
    }
    if input.parent_pid != 0 {
        object.key("ParentPid").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.parent_pid).into()),
        );
    }
    if let Some(var_617) = &input.launched_at {
        object.key("LaunchedAt").string(var_617.as_str());
    }
    if let Some(var_618) = &input.terminated_at {
        object.key("TerminatedAt").string(var_618.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_threat_intel_indicator(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ThreatIntelIndicator,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_619) = &input.r#type {
        object.key("Type").string(var_619.as_str());
    }
    if let Some(var_620) = &input.value {
        object.key("Value").string(var_620.as_str());
    }
    if let Some(var_621) = &input.category {
        object.key("Category").string(var_621.as_str());
    }
    if let Some(var_622) = &input.last_observed_at {
        object.key("LastObservedAt").string(var_622.as_str());
    }
    if let Some(var_623) = &input.source {
        object.key("Source").string(var_623.as_str());
    }
    if let Some(var_624) = &input.source_url {
        object.key("SourceUrl").string(var_624.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_resource(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Resource,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_625) = &input.r#type {
        object.key("Type").string(var_625.as_str());
    }
    if let Some(var_626) = &input.id {
        object.key("Id").string(var_626.as_str());
    }
    if let Some(var_627) = &input.partition {
        object.key("Partition").string(var_627.as_str());
    }
    if let Some(var_628) = &input.region {
        object.key("Region").string(var_628.as_str());
    }
    if let Some(var_629) = &input.resource_role {
        object.key("ResourceRole").string(var_629.as_str());
    }
    if let Some(var_630) = &input.tags {
        let mut object_631 = object.key("Tags").start_object();
        for (key_632, value_633) in var_630 {
            {
                object_631.key(key_632).string(value_633.as_str());
            }
        }
        object_631.finish();
    }
    if let Some(var_634) = &input.data_classification {
        let mut object_635 = object.key("DataClassification").start_object();
        crate::json_ser::serialize_structure_crate_model_data_classification_details(
            &mut object_635,
            var_634,
        )?;
        object_635.finish();
    }
    if let Some(var_636) = &input.details {
        let mut object_637 = object.key("Details").start_object();
        crate::json_ser::serialize_structure_crate_model_resource_details(
            &mut object_637,
            var_636,
        )?;
        object_637.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_compliance(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Compliance,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_638) = &input.status {
        object.key("Status").string(var_638.as_str());
    }
    if let Some(var_639) = &input.related_requirements {
        let mut array_640 = object.key("RelatedRequirements").start_array();
        for item_641 in var_639 {
            {
                array_640.value().string(item_641.as_str());
            }
        }
        array_640.finish();
    }
    if let Some(var_642) = &input.status_reasons {
        let mut array_643 = object.key("StatusReasons").start_array();
        for item_644 in var_642 {
            {
                let mut object_645 = array_643.value().start_object();
                crate::json_ser::serialize_structure_crate_model_status_reason(
                    &mut object_645,
                    item_644,
                )?;
                object_645.finish();
            }
        }
        array_643.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_workflow(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Workflow,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_646) = &input.status {
        object.key("Status").string(var_646.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_note(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Note,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_647) = &input.text {
        object.key("Text").string(var_647.as_str());
    }
    if let Some(var_648) = &input.updated_by {
        object.key("UpdatedBy").string(var_648.as_str());
    }
    if let Some(var_649) = &input.updated_at {
        object.key("UpdatedAt").string(var_649.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_vulnerability(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Vulnerability,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_650) = &input.id {
        object.key("Id").string(var_650.as_str());
    }
    if let Some(var_651) = &input.vulnerable_packages {
        let mut array_652 = object.key("VulnerablePackages").start_array();
        for item_653 in var_651 {
            {
                let mut object_654 = array_652.value().start_object();
                crate::json_ser::serialize_structure_crate_model_software_package(
                    &mut object_654,
                    item_653,
                )?;
                object_654.finish();
            }
        }
        array_652.finish();
    }
    if let Some(var_655) = &input.cvss {
        let mut array_656 = object.key("Cvss").start_array();
        for item_657 in var_655 {
            {
                let mut object_658 = array_656.value().start_object();
                crate::json_ser::serialize_structure_crate_model_cvss(&mut object_658, item_657)?;
                object_658.finish();
            }
        }
        array_656.finish();
    }
    if let Some(var_659) = &input.related_vulnerabilities {
        let mut array_660 = object.key("RelatedVulnerabilities").start_array();
        for item_661 in var_659 {
            {
                array_660.value().string(item_661.as_str());
            }
        }
        array_660.finish();
    }
    if let Some(var_662) = &input.vendor {
        let mut object_663 = object.key("Vendor").start_object();
        crate::json_ser::serialize_structure_crate_model_vulnerability_vendor(
            &mut object_663,
            var_662,
        )?;
        object_663.finish();
    }
    if let Some(var_664) = &input.reference_urls {
        let mut array_665 = object.key("ReferenceUrls").start_array();
        for item_666 in var_664 {
            {
                array_665.value().string(item_666.as_str());
            }
        }
        array_665.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_patch_summary(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PatchSummary,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_667) = &input.id {
        object.key("Id").string(var_667.as_str());
    }
    if input.installed_count != 0 {
        object.key("InstalledCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.installed_count).into()),
        );
    }
    if input.missing_count != 0 {
        object.key("MissingCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.missing_count).into()),
        );
    }
    if input.failed_count != 0 {
        object.key("FailedCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.failed_count).into()),
        );
    }
    if input.installed_other_count != 0 {
        object.key("InstalledOtherCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.installed_other_count).into()),
        );
    }
    if input.installed_rejected_count != 0 {
        object.key("InstalledRejectedCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.installed_rejected_count).into()),
        );
    }
    if input.installed_pending_reboot != 0 {
        object.key("InstalledPendingReboot").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.installed_pending_reboot).into()),
        );
    }
    if let Some(var_668) = &input.operation_start_time {
        object.key("OperationStartTime").string(var_668.as_str());
    }
    if let Some(var_669) = &input.operation_end_time {
        object.key("OperationEndTime").string(var_669.as_str());
    }
    if let Some(var_670) = &input.reboot_option {
        object.key("RebootOption").string(var_670.as_str());
    }
    if let Some(var_671) = &input.operation {
        object.key("Operation").string(var_671.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_action(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Action,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_672) = &input.action_type {
        object.key("ActionType").string(var_672.as_str());
    }
    if let Some(var_673) = &input.network_connection_action {
        let mut object_674 = object.key("NetworkConnectionAction").start_object();
        crate::json_ser::serialize_structure_crate_model_network_connection_action(
            &mut object_674,
            var_673,
        )?;
        object_674.finish();
    }
    if let Some(var_675) = &input.aws_api_call_action {
        let mut object_676 = object.key("AwsApiCallAction").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_api_call_action(
            &mut object_676,
            var_675,
        )?;
        object_676.finish();
    }
    if let Some(var_677) = &input.dns_request_action {
        let mut object_678 = object.key("DnsRequestAction").start_object();
        crate::json_ser::serialize_structure_crate_model_dns_request_action(
            &mut object_678,
            var_677,
        )?;
        object_678.finish();
    }
    if let Some(var_679) = &input.port_probe_action {
        let mut object_680 = object.key("PortProbeAction").start_object();
        crate::json_ser::serialize_structure_crate_model_port_probe_action(
            &mut object_680,
            var_679,
        )?;
        object_680.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_finding_provider_fields(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FindingProviderFields,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.confidence != 0 {
        object.key("Confidence").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.confidence).into()),
        );
    }
    if input.criticality != 0 {
        object.key("Criticality").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.criticality).into()),
        );
    }
    if let Some(var_681) = &input.related_findings {
        let mut array_682 = object.key("RelatedFindings").start_array();
        for item_683 in var_681 {
            {
                let mut object_684 = array_682.value().start_object();
                crate::json_ser::serialize_structure_crate_model_related_finding(
                    &mut object_684,
                    item_683,
                )?;
                object_684.finish();
            }
        }
        array_682.finish();
    }
    if let Some(var_685) = &input.severity {
        let mut object_686 = object.key("Severity").start_object();
        crate::json_ser::serialize_structure_crate_model_finding_provider_severity(
            &mut object_686,
            var_685,
        )?;
        object_686.finish();
    }
    if let Some(var_687) = &input.types {
        let mut array_688 = object.key("Types").start_array();
        for item_689 in var_687 {
            {
                array_688.value().string(item_689.as_str());
            }
        }
        array_688.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_string_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StringFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_690) = &input.value {
        object.key("Value").string(var_690.as_str());
    }
    if let Some(var_691) = &input.comparison {
        object.key("Comparison").string(var_691.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_date_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DateFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_692) = &input.start {
        object.key("Start").string(var_692.as_str());
    }
    if let Some(var_693) = &input.end {
        object.key("End").string(var_693.as_str());
    }
    if let Some(var_694) = &input.date_range {
        let mut object_695 = object.key("DateRange").start_object();
        crate::json_ser::serialize_structure_crate_model_date_range(&mut object_695, var_694)?;
        object_695.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_number_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::NumberFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.gte != 0.0 {
        object.key("Gte").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((input.gte).into()),
        );
    }
    if input.lte != 0.0 {
        object.key("Lte").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((input.lte).into()),
        );
    }
    if input.eq != 0.0 {
        object.key("Eq").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((input.eq).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_map_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MapFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_696) = &input.key {
        object.key("Key").string(var_696.as_str());
    }
    if let Some(var_697) = &input.value {
        object.key("Value").string(var_697.as_str());
    }
    if let Some(var_698) = &input.comparison {
        object.key("Comparison").string(var_698.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_ip_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::IpFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_699) = &input.cidr {
        object.key("Cidr").string(var_699.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_keyword_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::KeywordFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_700) = &input.value {
        object.key("Value").string(var_700.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_boolean_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BooleanFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.value {
        object.key("Value").boolean(input.value);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_recommendation(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Recommendation,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_701) = &input.text {
        object.key("Text").string(var_701.as_str());
    }
    if let Some(var_702) = &input.url {
        object.key("Url").string(var_702.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_port_range(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PortRange,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.begin != 0 {
        object.key("Begin").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.begin).into()),
        );
    }
    if input.end != 0 {
        object.key("End").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.end).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_network_header(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::NetworkHeader,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_703) = &input.protocol {
        object.key("Protocol").string(var_703.as_str());
    }
    if let Some(var_704) = &input.destination {
        let mut object_705 = object.key("Destination").start_object();
        crate::json_ser::serialize_structure_crate_model_network_path_component_details(
            &mut object_705,
            var_704,
        )?;
        object_705.finish();
    }
    if let Some(var_706) = &input.source {
        let mut object_707 = object.key("Source").start_object();
        crate::json_ser::serialize_structure_crate_model_network_path_component_details(
            &mut object_707,
            var_706,
        )?;
        object_707.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_data_classification_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataClassificationDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_708) = &input.detailed_results_location {
        object
            .key("DetailedResultsLocation")
            .string(var_708.as_str());
    }
    if let Some(var_709) = &input.result {
        let mut object_710 = object.key("Result").start_object();
        crate::json_ser::serialize_structure_crate_model_classification_result(
            &mut object_710,
            var_709,
        )?;
        object_710.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_resource_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ResourceDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_711) = &input.aws_auto_scaling_auto_scaling_group {
        let mut object_712 = object.key("AwsAutoScalingAutoScalingGroup").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_auto_scaling_auto_scaling_group_details(&mut object_712, var_711)?;
        object_712.finish();
    }
    if let Some(var_713) = &input.aws_code_build_project {
        let mut object_714 = object.key("AwsCodeBuildProject").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_code_build_project_details(
            &mut object_714,
            var_713,
        )?;
        object_714.finish();
    }
    if let Some(var_715) = &input.aws_cloud_front_distribution {
        let mut object_716 = object.key("AwsCloudFrontDistribution").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_cloud_front_distribution_details(
            &mut object_716,
            var_715,
        )?;
        object_716.finish();
    }
    if let Some(var_717) = &input.aws_ec2_instance {
        let mut object_718 = object.key("AwsEc2Instance").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_ec2_instance_details(
            &mut object_718,
            var_717,
        )?;
        object_718.finish();
    }
    if let Some(var_719) = &input.aws_ec2_network_interface {
        let mut object_720 = object.key("AwsEc2NetworkInterface").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_ec2_network_interface_details(
            &mut object_720,
            var_719,
        )?;
        object_720.finish();
    }
    if let Some(var_721) = &input.aws_ec2_security_group {
        let mut object_722 = object.key("AwsEc2SecurityGroup").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_ec2_security_group_details(
            &mut object_722,
            var_721,
        )?;
        object_722.finish();
    }
    if let Some(var_723) = &input.aws_ec2_volume {
        let mut object_724 = object.key("AwsEc2Volume").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_ec2_volume_details(
            &mut object_724,
            var_723,
        )?;
        object_724.finish();
    }
    if let Some(var_725) = &input.aws_ec2_vpc {
        let mut object_726 = object.key("AwsEc2Vpc").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_ec2_vpc_details(
            &mut object_726,
            var_725,
        )?;
        object_726.finish();
    }
    if let Some(var_727) = &input.aws_ec2_eip {
        let mut object_728 = object.key("AwsEc2Eip").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_ec2_eip_details(
            &mut object_728,
            var_727,
        )?;
        object_728.finish();
    }
    if let Some(var_729) = &input.aws_ec2_subnet {
        let mut object_730 = object.key("AwsEc2Subnet").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_ec2_subnet_details(
            &mut object_730,
            var_729,
        )?;
        object_730.finish();
    }
    if let Some(var_731) = &input.aws_ec2_network_acl {
        let mut object_732 = object.key("AwsEc2NetworkAcl").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_ec2_network_acl_details(
            &mut object_732,
            var_731,
        )?;
        object_732.finish();
    }
    if let Some(var_733) = &input.aws_elbv2_load_balancer {
        let mut object_734 = object.key("AwsElbv2LoadBalancer").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_elbv2_load_balancer_details(
            &mut object_734,
            var_733,
        )?;
        object_734.finish();
    }
    if let Some(var_735) = &input.aws_elastic_beanstalk_environment {
        let mut object_736 = object.key("AwsElasticBeanstalkEnvironment").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_elastic_beanstalk_environment_details(
            &mut object_736,
            var_735,
        )?;
        object_736.finish();
    }
    if let Some(var_737) = &input.aws_elasticsearch_domain {
        let mut object_738 = object.key("AwsElasticsearchDomain").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_elasticsearch_domain_details(
            &mut object_738,
            var_737,
        )?;
        object_738.finish();
    }
    if let Some(var_739) = &input.aws_s3_bucket {
        let mut object_740 = object.key("AwsS3Bucket").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_s3_bucket_details(
            &mut object_740,
            var_739,
        )?;
        object_740.finish();
    }
    if let Some(var_741) = &input.aws_s3_account_public_access_block {
        let mut object_742 = object.key("AwsS3AccountPublicAccessBlock").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_s3_account_public_access_block_details(&mut object_742, var_741)?;
        object_742.finish();
    }
    if let Some(var_743) = &input.aws_s3_object {
        let mut object_744 = object.key("AwsS3Object").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_s3_object_details(
            &mut object_744,
            var_743,
        )?;
        object_744.finish();
    }
    if let Some(var_745) = &input.aws_secrets_manager_secret {
        let mut object_746 = object.key("AwsSecretsManagerSecret").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_secrets_manager_secret_details(
            &mut object_746,
            var_745,
        )?;
        object_746.finish();
    }
    if let Some(var_747) = &input.aws_iam_access_key {
        let mut object_748 = object.key("AwsIamAccessKey").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_iam_access_key_details(
            &mut object_748,
            var_747,
        )?;
        object_748.finish();
    }
    if let Some(var_749) = &input.aws_iam_user {
        let mut object_750 = object.key("AwsIamUser").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_iam_user_details(
            &mut object_750,
            var_749,
        )?;
        object_750.finish();
    }
    if let Some(var_751) = &input.aws_iam_policy {
        let mut object_752 = object.key("AwsIamPolicy").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_iam_policy_details(
            &mut object_752,
            var_751,
        )?;
        object_752.finish();
    }
    if let Some(var_753) = &input.aws_api_gateway_v2_stage {
        let mut object_754 = object.key("AwsApiGatewayV2Stage").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_api_gateway_v2_stage_details(
            &mut object_754,
            var_753,
        )?;
        object_754.finish();
    }
    if let Some(var_755) = &input.aws_api_gateway_v2_api {
        let mut object_756 = object.key("AwsApiGatewayV2Api").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_api_gateway_v2_api_details(
            &mut object_756,
            var_755,
        )?;
        object_756.finish();
    }
    if let Some(var_757) = &input.aws_dynamo_db_table {
        let mut object_758 = object.key("AwsDynamoDbTable").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_dynamo_db_table_details(
            &mut object_758,
            var_757,
        )?;
        object_758.finish();
    }
    if let Some(var_759) = &input.aws_api_gateway_stage {
        let mut object_760 = object.key("AwsApiGatewayStage").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_api_gateway_stage_details(
            &mut object_760,
            var_759,
        )?;
        object_760.finish();
    }
    if let Some(var_761) = &input.aws_api_gateway_rest_api {
        let mut object_762 = object.key("AwsApiGatewayRestApi").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_api_gateway_rest_api_details(
            &mut object_762,
            var_761,
        )?;
        object_762.finish();
    }
    if let Some(var_763) = &input.aws_cloud_trail_trail {
        let mut object_764 = object.key("AwsCloudTrailTrail").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_cloud_trail_trail_details(
            &mut object_764,
            var_763,
        )?;
        object_764.finish();
    }
    if let Some(var_765) = &input.aws_ssm_patch_compliance {
        let mut object_766 = object.key("AwsSsmPatchCompliance").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_ssm_patch_compliance_details(
            &mut object_766,
            var_765,
        )?;
        object_766.finish();
    }
    if let Some(var_767) = &input.aws_certificate_manager_certificate {
        let mut object_768 = object
            .key("AwsCertificateManagerCertificate")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_aws_certificate_manager_certificate_details(&mut object_768, var_767)?;
        object_768.finish();
    }
    if let Some(var_769) = &input.aws_redshift_cluster {
        let mut object_770 = object.key("AwsRedshiftCluster").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_redshift_cluster_details(
            &mut object_770,
            var_769,
        )?;
        object_770.finish();
    }
    if let Some(var_771) = &input.aws_elb_load_balancer {
        let mut object_772 = object.key("AwsElbLoadBalancer").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_elb_load_balancer_details(
            &mut object_772,
            var_771,
        )?;
        object_772.finish();
    }
    if let Some(var_773) = &input.aws_iam_group {
        let mut object_774 = object.key("AwsIamGroup").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_iam_group_details(
            &mut object_774,
            var_773,
        )?;
        object_774.finish();
    }
    if let Some(var_775) = &input.aws_iam_role {
        let mut object_776 = object.key("AwsIamRole").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_iam_role_details(
            &mut object_776,
            var_775,
        )?;
        object_776.finish();
    }
    if let Some(var_777) = &input.aws_kms_key {
        let mut object_778 = object.key("AwsKmsKey").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_kms_key_details(
            &mut object_778,
            var_777,
        )?;
        object_778.finish();
    }
    if let Some(var_779) = &input.aws_lambda_function {
        let mut object_780 = object.key("AwsLambdaFunction").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_lambda_function_details(
            &mut object_780,
            var_779,
        )?;
        object_780.finish();
    }
    if let Some(var_781) = &input.aws_lambda_layer_version {
        let mut object_782 = object.key("AwsLambdaLayerVersion").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_lambda_layer_version_details(
            &mut object_782,
            var_781,
        )?;
        object_782.finish();
    }
    if let Some(var_783) = &input.aws_rds_db_instance {
        let mut object_784 = object.key("AwsRdsDbInstance").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_rds_db_instance_details(
            &mut object_784,
            var_783,
        )?;
        object_784.finish();
    }
    if let Some(var_785) = &input.aws_sns_topic {
        let mut object_786 = object.key("AwsSnsTopic").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_sns_topic_details(
            &mut object_786,
            var_785,
        )?;
        object_786.finish();
    }
    if let Some(var_787) = &input.aws_sqs_queue {
        let mut object_788 = object.key("AwsSqsQueue").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_sqs_queue_details(
            &mut object_788,
            var_787,
        )?;
        object_788.finish();
    }
    if let Some(var_789) = &input.aws_waf_web_acl {
        let mut object_790 = object.key("AwsWafWebAcl").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_waf_web_acl_details(
            &mut object_790,
            var_789,
        )?;
        object_790.finish();
    }
    if let Some(var_791) = &input.aws_rds_db_snapshot {
        let mut object_792 = object.key("AwsRdsDbSnapshot").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_rds_db_snapshot_details(
            &mut object_792,
            var_791,
        )?;
        object_792.finish();
    }
    if let Some(var_793) = &input.aws_rds_db_cluster_snapshot {
        let mut object_794 = object.key("AwsRdsDbClusterSnapshot").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_rds_db_cluster_snapshot_details(
            &mut object_794,
            var_793,
        )?;
        object_794.finish();
    }
    if let Some(var_795) = &input.aws_rds_db_cluster {
        let mut object_796 = object.key("AwsRdsDbCluster").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_rds_db_cluster_details(
            &mut object_796,
            var_795,
        )?;
        object_796.finish();
    }
    if let Some(var_797) = &input.aws_ecs_cluster {
        let mut object_798 = object.key("AwsEcsCluster").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_ecs_cluster_details(
            &mut object_798,
            var_797,
        )?;
        object_798.finish();
    }
    if let Some(var_799) = &input.aws_ecs_task_definition {
        let mut object_800 = object.key("AwsEcsTaskDefinition").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_ecs_task_definition_details(
            &mut object_800,
            var_799,
        )?;
        object_800.finish();
    }
    if let Some(var_801) = &input.container {
        let mut object_802 = object.key("Container").start_object();
        crate::json_ser::serialize_structure_crate_model_container_details(
            &mut object_802,
            var_801,
        )?;
        object_802.finish();
    }
    if let Some(var_803) = &input.other {
        let mut object_804 = object.key("Other").start_object();
        for (key_805, value_806) in var_803 {
            {
                object_804.key(key_805).string(value_806.as_str());
            }
        }
        object_804.finish();
    }
    if let Some(var_807) = &input.aws_rds_event_subscription {
        let mut object_808 = object.key("AwsRdsEventSubscription").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_rds_event_subscription_details(
            &mut object_808,
            var_807,
        )?;
        object_808.finish();
    }
    if let Some(var_809) = &input.aws_ecs_service {
        let mut object_810 = object.key("AwsEcsService").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_ecs_service_details(
            &mut object_810,
            var_809,
        )?;
        object_810.finish();
    }
    if let Some(var_811) = &input.aws_auto_scaling_launch_configuration {
        let mut object_812 = object
            .key("AwsAutoScalingLaunchConfiguration")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_aws_auto_scaling_launch_configuration_details(&mut object_812, var_811)?;
        object_812.finish();
    }
    if let Some(var_813) = &input.aws_ec2_vpn_connection {
        let mut object_814 = object.key("AwsEc2VpnConnection").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_ec2_vpn_connection_details(
            &mut object_814,
            var_813,
        )?;
        object_814.finish();
    }
    if let Some(var_815) = &input.aws_ecr_container_image {
        let mut object_816 = object.key("AwsEcrContainerImage").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_ecr_container_image_details(
            &mut object_816,
            var_815,
        )?;
        object_816.finish();
    }
    if let Some(var_817) = &input.aws_open_search_service_domain {
        let mut object_818 = object.key("AwsOpenSearchServiceDomain").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_open_search_service_domain_details(
            &mut object_818,
            var_817,
        )?;
        object_818.finish();
    }
    if let Some(var_819) = &input.aws_ec2_vpc_endpoint_service {
        let mut object_820 = object.key("AwsEc2VpcEndpointService").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_ec2_vpc_endpoint_service_details(
            &mut object_820,
            var_819,
        )?;
        object_820.finish();
    }
    if let Some(var_821) = &input.aws_xray_encryption_config {
        let mut object_822 = object.key("AwsXrayEncryptionConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_xray_encryption_config_details(
            &mut object_822,
            var_821,
        )?;
        object_822.finish();
    }
    if let Some(var_823) = &input.aws_waf_rate_based_rule {
        let mut object_824 = object.key("AwsWafRateBasedRule").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_waf_rate_based_rule_details(
            &mut object_824,
            var_823,
        )?;
        object_824.finish();
    }
    if let Some(var_825) = &input.aws_waf_regional_rate_based_rule {
        let mut object_826 = object.key("AwsWafRegionalRateBasedRule").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_waf_regional_rate_based_rule_details(
            &mut object_826,
            var_825,
        )?;
        object_826.finish();
    }
    if let Some(var_827) = &input.aws_ecr_repository {
        let mut object_828 = object.key("AwsEcrRepository").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_ecr_repository_details(
            &mut object_828,
            var_827,
        )?;
        object_828.finish();
    }
    if let Some(var_829) = &input.aws_eks_cluster {
        let mut object_830 = object.key("AwsEksCluster").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_eks_cluster_details(
            &mut object_830,
            var_829,
        )?;
        object_830.finish();
    }
    if let Some(var_831) = &input.aws_network_firewall_firewall_policy {
        let mut object_832 = object
            .key("AwsNetworkFirewallFirewallPolicy")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_aws_network_firewall_firewall_policy_details(&mut object_832, var_831)?;
        object_832.finish();
    }
    if let Some(var_833) = &input.aws_network_firewall_firewall {
        let mut object_834 = object.key("AwsNetworkFirewallFirewall").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_network_firewall_firewall_details(
            &mut object_834,
            var_833,
        )?;
        object_834.finish();
    }
    if let Some(var_835) = &input.aws_network_firewall_rule_group {
        let mut object_836 = object.key("AwsNetworkFirewallRuleGroup").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_network_firewall_rule_group_details(
            &mut object_836,
            var_835,
        )?;
        object_836.finish();
    }
    if let Some(var_837) = &input.aws_rds_db_security_group {
        let mut object_838 = object.key("AwsRdsDbSecurityGroup").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_rds_db_security_group_details(
            &mut object_838,
            var_837,
        )?;
        object_838.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_status_reason(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StatusReason,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_839) = &input.reason_code {
        object.key("ReasonCode").string(var_839.as_str());
    }
    if let Some(var_840) = &input.description {
        object.key("Description").string(var_840.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_software_package(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SoftwarePackage,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_841) = &input.name {
        object.key("Name").string(var_841.as_str());
    }
    if let Some(var_842) = &input.version {
        object.key("Version").string(var_842.as_str());
    }
    if let Some(var_843) = &input.epoch {
        object.key("Epoch").string(var_843.as_str());
    }
    if let Some(var_844) = &input.release {
        object.key("Release").string(var_844.as_str());
    }
    if let Some(var_845) = &input.architecture {
        object.key("Architecture").string(var_845.as_str());
    }
    if let Some(var_846) = &input.package_manager {
        object.key("PackageManager").string(var_846.as_str());
    }
    if let Some(var_847) = &input.file_path {
        object.key("FilePath").string(var_847.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_cvss(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Cvss,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_848) = &input.version {
        object.key("Version").string(var_848.as_str());
    }
    if input.base_score != 0.0 {
        object.key("BaseScore").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((input.base_score).into()),
        );
    }
    if let Some(var_849) = &input.base_vector {
        object.key("BaseVector").string(var_849.as_str());
    }
    if let Some(var_850) = &input.source {
        object.key("Source").string(var_850.as_str());
    }
    if let Some(var_851) = &input.adjustments {
        let mut array_852 = object.key("Adjustments").start_array();
        for item_853 in var_851 {
            {
                let mut object_854 = array_852.value().start_object();
                crate::json_ser::serialize_structure_crate_model_adjustment(
                    &mut object_854,
                    item_853,
                )?;
                object_854.finish();
            }
        }
        array_852.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_vulnerability_vendor(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VulnerabilityVendor,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_855) = &input.name {
        object.key("Name").string(var_855.as_str());
    }
    if let Some(var_856) = &input.url {
        object.key("Url").string(var_856.as_str());
    }
    if let Some(var_857) = &input.vendor_severity {
        object.key("VendorSeverity").string(var_857.as_str());
    }
    if let Some(var_858) = &input.vendor_created_at {
        object.key("VendorCreatedAt").string(var_858.as_str());
    }
    if let Some(var_859) = &input.vendor_updated_at {
        object.key("VendorUpdatedAt").string(var_859.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_network_connection_action(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::NetworkConnectionAction,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_860) = &input.connection_direction {
        object.key("ConnectionDirection").string(var_860.as_str());
    }
    if let Some(var_861) = &input.remote_ip_details {
        let mut object_862 = object.key("RemoteIpDetails").start_object();
        crate::json_ser::serialize_structure_crate_model_action_remote_ip_details(
            &mut object_862,
            var_861,
        )?;
        object_862.finish();
    }
    if let Some(var_863) = &input.remote_port_details {
        let mut object_864 = object.key("RemotePortDetails").start_object();
        crate::json_ser::serialize_structure_crate_model_action_remote_port_details(
            &mut object_864,
            var_863,
        )?;
        object_864.finish();
    }
    if let Some(var_865) = &input.local_port_details {
        let mut object_866 = object.key("LocalPortDetails").start_object();
        crate::json_ser::serialize_structure_crate_model_action_local_port_details(
            &mut object_866,
            var_865,
        )?;
        object_866.finish();
    }
    if let Some(var_867) = &input.protocol {
        object.key("Protocol").string(var_867.as_str());
    }
    if input.blocked {
        object.key("Blocked").boolean(input.blocked);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_api_call_action(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsApiCallAction,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_868) = &input.api {
        object.key("Api").string(var_868.as_str());
    }
    if let Some(var_869) = &input.service_name {
        object.key("ServiceName").string(var_869.as_str());
    }
    if let Some(var_870) = &input.caller_type {
        object.key("CallerType").string(var_870.as_str());
    }
    if let Some(var_871) = &input.remote_ip_details {
        let mut object_872 = object.key("RemoteIpDetails").start_object();
        crate::json_ser::serialize_structure_crate_model_action_remote_ip_details(
            &mut object_872,
            var_871,
        )?;
        object_872.finish();
    }
    if let Some(var_873) = &input.domain_details {
        let mut object_874 = object.key("DomainDetails").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_api_call_action_domain_details(
            &mut object_874,
            var_873,
        )?;
        object_874.finish();
    }
    if let Some(var_875) = &input.affected_resources {
        let mut object_876 = object.key("AffectedResources").start_object();
        for (key_877, value_878) in var_875 {
            {
                object_876.key(key_877).string(value_878.as_str());
            }
        }
        object_876.finish();
    }
    if let Some(var_879) = &input.first_seen {
        object.key("FirstSeen").string(var_879.as_str());
    }
    if let Some(var_880) = &input.last_seen {
        object.key("LastSeen").string(var_880.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_dns_request_action(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DnsRequestAction,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_881) = &input.domain {
        object.key("Domain").string(var_881.as_str());
    }
    if let Some(var_882) = &input.protocol {
        object.key("Protocol").string(var_882.as_str());
    }
    if input.blocked {
        object.key("Blocked").boolean(input.blocked);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_port_probe_action(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PortProbeAction,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_883) = &input.port_probe_details {
        let mut array_884 = object.key("PortProbeDetails").start_array();
        for item_885 in var_883 {
            {
                let mut object_886 = array_884.value().start_object();
                crate::json_ser::serialize_structure_crate_model_port_probe_detail(
                    &mut object_886,
                    item_885,
                )?;
                object_886.finish();
            }
        }
        array_884.finish();
    }
    if input.blocked {
        object.key("Blocked").boolean(input.blocked);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_finding_provider_severity(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FindingProviderSeverity,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_887) = &input.label {
        object.key("Label").string(var_887.as_str());
    }
    if let Some(var_888) = &input.original {
        object.key("Original").string(var_888.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_date_range(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DateRange,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.value != 0 {
        object.key("Value").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.value).into()),
        );
    }
    if let Some(var_889) = &input.unit {
        object.key("Unit").string(var_889.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_network_path_component_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::NetworkPathComponentDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_890) = &input.address {
        let mut array_891 = object.key("Address").start_array();
        for item_892 in var_890 {
            {
                array_891.value().string(item_892.as_str());
            }
        }
        array_891.finish();
    }
    if let Some(var_893) = &input.port_ranges {
        let mut array_894 = object.key("PortRanges").start_array();
        for item_895 in var_893 {
            {
                let mut object_896 = array_894.value().start_object();
                crate::json_ser::serialize_structure_crate_model_port_range(
                    &mut object_896,
                    item_895,
                )?;
                object_896.finish();
            }
        }
        array_894.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_classification_result(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ClassificationResult,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_897) = &input.mime_type {
        object.key("MimeType").string(var_897.as_str());
    }
    if input.size_classified != 0 {
        object.key("SizeClassified").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.size_classified).into()),
        );
    }
    if input.additional_occurrences {
        object
            .key("AdditionalOccurrences")
            .boolean(input.additional_occurrences);
    }
    if let Some(var_898) = &input.status {
        let mut object_899 = object.key("Status").start_object();
        crate::json_ser::serialize_structure_crate_model_classification_status(
            &mut object_899,
            var_898,
        )?;
        object_899.finish();
    }
    if let Some(var_900) = &input.sensitive_data {
        let mut array_901 = object.key("SensitiveData").start_array();
        for item_902 in var_900 {
            {
                let mut object_903 = array_901.value().start_object();
                crate::json_ser::serialize_structure_crate_model_sensitive_data_result(
                    &mut object_903,
                    item_902,
                )?;
                object_903.finish();
            }
        }
        array_901.finish();
    }
    if let Some(var_904) = &input.custom_data_identifiers {
        let mut object_905 = object.key("CustomDataIdentifiers").start_object();
        crate::json_ser::serialize_structure_crate_model_custom_data_identifiers_result(
            &mut object_905,
            var_904,
        )?;
        object_905.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_auto_scaling_auto_scaling_group_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsAutoScalingAutoScalingGroupDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_906) = &input.launch_configuration_name {
        object
            .key("LaunchConfigurationName")
            .string(var_906.as_str());
    }
    if let Some(var_907) = &input.load_balancer_names {
        let mut array_908 = object.key("LoadBalancerNames").start_array();
        for item_909 in var_907 {
            {
                array_908.value().string(item_909.as_str());
            }
        }
        array_908.finish();
    }
    if let Some(var_910) = &input.health_check_type {
        object.key("HealthCheckType").string(var_910.as_str());
    }
    if input.health_check_grace_period != 0 {
        object.key("HealthCheckGracePeriod").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.health_check_grace_period).into()),
        );
    }
    if let Some(var_911) = &input.created_time {
        object.key("CreatedTime").string(var_911.as_str());
    }
    if let Some(var_912) = &input.mixed_instances_policy {
        let mut object_913 = object.key("MixedInstancesPolicy").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_auto_scaling_auto_scaling_group_mixed_instances_policy_details(&mut object_913, var_912)?;
        object_913.finish();
    }
    if let Some(var_914) = &input.availability_zones {
        let mut array_915 = object.key("AvailabilityZones").start_array();
        for item_916 in var_914 {
            {
                let mut object_917 = array_915.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_auto_scaling_auto_scaling_group_availability_zones_list_details(&mut object_917, item_916)?;
                object_917.finish();
            }
        }
        array_915.finish();
    }
    if let Some(var_918) = &input.launch_template {
        let mut object_919 = object.key("LaunchTemplate").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_auto_scaling_auto_scaling_group_launch_template_launch_template_specification(&mut object_919, var_918)?;
        object_919.finish();
    }
    if input.capacity_rebalance {
        object
            .key("CapacityRebalance")
            .boolean(input.capacity_rebalance);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_code_build_project_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCodeBuildProjectDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_920) = &input.encryption_key {
        object.key("EncryptionKey").string(var_920.as_str());
    }
    if let Some(var_921) = &input.artifacts {
        let mut array_922 = object.key("Artifacts").start_array();
        for item_923 in var_921 {
            {
                let mut object_924 = array_922.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_code_build_project_artifacts_details(&mut object_924, item_923)?;
                object_924.finish();
            }
        }
        array_922.finish();
    }
    if let Some(var_925) = &input.environment {
        let mut object_926 = object.key("Environment").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_code_build_project_environment(
            &mut object_926,
            var_925,
        )?;
        object_926.finish();
    }
    if let Some(var_927) = &input.name {
        object.key("Name").string(var_927.as_str());
    }
    if let Some(var_928) = &input.source {
        let mut object_929 = object.key("Source").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_code_build_project_source(
            &mut object_929,
            var_928,
        )?;
        object_929.finish();
    }
    if let Some(var_930) = &input.service_role {
        object.key("ServiceRole").string(var_930.as_str());
    }
    if let Some(var_931) = &input.logs_config {
        let mut object_932 = object.key("LogsConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_code_build_project_logs_config_details(&mut object_932, var_931)?;
        object_932.finish();
    }
    if let Some(var_933) = &input.vpc_config {
        let mut object_934 = object.key("VpcConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_code_build_project_vpc_config(
            &mut object_934,
            var_933,
        )?;
        object_934.finish();
    }
    if let Some(var_935) = &input.secondary_artifacts {
        let mut array_936 = object.key("SecondaryArtifacts").start_array();
        for item_937 in var_935 {
            {
                let mut object_938 = array_936.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_code_build_project_artifacts_details(&mut object_938, item_937)?;
                object_938.finish();
            }
        }
        array_936.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_cloud_front_distribution_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCloudFrontDistributionDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_939) = &input.cache_behaviors {
        let mut object_940 = object.key("CacheBehaviors").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_cloud_front_distribution_cache_behaviors(&mut object_940, var_939)?;
        object_940.finish();
    }
    if let Some(var_941) = &input.default_cache_behavior {
        let mut object_942 = object.key("DefaultCacheBehavior").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_cloud_front_distribution_default_cache_behavior(&mut object_942, var_941)?;
        object_942.finish();
    }
    if let Some(var_943) = &input.default_root_object {
        object.key("DefaultRootObject").string(var_943.as_str());
    }
    if let Some(var_944) = &input.domain_name {
        object.key("DomainName").string(var_944.as_str());
    }
    if let Some(var_945) = &input.e_tag {
        object.key("ETag").string(var_945.as_str());
    }
    if let Some(var_946) = &input.last_modified_time {
        object.key("LastModifiedTime").string(var_946.as_str());
    }
    if let Some(var_947) = &input.logging {
        let mut object_948 = object.key("Logging").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_cloud_front_distribution_logging(
            &mut object_948,
            var_947,
        )?;
        object_948.finish();
    }
    if let Some(var_949) = &input.origins {
        let mut object_950 = object.key("Origins").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_cloud_front_distribution_origins(
            &mut object_950,
            var_949,
        )?;
        object_950.finish();
    }
    if let Some(var_951) = &input.origin_groups {
        let mut object_952 = object.key("OriginGroups").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_cloud_front_distribution_origin_groups(&mut object_952, var_951)?;
        object_952.finish();
    }
    if let Some(var_953) = &input.viewer_certificate {
        let mut object_954 = object.key("ViewerCertificate").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_cloud_front_distribution_viewer_certificate(&mut object_954, var_953)?;
        object_954.finish();
    }
    if let Some(var_955) = &input.status {
        object.key("Status").string(var_955.as_str());
    }
    if let Some(var_956) = &input.web_acl_id {
        object.key("WebAclId").string(var_956.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ec2_instance_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEc2InstanceDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_957) = &input.r#type {
        object.key("Type").string(var_957.as_str());
    }
    if let Some(var_958) = &input.image_id {
        object.key("ImageId").string(var_958.as_str());
    }
    if let Some(var_959) = &input.ip_v4_addresses {
        let mut array_960 = object.key("IpV4Addresses").start_array();
        for item_961 in var_959 {
            {
                array_960.value().string(item_961.as_str());
            }
        }
        array_960.finish();
    }
    if let Some(var_962) = &input.ip_v6_addresses {
        let mut array_963 = object.key("IpV6Addresses").start_array();
        for item_964 in var_962 {
            {
                array_963.value().string(item_964.as_str());
            }
        }
        array_963.finish();
    }
    if let Some(var_965) = &input.key_name {
        object.key("KeyName").string(var_965.as_str());
    }
    if let Some(var_966) = &input.iam_instance_profile_arn {
        object.key("IamInstanceProfileArn").string(var_966.as_str());
    }
    if let Some(var_967) = &input.vpc_id {
        object.key("VpcId").string(var_967.as_str());
    }
    if let Some(var_968) = &input.subnet_id {
        object.key("SubnetId").string(var_968.as_str());
    }
    if let Some(var_969) = &input.launched_at {
        object.key("LaunchedAt").string(var_969.as_str());
    }
    if let Some(var_970) = &input.network_interfaces {
        let mut array_971 = object.key("NetworkInterfaces").start_array();
        for item_972 in var_970 {
            {
                let mut object_973 = array_971.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_ec2_instance_network_interfaces_details(&mut object_973, item_972)?;
                object_973.finish();
            }
        }
        array_971.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ec2_network_interface_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEc2NetworkInterfaceDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_974) = &input.attachment {
        let mut object_975 = object.key("Attachment").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_ec2_network_interface_attachment(
            &mut object_975,
            var_974,
        )?;
        object_975.finish();
    }
    if let Some(var_976) = &input.network_interface_id {
        object.key("NetworkInterfaceId").string(var_976.as_str());
    }
    if let Some(var_977) = &input.security_groups {
        let mut array_978 = object.key("SecurityGroups").start_array();
        for item_979 in var_977 {
            {
                let mut object_980 = array_978.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_ec2_network_interface_security_group(&mut object_980, item_979)?;
                object_980.finish();
            }
        }
        array_978.finish();
    }
    if input.source_dest_check {
        object
            .key("SourceDestCheck")
            .boolean(input.source_dest_check);
    }
    if let Some(var_981) = &input.ip_v6_addresses {
        let mut array_982 = object.key("IpV6Addresses").start_array();
        for item_983 in var_981 {
            {
                let mut object_984 = array_982.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_ec2_network_interface_ip_v6_address_detail(&mut object_984, item_983)?;
                object_984.finish();
            }
        }
        array_982.finish();
    }
    if let Some(var_985) = &input.private_ip_addresses {
        let mut array_986 = object.key("PrivateIpAddresses").start_array();
        for item_987 in var_985 {
            {
                let mut object_988 = array_986.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_ec2_network_interface_private_ip_address_detail(&mut object_988, item_987)?;
                object_988.finish();
            }
        }
        array_986.finish();
    }
    if let Some(var_989) = &input.public_dns_name {
        object.key("PublicDnsName").string(var_989.as_str());
    }
    if let Some(var_990) = &input.public_ip {
        object.key("PublicIp").string(var_990.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ec2_security_group_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEc2SecurityGroupDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_991) = &input.group_name {
        object.key("GroupName").string(var_991.as_str());
    }
    if let Some(var_992) = &input.group_id {
        object.key("GroupId").string(var_992.as_str());
    }
    if let Some(var_993) = &input.owner_id {
        object.key("OwnerId").string(var_993.as_str());
    }
    if let Some(var_994) = &input.vpc_id {
        object.key("VpcId").string(var_994.as_str());
    }
    if let Some(var_995) = &input.ip_permissions {
        let mut array_996 = object.key("IpPermissions").start_array();
        for item_997 in var_995 {
            {
                let mut object_998 = array_996.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_ec2_security_group_ip_permission(&mut object_998, item_997)?;
                object_998.finish();
            }
        }
        array_996.finish();
    }
    if let Some(var_999) = &input.ip_permissions_egress {
        let mut array_1000 = object.key("IpPermissionsEgress").start_array();
        for item_1001 in var_999 {
            {
                let mut object_1002 = array_1000.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_ec2_security_group_ip_permission(&mut object_1002, item_1001)?;
                object_1002.finish();
            }
        }
        array_1000.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ec2_volume_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEc2VolumeDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1003) = &input.create_time {
        object.key("CreateTime").string(var_1003.as_str());
    }
    if input.encrypted {
        object.key("Encrypted").boolean(input.encrypted);
    }
    if input.size != 0 {
        object.key("Size").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.size).into()),
        );
    }
    if let Some(var_1004) = &input.snapshot_id {
        object.key("SnapshotId").string(var_1004.as_str());
    }
    if let Some(var_1005) = &input.status {
        object.key("Status").string(var_1005.as_str());
    }
    if let Some(var_1006) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1006.as_str());
    }
    if let Some(var_1007) = &input.attachments {
        let mut array_1008 = object.key("Attachments").start_array();
        for item_1009 in var_1007 {
            {
                let mut object_1010 = array_1008.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_ec2_volume_attachment(
                    &mut object_1010,
                    item_1009,
                )?;
                object_1010.finish();
            }
        }
        array_1008.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ec2_vpc_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEc2VpcDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1011) = &input.cidr_block_association_set {
        let mut array_1012 = object.key("CidrBlockAssociationSet").start_array();
        for item_1013 in var_1011 {
            {
                let mut object_1014 = array_1012.value().start_object();
                crate::json_ser::serialize_structure_crate_model_cidr_block_association(
                    &mut object_1014,
                    item_1013,
                )?;
                object_1014.finish();
            }
        }
        array_1012.finish();
    }
    if let Some(var_1015) = &input.ipv6_cidr_block_association_set {
        let mut array_1016 = object.key("Ipv6CidrBlockAssociationSet").start_array();
        for item_1017 in var_1015 {
            {
                let mut object_1018 = array_1016.value().start_object();
                crate::json_ser::serialize_structure_crate_model_ipv6_cidr_block_association(
                    &mut object_1018,
                    item_1017,
                )?;
                object_1018.finish();
            }
        }
        array_1016.finish();
    }
    if let Some(var_1019) = &input.dhcp_options_id {
        object.key("DhcpOptionsId").string(var_1019.as_str());
    }
    if let Some(var_1020) = &input.state {
        object.key("State").string(var_1020.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ec2_eip_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEc2EipDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1021) = &input.instance_id {
        object.key("InstanceId").string(var_1021.as_str());
    }
    if let Some(var_1022) = &input.public_ip {
        object.key("PublicIp").string(var_1022.as_str());
    }
    if let Some(var_1023) = &input.allocation_id {
        object.key("AllocationId").string(var_1023.as_str());
    }
    if let Some(var_1024) = &input.association_id {
        object.key("AssociationId").string(var_1024.as_str());
    }
    if let Some(var_1025) = &input.domain {
        object.key("Domain").string(var_1025.as_str());
    }
    if let Some(var_1026) = &input.public_ipv4_pool {
        object.key("PublicIpv4Pool").string(var_1026.as_str());
    }
    if let Some(var_1027) = &input.network_border_group {
        object.key("NetworkBorderGroup").string(var_1027.as_str());
    }
    if let Some(var_1028) = &input.network_interface_id {
        object.key("NetworkInterfaceId").string(var_1028.as_str());
    }
    if let Some(var_1029) = &input.network_interface_owner_id {
        object
            .key("NetworkInterfaceOwnerId")
            .string(var_1029.as_str());
    }
    if let Some(var_1030) = &input.private_ip_address {
        object.key("PrivateIpAddress").string(var_1030.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ec2_subnet_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEc2SubnetDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.assign_ipv6_address_on_creation {
        object
            .key("AssignIpv6AddressOnCreation")
            .boolean(input.assign_ipv6_address_on_creation);
    }
    if let Some(var_1031) = &input.availability_zone {
        object.key("AvailabilityZone").string(var_1031.as_str());
    }
    if let Some(var_1032) = &input.availability_zone_id {
        object.key("AvailabilityZoneId").string(var_1032.as_str());
    }
    if input.available_ip_address_count != 0 {
        object.key("AvailableIpAddressCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.available_ip_address_count).into()),
        );
    }
    if let Some(var_1033) = &input.cidr_block {
        object.key("CidrBlock").string(var_1033.as_str());
    }
    if input.default_for_az {
        object.key("DefaultForAz").boolean(input.default_for_az);
    }
    if input.map_public_ip_on_launch {
        object
            .key("MapPublicIpOnLaunch")
            .boolean(input.map_public_ip_on_launch);
    }
    if let Some(var_1034) = &input.owner_id {
        object.key("OwnerId").string(var_1034.as_str());
    }
    if let Some(var_1035) = &input.state {
        object.key("State").string(var_1035.as_str());
    }
    if let Some(var_1036) = &input.subnet_arn {
        object.key("SubnetArn").string(var_1036.as_str());
    }
    if let Some(var_1037) = &input.subnet_id {
        object.key("SubnetId").string(var_1037.as_str());
    }
    if let Some(var_1038) = &input.vpc_id {
        object.key("VpcId").string(var_1038.as_str());
    }
    if let Some(var_1039) = &input.ipv6_cidr_block_association_set {
        let mut array_1040 = object.key("Ipv6CidrBlockAssociationSet").start_array();
        for item_1041 in var_1039 {
            {
                let mut object_1042 = array_1040.value().start_object();
                crate::json_ser::serialize_structure_crate_model_ipv6_cidr_block_association(
                    &mut object_1042,
                    item_1041,
                )?;
                object_1042.finish();
            }
        }
        array_1040.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ec2_network_acl_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEc2NetworkAclDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.is_default {
        object.key("IsDefault").boolean(input.is_default);
    }
    if let Some(var_1043) = &input.network_acl_id {
        object.key("NetworkAclId").string(var_1043.as_str());
    }
    if let Some(var_1044) = &input.owner_id {
        object.key("OwnerId").string(var_1044.as_str());
    }
    if let Some(var_1045) = &input.vpc_id {
        object.key("VpcId").string(var_1045.as_str());
    }
    if let Some(var_1046) = &input.associations {
        let mut array_1047 = object.key("Associations").start_array();
        for item_1048 in var_1046 {
            {
                let mut object_1049 = array_1047.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_ec2_network_acl_association(
                    &mut object_1049,
                    item_1048,
                )?;
                object_1049.finish();
            }
        }
        array_1047.finish();
    }
    if let Some(var_1050) = &input.entries {
        let mut array_1051 = object.key("Entries").start_array();
        for item_1052 in var_1050 {
            {
                let mut object_1053 = array_1051.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_ec2_network_acl_entry(
                    &mut object_1053,
                    item_1052,
                )?;
                object_1053.finish();
            }
        }
        array_1051.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_elbv2_load_balancer_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElbv2LoadBalancerDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1054) = &input.availability_zones {
        let mut array_1055 = object.key("AvailabilityZones").start_array();
        for item_1056 in var_1054 {
            {
                let mut object_1057 = array_1055.value().start_object();
                crate::json_ser::serialize_structure_crate_model_availability_zone(
                    &mut object_1057,
                    item_1056,
                )?;
                object_1057.finish();
            }
        }
        array_1055.finish();
    }
    if let Some(var_1058) = &input.canonical_hosted_zone_id {
        object
            .key("CanonicalHostedZoneId")
            .string(var_1058.as_str());
    }
    if let Some(var_1059) = &input.created_time {
        object.key("CreatedTime").string(var_1059.as_str());
    }
    if let Some(var_1060) = &input.dns_name {
        object.key("DNSName").string(var_1060.as_str());
    }
    if let Some(var_1061) = &input.ip_address_type {
        object.key("IpAddressType").string(var_1061.as_str());
    }
    if let Some(var_1062) = &input.scheme {
        object.key("Scheme").string(var_1062.as_str());
    }
    if let Some(var_1063) = &input.security_groups {
        let mut array_1064 = object.key("SecurityGroups").start_array();
        for item_1065 in var_1063 {
            {
                array_1064.value().string(item_1065.as_str());
            }
        }
        array_1064.finish();
    }
    if let Some(var_1066) = &input.state {
        let mut object_1067 = object.key("State").start_object();
        crate::json_ser::serialize_structure_crate_model_load_balancer_state(
            &mut object_1067,
            var_1066,
        )?;
        object_1067.finish();
    }
    if let Some(var_1068) = &input.r#type {
        object.key("Type").string(var_1068.as_str());
    }
    if let Some(var_1069) = &input.vpc_id {
        object.key("VpcId").string(var_1069.as_str());
    }
    if let Some(var_1070) = &input.load_balancer_attributes {
        let mut array_1071 = object.key("LoadBalancerAttributes").start_array();
        for item_1072 in var_1070 {
            {
                let mut object_1073 = array_1071.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_elbv2_load_balancer_attribute(
                    &mut object_1073,
                    item_1072,
                )?;
                object_1073.finish();
            }
        }
        array_1071.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_elastic_beanstalk_environment_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElasticBeanstalkEnvironmentDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1074) = &input.application_name {
        object.key("ApplicationName").string(var_1074.as_str());
    }
    if let Some(var_1075) = &input.cname {
        object.key("Cname").string(var_1075.as_str());
    }
    if let Some(var_1076) = &input.date_created {
        object.key("DateCreated").string(var_1076.as_str());
    }
    if let Some(var_1077) = &input.date_updated {
        object.key("DateUpdated").string(var_1077.as_str());
    }
    if let Some(var_1078) = &input.description {
        object.key("Description").string(var_1078.as_str());
    }
    if let Some(var_1079) = &input.endpoint_url {
        object.key("EndpointUrl").string(var_1079.as_str());
    }
    if let Some(var_1080) = &input.environment_arn {
        object.key("EnvironmentArn").string(var_1080.as_str());
    }
    if let Some(var_1081) = &input.environment_id {
        object.key("EnvironmentId").string(var_1081.as_str());
    }
    if let Some(var_1082) = &input.environment_links {
        let mut array_1083 = object.key("EnvironmentLinks").start_array();
        for item_1084 in var_1082 {
            {
                let mut object_1085 = array_1083.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_elastic_beanstalk_environment_environment_link(&mut object_1085, item_1084)?;
                object_1085.finish();
            }
        }
        array_1083.finish();
    }
    if let Some(var_1086) = &input.environment_name {
        object.key("EnvironmentName").string(var_1086.as_str());
    }
    if let Some(var_1087) = &input.option_settings {
        let mut array_1088 = object.key("OptionSettings").start_array();
        for item_1089 in var_1087 {
            {
                let mut object_1090 = array_1088.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_elastic_beanstalk_environment_option_setting(&mut object_1090, item_1089)?;
                object_1090.finish();
            }
        }
        array_1088.finish();
    }
    if let Some(var_1091) = &input.platform_arn {
        object.key("PlatformArn").string(var_1091.as_str());
    }
    if let Some(var_1092) = &input.solution_stack_name {
        object.key("SolutionStackName").string(var_1092.as_str());
    }
    if let Some(var_1093) = &input.status {
        object.key("Status").string(var_1093.as_str());
    }
    if let Some(var_1094) = &input.tier {
        let mut object_1095 = object.key("Tier").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_elastic_beanstalk_environment_tier(
            &mut object_1095,
            var_1094,
        )?;
        object_1095.finish();
    }
    if let Some(var_1096) = &input.version_label {
        object.key("VersionLabel").string(var_1096.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_elasticsearch_domain_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElasticsearchDomainDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1097) = &input.access_policies {
        object.key("AccessPolicies").string(var_1097.as_str());
    }
    if let Some(var_1098) = &input.domain_endpoint_options {
        let mut object_1099 = object.key("DomainEndpointOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_elasticsearch_domain_domain_endpoint_options(&mut object_1099, var_1098)?;
        object_1099.finish();
    }
    if let Some(var_1100) = &input.domain_id {
        object.key("DomainId").string(var_1100.as_str());
    }
    if let Some(var_1101) = &input.domain_name {
        object.key("DomainName").string(var_1101.as_str());
    }
    if let Some(var_1102) = &input.endpoint {
        object.key("Endpoint").string(var_1102.as_str());
    }
    if let Some(var_1103) = &input.endpoints {
        let mut object_1104 = object.key("Endpoints").start_object();
        for (key_1105, value_1106) in var_1103 {
            {
                object_1104.key(key_1105).string(value_1106.as_str());
            }
        }
        object_1104.finish();
    }
    if let Some(var_1107) = &input.elasticsearch_version {
        object.key("ElasticsearchVersion").string(var_1107.as_str());
    }
    if let Some(var_1108) = &input.elasticsearch_cluster_config {
        let mut object_1109 = object.key("ElasticsearchClusterConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_elasticsearch_domain_elasticsearch_cluster_config_details(&mut object_1109, var_1108)?;
        object_1109.finish();
    }
    if let Some(var_1110) = &input.encryption_at_rest_options {
        let mut object_1111 = object.key("EncryptionAtRestOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_elasticsearch_domain_encryption_at_rest_options(&mut object_1111, var_1110)?;
        object_1111.finish();
    }
    if let Some(var_1112) = &input.log_publishing_options {
        let mut object_1113 = object.key("LogPublishingOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_elasticsearch_domain_log_publishing_options(&mut object_1113, var_1112)?;
        object_1113.finish();
    }
    if let Some(var_1114) = &input.node_to_node_encryption_options {
        let mut object_1115 = object.key("NodeToNodeEncryptionOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_elasticsearch_domain_node_to_node_encryption_options(&mut object_1115, var_1114)?;
        object_1115.finish();
    }
    if let Some(var_1116) = &input.service_software_options {
        let mut object_1117 = object.key("ServiceSoftwareOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_elasticsearch_domain_service_software_options(&mut object_1117, var_1116)?;
        object_1117.finish();
    }
    if let Some(var_1118) = &input.vpc_options {
        let mut object_1119 = object.key("VPCOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_elasticsearch_domain_vpc_options(
            &mut object_1119,
            var_1118,
        )?;
        object_1119.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_s3_bucket_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsS3BucketDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1120) = &input.owner_id {
        object.key("OwnerId").string(var_1120.as_str());
    }
    if let Some(var_1121) = &input.owner_name {
        object.key("OwnerName").string(var_1121.as_str());
    }
    if let Some(var_1122) = &input.owner_account_id {
        object.key("OwnerAccountId").string(var_1122.as_str());
    }
    if let Some(var_1123) = &input.created_at {
        object.key("CreatedAt").string(var_1123.as_str());
    }
    if let Some(var_1124) = &input.server_side_encryption_configuration {
        let mut object_1125 = object
            .key("ServerSideEncryptionConfiguration")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_aws_s3_bucket_server_side_encryption_configuration(&mut object_1125, var_1124)?;
        object_1125.finish();
    }
    if let Some(var_1126) = &input.bucket_lifecycle_configuration {
        let mut object_1127 = object.key("BucketLifecycleConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_s3_bucket_bucket_lifecycle_configuration_details(&mut object_1127, var_1126)?;
        object_1127.finish();
    }
    if let Some(var_1128) = &input.public_access_block_configuration {
        let mut object_1129 = object.key("PublicAccessBlockConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_s3_account_public_access_block_details(&mut object_1129, var_1128)?;
        object_1129.finish();
    }
    if let Some(var_1130) = &input.access_control_list {
        object.key("AccessControlList").string(var_1130.as_str());
    }
    if let Some(var_1131) = &input.bucket_logging_configuration {
        let mut object_1132 = object.key("BucketLoggingConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_s3_bucket_logging_configuration(
            &mut object_1132,
            var_1131,
        )?;
        object_1132.finish();
    }
    if let Some(var_1133) = &input.bucket_website_configuration {
        let mut object_1134 = object.key("BucketWebsiteConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_s3_bucket_website_configuration(
            &mut object_1134,
            var_1133,
        )?;
        object_1134.finish();
    }
    if let Some(var_1135) = &input.bucket_notification_configuration {
        let mut object_1136 = object.key("BucketNotificationConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_s3_bucket_notification_configuration(
            &mut object_1136,
            var_1135,
        )?;
        object_1136.finish();
    }
    if let Some(var_1137) = &input.bucket_versioning_configuration {
        let mut object_1138 = object.key("BucketVersioningConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_s3_bucket_bucket_versioning_configuration(&mut object_1138, var_1137)?;
        object_1138.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_s3_account_public_access_block_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsS3AccountPublicAccessBlockDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.block_public_acls {
        object
            .key("BlockPublicAcls")
            .boolean(input.block_public_acls);
    }
    if input.block_public_policy {
        object
            .key("BlockPublicPolicy")
            .boolean(input.block_public_policy);
    }
    if input.ignore_public_acls {
        object
            .key("IgnorePublicAcls")
            .boolean(input.ignore_public_acls);
    }
    if input.restrict_public_buckets {
        object
            .key("RestrictPublicBuckets")
            .boolean(input.restrict_public_buckets);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_s3_object_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsS3ObjectDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1139) = &input.last_modified {
        object.key("LastModified").string(var_1139.as_str());
    }
    if let Some(var_1140) = &input.e_tag {
        object.key("ETag").string(var_1140.as_str());
    }
    if let Some(var_1141) = &input.version_id {
        object.key("VersionId").string(var_1141.as_str());
    }
    if let Some(var_1142) = &input.content_type {
        object.key("ContentType").string(var_1142.as_str());
    }
    if let Some(var_1143) = &input.server_side_encryption {
        object.key("ServerSideEncryption").string(var_1143.as_str());
    }
    if let Some(var_1144) = &input.ssekms_key_id {
        object.key("SSEKMSKeyId").string(var_1144.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_secrets_manager_secret_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsSecretsManagerSecretDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1145) = &input.rotation_rules {
        let mut object_1146 = object.key("RotationRules").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_secrets_manager_secret_rotation_rules(
            &mut object_1146,
            var_1145,
        )?;
        object_1146.finish();
    }
    if input.rotation_occurred_within_frequency {
        object
            .key("RotationOccurredWithinFrequency")
            .boolean(input.rotation_occurred_within_frequency);
    }
    if let Some(var_1147) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1147.as_str());
    }
    if input.rotation_enabled {
        object
            .key("RotationEnabled")
            .boolean(input.rotation_enabled);
    }
    if let Some(var_1148) = &input.rotation_lambda_arn {
        object.key("RotationLambdaArn").string(var_1148.as_str());
    }
    if input.deleted {
        object.key("Deleted").boolean(input.deleted);
    }
    if let Some(var_1149) = &input.name {
        object.key("Name").string(var_1149.as_str());
    }
    if let Some(var_1150) = &input.description {
        object.key("Description").string(var_1150.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_iam_access_key_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsIamAccessKeyDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1151) = &input.user_name {
        object.key("UserName").string(var_1151.as_str());
    }
    if let Some(var_1152) = &input.status {
        object.key("Status").string(var_1152.as_str());
    }
    if let Some(var_1153) = &input.created_at {
        object.key("CreatedAt").string(var_1153.as_str());
    }
    if let Some(var_1154) = &input.principal_id {
        object.key("PrincipalId").string(var_1154.as_str());
    }
    if let Some(var_1155) = &input.principal_type {
        object.key("PrincipalType").string(var_1155.as_str());
    }
    if let Some(var_1156) = &input.principal_name {
        object.key("PrincipalName").string(var_1156.as_str());
    }
    if let Some(var_1157) = &input.account_id {
        object.key("AccountId").string(var_1157.as_str());
    }
    if let Some(var_1158) = &input.access_key_id {
        object.key("AccessKeyId").string(var_1158.as_str());
    }
    if let Some(var_1159) = &input.session_context {
        let mut object_1160 = object.key("SessionContext").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_iam_access_key_session_context(
            &mut object_1160,
            var_1159,
        )?;
        object_1160.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_iam_user_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsIamUserDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1161) = &input.attached_managed_policies {
        let mut array_1162 = object.key("AttachedManagedPolicies").start_array();
        for item_1163 in var_1161 {
            {
                let mut object_1164 = array_1162.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_iam_attached_managed_policy(
                    &mut object_1164,
                    item_1163,
                )?;
                object_1164.finish();
            }
        }
        array_1162.finish();
    }
    if let Some(var_1165) = &input.create_date {
        object.key("CreateDate").string(var_1165.as_str());
    }
    if let Some(var_1166) = &input.group_list {
        let mut array_1167 = object.key("GroupList").start_array();
        for item_1168 in var_1166 {
            {
                array_1167.value().string(item_1168.as_str());
            }
        }
        array_1167.finish();
    }
    if let Some(var_1169) = &input.path {
        object.key("Path").string(var_1169.as_str());
    }
    if let Some(var_1170) = &input.permissions_boundary {
        let mut object_1171 = object.key("PermissionsBoundary").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_iam_permissions_boundary(
            &mut object_1171,
            var_1170,
        )?;
        object_1171.finish();
    }
    if let Some(var_1172) = &input.user_id {
        object.key("UserId").string(var_1172.as_str());
    }
    if let Some(var_1173) = &input.user_name {
        object.key("UserName").string(var_1173.as_str());
    }
    if let Some(var_1174) = &input.user_policy_list {
        let mut array_1175 = object.key("UserPolicyList").start_array();
        for item_1176 in var_1174 {
            {
                let mut object_1177 = array_1175.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_iam_user_policy(
                    &mut object_1177,
                    item_1176,
                )?;
                object_1177.finish();
            }
        }
        array_1175.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_iam_policy_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsIamPolicyDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.attachment_count != 0 {
        object.key("AttachmentCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.attachment_count).into()),
        );
    }
    if let Some(var_1178) = &input.create_date {
        object.key("CreateDate").string(var_1178.as_str());
    }
    if let Some(var_1179) = &input.default_version_id {
        object.key("DefaultVersionId").string(var_1179.as_str());
    }
    if let Some(var_1180) = &input.description {
        object.key("Description").string(var_1180.as_str());
    }
    if input.is_attachable {
        object.key("IsAttachable").boolean(input.is_attachable);
    }
    if let Some(var_1181) = &input.path {
        object.key("Path").string(var_1181.as_str());
    }
    if input.permissions_boundary_usage_count != 0 {
        object.key("PermissionsBoundaryUsageCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.permissions_boundary_usage_count).into()),
        );
    }
    if let Some(var_1182) = &input.policy_id {
        object.key("PolicyId").string(var_1182.as_str());
    }
    if let Some(var_1183) = &input.policy_name {
        object.key("PolicyName").string(var_1183.as_str());
    }
    if let Some(var_1184) = &input.policy_version_list {
        let mut array_1185 = object.key("PolicyVersionList").start_array();
        for item_1186 in var_1184 {
            {
                let mut object_1187 = array_1185.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_iam_policy_version(
                    &mut object_1187,
                    item_1186,
                )?;
                object_1187.finish();
            }
        }
        array_1185.finish();
    }
    if let Some(var_1188) = &input.update_date {
        object.key("UpdateDate").string(var_1188.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_api_gateway_v2_stage_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsApiGatewayV2StageDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1189) = &input.client_certificate_id {
        object.key("ClientCertificateId").string(var_1189.as_str());
    }
    if let Some(var_1190) = &input.created_date {
        object.key("CreatedDate").string(var_1190.as_str());
    }
    if let Some(var_1191) = &input.description {
        object.key("Description").string(var_1191.as_str());
    }
    if let Some(var_1192) = &input.default_route_settings {
        let mut object_1193 = object.key("DefaultRouteSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_api_gateway_v2_route_settings(
            &mut object_1193,
            var_1192,
        )?;
        object_1193.finish();
    }
    if let Some(var_1194) = &input.deployment_id {
        object.key("DeploymentId").string(var_1194.as_str());
    }
    if let Some(var_1195) = &input.last_updated_date {
        object.key("LastUpdatedDate").string(var_1195.as_str());
    }
    if let Some(var_1196) = &input.route_settings {
        let mut object_1197 = object.key("RouteSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_api_gateway_v2_route_settings(
            &mut object_1197,
            var_1196,
        )?;
        object_1197.finish();
    }
    if let Some(var_1198) = &input.stage_name {
        object.key("StageName").string(var_1198.as_str());
    }
    if let Some(var_1199) = &input.stage_variables {
        let mut object_1200 = object.key("StageVariables").start_object();
        for (key_1201, value_1202) in var_1199 {
            {
                object_1200.key(key_1201).string(value_1202.as_str());
            }
        }
        object_1200.finish();
    }
    if let Some(var_1203) = &input.access_log_settings {
        let mut object_1204 = object.key("AccessLogSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_api_gateway_access_log_settings(
            &mut object_1204,
            var_1203,
        )?;
        object_1204.finish();
    }
    if input.auto_deploy {
        object.key("AutoDeploy").boolean(input.auto_deploy);
    }
    if let Some(var_1205) = &input.last_deployment_status_message {
        object
            .key("LastDeploymentStatusMessage")
            .string(var_1205.as_str());
    }
    if input.api_gateway_managed {
        object
            .key("ApiGatewayManaged")
            .boolean(input.api_gateway_managed);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_api_gateway_v2_api_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsApiGatewayV2ApiDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1206) = &input.api_endpoint {
        object.key("ApiEndpoint").string(var_1206.as_str());
    }
    if let Some(var_1207) = &input.api_id {
        object.key("ApiId").string(var_1207.as_str());
    }
    if let Some(var_1208) = &input.api_key_selection_expression {
        object
            .key("ApiKeySelectionExpression")
            .string(var_1208.as_str());
    }
    if let Some(var_1209) = &input.created_date {
        object.key("CreatedDate").string(var_1209.as_str());
    }
    if let Some(var_1210) = &input.description {
        object.key("Description").string(var_1210.as_str());
    }
    if let Some(var_1211) = &input.version {
        object.key("Version").string(var_1211.as_str());
    }
    if let Some(var_1212) = &input.name {
        object.key("Name").string(var_1212.as_str());
    }
    if let Some(var_1213) = &input.protocol_type {
        object.key("ProtocolType").string(var_1213.as_str());
    }
    if let Some(var_1214) = &input.route_selection_expression {
        object
            .key("RouteSelectionExpression")
            .string(var_1214.as_str());
    }
    if let Some(var_1215) = &input.cors_configuration {
        let mut object_1216 = object.key("CorsConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_cors_configuration(
            &mut object_1216,
            var_1215,
        )?;
        object_1216.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_dynamo_db_table_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsDynamoDbTableDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1217) = &input.attribute_definitions {
        let mut array_1218 = object.key("AttributeDefinitions").start_array();
        for item_1219 in var_1217 {
            {
                let mut object_1220 = array_1218.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_dynamo_db_table_attribute_definition(&mut object_1220, item_1219)?;
                object_1220.finish();
            }
        }
        array_1218.finish();
    }
    if let Some(var_1221) = &input.billing_mode_summary {
        let mut object_1222 = object.key("BillingModeSummary").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_dynamo_db_table_billing_mode_summary(
            &mut object_1222,
            var_1221,
        )?;
        object_1222.finish();
    }
    if let Some(var_1223) = &input.creation_date_time {
        object.key("CreationDateTime").string(var_1223.as_str());
    }
    if let Some(var_1224) = &input.global_secondary_indexes {
        let mut array_1225 = object.key("GlobalSecondaryIndexes").start_array();
        for item_1226 in var_1224 {
            {
                let mut object_1227 = array_1225.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_dynamo_db_table_global_secondary_index(&mut object_1227, item_1226)?;
                object_1227.finish();
            }
        }
        array_1225.finish();
    }
    if let Some(var_1228) = &input.global_table_version {
        object.key("GlobalTableVersion").string(var_1228.as_str());
    }
    if input.item_count != 0 {
        object.key("ItemCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.item_count).into()),
        );
    }
    if let Some(var_1229) = &input.key_schema {
        let mut array_1230 = object.key("KeySchema").start_array();
        for item_1231 in var_1229 {
            {
                let mut object_1232 = array_1230.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_dynamo_db_table_key_schema(
                    &mut object_1232,
                    item_1231,
                )?;
                object_1232.finish();
            }
        }
        array_1230.finish();
    }
    if let Some(var_1233) = &input.latest_stream_arn {
        object.key("LatestStreamArn").string(var_1233.as_str());
    }
    if let Some(var_1234) = &input.latest_stream_label {
        object.key("LatestStreamLabel").string(var_1234.as_str());
    }
    if let Some(var_1235) = &input.local_secondary_indexes {
        let mut array_1236 = object.key("LocalSecondaryIndexes").start_array();
        for item_1237 in var_1235 {
            {
                let mut object_1238 = array_1236.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_dynamo_db_table_local_secondary_index(&mut object_1238, item_1237)?;
                object_1238.finish();
            }
        }
        array_1236.finish();
    }
    if let Some(var_1239) = &input.provisioned_throughput {
        let mut object_1240 = object.key("ProvisionedThroughput").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_dynamo_db_table_provisioned_throughput(&mut object_1240, var_1239)?;
        object_1240.finish();
    }
    if let Some(var_1241) = &input.replicas {
        let mut array_1242 = object.key("Replicas").start_array();
        for item_1243 in var_1241 {
            {
                let mut object_1244 = array_1242.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_dynamo_db_table_replica(
                    &mut object_1244,
                    item_1243,
                )?;
                object_1244.finish();
            }
        }
        array_1242.finish();
    }
    if let Some(var_1245) = &input.restore_summary {
        let mut object_1246 = object.key("RestoreSummary").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_dynamo_db_table_restore_summary(
            &mut object_1246,
            var_1245,
        )?;
        object_1246.finish();
    }
    if let Some(var_1247) = &input.sse_description {
        let mut object_1248 = object.key("SseDescription").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_dynamo_db_table_sse_description(
            &mut object_1248,
            var_1247,
        )?;
        object_1248.finish();
    }
    if let Some(var_1249) = &input.stream_specification {
        let mut object_1250 = object.key("StreamSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_dynamo_db_table_stream_specification(
            &mut object_1250,
            var_1249,
        )?;
        object_1250.finish();
    }
    if let Some(var_1251) = &input.table_id {
        object.key("TableId").string(var_1251.as_str());
    }
    if let Some(var_1252) = &input.table_name {
        object.key("TableName").string(var_1252.as_str());
    }
    if input.table_size_bytes != 0 {
        object.key("TableSizeBytes").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.table_size_bytes).into()),
        );
    }
    if let Some(var_1253) = &input.table_status {
        object.key("TableStatus").string(var_1253.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_api_gateway_stage_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsApiGatewayStageDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1254) = &input.deployment_id {
        object.key("DeploymentId").string(var_1254.as_str());
    }
    if let Some(var_1255) = &input.client_certificate_id {
        object.key("ClientCertificateId").string(var_1255.as_str());
    }
    if let Some(var_1256) = &input.stage_name {
        object.key("StageName").string(var_1256.as_str());
    }
    if let Some(var_1257) = &input.description {
        object.key("Description").string(var_1257.as_str());
    }
    if input.cache_cluster_enabled {
        object
            .key("CacheClusterEnabled")
            .boolean(input.cache_cluster_enabled);
    }
    if let Some(var_1258) = &input.cache_cluster_size {
        object.key("CacheClusterSize").string(var_1258.as_str());
    }
    if let Some(var_1259) = &input.cache_cluster_status {
        object.key("CacheClusterStatus").string(var_1259.as_str());
    }
    if let Some(var_1260) = &input.method_settings {
        let mut array_1261 = object.key("MethodSettings").start_array();
        for item_1262 in var_1260 {
            {
                let mut object_1263 = array_1261.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_api_gateway_method_settings(
                    &mut object_1263,
                    item_1262,
                )?;
                object_1263.finish();
            }
        }
        array_1261.finish();
    }
    if let Some(var_1264) = &input.variables {
        let mut object_1265 = object.key("Variables").start_object();
        for (key_1266, value_1267) in var_1264 {
            {
                object_1265.key(key_1266).string(value_1267.as_str());
            }
        }
        object_1265.finish();
    }
    if let Some(var_1268) = &input.documentation_version {
        object.key("DocumentationVersion").string(var_1268.as_str());
    }
    if let Some(var_1269) = &input.access_log_settings {
        let mut object_1270 = object.key("AccessLogSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_api_gateway_access_log_settings(
            &mut object_1270,
            var_1269,
        )?;
        object_1270.finish();
    }
    if let Some(var_1271) = &input.canary_settings {
        let mut object_1272 = object.key("CanarySettings").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_api_gateway_canary_settings(
            &mut object_1272,
            var_1271,
        )?;
        object_1272.finish();
    }
    if input.tracing_enabled {
        object.key("TracingEnabled").boolean(input.tracing_enabled);
    }
    if let Some(var_1273) = &input.created_date {
        object.key("CreatedDate").string(var_1273.as_str());
    }
    if let Some(var_1274) = &input.last_updated_date {
        object.key("LastUpdatedDate").string(var_1274.as_str());
    }
    if let Some(var_1275) = &input.web_acl_arn {
        object.key("WebAclArn").string(var_1275.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_api_gateway_rest_api_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsApiGatewayRestApiDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1276) = &input.id {
        object.key("Id").string(var_1276.as_str());
    }
    if let Some(var_1277) = &input.name {
        object.key("Name").string(var_1277.as_str());
    }
    if let Some(var_1278) = &input.description {
        object.key("Description").string(var_1278.as_str());
    }
    if let Some(var_1279) = &input.created_date {
        object.key("CreatedDate").string(var_1279.as_str());
    }
    if let Some(var_1280) = &input.version {
        object.key("Version").string(var_1280.as_str());
    }
    if let Some(var_1281) = &input.binary_media_types {
        let mut array_1282 = object.key("BinaryMediaTypes").start_array();
        for item_1283 in var_1281 {
            {
                array_1282.value().string(item_1283.as_str());
            }
        }
        array_1282.finish();
    }
    if input.minimum_compression_size != 0 {
        object.key("MinimumCompressionSize").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.minimum_compression_size).into()),
        );
    }
    if let Some(var_1284) = &input.api_key_source {
        object.key("ApiKeySource").string(var_1284.as_str());
    }
    if let Some(var_1285) = &input.endpoint_configuration {
        let mut object_1286 = object.key("EndpointConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_api_gateway_endpoint_configuration(
            &mut object_1286,
            var_1285,
        )?;
        object_1286.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_cloud_trail_trail_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCloudTrailTrailDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1287) = &input.cloud_watch_logs_log_group_arn {
        object
            .key("CloudWatchLogsLogGroupArn")
            .string(var_1287.as_str());
    }
    if let Some(var_1288) = &input.cloud_watch_logs_role_arn {
        object
            .key("CloudWatchLogsRoleArn")
            .string(var_1288.as_str());
    }
    if input.has_custom_event_selectors {
        object
            .key("HasCustomEventSelectors")
            .boolean(input.has_custom_event_selectors);
    }
    if let Some(var_1289) = &input.home_region {
        object.key("HomeRegion").string(var_1289.as_str());
    }
    if input.include_global_service_events {
        object
            .key("IncludeGlobalServiceEvents")
            .boolean(input.include_global_service_events);
    }
    if input.is_multi_region_trail {
        object
            .key("IsMultiRegionTrail")
            .boolean(input.is_multi_region_trail);
    }
    if input.is_organization_trail {
        object
            .key("IsOrganizationTrail")
            .boolean(input.is_organization_trail);
    }
    if let Some(var_1290) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1290.as_str());
    }
    if input.log_file_validation_enabled {
        object
            .key("LogFileValidationEnabled")
            .boolean(input.log_file_validation_enabled);
    }
    if let Some(var_1291) = &input.name {
        object.key("Name").string(var_1291.as_str());
    }
    if let Some(var_1292) = &input.s3_bucket_name {
        object.key("S3BucketName").string(var_1292.as_str());
    }
    if let Some(var_1293) = &input.s3_key_prefix {
        object.key("S3KeyPrefix").string(var_1293.as_str());
    }
    if let Some(var_1294) = &input.sns_topic_arn {
        object.key("SnsTopicArn").string(var_1294.as_str());
    }
    if let Some(var_1295) = &input.sns_topic_name {
        object.key("SnsTopicName").string(var_1295.as_str());
    }
    if let Some(var_1296) = &input.trail_arn {
        object.key("TrailArn").string(var_1296.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ssm_patch_compliance_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsSsmPatchComplianceDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1297) = &input.patch {
        let mut object_1298 = object.key("Patch").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_ssm_patch(&mut object_1298, var_1297)?;
        object_1298.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_certificate_manager_certificate_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCertificateManagerCertificateDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1299) = &input.certificate_authority_arn {
        object
            .key("CertificateAuthorityArn")
            .string(var_1299.as_str());
    }
    if let Some(var_1300) = &input.created_at {
        object.key("CreatedAt").string(var_1300.as_str());
    }
    if let Some(var_1301) = &input.domain_name {
        object.key("DomainName").string(var_1301.as_str());
    }
    if let Some(var_1302) = &input.domain_validation_options {
        let mut array_1303 = object.key("DomainValidationOptions").start_array();
        for item_1304 in var_1302 {
            {
                let mut object_1305 = array_1303.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_certificate_manager_certificate_domain_validation_option(&mut object_1305, item_1304)?;
                object_1305.finish();
            }
        }
        array_1303.finish();
    }
    if let Some(var_1306) = &input.extended_key_usages {
        let mut array_1307 = object.key("ExtendedKeyUsages").start_array();
        for item_1308 in var_1306 {
            {
                let mut object_1309 = array_1307.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_certificate_manager_certificate_extended_key_usage(&mut object_1309, item_1308)?;
                object_1309.finish();
            }
        }
        array_1307.finish();
    }
    if let Some(var_1310) = &input.failure_reason {
        object.key("FailureReason").string(var_1310.as_str());
    }
    if let Some(var_1311) = &input.imported_at {
        object.key("ImportedAt").string(var_1311.as_str());
    }
    if let Some(var_1312) = &input.in_use_by {
        let mut array_1313 = object.key("InUseBy").start_array();
        for item_1314 in var_1312 {
            {
                array_1313.value().string(item_1314.as_str());
            }
        }
        array_1313.finish();
    }
    if let Some(var_1315) = &input.issued_at {
        object.key("IssuedAt").string(var_1315.as_str());
    }
    if let Some(var_1316) = &input.issuer {
        object.key("Issuer").string(var_1316.as_str());
    }
    if let Some(var_1317) = &input.key_algorithm {
        object.key("KeyAlgorithm").string(var_1317.as_str());
    }
    if let Some(var_1318) = &input.key_usages {
        let mut array_1319 = object.key("KeyUsages").start_array();
        for item_1320 in var_1318 {
            {
                let mut object_1321 = array_1319.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_certificate_manager_certificate_key_usage(&mut object_1321, item_1320)?;
                object_1321.finish();
            }
        }
        array_1319.finish();
    }
    if let Some(var_1322) = &input.not_after {
        object.key("NotAfter").string(var_1322.as_str());
    }
    if let Some(var_1323) = &input.not_before {
        object.key("NotBefore").string(var_1323.as_str());
    }
    if let Some(var_1324) = &input.options {
        let mut object_1325 = object.key("Options").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_certificate_manager_certificate_options(&mut object_1325, var_1324)?;
        object_1325.finish();
    }
    if let Some(var_1326) = &input.renewal_eligibility {
        object.key("RenewalEligibility").string(var_1326.as_str());
    }
    if let Some(var_1327) = &input.renewal_summary {
        let mut object_1328 = object.key("RenewalSummary").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_certificate_manager_certificate_renewal_summary(&mut object_1328, var_1327)?;
        object_1328.finish();
    }
    if let Some(var_1329) = &input.serial {
        object.key("Serial").string(var_1329.as_str());
    }
    if let Some(var_1330) = &input.signature_algorithm {
        object.key("SignatureAlgorithm").string(var_1330.as_str());
    }
    if let Some(var_1331) = &input.status {
        object.key("Status").string(var_1331.as_str());
    }
    if let Some(var_1332) = &input.subject {
        object.key("Subject").string(var_1332.as_str());
    }
    if let Some(var_1333) = &input.subject_alternative_names {
        let mut array_1334 = object.key("SubjectAlternativeNames").start_array();
        for item_1335 in var_1333 {
            {
                array_1334.value().string(item_1335.as_str());
            }
        }
        array_1334.finish();
    }
    if let Some(var_1336) = &input.r#type {
        object.key("Type").string(var_1336.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_redshift_cluster_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRedshiftClusterDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.allow_version_upgrade {
        object
            .key("AllowVersionUpgrade")
            .boolean(input.allow_version_upgrade);
    }
    if input.automated_snapshot_retention_period != 0 {
        object.key("AutomatedSnapshotRetentionPeriod").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.automated_snapshot_retention_period).into()),
        );
    }
    if let Some(var_1337) = &input.availability_zone {
        object.key("AvailabilityZone").string(var_1337.as_str());
    }
    if let Some(var_1338) = &input.cluster_availability_status {
        object
            .key("ClusterAvailabilityStatus")
            .string(var_1338.as_str());
    }
    if let Some(var_1339) = &input.cluster_create_time {
        object.key("ClusterCreateTime").string(var_1339.as_str());
    }
    if let Some(var_1340) = &input.cluster_identifier {
        object.key("ClusterIdentifier").string(var_1340.as_str());
    }
    if let Some(var_1341) = &input.cluster_nodes {
        let mut array_1342 = object.key("ClusterNodes").start_array();
        for item_1343 in var_1341 {
            {
                let mut object_1344 = array_1342.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_redshift_cluster_cluster_node(
                    &mut object_1344,
                    item_1343,
                )?;
                object_1344.finish();
            }
        }
        array_1342.finish();
    }
    if let Some(var_1345) = &input.cluster_parameter_groups {
        let mut array_1346 = object.key("ClusterParameterGroups").start_array();
        for item_1347 in var_1345 {
            {
                let mut object_1348 = array_1346.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_redshift_cluster_cluster_parameter_group(&mut object_1348, item_1347)?;
                object_1348.finish();
            }
        }
        array_1346.finish();
    }
    if let Some(var_1349) = &input.cluster_public_key {
        object.key("ClusterPublicKey").string(var_1349.as_str());
    }
    if let Some(var_1350) = &input.cluster_revision_number {
        object
            .key("ClusterRevisionNumber")
            .string(var_1350.as_str());
    }
    if let Some(var_1351) = &input.cluster_security_groups {
        let mut array_1352 = object.key("ClusterSecurityGroups").start_array();
        for item_1353 in var_1351 {
            {
                let mut object_1354 = array_1352.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_redshift_cluster_cluster_security_group(&mut object_1354, item_1353)?;
                object_1354.finish();
            }
        }
        array_1352.finish();
    }
    if let Some(var_1355) = &input.cluster_snapshot_copy_status {
        let mut object_1356 = object.key("ClusterSnapshotCopyStatus").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_redshift_cluster_cluster_snapshot_copy_status(&mut object_1356, var_1355)?;
        object_1356.finish();
    }
    if let Some(var_1357) = &input.cluster_status {
        object.key("ClusterStatus").string(var_1357.as_str());
    }
    if let Some(var_1358) = &input.cluster_subnet_group_name {
        object
            .key("ClusterSubnetGroupName")
            .string(var_1358.as_str());
    }
    if let Some(var_1359) = &input.cluster_version {
        object.key("ClusterVersion").string(var_1359.as_str());
    }
    if let Some(var_1360) = &input.db_name {
        object.key("DBName").string(var_1360.as_str());
    }
    if let Some(var_1361) = &input.deferred_maintenance_windows {
        let mut array_1362 = object.key("DeferredMaintenanceWindows").start_array();
        for item_1363 in var_1361 {
            {
                let mut object_1364 = array_1362.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_redshift_cluster_deferred_maintenance_window(&mut object_1364, item_1363)?;
                object_1364.finish();
            }
        }
        array_1362.finish();
    }
    if let Some(var_1365) = &input.elastic_ip_status {
        let mut object_1366 = object.key("ElasticIpStatus").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_redshift_cluster_elastic_ip_status(
            &mut object_1366,
            var_1365,
        )?;
        object_1366.finish();
    }
    if let Some(var_1367) = &input.elastic_resize_number_of_node_options {
        object
            .key("ElasticResizeNumberOfNodeOptions")
            .string(var_1367.as_str());
    }
    if input.encrypted {
        object.key("Encrypted").boolean(input.encrypted);
    }
    if let Some(var_1368) = &input.endpoint {
        let mut object_1369 = object.key("Endpoint").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_redshift_cluster_endpoint(
            &mut object_1369,
            var_1368,
        )?;
        object_1369.finish();
    }
    if input.enhanced_vpc_routing {
        object
            .key("EnhancedVpcRouting")
            .boolean(input.enhanced_vpc_routing);
    }
    if let Some(var_1370) = &input.expected_next_snapshot_schedule_time {
        object
            .key("ExpectedNextSnapshotScheduleTime")
            .string(var_1370.as_str());
    }
    if let Some(var_1371) = &input.expected_next_snapshot_schedule_time_status {
        object
            .key("ExpectedNextSnapshotScheduleTimeStatus")
            .string(var_1371.as_str());
    }
    if let Some(var_1372) = &input.hsm_status {
        let mut object_1373 = object.key("HsmStatus").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_redshift_cluster_hsm_status(
            &mut object_1373,
            var_1372,
        )?;
        object_1373.finish();
    }
    if let Some(var_1374) = &input.iam_roles {
        let mut array_1375 = object.key("IamRoles").start_array();
        for item_1376 in var_1374 {
            {
                let mut object_1377 = array_1375.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_redshift_cluster_iam_role(
                    &mut object_1377,
                    item_1376,
                )?;
                object_1377.finish();
            }
        }
        array_1375.finish();
    }
    if let Some(var_1378) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1378.as_str());
    }
    if let Some(var_1379) = &input.maintenance_track_name {
        object.key("MaintenanceTrackName").string(var_1379.as_str());
    }
    if input.manual_snapshot_retention_period != 0 {
        object.key("ManualSnapshotRetentionPeriod").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.manual_snapshot_retention_period).into()),
        );
    }
    if let Some(var_1380) = &input.master_username {
        object.key("MasterUsername").string(var_1380.as_str());
    }
    if let Some(var_1381) = &input.next_maintenance_window_start_time {
        object
            .key("NextMaintenanceWindowStartTime")
            .string(var_1381.as_str());
    }
    if let Some(var_1382) = &input.node_type {
        object.key("NodeType").string(var_1382.as_str());
    }
    if input.number_of_nodes != 0 {
        object.key("NumberOfNodes").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.number_of_nodes).into()),
        );
    }
    if let Some(var_1383) = &input.pending_actions {
        let mut array_1384 = object.key("PendingActions").start_array();
        for item_1385 in var_1383 {
            {
                array_1384.value().string(item_1385.as_str());
            }
        }
        array_1384.finish();
    }
    if let Some(var_1386) = &input.pending_modified_values {
        let mut object_1387 = object.key("PendingModifiedValues").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_redshift_cluster_pending_modified_values(&mut object_1387, var_1386)?;
        object_1387.finish();
    }
    if let Some(var_1388) = &input.preferred_maintenance_window {
        object
            .key("PreferredMaintenanceWindow")
            .string(var_1388.as_str());
    }
    if input.publicly_accessible {
        object
            .key("PubliclyAccessible")
            .boolean(input.publicly_accessible);
    }
    if let Some(var_1389) = &input.resize_info {
        let mut object_1390 = object.key("ResizeInfo").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_redshift_cluster_resize_info(
            &mut object_1390,
            var_1389,
        )?;
        object_1390.finish();
    }
    if let Some(var_1391) = &input.restore_status {
        let mut object_1392 = object.key("RestoreStatus").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_redshift_cluster_restore_status(
            &mut object_1392,
            var_1391,
        )?;
        object_1392.finish();
    }
    if let Some(var_1393) = &input.snapshot_schedule_identifier {
        object
            .key("SnapshotScheduleIdentifier")
            .string(var_1393.as_str());
    }
    if let Some(var_1394) = &input.snapshot_schedule_state {
        object
            .key("SnapshotScheduleState")
            .string(var_1394.as_str());
    }
    if let Some(var_1395) = &input.vpc_id {
        object.key("VpcId").string(var_1395.as_str());
    }
    if let Some(var_1396) = &input.vpc_security_groups {
        let mut array_1397 = object.key("VpcSecurityGroups").start_array();
        for item_1398 in var_1396 {
            {
                let mut object_1399 = array_1397.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_redshift_cluster_vpc_security_group(&mut object_1399, item_1398)?;
                object_1399.finish();
            }
        }
        array_1397.finish();
    }
    if let Some(var_1400) = &input.logging_status {
        let mut object_1401 = object.key("LoggingStatus").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_redshift_cluster_logging_status(
            &mut object_1401,
            var_1400,
        )?;
        object_1401.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_elb_load_balancer_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElbLoadBalancerDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1402) = &input.availability_zones {
        let mut array_1403 = object.key("AvailabilityZones").start_array();
        for item_1404 in var_1402 {
            {
                array_1403.value().string(item_1404.as_str());
            }
        }
        array_1403.finish();
    }
    if let Some(var_1405) = &input.backend_server_descriptions {
        let mut array_1406 = object.key("BackendServerDescriptions").start_array();
        for item_1407 in var_1405 {
            {
                let mut object_1408 = array_1406.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_elb_load_balancer_backend_server_description(&mut object_1408, item_1407)?;
                object_1408.finish();
            }
        }
        array_1406.finish();
    }
    if let Some(var_1409) = &input.canonical_hosted_zone_name {
        object
            .key("CanonicalHostedZoneName")
            .string(var_1409.as_str());
    }
    if let Some(var_1410) = &input.canonical_hosted_zone_name_id {
        object
            .key("CanonicalHostedZoneNameID")
            .string(var_1410.as_str());
    }
    if let Some(var_1411) = &input.created_time {
        object.key("CreatedTime").string(var_1411.as_str());
    }
    if let Some(var_1412) = &input.dns_name {
        object.key("DnsName").string(var_1412.as_str());
    }
    if let Some(var_1413) = &input.health_check {
        let mut object_1414 = object.key("HealthCheck").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_elb_load_balancer_health_check(
            &mut object_1414,
            var_1413,
        )?;
        object_1414.finish();
    }
    if let Some(var_1415) = &input.instances {
        let mut array_1416 = object.key("Instances").start_array();
        for item_1417 in var_1415 {
            {
                let mut object_1418 = array_1416.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_elb_load_balancer_instance(
                    &mut object_1418,
                    item_1417,
                )?;
                object_1418.finish();
            }
        }
        array_1416.finish();
    }
    if let Some(var_1419) = &input.listener_descriptions {
        let mut array_1420 = object.key("ListenerDescriptions").start_array();
        for item_1421 in var_1419 {
            {
                let mut object_1422 = array_1420.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_elb_load_balancer_listener_description(&mut object_1422, item_1421)?;
                object_1422.finish();
            }
        }
        array_1420.finish();
    }
    if let Some(var_1423) = &input.load_balancer_attributes {
        let mut object_1424 = object.key("LoadBalancerAttributes").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_elb_load_balancer_attributes(
            &mut object_1424,
            var_1423,
        )?;
        object_1424.finish();
    }
    if let Some(var_1425) = &input.load_balancer_name {
        object.key("LoadBalancerName").string(var_1425.as_str());
    }
    if let Some(var_1426) = &input.policies {
        let mut object_1427 = object.key("Policies").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_elb_load_balancer_policies(
            &mut object_1427,
            var_1426,
        )?;
        object_1427.finish();
    }
    if let Some(var_1428) = &input.scheme {
        object.key("Scheme").string(var_1428.as_str());
    }
    if let Some(var_1429) = &input.security_groups {
        let mut array_1430 = object.key("SecurityGroups").start_array();
        for item_1431 in var_1429 {
            {
                array_1430.value().string(item_1431.as_str());
            }
        }
        array_1430.finish();
    }
    if let Some(var_1432) = &input.source_security_group {
        let mut object_1433 = object.key("SourceSecurityGroup").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_elb_load_balancer_source_security_group(&mut object_1433, var_1432)?;
        object_1433.finish();
    }
    if let Some(var_1434) = &input.subnets {
        let mut array_1435 = object.key("Subnets").start_array();
        for item_1436 in var_1434 {
            {
                array_1435.value().string(item_1436.as_str());
            }
        }
        array_1435.finish();
    }
    if let Some(var_1437) = &input.vpc_id {
        object.key("VpcId").string(var_1437.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_iam_group_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsIamGroupDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1438) = &input.attached_managed_policies {
        let mut array_1439 = object.key("AttachedManagedPolicies").start_array();
        for item_1440 in var_1438 {
            {
                let mut object_1441 = array_1439.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_iam_attached_managed_policy(
                    &mut object_1441,
                    item_1440,
                )?;
                object_1441.finish();
            }
        }
        array_1439.finish();
    }
    if let Some(var_1442) = &input.create_date {
        object.key("CreateDate").string(var_1442.as_str());
    }
    if let Some(var_1443) = &input.group_id {
        object.key("GroupId").string(var_1443.as_str());
    }
    if let Some(var_1444) = &input.group_name {
        object.key("GroupName").string(var_1444.as_str());
    }
    if let Some(var_1445) = &input.group_policy_list {
        let mut array_1446 = object.key("GroupPolicyList").start_array();
        for item_1447 in var_1445 {
            {
                let mut object_1448 = array_1446.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_iam_group_policy(
                    &mut object_1448,
                    item_1447,
                )?;
                object_1448.finish();
            }
        }
        array_1446.finish();
    }
    if let Some(var_1449) = &input.path {
        object.key("Path").string(var_1449.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_iam_role_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsIamRoleDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1450) = &input.assume_role_policy_document {
        object
            .key("AssumeRolePolicyDocument")
            .string(var_1450.as_str());
    }
    if let Some(var_1451) = &input.attached_managed_policies {
        let mut array_1452 = object.key("AttachedManagedPolicies").start_array();
        for item_1453 in var_1451 {
            {
                let mut object_1454 = array_1452.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_iam_attached_managed_policy(
                    &mut object_1454,
                    item_1453,
                )?;
                object_1454.finish();
            }
        }
        array_1452.finish();
    }
    if let Some(var_1455) = &input.create_date {
        object.key("CreateDate").string(var_1455.as_str());
    }
    if let Some(var_1456) = &input.instance_profile_list {
        let mut array_1457 = object.key("InstanceProfileList").start_array();
        for item_1458 in var_1456 {
            {
                let mut object_1459 = array_1457.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_iam_instance_profile(
                    &mut object_1459,
                    item_1458,
                )?;
                object_1459.finish();
            }
        }
        array_1457.finish();
    }
    if let Some(var_1460) = &input.permissions_boundary {
        let mut object_1461 = object.key("PermissionsBoundary").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_iam_permissions_boundary(
            &mut object_1461,
            var_1460,
        )?;
        object_1461.finish();
    }
    if let Some(var_1462) = &input.role_id {
        object.key("RoleId").string(var_1462.as_str());
    }
    if let Some(var_1463) = &input.role_name {
        object.key("RoleName").string(var_1463.as_str());
    }
    if let Some(var_1464) = &input.role_policy_list {
        let mut array_1465 = object.key("RolePolicyList").start_array();
        for item_1466 in var_1464 {
            {
                let mut object_1467 = array_1465.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_iam_role_policy(
                    &mut object_1467,
                    item_1466,
                )?;
                object_1467.finish();
            }
        }
        array_1465.finish();
    }
    if input.max_session_duration != 0 {
        object.key("MaxSessionDuration").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_session_duration).into()),
        );
    }
    if let Some(var_1468) = &input.path {
        object.key("Path").string(var_1468.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_kms_key_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsKmsKeyDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1469) = &input.aws_account_id {
        object.key("AWSAccountId").string(var_1469.as_str());
    }
    if input.creation_date != 0.0 {
        object.key("CreationDate").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((input.creation_date).into()),
        );
    }
    if let Some(var_1470) = &input.key_id {
        object.key("KeyId").string(var_1470.as_str());
    }
    if let Some(var_1471) = &input.key_manager {
        object.key("KeyManager").string(var_1471.as_str());
    }
    if let Some(var_1472) = &input.key_state {
        object.key("KeyState").string(var_1472.as_str());
    }
    if let Some(var_1473) = &input.origin {
        object.key("Origin").string(var_1473.as_str());
    }
    if let Some(var_1474) = &input.description {
        object.key("Description").string(var_1474.as_str());
    }
    if input.key_rotation_status {
        object
            .key("KeyRotationStatus")
            .boolean(input.key_rotation_status);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_lambda_function_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsLambdaFunctionDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1475) = &input.code {
        let mut object_1476 = object.key("Code").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_lambda_function_code(
            &mut object_1476,
            var_1475,
        )?;
        object_1476.finish();
    }
    if let Some(var_1477) = &input.code_sha256 {
        object.key("CodeSha256").string(var_1477.as_str());
    }
    if let Some(var_1478) = &input.dead_letter_config {
        let mut object_1479 = object.key("DeadLetterConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_lambda_function_dead_letter_config(
            &mut object_1479,
            var_1478,
        )?;
        object_1479.finish();
    }
    if let Some(var_1480) = &input.environment {
        let mut object_1481 = object.key("Environment").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_lambda_function_environment(
            &mut object_1481,
            var_1480,
        )?;
        object_1481.finish();
    }
    if let Some(var_1482) = &input.function_name {
        object.key("FunctionName").string(var_1482.as_str());
    }
    if let Some(var_1483) = &input.handler {
        object.key("Handler").string(var_1483.as_str());
    }
    if let Some(var_1484) = &input.kms_key_arn {
        object.key("KmsKeyArn").string(var_1484.as_str());
    }
    if let Some(var_1485) = &input.last_modified {
        object.key("LastModified").string(var_1485.as_str());
    }
    if let Some(var_1486) = &input.layers {
        let mut array_1487 = object.key("Layers").start_array();
        for item_1488 in var_1486 {
            {
                let mut object_1489 = array_1487.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_lambda_function_layer(
                    &mut object_1489,
                    item_1488,
                )?;
                object_1489.finish();
            }
        }
        array_1487.finish();
    }
    if let Some(var_1490) = &input.master_arn {
        object.key("MasterArn").string(var_1490.as_str());
    }
    if input.memory_size != 0 {
        object.key("MemorySize").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.memory_size).into()),
        );
    }
    if let Some(var_1491) = &input.revision_id {
        object.key("RevisionId").string(var_1491.as_str());
    }
    if let Some(var_1492) = &input.role {
        object.key("Role").string(var_1492.as_str());
    }
    if let Some(var_1493) = &input.runtime {
        object.key("Runtime").string(var_1493.as_str());
    }
    if input.timeout != 0 {
        object.key("Timeout").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.timeout).into()),
        );
    }
    if let Some(var_1494) = &input.tracing_config {
        let mut object_1495 = object.key("TracingConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_lambda_function_tracing_config(
            &mut object_1495,
            var_1494,
        )?;
        object_1495.finish();
    }
    if let Some(var_1496) = &input.vpc_config {
        let mut object_1497 = object.key("VpcConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_lambda_function_vpc_config(
            &mut object_1497,
            var_1496,
        )?;
        object_1497.finish();
    }
    if let Some(var_1498) = &input.version {
        object.key("Version").string(var_1498.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_lambda_layer_version_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsLambdaLayerVersionDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.version != 0 {
        object.key("Version").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.version).into()),
        );
    }
    if let Some(var_1499) = &input.compatible_runtimes {
        let mut array_1500 = object.key("CompatibleRuntimes").start_array();
        for item_1501 in var_1499 {
            {
                array_1500.value().string(item_1501.as_str());
            }
        }
        array_1500.finish();
    }
    if let Some(var_1502) = &input.created_date {
        object.key("CreatedDate").string(var_1502.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_rds_db_instance_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRdsDbInstanceDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1503) = &input.associated_roles {
        let mut array_1504 = object.key("AssociatedRoles").start_array();
        for item_1505 in var_1503 {
            {
                let mut object_1506 = array_1504.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_rds_db_instance_associated_role(&mut object_1506, item_1505)?;
                object_1506.finish();
            }
        }
        array_1504.finish();
    }
    if let Some(var_1507) = &input.ca_certificate_identifier {
        object
            .key("CACertificateIdentifier")
            .string(var_1507.as_str());
    }
    if let Some(var_1508) = &input.db_cluster_identifier {
        object.key("DBClusterIdentifier").string(var_1508.as_str());
    }
    if let Some(var_1509) = &input.db_instance_identifier {
        object.key("DBInstanceIdentifier").string(var_1509.as_str());
    }
    if let Some(var_1510) = &input.db_instance_class {
        object.key("DBInstanceClass").string(var_1510.as_str());
    }
    if input.db_instance_port != 0 {
        object.key("DbInstancePort").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.db_instance_port).into()),
        );
    }
    if let Some(var_1511) = &input.dbi_resource_id {
        object.key("DbiResourceId").string(var_1511.as_str());
    }
    if let Some(var_1512) = &input.db_name {
        object.key("DBName").string(var_1512.as_str());
    }
    if input.deletion_protection {
        object
            .key("DeletionProtection")
            .boolean(input.deletion_protection);
    }
    if let Some(var_1513) = &input.endpoint {
        let mut object_1514 = object.key("Endpoint").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_rds_db_instance_endpoint(
            &mut object_1514,
            var_1513,
        )?;
        object_1514.finish();
    }
    if let Some(var_1515) = &input.engine {
        object.key("Engine").string(var_1515.as_str());
    }
    if let Some(var_1516) = &input.engine_version {
        object.key("EngineVersion").string(var_1516.as_str());
    }
    if input.iam_database_authentication_enabled {
        object
            .key("IAMDatabaseAuthenticationEnabled")
            .boolean(input.iam_database_authentication_enabled);
    }
    if let Some(var_1517) = &input.instance_create_time {
        object.key("InstanceCreateTime").string(var_1517.as_str());
    }
    if let Some(var_1518) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1518.as_str());
    }
    if input.publicly_accessible {
        object
            .key("PubliclyAccessible")
            .boolean(input.publicly_accessible);
    }
    if input.storage_encrypted {
        object
            .key("StorageEncrypted")
            .boolean(input.storage_encrypted);
    }
    if let Some(var_1519) = &input.tde_credential_arn {
        object.key("TdeCredentialArn").string(var_1519.as_str());
    }
    if let Some(var_1520) = &input.vpc_security_groups {
        let mut array_1521 = object.key("VpcSecurityGroups").start_array();
        for item_1522 in var_1520 {
            {
                let mut object_1523 = array_1521.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_rds_db_instance_vpc_security_group(&mut object_1523, item_1522)?;
                object_1523.finish();
            }
        }
        array_1521.finish();
    }
    if input.multi_az {
        object.key("MultiAz").boolean(input.multi_az);
    }
    if let Some(var_1524) = &input.enhanced_monitoring_resource_arn {
        object
            .key("EnhancedMonitoringResourceArn")
            .string(var_1524.as_str());
    }
    if let Some(var_1525) = &input.db_instance_status {
        object.key("DbInstanceStatus").string(var_1525.as_str());
    }
    if let Some(var_1526) = &input.master_username {
        object.key("MasterUsername").string(var_1526.as_str());
    }
    if input.allocated_storage != 0 {
        object.key("AllocatedStorage").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.allocated_storage).into()),
        );
    }
    if let Some(var_1527) = &input.preferred_backup_window {
        object
            .key("PreferredBackupWindow")
            .string(var_1527.as_str());
    }
    if input.backup_retention_period != 0 {
        object.key("BackupRetentionPeriod").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.backup_retention_period).into()),
        );
    }
    if let Some(var_1528) = &input.db_security_groups {
        let mut array_1529 = object.key("DbSecurityGroups").start_array();
        for item_1530 in var_1528 {
            {
                array_1529.value().string(item_1530.as_str());
            }
        }
        array_1529.finish();
    }
    if let Some(var_1531) = &input.db_parameter_groups {
        let mut array_1532 = object.key("DbParameterGroups").start_array();
        for item_1533 in var_1531 {
            {
                let mut object_1534 = array_1532.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_rds_db_parameter_group(
                    &mut object_1534,
                    item_1533,
                )?;
                object_1534.finish();
            }
        }
        array_1532.finish();
    }
    if let Some(var_1535) = &input.availability_zone {
        object.key("AvailabilityZone").string(var_1535.as_str());
    }
    if let Some(var_1536) = &input.db_subnet_group {
        let mut object_1537 = object.key("DbSubnetGroup").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_rds_db_subnet_group(
            &mut object_1537,
            var_1536,
        )?;
        object_1537.finish();
    }
    if let Some(var_1538) = &input.preferred_maintenance_window {
        object
            .key("PreferredMaintenanceWindow")
            .string(var_1538.as_str());
    }
    if let Some(var_1539) = &input.pending_modified_values {
        let mut object_1540 = object.key("PendingModifiedValues").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_rds_db_pending_modified_values(
            &mut object_1540,
            var_1539,
        )?;
        object_1540.finish();
    }
    if let Some(var_1541) = &input.latest_restorable_time {
        object.key("LatestRestorableTime").string(var_1541.as_str());
    }
    if input.auto_minor_version_upgrade {
        object
            .key("AutoMinorVersionUpgrade")
            .boolean(input.auto_minor_version_upgrade);
    }
    if let Some(var_1542) = &input.read_replica_source_db_instance_identifier {
        object
            .key("ReadReplicaSourceDBInstanceIdentifier")
            .string(var_1542.as_str());
    }
    if let Some(var_1543) = &input.read_replica_db_instance_identifiers {
        let mut array_1544 = object.key("ReadReplicaDBInstanceIdentifiers").start_array();
        for item_1545 in var_1543 {
            {
                array_1544.value().string(item_1545.as_str());
            }
        }
        array_1544.finish();
    }
    if let Some(var_1546) = &input.read_replica_db_cluster_identifiers {
        let mut array_1547 = object.key("ReadReplicaDBClusterIdentifiers").start_array();
        for item_1548 in var_1546 {
            {
                array_1547.value().string(item_1548.as_str());
            }
        }
        array_1547.finish();
    }
    if let Some(var_1549) = &input.license_model {
        object.key("LicenseModel").string(var_1549.as_str());
    }
    if input.iops != 0 {
        object.key("Iops").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.iops).into()),
        );
    }
    if let Some(var_1550) = &input.option_group_memberships {
        let mut array_1551 = object.key("OptionGroupMemberships").start_array();
        for item_1552 in var_1550 {
            {
                let mut object_1553 = array_1551.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_rds_db_option_group_membership(&mut object_1553, item_1552)?;
                object_1553.finish();
            }
        }
        array_1551.finish();
    }
    if let Some(var_1554) = &input.character_set_name {
        object.key("CharacterSetName").string(var_1554.as_str());
    }
    if let Some(var_1555) = &input.secondary_availability_zone {
        object
            .key("SecondaryAvailabilityZone")
            .string(var_1555.as_str());
    }
    if let Some(var_1556) = &input.status_infos {
        let mut array_1557 = object.key("StatusInfos").start_array();
        for item_1558 in var_1556 {
            {
                let mut object_1559 = array_1557.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_rds_db_status_info(
                    &mut object_1559,
                    item_1558,
                )?;
                object_1559.finish();
            }
        }
        array_1557.finish();
    }
    if let Some(var_1560) = &input.storage_type {
        object.key("StorageType").string(var_1560.as_str());
    }
    if let Some(var_1561) = &input.domain_memberships {
        let mut array_1562 = object.key("DomainMemberships").start_array();
        for item_1563 in var_1561 {
            {
                let mut object_1564 = array_1562.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_rds_db_domain_membership(
                    &mut object_1564,
                    item_1563,
                )?;
                object_1564.finish();
            }
        }
        array_1562.finish();
    }
    if input.copy_tags_to_snapshot {
        object
            .key("CopyTagsToSnapshot")
            .boolean(input.copy_tags_to_snapshot);
    }
    if input.monitoring_interval != 0 {
        object.key("MonitoringInterval").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.monitoring_interval).into()),
        );
    }
    if let Some(var_1565) = &input.monitoring_role_arn {
        object.key("MonitoringRoleArn").string(var_1565.as_str());
    }
    if input.promotion_tier != 0 {
        object.key("PromotionTier").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.promotion_tier).into()),
        );
    }
    if let Some(var_1566) = &input.timezone {
        object.key("Timezone").string(var_1566.as_str());
    }
    if input.performance_insights_enabled {
        object
            .key("PerformanceInsightsEnabled")
            .boolean(input.performance_insights_enabled);
    }
    if let Some(var_1567) = &input.performance_insights_kms_key_id {
        object
            .key("PerformanceInsightsKmsKeyId")
            .string(var_1567.as_str());
    }
    if input.performance_insights_retention_period != 0 {
        object.key("PerformanceInsightsRetentionPeriod").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.performance_insights_retention_period).into()),
        );
    }
    if let Some(var_1568) = &input.enabled_cloud_watch_logs_exports {
        let mut array_1569 = object.key("EnabledCloudWatchLogsExports").start_array();
        for item_1570 in var_1568 {
            {
                array_1569.value().string(item_1570.as_str());
            }
        }
        array_1569.finish();
    }
    if let Some(var_1571) = &input.processor_features {
        let mut array_1572 = object.key("ProcessorFeatures").start_array();
        for item_1573 in var_1571 {
            {
                let mut object_1574 = array_1572.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_rds_db_processor_feature(
                    &mut object_1574,
                    item_1573,
                )?;
                object_1574.finish();
            }
        }
        array_1572.finish();
    }
    if let Some(var_1575) = &input.listener_endpoint {
        let mut object_1576 = object.key("ListenerEndpoint").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_rds_db_instance_endpoint(
            &mut object_1576,
            var_1575,
        )?;
        object_1576.finish();
    }
    if input.max_allocated_storage != 0 {
        object.key("MaxAllocatedStorage").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_allocated_storage).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_sns_topic_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsSnsTopicDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1577) = &input.kms_master_key_id {
        object.key("KmsMasterKeyId").string(var_1577.as_str());
    }
    if let Some(var_1578) = &input.subscription {
        let mut array_1579 = object.key("Subscription").start_array();
        for item_1580 in var_1578 {
            {
                let mut object_1581 = array_1579.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_sns_topic_subscription(
                    &mut object_1581,
                    item_1580,
                )?;
                object_1581.finish();
            }
        }
        array_1579.finish();
    }
    if let Some(var_1582) = &input.topic_name {
        object.key("TopicName").string(var_1582.as_str());
    }
    if let Some(var_1583) = &input.owner {
        object.key("Owner").string(var_1583.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_sqs_queue_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsSqsQueueDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.kms_data_key_reuse_period_seconds != 0 {
        object.key("KmsDataKeyReusePeriodSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.kms_data_key_reuse_period_seconds).into()),
        );
    }
    if let Some(var_1584) = &input.kms_master_key_id {
        object.key("KmsMasterKeyId").string(var_1584.as_str());
    }
    if let Some(var_1585) = &input.queue_name {
        object.key("QueueName").string(var_1585.as_str());
    }
    if let Some(var_1586) = &input.dead_letter_target_arn {
        object.key("DeadLetterTargetArn").string(var_1586.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_waf_web_acl_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsWafWebAclDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1587) = &input.name {
        object.key("Name").string(var_1587.as_str());
    }
    if let Some(var_1588) = &input.default_action {
        object.key("DefaultAction").string(var_1588.as_str());
    }
    if let Some(var_1589) = &input.rules {
        let mut array_1590 = object.key("Rules").start_array();
        for item_1591 in var_1589 {
            {
                let mut object_1592 = array_1590.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_waf_web_acl_rule(
                    &mut object_1592,
                    item_1591,
                )?;
                object_1592.finish();
            }
        }
        array_1590.finish();
    }
    if let Some(var_1593) = &input.web_acl_id {
        object.key("WebAclId").string(var_1593.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_rds_db_snapshot_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRdsDbSnapshotDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1594) = &input.db_snapshot_identifier {
        object.key("DbSnapshotIdentifier").string(var_1594.as_str());
    }
    if let Some(var_1595) = &input.db_instance_identifier {
        object.key("DbInstanceIdentifier").string(var_1595.as_str());
    }
    if let Some(var_1596) = &input.snapshot_create_time {
        object.key("SnapshotCreateTime").string(var_1596.as_str());
    }
    if let Some(var_1597) = &input.engine {
        object.key("Engine").string(var_1597.as_str());
    }
    if input.allocated_storage != 0 {
        object.key("AllocatedStorage").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.allocated_storage).into()),
        );
    }
    if let Some(var_1598) = &input.status {
        object.key("Status").string(var_1598.as_str());
    }
    if input.port != 0 {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.port).into()),
        );
    }
    if let Some(var_1599) = &input.availability_zone {
        object.key("AvailabilityZone").string(var_1599.as_str());
    }
    if let Some(var_1600) = &input.vpc_id {
        object.key("VpcId").string(var_1600.as_str());
    }
    if let Some(var_1601) = &input.instance_create_time {
        object.key("InstanceCreateTime").string(var_1601.as_str());
    }
    if let Some(var_1602) = &input.master_username {
        object.key("MasterUsername").string(var_1602.as_str());
    }
    if let Some(var_1603) = &input.engine_version {
        object.key("EngineVersion").string(var_1603.as_str());
    }
    if let Some(var_1604) = &input.license_model {
        object.key("LicenseModel").string(var_1604.as_str());
    }
    if let Some(var_1605) = &input.snapshot_type {
        object.key("SnapshotType").string(var_1605.as_str());
    }
    if input.iops != 0 {
        object.key("Iops").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.iops).into()),
        );
    }
    if let Some(var_1606) = &input.option_group_name {
        object.key("OptionGroupName").string(var_1606.as_str());
    }
    if input.percent_progress != 0 {
        object.key("PercentProgress").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.percent_progress).into()),
        );
    }
    if let Some(var_1607) = &input.source_region {
        object.key("SourceRegion").string(var_1607.as_str());
    }
    if let Some(var_1608) = &input.source_db_snapshot_identifier {
        object
            .key("SourceDbSnapshotIdentifier")
            .string(var_1608.as_str());
    }
    if let Some(var_1609) = &input.storage_type {
        object.key("StorageType").string(var_1609.as_str());
    }
    if let Some(var_1610) = &input.tde_credential_arn {
        object.key("TdeCredentialArn").string(var_1610.as_str());
    }
    if input.encrypted {
        object.key("Encrypted").boolean(input.encrypted);
    }
    if let Some(var_1611) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1611.as_str());
    }
    if let Some(var_1612) = &input.timezone {
        object.key("Timezone").string(var_1612.as_str());
    }
    if input.iam_database_authentication_enabled {
        object
            .key("IamDatabaseAuthenticationEnabled")
            .boolean(input.iam_database_authentication_enabled);
    }
    if let Some(var_1613) = &input.processor_features {
        let mut array_1614 = object.key("ProcessorFeatures").start_array();
        for item_1615 in var_1613 {
            {
                let mut object_1616 = array_1614.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_rds_db_processor_feature(
                    &mut object_1616,
                    item_1615,
                )?;
                object_1616.finish();
            }
        }
        array_1614.finish();
    }
    if let Some(var_1617) = &input.dbi_resource_id {
        object.key("DbiResourceId").string(var_1617.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_rds_db_cluster_snapshot_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRdsDbClusterSnapshotDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1618) = &input.availability_zones {
        let mut array_1619 = object.key("AvailabilityZones").start_array();
        for item_1620 in var_1618 {
            {
                array_1619.value().string(item_1620.as_str());
            }
        }
        array_1619.finish();
    }
    if let Some(var_1621) = &input.snapshot_create_time {
        object.key("SnapshotCreateTime").string(var_1621.as_str());
    }
    if let Some(var_1622) = &input.engine {
        object.key("Engine").string(var_1622.as_str());
    }
    if input.allocated_storage != 0 {
        object.key("AllocatedStorage").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.allocated_storage).into()),
        );
    }
    if let Some(var_1623) = &input.status {
        object.key("Status").string(var_1623.as_str());
    }
    if input.port != 0 {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.port).into()),
        );
    }
    if let Some(var_1624) = &input.vpc_id {
        object.key("VpcId").string(var_1624.as_str());
    }
    if let Some(var_1625) = &input.cluster_create_time {
        object.key("ClusterCreateTime").string(var_1625.as_str());
    }
    if let Some(var_1626) = &input.master_username {
        object.key("MasterUsername").string(var_1626.as_str());
    }
    if let Some(var_1627) = &input.engine_version {
        object.key("EngineVersion").string(var_1627.as_str());
    }
    if let Some(var_1628) = &input.license_model {
        object.key("LicenseModel").string(var_1628.as_str());
    }
    if let Some(var_1629) = &input.snapshot_type {
        object.key("SnapshotType").string(var_1629.as_str());
    }
    if input.percent_progress != 0 {
        object.key("PercentProgress").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.percent_progress).into()),
        );
    }
    if input.storage_encrypted {
        object
            .key("StorageEncrypted")
            .boolean(input.storage_encrypted);
    }
    if let Some(var_1630) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1630.as_str());
    }
    if let Some(var_1631) = &input.db_cluster_identifier {
        object.key("DbClusterIdentifier").string(var_1631.as_str());
    }
    if let Some(var_1632) = &input.db_cluster_snapshot_identifier {
        object
            .key("DbClusterSnapshotIdentifier")
            .string(var_1632.as_str());
    }
    if input.iam_database_authentication_enabled {
        object
            .key("IamDatabaseAuthenticationEnabled")
            .boolean(input.iam_database_authentication_enabled);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_rds_db_cluster_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRdsDbClusterDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.allocated_storage != 0 {
        object.key("AllocatedStorage").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.allocated_storage).into()),
        );
    }
    if let Some(var_1633) = &input.availability_zones {
        let mut array_1634 = object.key("AvailabilityZones").start_array();
        for item_1635 in var_1633 {
            {
                array_1634.value().string(item_1635.as_str());
            }
        }
        array_1634.finish();
    }
    if input.backup_retention_period != 0 {
        object.key("BackupRetentionPeriod").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.backup_retention_period).into()),
        );
    }
    if let Some(var_1636) = &input.database_name {
        object.key("DatabaseName").string(var_1636.as_str());
    }
    if let Some(var_1637) = &input.status {
        object.key("Status").string(var_1637.as_str());
    }
    if let Some(var_1638) = &input.endpoint {
        object.key("Endpoint").string(var_1638.as_str());
    }
    if let Some(var_1639) = &input.reader_endpoint {
        object.key("ReaderEndpoint").string(var_1639.as_str());
    }
    if let Some(var_1640) = &input.custom_endpoints {
        let mut array_1641 = object.key("CustomEndpoints").start_array();
        for item_1642 in var_1640 {
            {
                array_1641.value().string(item_1642.as_str());
            }
        }
        array_1641.finish();
    }
    if input.multi_az {
        object.key("MultiAz").boolean(input.multi_az);
    }
    if let Some(var_1643) = &input.engine {
        object.key("Engine").string(var_1643.as_str());
    }
    if let Some(var_1644) = &input.engine_version {
        object.key("EngineVersion").string(var_1644.as_str());
    }
    if input.port != 0 {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.port).into()),
        );
    }
    if let Some(var_1645) = &input.master_username {
        object.key("MasterUsername").string(var_1645.as_str());
    }
    if let Some(var_1646) = &input.preferred_backup_window {
        object
            .key("PreferredBackupWindow")
            .string(var_1646.as_str());
    }
    if let Some(var_1647) = &input.preferred_maintenance_window {
        object
            .key("PreferredMaintenanceWindow")
            .string(var_1647.as_str());
    }
    if let Some(var_1648) = &input.read_replica_identifiers {
        let mut array_1649 = object.key("ReadReplicaIdentifiers").start_array();
        for item_1650 in var_1648 {
            {
                array_1649.value().string(item_1650.as_str());
            }
        }
        array_1649.finish();
    }
    if let Some(var_1651) = &input.vpc_security_groups {
        let mut array_1652 = object.key("VpcSecurityGroups").start_array();
        for item_1653 in var_1651 {
            {
                let mut object_1654 = array_1652.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_rds_db_instance_vpc_security_group(&mut object_1654, item_1653)?;
                object_1654.finish();
            }
        }
        array_1652.finish();
    }
    if let Some(var_1655) = &input.hosted_zone_id {
        object.key("HostedZoneId").string(var_1655.as_str());
    }
    if input.storage_encrypted {
        object
            .key("StorageEncrypted")
            .boolean(input.storage_encrypted);
    }
    if let Some(var_1656) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1656.as_str());
    }
    if let Some(var_1657) = &input.db_cluster_resource_id {
        object.key("DbClusterResourceId").string(var_1657.as_str());
    }
    if let Some(var_1658) = &input.associated_roles {
        let mut array_1659 = object.key("AssociatedRoles").start_array();
        for item_1660 in var_1658 {
            {
                let mut object_1661 = array_1659.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_rds_db_cluster_associated_role(&mut object_1661, item_1660)?;
                object_1661.finish();
            }
        }
        array_1659.finish();
    }
    if let Some(var_1662) = &input.cluster_create_time {
        object.key("ClusterCreateTime").string(var_1662.as_str());
    }
    if let Some(var_1663) = &input.enabled_cloud_watch_logs_exports {
        let mut array_1664 = object.key("EnabledCloudWatchLogsExports").start_array();
        for item_1665 in var_1663 {
            {
                array_1664.value().string(item_1665.as_str());
            }
        }
        array_1664.finish();
    }
    if let Some(var_1666) = &input.engine_mode {
        object.key("EngineMode").string(var_1666.as_str());
    }
    if input.deletion_protection {
        object
            .key("DeletionProtection")
            .boolean(input.deletion_protection);
    }
    if input.http_endpoint_enabled {
        object
            .key("HttpEndpointEnabled")
            .boolean(input.http_endpoint_enabled);
    }
    if let Some(var_1667) = &input.activity_stream_status {
        object.key("ActivityStreamStatus").string(var_1667.as_str());
    }
    if input.copy_tags_to_snapshot {
        object
            .key("CopyTagsToSnapshot")
            .boolean(input.copy_tags_to_snapshot);
    }
    if input.cross_account_clone {
        object
            .key("CrossAccountClone")
            .boolean(input.cross_account_clone);
    }
    if let Some(var_1668) = &input.domain_memberships {
        let mut array_1669 = object.key("DomainMemberships").start_array();
        for item_1670 in var_1668 {
            {
                let mut object_1671 = array_1669.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_rds_db_domain_membership(
                    &mut object_1671,
                    item_1670,
                )?;
                object_1671.finish();
            }
        }
        array_1669.finish();
    }
    if let Some(var_1672) = &input.db_cluster_parameter_group {
        object
            .key("DbClusterParameterGroup")
            .string(var_1672.as_str());
    }
    if let Some(var_1673) = &input.db_subnet_group {
        object.key("DbSubnetGroup").string(var_1673.as_str());
    }
    if let Some(var_1674) = &input.db_cluster_option_group_memberships {
        let mut array_1675 = object.key("DbClusterOptionGroupMemberships").start_array();
        for item_1676 in var_1674 {
            {
                let mut object_1677 = array_1675.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_rds_db_cluster_option_group_membership(&mut object_1677, item_1676)?;
                object_1677.finish();
            }
        }
        array_1675.finish();
    }
    if let Some(var_1678) = &input.db_cluster_identifier {
        object.key("DbClusterIdentifier").string(var_1678.as_str());
    }
    if let Some(var_1679) = &input.db_cluster_members {
        let mut array_1680 = object.key("DbClusterMembers").start_array();
        for item_1681 in var_1679 {
            {
                let mut object_1682 = array_1680.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_rds_db_cluster_member(
                    &mut object_1682,
                    item_1681,
                )?;
                object_1682.finish();
            }
        }
        array_1680.finish();
    }
    if input.iam_database_authentication_enabled {
        object
            .key("IamDatabaseAuthenticationEnabled")
            .boolean(input.iam_database_authentication_enabled);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_cluster_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsClusterDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1683) = &input.capacity_providers {
        let mut array_1684 = object.key("CapacityProviders").start_array();
        for item_1685 in var_1683 {
            {
                array_1684.value().string(item_1685.as_str());
            }
        }
        array_1684.finish();
    }
    if let Some(var_1686) = &input.cluster_settings {
        let mut array_1687 = object.key("ClusterSettings").start_array();
        for item_1688 in var_1686 {
            {
                let mut object_1689 = array_1687.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_ecs_cluster_cluster_settings_details(&mut object_1689, item_1688)?;
                object_1689.finish();
            }
        }
        array_1687.finish();
    }
    if let Some(var_1690) = &input.configuration {
        let mut object_1691 = object.key("Configuration").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_ecs_cluster_configuration_details(
            &mut object_1691,
            var_1690,
        )?;
        object_1691.finish();
    }
    if let Some(var_1692) = &input.default_capacity_provider_strategy {
        let mut array_1693 = object.key("DefaultCapacityProviderStrategy").start_array();
        for item_1694 in var_1692 {
            {
                let mut object_1695 = array_1693.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_ecs_cluster_default_capacity_provider_strategy_details(&mut object_1695, item_1694)?;
                object_1695.finish();
            }
        }
        array_1693.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_task_definition_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1696) = &input.container_definitions {
        let mut array_1697 = object.key("ContainerDefinitions").start_array();
        for item_1698 in var_1696 {
            {
                let mut object_1699 = array_1697.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_ecs_task_definition_container_definitions_details(&mut object_1699, item_1698)?;
                object_1699.finish();
            }
        }
        array_1697.finish();
    }
    if let Some(var_1700) = &input.cpu {
        object.key("Cpu").string(var_1700.as_str());
    }
    if let Some(var_1701) = &input.execution_role_arn {
        object.key("ExecutionRoleArn").string(var_1701.as_str());
    }
    if let Some(var_1702) = &input.family {
        object.key("Family").string(var_1702.as_str());
    }
    if let Some(var_1703) = &input.inference_accelerators {
        let mut array_1704 = object.key("InferenceAccelerators").start_array();
        for item_1705 in var_1703 {
            {
                let mut object_1706 = array_1704.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_ecs_task_definition_inference_accelerators_details(&mut object_1706, item_1705)?;
                object_1706.finish();
            }
        }
        array_1704.finish();
    }
    if let Some(var_1707) = &input.ipc_mode {
        object.key("IpcMode").string(var_1707.as_str());
    }
    if let Some(var_1708) = &input.memory {
        object.key("Memory").string(var_1708.as_str());
    }
    if let Some(var_1709) = &input.network_mode {
        object.key("NetworkMode").string(var_1709.as_str());
    }
    if let Some(var_1710) = &input.pid_mode {
        object.key("PidMode").string(var_1710.as_str());
    }
    if let Some(var_1711) = &input.placement_constraints {
        let mut array_1712 = object.key("PlacementConstraints").start_array();
        for item_1713 in var_1711 {
            {
                let mut object_1714 = array_1712.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_ecs_task_definition_placement_constraints_details(&mut object_1714, item_1713)?;
                object_1714.finish();
            }
        }
        array_1712.finish();
    }
    if let Some(var_1715) = &input.proxy_configuration {
        let mut object_1716 = object.key("ProxyConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_ecs_task_definition_proxy_configuration_details(&mut object_1716, var_1715)?;
        object_1716.finish();
    }
    if let Some(var_1717) = &input.requires_compatibilities {
        let mut array_1718 = object.key("RequiresCompatibilities").start_array();
        for item_1719 in var_1717 {
            {
                array_1718.value().string(item_1719.as_str());
            }
        }
        array_1718.finish();
    }
    if let Some(var_1720) = &input.task_role_arn {
        object.key("TaskRoleArn").string(var_1720.as_str());
    }
    if let Some(var_1721) = &input.volumes {
        let mut array_1722 = object.key("Volumes").start_array();
        for item_1723 in var_1721 {
            {
                let mut object_1724 = array_1722.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_ecs_task_definition_volumes_details(&mut object_1724, item_1723)?;
                object_1724.finish();
            }
        }
        array_1722.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_container_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ContainerDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1725) = &input.name {
        object.key("Name").string(var_1725.as_str());
    }
    if let Some(var_1726) = &input.image_id {
        object.key("ImageId").string(var_1726.as_str());
    }
    if let Some(var_1727) = &input.image_name {
        object.key("ImageName").string(var_1727.as_str());
    }
    if let Some(var_1728) = &input.launched_at {
        object.key("LaunchedAt").string(var_1728.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_rds_event_subscription_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRdsEventSubscriptionDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1729) = &input.cust_subscription_id {
        object.key("CustSubscriptionId").string(var_1729.as_str());
    }
    if let Some(var_1730) = &input.customer_aws_id {
        object.key("CustomerAwsId").string(var_1730.as_str());
    }
    if input.enabled {
        object.key("Enabled").boolean(input.enabled);
    }
    if let Some(var_1731) = &input.event_categories_list {
        let mut array_1732 = object.key("EventCategoriesList").start_array();
        for item_1733 in var_1731 {
            {
                array_1732.value().string(item_1733.as_str());
            }
        }
        array_1732.finish();
    }
    if let Some(var_1734) = &input.event_subscription_arn {
        object.key("EventSubscriptionArn").string(var_1734.as_str());
    }
    if let Some(var_1735) = &input.sns_topic_arn {
        object.key("SnsTopicArn").string(var_1735.as_str());
    }
    if let Some(var_1736) = &input.source_ids_list {
        let mut array_1737 = object.key("SourceIdsList").start_array();
        for item_1738 in var_1736 {
            {
                array_1737.value().string(item_1738.as_str());
            }
        }
        array_1737.finish();
    }
    if let Some(var_1739) = &input.source_type {
        object.key("SourceType").string(var_1739.as_str());
    }
    if let Some(var_1740) = &input.status {
        object.key("Status").string(var_1740.as_str());
    }
    if let Some(var_1741) = &input.subscription_creation_time {
        object
            .key("SubscriptionCreationTime")
            .string(var_1741.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_service_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsServiceDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1742) = &input.capacity_provider_strategy {
        let mut array_1743 = object.key("CapacityProviderStrategy").start_array();
        for item_1744 in var_1742 {
            {
                let mut object_1745 = array_1743.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_ecs_service_capacity_provider_strategy_details(&mut object_1745, item_1744)?;
                object_1745.finish();
            }
        }
        array_1743.finish();
    }
    if let Some(var_1746) = &input.cluster {
        object.key("Cluster").string(var_1746.as_str());
    }
    if let Some(var_1747) = &input.deployment_configuration {
        let mut object_1748 = object.key("DeploymentConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_ecs_service_deployment_configuration_details(&mut object_1748, var_1747)?;
        object_1748.finish();
    }
    if let Some(var_1749) = &input.deployment_controller {
        let mut object_1750 = object.key("DeploymentController").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_ecs_service_deployment_controller_details(&mut object_1750, var_1749)?;
        object_1750.finish();
    }
    if input.desired_count != 0 {
        object.key("DesiredCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.desired_count).into()),
        );
    }
    if input.enable_ecs_managed_tags {
        object
            .key("EnableEcsManagedTags")
            .boolean(input.enable_ecs_managed_tags);
    }
    if input.enable_execute_command {
        object
            .key("EnableExecuteCommand")
            .boolean(input.enable_execute_command);
    }
    if input.health_check_grace_period_seconds != 0 {
        object.key("HealthCheckGracePeriodSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.health_check_grace_period_seconds).into()),
        );
    }
    if let Some(var_1751) = &input.launch_type {
        object.key("LaunchType").string(var_1751.as_str());
    }
    if let Some(var_1752) = &input.load_balancers {
        let mut array_1753 = object.key("LoadBalancers").start_array();
        for item_1754 in var_1752 {
            {
                let mut object_1755 = array_1753.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_ecs_service_load_balancers_details(&mut object_1755, item_1754)?;
                object_1755.finish();
            }
        }
        array_1753.finish();
    }
    if let Some(var_1756) = &input.name {
        object.key("Name").string(var_1756.as_str());
    }
    if let Some(var_1757) = &input.network_configuration {
        let mut object_1758 = object.key("NetworkConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_ecs_service_network_configuration_details(&mut object_1758, var_1757)?;
        object_1758.finish();
    }
    if let Some(var_1759) = &input.placement_constraints {
        let mut array_1760 = object.key("PlacementConstraints").start_array();
        for item_1761 in var_1759 {
            {
                let mut object_1762 = array_1760.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_ecs_service_placement_constraints_details(&mut object_1762, item_1761)?;
                object_1762.finish();
            }
        }
        array_1760.finish();
    }
    if let Some(var_1763) = &input.placement_strategies {
        let mut array_1764 = object.key("PlacementStrategies").start_array();
        for item_1765 in var_1763 {
            {
                let mut object_1766 = array_1764.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_ecs_service_placement_strategies_details(&mut object_1766, item_1765)?;
                object_1766.finish();
            }
        }
        array_1764.finish();
    }
    if let Some(var_1767) = &input.platform_version {
        object.key("PlatformVersion").string(var_1767.as_str());
    }
    if let Some(var_1768) = &input.propagate_tags {
        object.key("PropagateTags").string(var_1768.as_str());
    }
    if let Some(var_1769) = &input.role {
        object.key("Role").string(var_1769.as_str());
    }
    if let Some(var_1770) = &input.scheduling_strategy {
        object.key("SchedulingStrategy").string(var_1770.as_str());
    }
    if let Some(var_1771) = &input.service_arn {
        object.key("ServiceArn").string(var_1771.as_str());
    }
    if let Some(var_1772) = &input.service_name {
        object.key("ServiceName").string(var_1772.as_str());
    }
    if let Some(var_1773) = &input.service_registries {
        let mut array_1774 = object.key("ServiceRegistries").start_array();
        for item_1775 in var_1773 {
            {
                let mut object_1776 = array_1774.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_ecs_service_service_registries_details(&mut object_1776, item_1775)?;
                object_1776.finish();
            }
        }
        array_1774.finish();
    }
    if let Some(var_1777) = &input.task_definition {
        object.key("TaskDefinition").string(var_1777.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_auto_scaling_launch_configuration_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsAutoScalingLaunchConfigurationDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.associate_public_ip_address {
        object
            .key("AssociatePublicIpAddress")
            .boolean(input.associate_public_ip_address);
    }
    if let Some(var_1778) = &input.block_device_mappings {
        let mut array_1779 = object.key("BlockDeviceMappings").start_array();
        for item_1780 in var_1778 {
            {
                let mut object_1781 = array_1779.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_auto_scaling_launch_configuration_block_device_mappings_details(&mut object_1781, item_1780)?;
                object_1781.finish();
            }
        }
        array_1779.finish();
    }
    if let Some(var_1782) = &input.classic_link_vpc_id {
        object.key("ClassicLinkVpcId").string(var_1782.as_str());
    }
    if let Some(var_1783) = &input.classic_link_vpc_security_groups {
        let mut array_1784 = object.key("ClassicLinkVpcSecurityGroups").start_array();
        for item_1785 in var_1783 {
            {
                array_1784.value().string(item_1785.as_str());
            }
        }
        array_1784.finish();
    }
    if let Some(var_1786) = &input.created_time {
        object.key("CreatedTime").string(var_1786.as_str());
    }
    if input.ebs_optimized {
        object.key("EbsOptimized").boolean(input.ebs_optimized);
    }
    if let Some(var_1787) = &input.iam_instance_profile {
        object.key("IamInstanceProfile").string(var_1787.as_str());
    }
    if let Some(var_1788) = &input.image_id {
        object.key("ImageId").string(var_1788.as_str());
    }
    if let Some(var_1789) = &input.instance_monitoring {
        let mut object_1790 = object.key("InstanceMonitoring").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_auto_scaling_launch_configuration_instance_monitoring_details(&mut object_1790, var_1789)?;
        object_1790.finish();
    }
    if let Some(var_1791) = &input.instance_type {
        object.key("InstanceType").string(var_1791.as_str());
    }
    if let Some(var_1792) = &input.kernel_id {
        object.key("KernelId").string(var_1792.as_str());
    }
    if let Some(var_1793) = &input.key_name {
        object.key("KeyName").string(var_1793.as_str());
    }
    if let Some(var_1794) = &input.launch_configuration_name {
        object
            .key("LaunchConfigurationName")
            .string(var_1794.as_str());
    }
    if let Some(var_1795) = &input.placement_tenancy {
        object.key("PlacementTenancy").string(var_1795.as_str());
    }
    if let Some(var_1796) = &input.ramdisk_id {
        object.key("RamdiskId").string(var_1796.as_str());
    }
    if let Some(var_1797) = &input.security_groups {
        let mut array_1798 = object.key("SecurityGroups").start_array();
        for item_1799 in var_1797 {
            {
                array_1798.value().string(item_1799.as_str());
            }
        }
        array_1798.finish();
    }
    if let Some(var_1800) = &input.spot_price {
        object.key("SpotPrice").string(var_1800.as_str());
    }
    if let Some(var_1801) = &input.user_data {
        object.key("UserData").string(var_1801.as_str());
    }
    if let Some(var_1802) = &input.metadata_options {
        let mut object_1803 = object.key("MetadataOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_auto_scaling_launch_configuration_metadata_options(&mut object_1803, var_1802)?;
        object_1803.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ec2_vpn_connection_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEc2VpnConnectionDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1804) = &input.vpn_connection_id {
        object.key("VpnConnectionId").string(var_1804.as_str());
    }
    if let Some(var_1805) = &input.state {
        object.key("State").string(var_1805.as_str());
    }
    if let Some(var_1806) = &input.customer_gateway_id {
        object.key("CustomerGatewayId").string(var_1806.as_str());
    }
    if let Some(var_1807) = &input.customer_gateway_configuration {
        object
            .key("CustomerGatewayConfiguration")
            .string(var_1807.as_str());
    }
    if let Some(var_1808) = &input.r#type {
        object.key("Type").string(var_1808.as_str());
    }
    if let Some(var_1809) = &input.vpn_gateway_id {
        object.key("VpnGatewayId").string(var_1809.as_str());
    }
    if let Some(var_1810) = &input.category {
        object.key("Category").string(var_1810.as_str());
    }
    if let Some(var_1811) = &input.vgw_telemetry {
        let mut array_1812 = object.key("VgwTelemetry").start_array();
        for item_1813 in var_1811 {
            {
                let mut object_1814 = array_1812.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_ec2_vpn_connection_vgw_telemetry_details(&mut object_1814, item_1813)?;
                object_1814.finish();
            }
        }
        array_1812.finish();
    }
    if let Some(var_1815) = &input.options {
        let mut object_1816 = object.key("Options").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_ec2_vpn_connection_options_details(
            &mut object_1816,
            var_1815,
        )?;
        object_1816.finish();
    }
    if let Some(var_1817) = &input.routes {
        let mut array_1818 = object.key("Routes").start_array();
        for item_1819 in var_1817 {
            {
                let mut object_1820 = array_1818.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_ec2_vpn_connection_routes_details(&mut object_1820, item_1819)?;
                object_1820.finish();
            }
        }
        array_1818.finish();
    }
    if let Some(var_1821) = &input.transit_gateway_id {
        object.key("TransitGatewayId").string(var_1821.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecr_container_image_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcrContainerImageDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1822) = &input.registry_id {
        object.key("RegistryId").string(var_1822.as_str());
    }
    if let Some(var_1823) = &input.repository_name {
        object.key("RepositoryName").string(var_1823.as_str());
    }
    if let Some(var_1824) = &input.architecture {
        object.key("Architecture").string(var_1824.as_str());
    }
    if let Some(var_1825) = &input.image_digest {
        object.key("ImageDigest").string(var_1825.as_str());
    }
    if let Some(var_1826) = &input.image_tags {
        let mut array_1827 = object.key("ImageTags").start_array();
        for item_1828 in var_1826 {
            {
                array_1827.value().string(item_1828.as_str());
            }
        }
        array_1827.finish();
    }
    if let Some(var_1829) = &input.image_published_at {
        object.key("ImagePublishedAt").string(var_1829.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_open_search_service_domain_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsOpenSearchServiceDomainDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1830) = &input.arn {
        object.key("Arn").string(var_1830.as_str());
    }
    if let Some(var_1831) = &input.access_policies {
        object.key("AccessPolicies").string(var_1831.as_str());
    }
    if let Some(var_1832) = &input.domain_name {
        object.key("DomainName").string(var_1832.as_str());
    }
    if let Some(var_1833) = &input.id {
        object.key("Id").string(var_1833.as_str());
    }
    if let Some(var_1834) = &input.domain_endpoint {
        object.key("DomainEndpoint").string(var_1834.as_str());
    }
    if let Some(var_1835) = &input.engine_version {
        object.key("EngineVersion").string(var_1835.as_str());
    }
    if let Some(var_1836) = &input.encryption_at_rest_options {
        let mut object_1837 = object.key("EncryptionAtRestOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_open_search_service_domain_encryption_at_rest_options_details(&mut object_1837, var_1836)?;
        object_1837.finish();
    }
    if let Some(var_1838) = &input.node_to_node_encryption_options {
        let mut object_1839 = object.key("NodeToNodeEncryptionOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_open_search_service_domain_node_to_node_encryption_options_details(&mut object_1839, var_1838)?;
        object_1839.finish();
    }
    if let Some(var_1840) = &input.service_software_options {
        let mut object_1841 = object.key("ServiceSoftwareOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_open_search_service_domain_service_software_options_details(&mut object_1841, var_1840)?;
        object_1841.finish();
    }
    if let Some(var_1842) = &input.cluster_config {
        let mut object_1843 = object.key("ClusterConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_open_search_service_domain_cluster_config_details(&mut object_1843, var_1842)?;
        object_1843.finish();
    }
    if let Some(var_1844) = &input.domain_endpoint_options {
        let mut object_1845 = object.key("DomainEndpointOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_open_search_service_domain_domain_endpoint_options_details(&mut object_1845, var_1844)?;
        object_1845.finish();
    }
    if let Some(var_1846) = &input.vpc_options {
        let mut object_1847 = object.key("VpcOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_open_search_service_domain_vpc_options_details(&mut object_1847, var_1846)?;
        object_1847.finish();
    }
    if let Some(var_1848) = &input.log_publishing_options {
        let mut object_1849 = object.key("LogPublishingOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_open_search_service_domain_log_publishing_options_details(&mut object_1849, var_1848)?;
        object_1849.finish();
    }
    if let Some(var_1850) = &input.domain_endpoints {
        let mut object_1851 = object.key("DomainEndpoints").start_object();
        for (key_1852, value_1853) in var_1850 {
            {
                object_1851.key(key_1852).string(value_1853.as_str());
            }
        }
        object_1851.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ec2_vpc_endpoint_service_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEc2VpcEndpointServiceDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.acceptance_required {
        object
            .key("AcceptanceRequired")
            .boolean(input.acceptance_required);
    }
    if let Some(var_1854) = &input.availability_zones {
        let mut array_1855 = object.key("AvailabilityZones").start_array();
        for item_1856 in var_1854 {
            {
                array_1855.value().string(item_1856.as_str());
            }
        }
        array_1855.finish();
    }
    if let Some(var_1857) = &input.base_endpoint_dns_names {
        let mut array_1858 = object.key("BaseEndpointDnsNames").start_array();
        for item_1859 in var_1857 {
            {
                array_1858.value().string(item_1859.as_str());
            }
        }
        array_1858.finish();
    }
    if input.manages_vpc_endpoints {
        object
            .key("ManagesVpcEndpoints")
            .boolean(input.manages_vpc_endpoints);
    }
    if let Some(var_1860) = &input.gateway_load_balancer_arns {
        let mut array_1861 = object.key("GatewayLoadBalancerArns").start_array();
        for item_1862 in var_1860 {
            {
                array_1861.value().string(item_1862.as_str());
            }
        }
        array_1861.finish();
    }
    if let Some(var_1863) = &input.network_load_balancer_arns {
        let mut array_1864 = object.key("NetworkLoadBalancerArns").start_array();
        for item_1865 in var_1863 {
            {
                array_1864.value().string(item_1865.as_str());
            }
        }
        array_1864.finish();
    }
    if let Some(var_1866) = &input.private_dns_name {
        object.key("PrivateDnsName").string(var_1866.as_str());
    }
    if let Some(var_1867) = &input.service_id {
        object.key("ServiceId").string(var_1867.as_str());
    }
    if let Some(var_1868) = &input.service_name {
        object.key("ServiceName").string(var_1868.as_str());
    }
    if let Some(var_1869) = &input.service_state {
        object.key("ServiceState").string(var_1869.as_str());
    }
    if let Some(var_1870) = &input.service_type {
        let mut array_1871 = object.key("ServiceType").start_array();
        for item_1872 in var_1870 {
            {
                let mut object_1873 = array_1871.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_ec2_vpc_endpoint_service_service_type_details(&mut object_1873, item_1872)?;
                object_1873.finish();
            }
        }
        array_1871.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_xray_encryption_config_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsXrayEncryptionConfigDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1874) = &input.key_id {
        object.key("KeyId").string(var_1874.as_str());
    }
    if let Some(var_1875) = &input.status {
        object.key("Status").string(var_1875.as_str());
    }
    if let Some(var_1876) = &input.r#type {
        object.key("Type").string(var_1876.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_waf_rate_based_rule_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsWafRateBasedRuleDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1877) = &input.metric_name {
        object.key("MetricName").string(var_1877.as_str());
    }
    if let Some(var_1878) = &input.name {
        object.key("Name").string(var_1878.as_str());
    }
    if let Some(var_1879) = &input.rate_key {
        object.key("RateKey").string(var_1879.as_str());
    }
    if input.rate_limit != 0 {
        object.key("RateLimit").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.rate_limit).into()),
        );
    }
    if let Some(var_1880) = &input.rule_id {
        object.key("RuleId").string(var_1880.as_str());
    }
    if let Some(var_1881) = &input.match_predicates {
        let mut array_1882 = object.key("MatchPredicates").start_array();
        for item_1883 in var_1881 {
            {
                let mut object_1884 = array_1882.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_waf_rate_based_rule_match_predicate(&mut object_1884, item_1883)?;
                object_1884.finish();
            }
        }
        array_1882.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_waf_regional_rate_based_rule_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsWafRegionalRateBasedRuleDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1885) = &input.metric_name {
        object.key("MetricName").string(var_1885.as_str());
    }
    if let Some(var_1886) = &input.name {
        object.key("Name").string(var_1886.as_str());
    }
    if let Some(var_1887) = &input.rate_key {
        object.key("RateKey").string(var_1887.as_str());
    }
    if input.rate_limit != 0 {
        object.key("RateLimit").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.rate_limit).into()),
        );
    }
    if let Some(var_1888) = &input.rule_id {
        object.key("RuleId").string(var_1888.as_str());
    }
    if let Some(var_1889) = &input.match_predicates {
        let mut array_1890 = object.key("MatchPredicates").start_array();
        for item_1891 in var_1889 {
            {
                let mut object_1892 = array_1890.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_waf_regional_rate_based_rule_match_predicate(&mut object_1892, item_1891)?;
                object_1892.finish();
            }
        }
        array_1890.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecr_repository_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcrRepositoryDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1893) = &input.arn {
        object.key("Arn").string(var_1893.as_str());
    }
    if let Some(var_1894) = &input.image_scanning_configuration {
        let mut object_1895 = object.key("ImageScanningConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_ecr_repository_image_scanning_configuration_details(&mut object_1895, var_1894)?;
        object_1895.finish();
    }
    if let Some(var_1896) = &input.image_tag_mutability {
        object.key("ImageTagMutability").string(var_1896.as_str());
    }
    if let Some(var_1897) = &input.lifecycle_policy {
        let mut object_1898 = object.key("LifecyclePolicy").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_ecr_repository_lifecycle_policy_details(&mut object_1898, var_1897)?;
        object_1898.finish();
    }
    if let Some(var_1899) = &input.repository_name {
        object.key("RepositoryName").string(var_1899.as_str());
    }
    if let Some(var_1900) = &input.repository_policy_text {
        object.key("RepositoryPolicyText").string(var_1900.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_eks_cluster_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEksClusterDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1901) = &input.arn {
        object.key("Arn").string(var_1901.as_str());
    }
    if let Some(var_1902) = &input.certificate_authority_data {
        object
            .key("CertificateAuthorityData")
            .string(var_1902.as_str());
    }
    if let Some(var_1903) = &input.cluster_status {
        object.key("ClusterStatus").string(var_1903.as_str());
    }
    if let Some(var_1904) = &input.endpoint {
        object.key("Endpoint").string(var_1904.as_str());
    }
    if let Some(var_1905) = &input.name {
        object.key("Name").string(var_1905.as_str());
    }
    if let Some(var_1906) = &input.resources_vpc_config {
        let mut object_1907 = object.key("ResourcesVpcConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_eks_cluster_resources_vpc_config_details(&mut object_1907, var_1906)?;
        object_1907.finish();
    }
    if let Some(var_1908) = &input.role_arn {
        object.key("RoleArn").string(var_1908.as_str());
    }
    if let Some(var_1909) = &input.version {
        object.key("Version").string(var_1909.as_str());
    }
    if let Some(var_1910) = &input.logging {
        let mut object_1911 = object.key("Logging").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_eks_cluster_logging_details(
            &mut object_1911,
            var_1910,
        )?;
        object_1911.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_network_firewall_firewall_policy_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsNetworkFirewallFirewallPolicyDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1912) = &input.firewall_policy {
        let mut object_1913 = object.key("FirewallPolicy").start_object();
        crate::json_ser::serialize_structure_crate_model_firewall_policy_details(
            &mut object_1913,
            var_1912,
        )?;
        object_1913.finish();
    }
    if let Some(var_1914) = &input.firewall_policy_arn {
        object.key("FirewallPolicyArn").string(var_1914.as_str());
    }
    if let Some(var_1915) = &input.firewall_policy_id {
        object.key("FirewallPolicyId").string(var_1915.as_str());
    }
    if let Some(var_1916) = &input.firewall_policy_name {
        object.key("FirewallPolicyName").string(var_1916.as_str());
    }
    if let Some(var_1917) = &input.description {
        object.key("Description").string(var_1917.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_network_firewall_firewall_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsNetworkFirewallFirewallDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.delete_protection {
        object
            .key("DeleteProtection")
            .boolean(input.delete_protection);
    }
    if let Some(var_1918) = &input.description {
        object.key("Description").string(var_1918.as_str());
    }
    if let Some(var_1919) = &input.firewall_arn {
        object.key("FirewallArn").string(var_1919.as_str());
    }
    if let Some(var_1920) = &input.firewall_id {
        object.key("FirewallId").string(var_1920.as_str());
    }
    if let Some(var_1921) = &input.firewall_name {
        object.key("FirewallName").string(var_1921.as_str());
    }
    if let Some(var_1922) = &input.firewall_policy_arn {
        object.key("FirewallPolicyArn").string(var_1922.as_str());
    }
    if input.firewall_policy_change_protection {
        object
            .key("FirewallPolicyChangeProtection")
            .boolean(input.firewall_policy_change_protection);
    }
    if input.subnet_change_protection {
        object
            .key("SubnetChangeProtection")
            .boolean(input.subnet_change_protection);
    }
    if let Some(var_1923) = &input.subnet_mappings {
        let mut array_1924 = object.key("SubnetMappings").start_array();
        for item_1925 in var_1923 {
            {
                let mut object_1926 = array_1924.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_network_firewall_firewall_subnet_mappings_details(&mut object_1926, item_1925)?;
                object_1926.finish();
            }
        }
        array_1924.finish();
    }
    if let Some(var_1927) = &input.vpc_id {
        object.key("VpcId").string(var_1927.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_network_firewall_rule_group_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsNetworkFirewallRuleGroupDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.capacity != 0 {
        object.key("Capacity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.capacity).into()),
        );
    }
    if let Some(var_1928) = &input.description {
        object.key("Description").string(var_1928.as_str());
    }
    if let Some(var_1929) = &input.rule_group {
        let mut object_1930 = object.key("RuleGroup").start_object();
        crate::json_ser::serialize_structure_crate_model_rule_group_details(
            &mut object_1930,
            var_1929,
        )?;
        object_1930.finish();
    }
    if let Some(var_1931) = &input.rule_group_arn {
        object.key("RuleGroupArn").string(var_1931.as_str());
    }
    if let Some(var_1932) = &input.rule_group_id {
        object.key("RuleGroupId").string(var_1932.as_str());
    }
    if let Some(var_1933) = &input.rule_group_name {
        object.key("RuleGroupName").string(var_1933.as_str());
    }
    if let Some(var_1934) = &input.r#type {
        object.key("Type").string(var_1934.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_rds_db_security_group_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRdsDbSecurityGroupDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1935) = &input.db_security_group_arn {
        object.key("DbSecurityGroupArn").string(var_1935.as_str());
    }
    if let Some(var_1936) = &input.db_security_group_description {
        object
            .key("DbSecurityGroupDescription")
            .string(var_1936.as_str());
    }
    if let Some(var_1937) = &input.db_security_group_name {
        object.key("DbSecurityGroupName").string(var_1937.as_str());
    }
    if let Some(var_1938) = &input.ec2_security_groups {
        let mut array_1939 = object.key("Ec2SecurityGroups").start_array();
        for item_1940 in var_1938 {
            {
                let mut object_1941 = array_1939.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_rds_db_security_group_ec2_security_group(&mut object_1941, item_1940)?;
                object_1941.finish();
            }
        }
        array_1939.finish();
    }
    if let Some(var_1942) = &input.ip_ranges {
        let mut array_1943 = object.key("IpRanges").start_array();
        for item_1944 in var_1942 {
            {
                let mut object_1945 = array_1943.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_rds_db_security_group_ip_range(&mut object_1945, item_1944)?;
                object_1945.finish();
            }
        }
        array_1943.finish();
    }
    if let Some(var_1946) = &input.owner_id {
        object.key("OwnerId").string(var_1946.as_str());
    }
    if let Some(var_1947) = &input.vpc_id {
        object.key("VpcId").string(var_1947.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_adjustment(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Adjustment,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1948) = &input.metric {
        object.key("Metric").string(var_1948.as_str());
    }
    if let Some(var_1949) = &input.reason {
        object.key("Reason").string(var_1949.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_action_remote_ip_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ActionRemoteIpDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1950) = &input.ip_address_v4 {
        object.key("IpAddressV4").string(var_1950.as_str());
    }
    if let Some(var_1951) = &input.organization {
        let mut object_1952 = object.key("Organization").start_object();
        crate::json_ser::serialize_structure_crate_model_ip_organization_details(
            &mut object_1952,
            var_1951,
        )?;
        object_1952.finish();
    }
    if let Some(var_1953) = &input.country {
        let mut object_1954 = object.key("Country").start_object();
        crate::json_ser::serialize_structure_crate_model_country(&mut object_1954, var_1953)?;
        object_1954.finish();
    }
    if let Some(var_1955) = &input.city {
        let mut object_1956 = object.key("City").start_object();
        crate::json_ser::serialize_structure_crate_model_city(&mut object_1956, var_1955)?;
        object_1956.finish();
    }
    if let Some(var_1957) = &input.geo_location {
        let mut object_1958 = object.key("GeoLocation").start_object();
        crate::json_ser::serialize_structure_crate_model_geo_location(&mut object_1958, var_1957)?;
        object_1958.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_action_remote_port_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ActionRemotePortDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.port != 0 {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.port).into()),
        );
    }
    if let Some(var_1959) = &input.port_name {
        object.key("PortName").string(var_1959.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_action_local_port_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ActionLocalPortDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.port != 0 {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.port).into()),
        );
    }
    if let Some(var_1960) = &input.port_name {
        object.key("PortName").string(var_1960.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_api_call_action_domain_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsApiCallActionDomainDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1961) = &input.domain {
        object.key("Domain").string(var_1961.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_port_probe_detail(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PortProbeDetail,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1962) = &input.local_port_details {
        let mut object_1963 = object.key("LocalPortDetails").start_object();
        crate::json_ser::serialize_structure_crate_model_action_local_port_details(
            &mut object_1963,
            var_1962,
        )?;
        object_1963.finish();
    }
    if let Some(var_1964) = &input.local_ip_details {
        let mut object_1965 = object.key("LocalIpDetails").start_object();
        crate::json_ser::serialize_structure_crate_model_action_local_ip_details(
            &mut object_1965,
            var_1964,
        )?;
        object_1965.finish();
    }
    if let Some(var_1966) = &input.remote_ip_details {
        let mut object_1967 = object.key("RemoteIpDetails").start_object();
        crate::json_ser::serialize_structure_crate_model_action_remote_ip_details(
            &mut object_1967,
            var_1966,
        )?;
        object_1967.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_classification_status(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ClassificationStatus,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1968) = &input.code {
        object.key("Code").string(var_1968.as_str());
    }
    if let Some(var_1969) = &input.reason {
        object.key("Reason").string(var_1969.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_sensitive_data_result(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SensitiveDataResult,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1970) = &input.category {
        object.key("Category").string(var_1970.as_str());
    }
    if let Some(var_1971) = &input.detections {
        let mut array_1972 = object.key("Detections").start_array();
        for item_1973 in var_1971 {
            {
                let mut object_1974 = array_1972.value().start_object();
                crate::json_ser::serialize_structure_crate_model_sensitive_data_detections(
                    &mut object_1974,
                    item_1973,
                )?;
                object_1974.finish();
            }
        }
        array_1972.finish();
    }
    if input.total_count != 0 {
        object.key("TotalCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.total_count).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_custom_data_identifiers_result(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CustomDataIdentifiersResult,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1975) = &input.detections {
        let mut array_1976 = object.key("Detections").start_array();
        for item_1977 in var_1975 {
            {
                let mut object_1978 = array_1976.value().start_object();
                crate::json_ser::serialize_structure_crate_model_custom_data_identifiers_detections(&mut object_1978, item_1977)?;
                object_1978.finish();
            }
        }
        array_1976.finish();
    }
    if input.total_count != 0 {
        object.key("TotalCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.total_count).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_auto_scaling_auto_scaling_group_mixed_instances_policy_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsAutoScalingAutoScalingGroupMixedInstancesPolicyDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1979) = &input.instances_distribution {
        let mut object_1980 = object.key("InstancesDistribution").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_auto_scaling_auto_scaling_group_mixed_instances_policy_instances_distribution_details(&mut object_1980, var_1979)?;
        object_1980.finish();
    }
    if let Some(var_1981) = &input.launch_template {
        let mut object_1982 = object.key("LaunchTemplate").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_auto_scaling_auto_scaling_group_mixed_instances_policy_launch_template_details(&mut object_1982, var_1981)?;
        object_1982.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_auto_scaling_auto_scaling_group_availability_zones_list_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsAutoScalingAutoScalingGroupAvailabilityZonesListDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1983) = &input.value {
        object.key("Value").string(var_1983.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_auto_scaling_auto_scaling_group_launch_template_launch_template_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsAutoScalingAutoScalingGroupLaunchTemplateLaunchTemplateSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1984) = &input.launch_template_id {
        object.key("LaunchTemplateId").string(var_1984.as_str());
    }
    if let Some(var_1985) = &input.launch_template_name {
        object.key("LaunchTemplateName").string(var_1985.as_str());
    }
    if let Some(var_1986) = &input.version {
        object.key("Version").string(var_1986.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_code_build_project_artifacts_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCodeBuildProjectArtifactsDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1987) = &input.artifact_identifier {
        object.key("ArtifactIdentifier").string(var_1987.as_str());
    }
    if input.encryption_disabled {
        object
            .key("EncryptionDisabled")
            .boolean(input.encryption_disabled);
    }
    if let Some(var_1988) = &input.location {
        object.key("Location").string(var_1988.as_str());
    }
    if let Some(var_1989) = &input.name {
        object.key("Name").string(var_1989.as_str());
    }
    if let Some(var_1990) = &input.namespace_type {
        object.key("NamespaceType").string(var_1990.as_str());
    }
    if input.override_artifact_name {
        object
            .key("OverrideArtifactName")
            .boolean(input.override_artifact_name);
    }
    if let Some(var_1991) = &input.packaging {
        object.key("Packaging").string(var_1991.as_str());
    }
    if let Some(var_1992) = &input.path {
        object.key("Path").string(var_1992.as_str());
    }
    if let Some(var_1993) = &input.r#type {
        object.key("Type").string(var_1993.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_code_build_project_environment(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCodeBuildProjectEnvironment,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1994) = &input.certificate {
        object.key("Certificate").string(var_1994.as_str());
    }
    if let Some(var_1995) = &input.environment_variables {
        let mut array_1996 = object.key("EnvironmentVariables").start_array();
        for item_1997 in var_1995 {
            {
                let mut object_1998 = array_1996.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_code_build_project_environment_environment_variables_details(&mut object_1998, item_1997)?;
                object_1998.finish();
            }
        }
        array_1996.finish();
    }
    if input.privileged_mode {
        object.key("PrivilegedMode").boolean(input.privileged_mode);
    }
    if let Some(var_1999) = &input.image_pull_credentials_type {
        object
            .key("ImagePullCredentialsType")
            .string(var_1999.as_str());
    }
    if let Some(var_2000) = &input.registry_credential {
        let mut object_2001 = object.key("RegistryCredential").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_code_build_project_environment_registry_credential(&mut object_2001, var_2000)?;
        object_2001.finish();
    }
    if let Some(var_2002) = &input.r#type {
        object.key("Type").string(var_2002.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_code_build_project_source(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCodeBuildProjectSource,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2003) = &input.r#type {
        object.key("Type").string(var_2003.as_str());
    }
    if let Some(var_2004) = &input.location {
        object.key("Location").string(var_2004.as_str());
    }
    if input.git_clone_depth != 0 {
        object.key("GitCloneDepth").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.git_clone_depth).into()),
        );
    }
    if input.insecure_ssl {
        object.key("InsecureSsl").boolean(input.insecure_ssl);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_code_build_project_logs_config_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCodeBuildProjectLogsConfigDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2005) = &input.cloud_watch_logs {
        let mut object_2006 = object.key("CloudWatchLogs").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_code_build_project_logs_config_cloud_watch_logs_details(&mut object_2006, var_2005)?;
        object_2006.finish();
    }
    if let Some(var_2007) = &input.s3_logs {
        let mut object_2008 = object.key("S3Logs").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_code_build_project_logs_config_s3_logs_details(&mut object_2008, var_2007)?;
        object_2008.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_code_build_project_vpc_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCodeBuildProjectVpcConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2009) = &input.vpc_id {
        object.key("VpcId").string(var_2009.as_str());
    }
    if let Some(var_2010) = &input.subnets {
        let mut array_2011 = object.key("Subnets").start_array();
        for item_2012 in var_2010 {
            {
                array_2011.value().string(item_2012.as_str());
            }
        }
        array_2011.finish();
    }
    if let Some(var_2013) = &input.security_group_ids {
        let mut array_2014 = object.key("SecurityGroupIds").start_array();
        for item_2015 in var_2013 {
            {
                array_2014.value().string(item_2015.as_str());
            }
        }
        array_2014.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_cloud_front_distribution_cache_behaviors(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCloudFrontDistributionCacheBehaviors,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2016) = &input.items {
        let mut array_2017 = object.key("Items").start_array();
        for item_2018 in var_2016 {
            {
                let mut object_2019 = array_2017.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_cloud_front_distribution_cache_behavior(&mut object_2019, item_2018)?;
                object_2019.finish();
            }
        }
        array_2017.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_cloud_front_distribution_default_cache_behavior(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCloudFrontDistributionDefaultCacheBehavior,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2020) = &input.viewer_protocol_policy {
        object.key("ViewerProtocolPolicy").string(var_2020.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_cloud_front_distribution_logging(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCloudFrontDistributionLogging,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2021) = &input.bucket {
        object.key("Bucket").string(var_2021.as_str());
    }
    if input.enabled {
        object.key("Enabled").boolean(input.enabled);
    }
    if input.include_cookies {
        object.key("IncludeCookies").boolean(input.include_cookies);
    }
    if let Some(var_2022) = &input.prefix {
        object.key("Prefix").string(var_2022.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_cloud_front_distribution_origins(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCloudFrontDistributionOrigins,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2023) = &input.items {
        let mut array_2024 = object.key("Items").start_array();
        for item_2025 in var_2023 {
            {
                let mut object_2026 = array_2024.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_cloud_front_distribution_origin_item(&mut object_2026, item_2025)?;
                object_2026.finish();
            }
        }
        array_2024.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_cloud_front_distribution_origin_groups(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCloudFrontDistributionOriginGroups,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2027) = &input.items {
        let mut array_2028 = object.key("Items").start_array();
        for item_2029 in var_2027 {
            {
                let mut object_2030 = array_2028.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_cloud_front_distribution_origin_group(&mut object_2030, item_2029)?;
                object_2030.finish();
            }
        }
        array_2028.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_cloud_front_distribution_viewer_certificate(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCloudFrontDistributionViewerCertificate,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2031) = &input.acm_certificate_arn {
        object.key("AcmCertificateArn").string(var_2031.as_str());
    }
    if let Some(var_2032) = &input.certificate {
        object.key("Certificate").string(var_2032.as_str());
    }
    if let Some(var_2033) = &input.certificate_source {
        object.key("CertificateSource").string(var_2033.as_str());
    }
    if input.cloud_front_default_certificate {
        object
            .key("CloudFrontDefaultCertificate")
            .boolean(input.cloud_front_default_certificate);
    }
    if let Some(var_2034) = &input.iam_certificate_id {
        object.key("IamCertificateId").string(var_2034.as_str());
    }
    if let Some(var_2035) = &input.minimum_protocol_version {
        object
            .key("MinimumProtocolVersion")
            .string(var_2035.as_str());
    }
    if let Some(var_2036) = &input.ssl_support_method {
        object.key("SslSupportMethod").string(var_2036.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ec2_instance_network_interfaces_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEc2InstanceNetworkInterfacesDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2037) = &input.network_interface_id {
        object.key("NetworkInterfaceId").string(var_2037.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ec2_network_interface_attachment(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEc2NetworkInterfaceAttachment,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2038) = &input.attach_time {
        object.key("AttachTime").string(var_2038.as_str());
    }
    if let Some(var_2039) = &input.attachment_id {
        object.key("AttachmentId").string(var_2039.as_str());
    }
    if input.delete_on_termination {
        object
            .key("DeleteOnTermination")
            .boolean(input.delete_on_termination);
    }
    if input.device_index != 0 {
        object.key("DeviceIndex").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.device_index).into()),
        );
    }
    if let Some(var_2040) = &input.instance_id {
        object.key("InstanceId").string(var_2040.as_str());
    }
    if let Some(var_2041) = &input.instance_owner_id {
        object.key("InstanceOwnerId").string(var_2041.as_str());
    }
    if let Some(var_2042) = &input.status {
        object.key("Status").string(var_2042.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ec2_network_interface_security_group(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEc2NetworkInterfaceSecurityGroup,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2043) = &input.group_name {
        object.key("GroupName").string(var_2043.as_str());
    }
    if let Some(var_2044) = &input.group_id {
        object.key("GroupId").string(var_2044.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ec2_network_interface_ip_v6_address_detail(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEc2NetworkInterfaceIpV6AddressDetail,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2045) = &input.ip_v6_address {
        object.key("IpV6Address").string(var_2045.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ec2_network_interface_private_ip_address_detail(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEc2NetworkInterfacePrivateIpAddressDetail,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2046) = &input.private_ip_address {
        object.key("PrivateIpAddress").string(var_2046.as_str());
    }
    if let Some(var_2047) = &input.private_dns_name {
        object.key("PrivateDnsName").string(var_2047.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ec2_security_group_ip_permission(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEc2SecurityGroupIpPermission,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2048) = &input.ip_protocol {
        object.key("IpProtocol").string(var_2048.as_str());
    }
    if input.from_port != 0 {
        object.key("FromPort").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.from_port).into()),
        );
    }
    if input.to_port != 0 {
        object.key("ToPort").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.to_port).into()),
        );
    }
    if let Some(var_2049) = &input.user_id_group_pairs {
        let mut array_2050 = object.key("UserIdGroupPairs").start_array();
        for item_2051 in var_2049 {
            {
                let mut object_2052 = array_2050.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_ec2_security_group_user_id_group_pair(&mut object_2052, item_2051)?;
                object_2052.finish();
            }
        }
        array_2050.finish();
    }
    if let Some(var_2053) = &input.ip_ranges {
        let mut array_2054 = object.key("IpRanges").start_array();
        for item_2055 in var_2053 {
            {
                let mut object_2056 = array_2054.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_ec2_security_group_ip_range(
                    &mut object_2056,
                    item_2055,
                )?;
                object_2056.finish();
            }
        }
        array_2054.finish();
    }
    if let Some(var_2057) = &input.ipv6_ranges {
        let mut array_2058 = object.key("Ipv6Ranges").start_array();
        for item_2059 in var_2057 {
            {
                let mut object_2060 = array_2058.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_ec2_security_group_ipv6_range(
                    &mut object_2060,
                    item_2059,
                )?;
                object_2060.finish();
            }
        }
        array_2058.finish();
    }
    if let Some(var_2061) = &input.prefix_list_ids {
        let mut array_2062 = object.key("PrefixListIds").start_array();
        for item_2063 in var_2061 {
            {
                let mut object_2064 = array_2062.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_ec2_security_group_prefix_list_id(&mut object_2064, item_2063)?;
                object_2064.finish();
            }
        }
        array_2062.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ec2_volume_attachment(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEc2VolumeAttachment,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2065) = &input.attach_time {
        object.key("AttachTime").string(var_2065.as_str());
    }
    if input.delete_on_termination {
        object
            .key("DeleteOnTermination")
            .boolean(input.delete_on_termination);
    }
    if let Some(var_2066) = &input.instance_id {
        object.key("InstanceId").string(var_2066.as_str());
    }
    if let Some(var_2067) = &input.status {
        object.key("Status").string(var_2067.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_cidr_block_association(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CidrBlockAssociation,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2068) = &input.association_id {
        object.key("AssociationId").string(var_2068.as_str());
    }
    if let Some(var_2069) = &input.cidr_block {
        object.key("CidrBlock").string(var_2069.as_str());
    }
    if let Some(var_2070) = &input.cidr_block_state {
        object.key("CidrBlockState").string(var_2070.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_ipv6_cidr_block_association(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Ipv6CidrBlockAssociation,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2071) = &input.association_id {
        object.key("AssociationId").string(var_2071.as_str());
    }
    if let Some(var_2072) = &input.ipv6_cidr_block {
        object.key("Ipv6CidrBlock").string(var_2072.as_str());
    }
    if let Some(var_2073) = &input.cidr_block_state {
        object.key("CidrBlockState").string(var_2073.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ec2_network_acl_association(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEc2NetworkAclAssociation,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2074) = &input.network_acl_association_id {
        object
            .key("NetworkAclAssociationId")
            .string(var_2074.as_str());
    }
    if let Some(var_2075) = &input.network_acl_id {
        object.key("NetworkAclId").string(var_2075.as_str());
    }
    if let Some(var_2076) = &input.subnet_id {
        object.key("SubnetId").string(var_2076.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ec2_network_acl_entry(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEc2NetworkAclEntry,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2077) = &input.cidr_block {
        object.key("CidrBlock").string(var_2077.as_str());
    }
    if input.egress {
        object.key("Egress").boolean(input.egress);
    }
    if let Some(var_2078) = &input.icmp_type_code {
        let mut object_2079 = object.key("IcmpTypeCode").start_object();
        crate::json_ser::serialize_structure_crate_model_icmp_type_code(
            &mut object_2079,
            var_2078,
        )?;
        object_2079.finish();
    }
    if let Some(var_2080) = &input.ipv6_cidr_block {
        object.key("Ipv6CidrBlock").string(var_2080.as_str());
    }
    if let Some(var_2081) = &input.port_range {
        let mut object_2082 = object.key("PortRange").start_object();
        crate::json_ser::serialize_structure_crate_model_port_range_from_to(
            &mut object_2082,
            var_2081,
        )?;
        object_2082.finish();
    }
    if let Some(var_2083) = &input.protocol {
        object.key("Protocol").string(var_2083.as_str());
    }
    if let Some(var_2084) = &input.rule_action {
        object.key("RuleAction").string(var_2084.as_str());
    }
    if input.rule_number != 0 {
        object.key("RuleNumber").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.rule_number).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_availability_zone(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AvailabilityZone,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2085) = &input.zone_name {
        object.key("ZoneName").string(var_2085.as_str());
    }
    if let Some(var_2086) = &input.subnet_id {
        object.key("SubnetId").string(var_2086.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_load_balancer_state(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LoadBalancerState,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2087) = &input.code {
        object.key("Code").string(var_2087.as_str());
    }
    if let Some(var_2088) = &input.reason {
        object.key("Reason").string(var_2088.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_elbv2_load_balancer_attribute(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElbv2LoadBalancerAttribute,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2089) = &input.key {
        object.key("Key").string(var_2089.as_str());
    }
    if let Some(var_2090) = &input.value {
        object.key("Value").string(var_2090.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_elastic_beanstalk_environment_environment_link(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElasticBeanstalkEnvironmentEnvironmentLink,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2091) = &input.environment_name {
        object.key("EnvironmentName").string(var_2091.as_str());
    }
    if let Some(var_2092) = &input.link_name {
        object.key("LinkName").string(var_2092.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_elastic_beanstalk_environment_option_setting(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElasticBeanstalkEnvironmentOptionSetting,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2093) = &input.namespace {
        object.key("Namespace").string(var_2093.as_str());
    }
    if let Some(var_2094) = &input.option_name {
        object.key("OptionName").string(var_2094.as_str());
    }
    if let Some(var_2095) = &input.resource_name {
        object.key("ResourceName").string(var_2095.as_str());
    }
    if let Some(var_2096) = &input.value {
        object.key("Value").string(var_2096.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_elastic_beanstalk_environment_tier(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElasticBeanstalkEnvironmentTier,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2097) = &input.name {
        object.key("Name").string(var_2097.as_str());
    }
    if let Some(var_2098) = &input.r#type {
        object.key("Type").string(var_2098.as_str());
    }
    if let Some(var_2099) = &input.version {
        object.key("Version").string(var_2099.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_elasticsearch_domain_domain_endpoint_options(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElasticsearchDomainDomainEndpointOptions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.enforce_https {
        object.key("EnforceHTTPS").boolean(input.enforce_https);
    }
    if let Some(var_2100) = &input.tls_security_policy {
        object.key("TLSSecurityPolicy").string(var_2100.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_elasticsearch_domain_elasticsearch_cluster_config_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElasticsearchDomainElasticsearchClusterConfigDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.dedicated_master_count != 0 {
        object.key("DedicatedMasterCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.dedicated_master_count).into()),
        );
    }
    if input.dedicated_master_enabled {
        object
            .key("DedicatedMasterEnabled")
            .boolean(input.dedicated_master_enabled);
    }
    if let Some(var_2101) = &input.dedicated_master_type {
        object.key("DedicatedMasterType").string(var_2101.as_str());
    }
    if input.instance_count != 0 {
        object.key("InstanceCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.instance_count).into()),
        );
    }
    if let Some(var_2102) = &input.instance_type {
        object.key("InstanceType").string(var_2102.as_str());
    }
    if let Some(var_2103) = &input.zone_awareness_config {
        let mut object_2104 = object.key("ZoneAwarenessConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_elasticsearch_domain_elasticsearch_cluster_config_zone_awareness_config_details(&mut object_2104, var_2103)?;
        object_2104.finish();
    }
    if input.zone_awareness_enabled {
        object
            .key("ZoneAwarenessEnabled")
            .boolean(input.zone_awareness_enabled);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_elasticsearch_domain_encryption_at_rest_options(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElasticsearchDomainEncryptionAtRestOptions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.enabled {
        object.key("Enabled").boolean(input.enabled);
    }
    if let Some(var_2105) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_2105.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_elasticsearch_domain_log_publishing_options(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElasticsearchDomainLogPublishingOptions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2106) = &input.index_slow_logs {
        let mut object_2107 = object.key("IndexSlowLogs").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_elasticsearch_domain_log_publishing_options_log_config(&mut object_2107, var_2106)?;
        object_2107.finish();
    }
    if let Some(var_2108) = &input.search_slow_logs {
        let mut object_2109 = object.key("SearchSlowLogs").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_elasticsearch_domain_log_publishing_options_log_config(&mut object_2109, var_2108)?;
        object_2109.finish();
    }
    if let Some(var_2110) = &input.audit_logs {
        let mut object_2111 = object.key("AuditLogs").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_elasticsearch_domain_log_publishing_options_log_config(&mut object_2111, var_2110)?;
        object_2111.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_elasticsearch_domain_node_to_node_encryption_options(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElasticsearchDomainNodeToNodeEncryptionOptions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.enabled {
        object.key("Enabled").boolean(input.enabled);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_elasticsearch_domain_service_software_options(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElasticsearchDomainServiceSoftwareOptions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2112) = &input.automated_update_date {
        object.key("AutomatedUpdateDate").string(var_2112.as_str());
    }
    if input.cancellable {
        object.key("Cancellable").boolean(input.cancellable);
    }
    if let Some(var_2113) = &input.current_version {
        object.key("CurrentVersion").string(var_2113.as_str());
    }
    if let Some(var_2114) = &input.description {
        object.key("Description").string(var_2114.as_str());
    }
    if let Some(var_2115) = &input.new_version {
        object.key("NewVersion").string(var_2115.as_str());
    }
    if input.update_available {
        object
            .key("UpdateAvailable")
            .boolean(input.update_available);
    }
    if let Some(var_2116) = &input.update_status {
        object.key("UpdateStatus").string(var_2116.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_elasticsearch_domain_vpc_options(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElasticsearchDomainVpcOptions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2117) = &input.availability_zones {
        let mut array_2118 = object.key("AvailabilityZones").start_array();
        for item_2119 in var_2117 {
            {
                array_2118.value().string(item_2119.as_str());
            }
        }
        array_2118.finish();
    }
    if let Some(var_2120) = &input.security_group_ids {
        let mut array_2121 = object.key("SecurityGroupIds").start_array();
        for item_2122 in var_2120 {
            {
                array_2121.value().string(item_2122.as_str());
            }
        }
        array_2121.finish();
    }
    if let Some(var_2123) = &input.subnet_ids {
        let mut array_2124 = object.key("SubnetIds").start_array();
        for item_2125 in var_2123 {
            {
                array_2124.value().string(item_2125.as_str());
            }
        }
        array_2124.finish();
    }
    if let Some(var_2126) = &input.vpc_id {
        object.key("VPCId").string(var_2126.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_s3_bucket_server_side_encryption_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsS3BucketServerSideEncryptionConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2127) = &input.rules {
        let mut array_2128 = object.key("Rules").start_array();
        for item_2129 in var_2127 {
            {
                let mut object_2130 = array_2128.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_s3_bucket_server_side_encryption_rule(&mut object_2130, item_2129)?;
                object_2130.finish();
            }
        }
        array_2128.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_s3_bucket_bucket_lifecycle_configuration_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsS3BucketBucketLifecycleConfigurationDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2131) = &input.rules {
        let mut array_2132 = object.key("Rules").start_array();
        for item_2133 in var_2131 {
            {
                let mut object_2134 = array_2132.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_s3_bucket_bucket_lifecycle_configuration_rules_details(&mut object_2134, item_2133)?;
                object_2134.finish();
            }
        }
        array_2132.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_s3_bucket_logging_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsS3BucketLoggingConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2135) = &input.destination_bucket_name {
        object
            .key("DestinationBucketName")
            .string(var_2135.as_str());
    }
    if let Some(var_2136) = &input.log_file_prefix {
        object.key("LogFilePrefix").string(var_2136.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_s3_bucket_website_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsS3BucketWebsiteConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2137) = &input.error_document {
        object.key("ErrorDocument").string(var_2137.as_str());
    }
    if let Some(var_2138) = &input.index_document_suffix {
        object.key("IndexDocumentSuffix").string(var_2138.as_str());
    }
    if let Some(var_2139) = &input.redirect_all_requests_to {
        let mut object_2140 = object.key("RedirectAllRequestsTo").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_s3_bucket_website_configuration_redirect_to(&mut object_2140, var_2139)?;
        object_2140.finish();
    }
    if let Some(var_2141) = &input.routing_rules {
        let mut array_2142 = object.key("RoutingRules").start_array();
        for item_2143 in var_2141 {
            {
                let mut object_2144 = array_2142.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_s3_bucket_website_configuration_routing_rule(&mut object_2144, item_2143)?;
                object_2144.finish();
            }
        }
        array_2142.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_s3_bucket_notification_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsS3BucketNotificationConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2145) = &input.configurations {
        let mut array_2146 = object.key("Configurations").start_array();
        for item_2147 in var_2145 {
            {
                let mut object_2148 = array_2146.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_s3_bucket_notification_configuration_detail(&mut object_2148, item_2147)?;
                object_2148.finish();
            }
        }
        array_2146.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_s3_bucket_bucket_versioning_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsS3BucketBucketVersioningConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.is_mfa_delete_enabled {
        object
            .key("IsMfaDeleteEnabled")
            .boolean(input.is_mfa_delete_enabled);
    }
    if let Some(var_2149) = &input.status {
        object.key("Status").string(var_2149.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_secrets_manager_secret_rotation_rules(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsSecretsManagerSecretRotationRules,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.automatically_after_days != 0 {
        object.key("AutomaticallyAfterDays").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.automatically_after_days).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_iam_access_key_session_context(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsIamAccessKeySessionContext,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2150) = &input.attributes {
        let mut object_2151 = object.key("Attributes").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_iam_access_key_session_context_attributes(&mut object_2151, var_2150)?;
        object_2151.finish();
    }
    if let Some(var_2152) = &input.session_issuer {
        let mut object_2153 = object.key("SessionIssuer").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_iam_access_key_session_context_session_issuer(&mut object_2153, var_2152)?;
        object_2153.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_iam_attached_managed_policy(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsIamAttachedManagedPolicy,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2154) = &input.policy_name {
        object.key("PolicyName").string(var_2154.as_str());
    }
    if let Some(var_2155) = &input.policy_arn {
        object.key("PolicyArn").string(var_2155.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_iam_permissions_boundary(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsIamPermissionsBoundary,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2156) = &input.permissions_boundary_arn {
        object
            .key("PermissionsBoundaryArn")
            .string(var_2156.as_str());
    }
    if let Some(var_2157) = &input.permissions_boundary_type {
        object
            .key("PermissionsBoundaryType")
            .string(var_2157.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_iam_user_policy(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsIamUserPolicy,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2158) = &input.policy_name {
        object.key("PolicyName").string(var_2158.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_iam_policy_version(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsIamPolicyVersion,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2159) = &input.version_id {
        object.key("VersionId").string(var_2159.as_str());
    }
    if input.is_default_version {
        object
            .key("IsDefaultVersion")
            .boolean(input.is_default_version);
    }
    if let Some(var_2160) = &input.create_date {
        object.key("CreateDate").string(var_2160.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_api_gateway_v2_route_settings(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsApiGatewayV2RouteSettings,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.detailed_metrics_enabled {
        object
            .key("DetailedMetricsEnabled")
            .boolean(input.detailed_metrics_enabled);
    }
    if let Some(var_2161) = &input.logging_level {
        object.key("LoggingLevel").string(var_2161.as_str());
    }
    if input.data_trace_enabled {
        object
            .key("DataTraceEnabled")
            .boolean(input.data_trace_enabled);
    }
    if input.throttling_burst_limit != 0 {
        object.key("ThrottlingBurstLimit").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.throttling_burst_limit).into()),
        );
    }
    if input.throttling_rate_limit != 0.0 {
        object.key("ThrottlingRateLimit").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((input.throttling_rate_limit).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_api_gateway_access_log_settings(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsApiGatewayAccessLogSettings,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2162) = &input.format {
        object.key("Format").string(var_2162.as_str());
    }
    if let Some(var_2163) = &input.destination_arn {
        object.key("DestinationArn").string(var_2163.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_cors_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCorsConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2164) = &input.allow_origins {
        let mut array_2165 = object.key("AllowOrigins").start_array();
        for item_2166 in var_2164 {
            {
                array_2165.value().string(item_2166.as_str());
            }
        }
        array_2165.finish();
    }
    if input.allow_credentials {
        object
            .key("AllowCredentials")
            .boolean(input.allow_credentials);
    }
    if let Some(var_2167) = &input.expose_headers {
        let mut array_2168 = object.key("ExposeHeaders").start_array();
        for item_2169 in var_2167 {
            {
                array_2168.value().string(item_2169.as_str());
            }
        }
        array_2168.finish();
    }
    if input.max_age != 0 {
        object.key("MaxAge").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_age).into()),
        );
    }
    if let Some(var_2170) = &input.allow_methods {
        let mut array_2171 = object.key("AllowMethods").start_array();
        for item_2172 in var_2170 {
            {
                array_2171.value().string(item_2172.as_str());
            }
        }
        array_2171.finish();
    }
    if let Some(var_2173) = &input.allow_headers {
        let mut array_2174 = object.key("AllowHeaders").start_array();
        for item_2175 in var_2173 {
            {
                array_2174.value().string(item_2175.as_str());
            }
        }
        array_2174.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_dynamo_db_table_attribute_definition(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsDynamoDbTableAttributeDefinition,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2176) = &input.attribute_name {
        object.key("AttributeName").string(var_2176.as_str());
    }
    if let Some(var_2177) = &input.attribute_type {
        object.key("AttributeType").string(var_2177.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_dynamo_db_table_billing_mode_summary(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsDynamoDbTableBillingModeSummary,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2178) = &input.billing_mode {
        object.key("BillingMode").string(var_2178.as_str());
    }
    if let Some(var_2179) = &input.last_update_to_pay_per_request_date_time {
        object
            .key("LastUpdateToPayPerRequestDateTime")
            .string(var_2179.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_dynamo_db_table_global_secondary_index(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsDynamoDbTableGlobalSecondaryIndex,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.backfilling {
        object.key("Backfilling").boolean(input.backfilling);
    }
    if let Some(var_2180) = &input.index_arn {
        object.key("IndexArn").string(var_2180.as_str());
    }
    if let Some(var_2181) = &input.index_name {
        object.key("IndexName").string(var_2181.as_str());
    }
    if input.index_size_bytes != 0 {
        object.key("IndexSizeBytes").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.index_size_bytes).into()),
        );
    }
    if let Some(var_2182) = &input.index_status {
        object.key("IndexStatus").string(var_2182.as_str());
    }
    if input.item_count != 0 {
        object.key("ItemCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.item_count).into()),
        );
    }
    if let Some(var_2183) = &input.key_schema {
        let mut array_2184 = object.key("KeySchema").start_array();
        for item_2185 in var_2183 {
            {
                let mut object_2186 = array_2184.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_dynamo_db_table_key_schema(
                    &mut object_2186,
                    item_2185,
                )?;
                object_2186.finish();
            }
        }
        array_2184.finish();
    }
    if let Some(var_2187) = &input.projection {
        let mut object_2188 = object.key("Projection").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_dynamo_db_table_projection(
            &mut object_2188,
            var_2187,
        )?;
        object_2188.finish();
    }
    if let Some(var_2189) = &input.provisioned_throughput {
        let mut object_2190 = object.key("ProvisionedThroughput").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_dynamo_db_table_provisioned_throughput(&mut object_2190, var_2189)?;
        object_2190.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_dynamo_db_table_key_schema(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsDynamoDbTableKeySchema,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2191) = &input.attribute_name {
        object.key("AttributeName").string(var_2191.as_str());
    }
    if let Some(var_2192) = &input.key_type {
        object.key("KeyType").string(var_2192.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_dynamo_db_table_local_secondary_index(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsDynamoDbTableLocalSecondaryIndex,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2193) = &input.index_arn {
        object.key("IndexArn").string(var_2193.as_str());
    }
    if let Some(var_2194) = &input.index_name {
        object.key("IndexName").string(var_2194.as_str());
    }
    if let Some(var_2195) = &input.key_schema {
        let mut array_2196 = object.key("KeySchema").start_array();
        for item_2197 in var_2195 {
            {
                let mut object_2198 = array_2196.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_dynamo_db_table_key_schema(
                    &mut object_2198,
                    item_2197,
                )?;
                object_2198.finish();
            }
        }
        array_2196.finish();
    }
    if let Some(var_2199) = &input.projection {
        let mut object_2200 = object.key("Projection").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_dynamo_db_table_projection(
            &mut object_2200,
            var_2199,
        )?;
        object_2200.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_dynamo_db_table_provisioned_throughput(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsDynamoDbTableProvisionedThroughput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2201) = &input.last_decrease_date_time {
        object.key("LastDecreaseDateTime").string(var_2201.as_str());
    }
    if let Some(var_2202) = &input.last_increase_date_time {
        object.key("LastIncreaseDateTime").string(var_2202.as_str());
    }
    if input.number_of_decreases_today != 0 {
        object.key("NumberOfDecreasesToday").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.number_of_decreases_today).into()),
        );
    }
    if input.read_capacity_units != 0 {
        object.key("ReadCapacityUnits").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.read_capacity_units).into()),
        );
    }
    if input.write_capacity_units != 0 {
        object.key("WriteCapacityUnits").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.write_capacity_units).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_dynamo_db_table_replica(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsDynamoDbTableReplica,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2203) = &input.global_secondary_indexes {
        let mut array_2204 = object.key("GlobalSecondaryIndexes").start_array();
        for item_2205 in var_2203 {
            {
                let mut object_2206 = array_2204.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_dynamo_db_table_replica_global_secondary_index(&mut object_2206, item_2205)?;
                object_2206.finish();
            }
        }
        array_2204.finish();
    }
    if let Some(var_2207) = &input.kms_master_key_id {
        object.key("KmsMasterKeyId").string(var_2207.as_str());
    }
    if let Some(var_2208) = &input.provisioned_throughput_override {
        let mut object_2209 = object.key("ProvisionedThroughputOverride").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_dynamo_db_table_provisioned_throughput_override(&mut object_2209, var_2208)?;
        object_2209.finish();
    }
    if let Some(var_2210) = &input.region_name {
        object.key("RegionName").string(var_2210.as_str());
    }
    if let Some(var_2211) = &input.replica_status {
        object.key("ReplicaStatus").string(var_2211.as_str());
    }
    if let Some(var_2212) = &input.replica_status_description {
        object
            .key("ReplicaStatusDescription")
            .string(var_2212.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_dynamo_db_table_restore_summary(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsDynamoDbTableRestoreSummary,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2213) = &input.source_backup_arn {
        object.key("SourceBackupArn").string(var_2213.as_str());
    }
    if let Some(var_2214) = &input.source_table_arn {
        object.key("SourceTableArn").string(var_2214.as_str());
    }
    if let Some(var_2215) = &input.restore_date_time {
        object.key("RestoreDateTime").string(var_2215.as_str());
    }
    if input.restore_in_progress {
        object
            .key("RestoreInProgress")
            .boolean(input.restore_in_progress);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_dynamo_db_table_sse_description(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsDynamoDbTableSseDescription,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2216) = &input.inaccessible_encryption_date_time {
        object
            .key("InaccessibleEncryptionDateTime")
            .string(var_2216.as_str());
    }
    if let Some(var_2217) = &input.status {
        object.key("Status").string(var_2217.as_str());
    }
    if let Some(var_2218) = &input.sse_type {
        object.key("SseType").string(var_2218.as_str());
    }
    if let Some(var_2219) = &input.kms_master_key_arn {
        object.key("KmsMasterKeyArn").string(var_2219.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_dynamo_db_table_stream_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsDynamoDbTableStreamSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.stream_enabled {
        object.key("StreamEnabled").boolean(input.stream_enabled);
    }
    if let Some(var_2220) = &input.stream_view_type {
        object.key("StreamViewType").string(var_2220.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_api_gateway_method_settings(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsApiGatewayMethodSettings,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.metrics_enabled {
        object.key("MetricsEnabled").boolean(input.metrics_enabled);
    }
    if let Some(var_2221) = &input.logging_level {
        object.key("LoggingLevel").string(var_2221.as_str());
    }
    if input.data_trace_enabled {
        object
            .key("DataTraceEnabled")
            .boolean(input.data_trace_enabled);
    }
    if input.throttling_burst_limit != 0 {
        object.key("ThrottlingBurstLimit").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.throttling_burst_limit).into()),
        );
    }
    if input.throttling_rate_limit != 0.0 {
        object.key("ThrottlingRateLimit").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((input.throttling_rate_limit).into()),
        );
    }
    if input.caching_enabled {
        object.key("CachingEnabled").boolean(input.caching_enabled);
    }
    if input.cache_ttl_in_seconds != 0 {
        object.key("CacheTtlInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.cache_ttl_in_seconds).into()),
        );
    }
    if input.cache_data_encrypted {
        object
            .key("CacheDataEncrypted")
            .boolean(input.cache_data_encrypted);
    }
    if input.require_authorization_for_cache_control {
        object
            .key("RequireAuthorizationForCacheControl")
            .boolean(input.require_authorization_for_cache_control);
    }
    if let Some(var_2222) = &input.unauthorized_cache_control_header_strategy {
        object
            .key("UnauthorizedCacheControlHeaderStrategy")
            .string(var_2222.as_str());
    }
    if let Some(var_2223) = &input.http_method {
        object.key("HttpMethod").string(var_2223.as_str());
    }
    if let Some(var_2224) = &input.resource_path {
        object.key("ResourcePath").string(var_2224.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_api_gateway_canary_settings(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsApiGatewayCanarySettings,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.percent_traffic != 0.0 {
        object.key("PercentTraffic").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((input.percent_traffic).into()),
        );
    }
    if let Some(var_2225) = &input.deployment_id {
        object.key("DeploymentId").string(var_2225.as_str());
    }
    if let Some(var_2226) = &input.stage_variable_overrides {
        let mut object_2227 = object.key("StageVariableOverrides").start_object();
        for (key_2228, value_2229) in var_2226 {
            {
                object_2227.key(key_2228).string(value_2229.as_str());
            }
        }
        object_2227.finish();
    }
    if input.use_stage_cache {
        object.key("UseStageCache").boolean(input.use_stage_cache);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_api_gateway_endpoint_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsApiGatewayEndpointConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2230) = &input.types {
        let mut array_2231 = object.key("Types").start_array();
        for item_2232 in var_2230 {
            {
                array_2231.value().string(item_2232.as_str());
            }
        }
        array_2231.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ssm_patch(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsSsmPatch,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2233) = &input.compliance_summary {
        let mut object_2234 = object.key("ComplianceSummary").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_ssm_compliance_summary(
            &mut object_2234,
            var_2233,
        )?;
        object_2234.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_certificate_manager_certificate_domain_validation_option(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCertificateManagerCertificateDomainValidationOption,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2235) = &input.domain_name {
        object.key("DomainName").string(var_2235.as_str());
    }
    if let Some(var_2236) = &input.resource_record {
        let mut object_2237 = object.key("ResourceRecord").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_certificate_manager_certificate_resource_record(&mut object_2237, var_2236)?;
        object_2237.finish();
    }
    if let Some(var_2238) = &input.validation_domain {
        object.key("ValidationDomain").string(var_2238.as_str());
    }
    if let Some(var_2239) = &input.validation_emails {
        let mut array_2240 = object.key("ValidationEmails").start_array();
        for item_2241 in var_2239 {
            {
                array_2240.value().string(item_2241.as_str());
            }
        }
        array_2240.finish();
    }
    if let Some(var_2242) = &input.validation_method {
        object.key("ValidationMethod").string(var_2242.as_str());
    }
    if let Some(var_2243) = &input.validation_status {
        object.key("ValidationStatus").string(var_2243.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_certificate_manager_certificate_extended_key_usage(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCertificateManagerCertificateExtendedKeyUsage,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2244) = &input.name {
        object.key("Name").string(var_2244.as_str());
    }
    if let Some(var_2245) = &input.o_id {
        object.key("OId").string(var_2245.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_certificate_manager_certificate_key_usage(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCertificateManagerCertificateKeyUsage,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2246) = &input.name {
        object.key("Name").string(var_2246.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_certificate_manager_certificate_options(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCertificateManagerCertificateOptions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2247) = &input.certificate_transparency_logging_preference {
        object
            .key("CertificateTransparencyLoggingPreference")
            .string(var_2247.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_certificate_manager_certificate_renewal_summary(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCertificateManagerCertificateRenewalSummary,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2248) = &input.domain_validation_options {
        let mut array_2249 = object.key("DomainValidationOptions").start_array();
        for item_2250 in var_2248 {
            {
                let mut object_2251 = array_2249.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_certificate_manager_certificate_domain_validation_option(&mut object_2251, item_2250)?;
                object_2251.finish();
            }
        }
        array_2249.finish();
    }
    if let Some(var_2252) = &input.renewal_status {
        object.key("RenewalStatus").string(var_2252.as_str());
    }
    if let Some(var_2253) = &input.renewal_status_reason {
        object.key("RenewalStatusReason").string(var_2253.as_str());
    }
    if let Some(var_2254) = &input.updated_at {
        object.key("UpdatedAt").string(var_2254.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_redshift_cluster_cluster_node(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRedshiftClusterClusterNode,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2255) = &input.node_role {
        object.key("NodeRole").string(var_2255.as_str());
    }
    if let Some(var_2256) = &input.private_ip_address {
        object.key("PrivateIpAddress").string(var_2256.as_str());
    }
    if let Some(var_2257) = &input.public_ip_address {
        object.key("PublicIpAddress").string(var_2257.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_redshift_cluster_cluster_parameter_group(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRedshiftClusterClusterParameterGroup,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2258) = &input.cluster_parameter_status_list {
        let mut array_2259 = object.key("ClusterParameterStatusList").start_array();
        for item_2260 in var_2258 {
            {
                let mut object_2261 = array_2259.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_redshift_cluster_cluster_parameter_status(&mut object_2261, item_2260)?;
                object_2261.finish();
            }
        }
        array_2259.finish();
    }
    if let Some(var_2262) = &input.parameter_apply_status {
        object.key("ParameterApplyStatus").string(var_2262.as_str());
    }
    if let Some(var_2263) = &input.parameter_group_name {
        object.key("ParameterGroupName").string(var_2263.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_redshift_cluster_cluster_security_group(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRedshiftClusterClusterSecurityGroup,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2264) = &input.cluster_security_group_name {
        object
            .key("ClusterSecurityGroupName")
            .string(var_2264.as_str());
    }
    if let Some(var_2265) = &input.status {
        object.key("Status").string(var_2265.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_redshift_cluster_cluster_snapshot_copy_status(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRedshiftClusterClusterSnapshotCopyStatus,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2266) = &input.destination_region {
        object.key("DestinationRegion").string(var_2266.as_str());
    }
    if input.manual_snapshot_retention_period != 0 {
        object.key("ManualSnapshotRetentionPeriod").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.manual_snapshot_retention_period).into()),
        );
    }
    if input.retention_period != 0 {
        object.key("RetentionPeriod").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.retention_period).into()),
        );
    }
    if let Some(var_2267) = &input.snapshot_copy_grant_name {
        object
            .key("SnapshotCopyGrantName")
            .string(var_2267.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_redshift_cluster_deferred_maintenance_window(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRedshiftClusterDeferredMaintenanceWindow,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2268) = &input.defer_maintenance_end_time {
        object
            .key("DeferMaintenanceEndTime")
            .string(var_2268.as_str());
    }
    if let Some(var_2269) = &input.defer_maintenance_identifier {
        object
            .key("DeferMaintenanceIdentifier")
            .string(var_2269.as_str());
    }
    if let Some(var_2270) = &input.defer_maintenance_start_time {
        object
            .key("DeferMaintenanceStartTime")
            .string(var_2270.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_redshift_cluster_elastic_ip_status(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRedshiftClusterElasticIpStatus,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2271) = &input.elastic_ip {
        object.key("ElasticIp").string(var_2271.as_str());
    }
    if let Some(var_2272) = &input.status {
        object.key("Status").string(var_2272.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_redshift_cluster_endpoint(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRedshiftClusterEndpoint,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2273) = &input.address {
        object.key("Address").string(var_2273.as_str());
    }
    if input.port != 0 {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.port).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_redshift_cluster_hsm_status(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRedshiftClusterHsmStatus,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2274) = &input.hsm_client_certificate_identifier {
        object
            .key("HsmClientCertificateIdentifier")
            .string(var_2274.as_str());
    }
    if let Some(var_2275) = &input.hsm_configuration_identifier {
        object
            .key("HsmConfigurationIdentifier")
            .string(var_2275.as_str());
    }
    if let Some(var_2276) = &input.status {
        object.key("Status").string(var_2276.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_redshift_cluster_iam_role(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRedshiftClusterIamRole,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2277) = &input.apply_status {
        object.key("ApplyStatus").string(var_2277.as_str());
    }
    if let Some(var_2278) = &input.iam_role_arn {
        object.key("IamRoleArn").string(var_2278.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_redshift_cluster_pending_modified_values(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRedshiftClusterPendingModifiedValues,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.automated_snapshot_retention_period != 0 {
        object.key("AutomatedSnapshotRetentionPeriod").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.automated_snapshot_retention_period).into()),
        );
    }
    if let Some(var_2279) = &input.cluster_identifier {
        object.key("ClusterIdentifier").string(var_2279.as_str());
    }
    if let Some(var_2280) = &input.cluster_type {
        object.key("ClusterType").string(var_2280.as_str());
    }
    if let Some(var_2281) = &input.cluster_version {
        object.key("ClusterVersion").string(var_2281.as_str());
    }
    if let Some(var_2282) = &input.encryption_type {
        object.key("EncryptionType").string(var_2282.as_str());
    }
    if input.enhanced_vpc_routing {
        object
            .key("EnhancedVpcRouting")
            .boolean(input.enhanced_vpc_routing);
    }
    if let Some(var_2283) = &input.maintenance_track_name {
        object.key("MaintenanceTrackName").string(var_2283.as_str());
    }
    if let Some(var_2284) = &input.master_user_password {
        object.key("MasterUserPassword").string(var_2284.as_str());
    }
    if let Some(var_2285) = &input.node_type {
        object.key("NodeType").string(var_2285.as_str());
    }
    if input.number_of_nodes != 0 {
        object.key("NumberOfNodes").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.number_of_nodes).into()),
        );
    }
    if input.publicly_accessible {
        object
            .key("PubliclyAccessible")
            .boolean(input.publicly_accessible);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_redshift_cluster_resize_info(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRedshiftClusterResizeInfo,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.allow_cancel_resize {
        object
            .key("AllowCancelResize")
            .boolean(input.allow_cancel_resize);
    }
    if let Some(var_2286) = &input.resize_type {
        object.key("ResizeType").string(var_2286.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_redshift_cluster_restore_status(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRedshiftClusterRestoreStatus,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.current_restore_rate_in_mega_bytes_per_second != 0.0 {
        object.key("CurrentRestoreRateInMegaBytesPerSecond").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float(
                (input.current_restore_rate_in_mega_bytes_per_second).into(),
            ),
        );
    }
    if input.elapsed_time_in_seconds != 0 {
        object.key("ElapsedTimeInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.elapsed_time_in_seconds).into()),
        );
    }
    if input.estimated_time_to_completion_in_seconds != 0 {
        object.key("EstimatedTimeToCompletionInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt(
                (input.estimated_time_to_completion_in_seconds).into(),
            ),
        );
    }
    if input.progress_in_mega_bytes != 0 {
        object.key("ProgressInMegaBytes").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.progress_in_mega_bytes).into()),
        );
    }
    if input.snapshot_size_in_mega_bytes != 0 {
        object.key("SnapshotSizeInMegaBytes").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.snapshot_size_in_mega_bytes).into()),
        );
    }
    if let Some(var_2287) = &input.status {
        object.key("Status").string(var_2287.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_redshift_cluster_vpc_security_group(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRedshiftClusterVpcSecurityGroup,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2288) = &input.status {
        object.key("Status").string(var_2288.as_str());
    }
    if let Some(var_2289) = &input.vpc_security_group_id {
        object.key("VpcSecurityGroupId").string(var_2289.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_redshift_cluster_logging_status(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRedshiftClusterLoggingStatus,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2290) = &input.bucket_name {
        object.key("BucketName").string(var_2290.as_str());
    }
    if let Some(var_2291) = &input.last_failure_message {
        object.key("LastFailureMessage").string(var_2291.as_str());
    }
    if let Some(var_2292) = &input.last_failure_time {
        object.key("LastFailureTime").string(var_2292.as_str());
    }
    if let Some(var_2293) = &input.last_successful_delivery_time {
        object
            .key("LastSuccessfulDeliveryTime")
            .string(var_2293.as_str());
    }
    if input.logging_enabled {
        object.key("LoggingEnabled").boolean(input.logging_enabled);
    }
    if let Some(var_2294) = &input.s3_key_prefix {
        object.key("S3KeyPrefix").string(var_2294.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_elb_load_balancer_backend_server_description(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElbLoadBalancerBackendServerDescription,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.instance_port != 0 {
        object.key("InstancePort").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.instance_port).into()),
        );
    }
    if let Some(var_2295) = &input.policy_names {
        let mut array_2296 = object.key("PolicyNames").start_array();
        for item_2297 in var_2295 {
            {
                array_2296.value().string(item_2297.as_str());
            }
        }
        array_2296.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_elb_load_balancer_health_check(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElbLoadBalancerHealthCheck,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.healthy_threshold != 0 {
        object.key("HealthyThreshold").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.healthy_threshold).into()),
        );
    }
    if input.interval != 0 {
        object.key("Interval").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.interval).into()),
        );
    }
    if let Some(var_2298) = &input.target {
        object.key("Target").string(var_2298.as_str());
    }
    if input.timeout != 0 {
        object.key("Timeout").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.timeout).into()),
        );
    }
    if input.unhealthy_threshold != 0 {
        object.key("UnhealthyThreshold").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.unhealthy_threshold).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_elb_load_balancer_instance(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElbLoadBalancerInstance,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2299) = &input.instance_id {
        object.key("InstanceId").string(var_2299.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_elb_load_balancer_listener_description(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElbLoadBalancerListenerDescription,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2300) = &input.listener {
        let mut object_2301 = object.key("Listener").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_elb_load_balancer_listener(
            &mut object_2301,
            var_2300,
        )?;
        object_2301.finish();
    }
    if let Some(var_2302) = &input.policy_names {
        let mut array_2303 = object.key("PolicyNames").start_array();
        for item_2304 in var_2302 {
            {
                array_2303.value().string(item_2304.as_str());
            }
        }
        array_2303.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_elb_load_balancer_attributes(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElbLoadBalancerAttributes,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2305) = &input.access_log {
        let mut object_2306 = object.key("AccessLog").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_elb_load_balancer_access_log(
            &mut object_2306,
            var_2305,
        )?;
        object_2306.finish();
    }
    if let Some(var_2307) = &input.connection_draining {
        let mut object_2308 = object.key("ConnectionDraining").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_elb_load_balancer_connection_draining(
            &mut object_2308,
            var_2307,
        )?;
        object_2308.finish();
    }
    if let Some(var_2309) = &input.connection_settings {
        let mut object_2310 = object.key("ConnectionSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_elb_load_balancer_connection_settings(
            &mut object_2310,
            var_2309,
        )?;
        object_2310.finish();
    }
    if let Some(var_2311) = &input.cross_zone_load_balancing {
        let mut object_2312 = object.key("CrossZoneLoadBalancing").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_elb_load_balancer_cross_zone_load_balancing(&mut object_2312, var_2311)?;
        object_2312.finish();
    }
    if let Some(var_2313) = &input.additional_attributes {
        let mut array_2314 = object.key("AdditionalAttributes").start_array();
        for item_2315 in var_2313 {
            {
                let mut object_2316 = array_2314.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_elb_load_balancer_additional_attribute(&mut object_2316, item_2315)?;
                object_2316.finish();
            }
        }
        array_2314.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_elb_load_balancer_policies(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElbLoadBalancerPolicies,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2317) = &input.app_cookie_stickiness_policies {
        let mut array_2318 = object.key("AppCookieStickinessPolicies").start_array();
        for item_2319 in var_2317 {
            {
                let mut object_2320 = array_2318.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_elb_app_cookie_stickiness_policy(&mut object_2320, item_2319)?;
                object_2320.finish();
            }
        }
        array_2318.finish();
    }
    if let Some(var_2321) = &input.lb_cookie_stickiness_policies {
        let mut array_2322 = object.key("LbCookieStickinessPolicies").start_array();
        for item_2323 in var_2321 {
            {
                let mut object_2324 = array_2322.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_elb_lb_cookie_stickiness_policy(&mut object_2324, item_2323)?;
                object_2324.finish();
            }
        }
        array_2322.finish();
    }
    if let Some(var_2325) = &input.other_policies {
        let mut array_2326 = object.key("OtherPolicies").start_array();
        for item_2327 in var_2325 {
            {
                array_2326.value().string(item_2327.as_str());
            }
        }
        array_2326.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_elb_load_balancer_source_security_group(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElbLoadBalancerSourceSecurityGroup,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2328) = &input.group_name {
        object.key("GroupName").string(var_2328.as_str());
    }
    if let Some(var_2329) = &input.owner_alias {
        object.key("OwnerAlias").string(var_2329.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_iam_group_policy(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsIamGroupPolicy,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2330) = &input.policy_name {
        object.key("PolicyName").string(var_2330.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_iam_instance_profile(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsIamInstanceProfile,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2331) = &input.arn {
        object.key("Arn").string(var_2331.as_str());
    }
    if let Some(var_2332) = &input.create_date {
        object.key("CreateDate").string(var_2332.as_str());
    }
    if let Some(var_2333) = &input.instance_profile_id {
        object.key("InstanceProfileId").string(var_2333.as_str());
    }
    if let Some(var_2334) = &input.instance_profile_name {
        object.key("InstanceProfileName").string(var_2334.as_str());
    }
    if let Some(var_2335) = &input.path {
        object.key("Path").string(var_2335.as_str());
    }
    if let Some(var_2336) = &input.roles {
        let mut array_2337 = object.key("Roles").start_array();
        for item_2338 in var_2336 {
            {
                let mut object_2339 = array_2337.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_iam_instance_profile_role(
                    &mut object_2339,
                    item_2338,
                )?;
                object_2339.finish();
            }
        }
        array_2337.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_iam_role_policy(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsIamRolePolicy,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2340) = &input.policy_name {
        object.key("PolicyName").string(var_2340.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_lambda_function_code(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsLambdaFunctionCode,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2341) = &input.s3_bucket {
        object.key("S3Bucket").string(var_2341.as_str());
    }
    if let Some(var_2342) = &input.s3_key {
        object.key("S3Key").string(var_2342.as_str());
    }
    if let Some(var_2343) = &input.s3_object_version {
        object.key("S3ObjectVersion").string(var_2343.as_str());
    }
    if let Some(var_2344) = &input.zip_file {
        object.key("ZipFile").string(var_2344.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_lambda_function_dead_letter_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsLambdaFunctionDeadLetterConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2345) = &input.target_arn {
        object.key("TargetArn").string(var_2345.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_lambda_function_environment(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsLambdaFunctionEnvironment,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2346) = &input.variables {
        let mut object_2347 = object.key("Variables").start_object();
        for (key_2348, value_2349) in var_2346 {
            {
                object_2347.key(key_2348).string(value_2349.as_str());
            }
        }
        object_2347.finish();
    }
    if let Some(var_2350) = &input.error {
        let mut object_2351 = object.key("Error").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_lambda_function_environment_error(
            &mut object_2351,
            var_2350,
        )?;
        object_2351.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_lambda_function_layer(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsLambdaFunctionLayer,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2352) = &input.arn {
        object.key("Arn").string(var_2352.as_str());
    }
    if input.code_size != 0 {
        object.key("CodeSize").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.code_size).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_lambda_function_tracing_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsLambdaFunctionTracingConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2353) = &input.mode {
        object.key("Mode").string(var_2353.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_lambda_function_vpc_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsLambdaFunctionVpcConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2354) = &input.security_group_ids {
        let mut array_2355 = object.key("SecurityGroupIds").start_array();
        for item_2356 in var_2354 {
            {
                array_2355.value().string(item_2356.as_str());
            }
        }
        array_2355.finish();
    }
    if let Some(var_2357) = &input.subnet_ids {
        let mut array_2358 = object.key("SubnetIds").start_array();
        for item_2359 in var_2357 {
            {
                array_2358.value().string(item_2359.as_str());
            }
        }
        array_2358.finish();
    }
    if let Some(var_2360) = &input.vpc_id {
        object.key("VpcId").string(var_2360.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_rds_db_instance_associated_role(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRdsDbInstanceAssociatedRole,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2361) = &input.role_arn {
        object.key("RoleArn").string(var_2361.as_str());
    }
    if let Some(var_2362) = &input.feature_name {
        object.key("FeatureName").string(var_2362.as_str());
    }
    if let Some(var_2363) = &input.status {
        object.key("Status").string(var_2363.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_rds_db_instance_endpoint(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRdsDbInstanceEndpoint,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2364) = &input.address {
        object.key("Address").string(var_2364.as_str());
    }
    if input.port != 0 {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.port).into()),
        );
    }
    if let Some(var_2365) = &input.hosted_zone_id {
        object.key("HostedZoneId").string(var_2365.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_rds_db_instance_vpc_security_group(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRdsDbInstanceVpcSecurityGroup,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2366) = &input.vpc_security_group_id {
        object.key("VpcSecurityGroupId").string(var_2366.as_str());
    }
    if let Some(var_2367) = &input.status {
        object.key("Status").string(var_2367.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_rds_db_parameter_group(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRdsDbParameterGroup,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2368) = &input.db_parameter_group_name {
        object.key("DbParameterGroupName").string(var_2368.as_str());
    }
    if let Some(var_2369) = &input.parameter_apply_status {
        object.key("ParameterApplyStatus").string(var_2369.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_rds_db_subnet_group(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRdsDbSubnetGroup,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2370) = &input.db_subnet_group_name {
        object.key("DbSubnetGroupName").string(var_2370.as_str());
    }
    if let Some(var_2371) = &input.db_subnet_group_description {
        object
            .key("DbSubnetGroupDescription")
            .string(var_2371.as_str());
    }
    if let Some(var_2372) = &input.vpc_id {
        object.key("VpcId").string(var_2372.as_str());
    }
    if let Some(var_2373) = &input.subnet_group_status {
        object.key("SubnetGroupStatus").string(var_2373.as_str());
    }
    if let Some(var_2374) = &input.subnets {
        let mut array_2375 = object.key("Subnets").start_array();
        for item_2376 in var_2374 {
            {
                let mut object_2377 = array_2375.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_rds_db_subnet_group_subnet(
                    &mut object_2377,
                    item_2376,
                )?;
                object_2377.finish();
            }
        }
        array_2375.finish();
    }
    if let Some(var_2378) = &input.db_subnet_group_arn {
        object.key("DbSubnetGroupArn").string(var_2378.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_rds_db_pending_modified_values(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRdsDbPendingModifiedValues,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2379) = &input.db_instance_class {
        object.key("DbInstanceClass").string(var_2379.as_str());
    }
    if input.allocated_storage != 0 {
        object.key("AllocatedStorage").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.allocated_storage).into()),
        );
    }
    if let Some(var_2380) = &input.master_user_password {
        object.key("MasterUserPassword").string(var_2380.as_str());
    }
    if input.port != 0 {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.port).into()),
        );
    }
    if input.backup_retention_period != 0 {
        object.key("BackupRetentionPeriod").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.backup_retention_period).into()),
        );
    }
    if input.multi_az {
        object.key("MultiAZ").boolean(input.multi_az);
    }
    if let Some(var_2381) = &input.engine_version {
        object.key("EngineVersion").string(var_2381.as_str());
    }
    if let Some(var_2382) = &input.license_model {
        object.key("LicenseModel").string(var_2382.as_str());
    }
    if input.iops != 0 {
        object.key("Iops").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.iops).into()),
        );
    }
    if let Some(var_2383) = &input.db_instance_identifier {
        object.key("DbInstanceIdentifier").string(var_2383.as_str());
    }
    if let Some(var_2384) = &input.storage_type {
        object.key("StorageType").string(var_2384.as_str());
    }
    if let Some(var_2385) = &input.ca_certificate_identifier {
        object
            .key("CaCertificateIdentifier")
            .string(var_2385.as_str());
    }
    if let Some(var_2386) = &input.db_subnet_group_name {
        object.key("DbSubnetGroupName").string(var_2386.as_str());
    }
    if let Some(var_2387) = &input.pending_cloud_watch_logs_exports {
        let mut object_2388 = object.key("PendingCloudWatchLogsExports").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_rds_pending_cloud_watch_logs_exports(
            &mut object_2388,
            var_2387,
        )?;
        object_2388.finish();
    }
    if let Some(var_2389) = &input.processor_features {
        let mut array_2390 = object.key("ProcessorFeatures").start_array();
        for item_2391 in var_2389 {
            {
                let mut object_2392 = array_2390.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_rds_db_processor_feature(
                    &mut object_2392,
                    item_2391,
                )?;
                object_2392.finish();
            }
        }
        array_2390.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_rds_db_option_group_membership(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRdsDbOptionGroupMembership,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2393) = &input.option_group_name {
        object.key("OptionGroupName").string(var_2393.as_str());
    }
    if let Some(var_2394) = &input.status {
        object.key("Status").string(var_2394.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_rds_db_status_info(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRdsDbStatusInfo,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2395) = &input.status_type {
        object.key("StatusType").string(var_2395.as_str());
    }
    if input.normal {
        object.key("Normal").boolean(input.normal);
    }
    if let Some(var_2396) = &input.status {
        object.key("Status").string(var_2396.as_str());
    }
    if let Some(var_2397) = &input.message {
        object.key("Message").string(var_2397.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_rds_db_domain_membership(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRdsDbDomainMembership,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2398) = &input.domain {
        object.key("Domain").string(var_2398.as_str());
    }
    if let Some(var_2399) = &input.status {
        object.key("Status").string(var_2399.as_str());
    }
    if let Some(var_2400) = &input.fqdn {
        object.key("Fqdn").string(var_2400.as_str());
    }
    if let Some(var_2401) = &input.iam_role_name {
        object.key("IamRoleName").string(var_2401.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_rds_db_processor_feature(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRdsDbProcessorFeature,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2402) = &input.name {
        object.key("Name").string(var_2402.as_str());
    }
    if let Some(var_2403) = &input.value {
        object.key("Value").string(var_2403.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_sns_topic_subscription(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsSnsTopicSubscription,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2404) = &input.endpoint {
        object.key("Endpoint").string(var_2404.as_str());
    }
    if let Some(var_2405) = &input.protocol {
        object.key("Protocol").string(var_2405.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_waf_web_acl_rule(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsWafWebAclRule,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2406) = &input.action {
        let mut object_2407 = object.key("Action").start_object();
        crate::json_ser::serialize_structure_crate_model_waf_action(&mut object_2407, var_2406)?;
        object_2407.finish();
    }
    if let Some(var_2408) = &input.excluded_rules {
        let mut array_2409 = object.key("ExcludedRules").start_array();
        for item_2410 in var_2408 {
            {
                let mut object_2411 = array_2409.value().start_object();
                crate::json_ser::serialize_structure_crate_model_waf_excluded_rule(
                    &mut object_2411,
                    item_2410,
                )?;
                object_2411.finish();
            }
        }
        array_2409.finish();
    }
    if let Some(var_2412) = &input.override_action {
        let mut object_2413 = object.key("OverrideAction").start_object();
        crate::json_ser::serialize_structure_crate_model_waf_override_action(
            &mut object_2413,
            var_2412,
        )?;
        object_2413.finish();
    }
    if input.priority != 0 {
        object.key("Priority").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.priority).into()),
        );
    }
    if let Some(var_2414) = &input.rule_id {
        object.key("RuleId").string(var_2414.as_str());
    }
    if let Some(var_2415) = &input.r#type {
        object.key("Type").string(var_2415.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_rds_db_cluster_associated_role(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRdsDbClusterAssociatedRole,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2416) = &input.role_arn {
        object.key("RoleArn").string(var_2416.as_str());
    }
    if let Some(var_2417) = &input.status {
        object.key("Status").string(var_2417.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_rds_db_cluster_option_group_membership(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRdsDbClusterOptionGroupMembership,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2418) = &input.db_cluster_option_group_name {
        object
            .key("DbClusterOptionGroupName")
            .string(var_2418.as_str());
    }
    if let Some(var_2419) = &input.status {
        object.key("Status").string(var_2419.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_rds_db_cluster_member(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRdsDbClusterMember,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.is_cluster_writer {
        object
            .key("IsClusterWriter")
            .boolean(input.is_cluster_writer);
    }
    if input.promotion_tier != 0 {
        object.key("PromotionTier").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.promotion_tier).into()),
        );
    }
    if let Some(var_2420) = &input.db_instance_identifier {
        object.key("DbInstanceIdentifier").string(var_2420.as_str());
    }
    if let Some(var_2421) = &input.db_cluster_parameter_group_status {
        object
            .key("DbClusterParameterGroupStatus")
            .string(var_2421.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_cluster_cluster_settings_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsClusterClusterSettingsDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2422) = &input.name {
        object.key("Name").string(var_2422.as_str());
    }
    if let Some(var_2423) = &input.value {
        object.key("Value").string(var_2423.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_cluster_configuration_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsClusterConfigurationDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2424) = &input.execute_command_configuration {
        let mut object_2425 = object.key("ExecuteCommandConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_ecs_cluster_configuration_execute_command_configuration_details(&mut object_2425, var_2424)?;
        object_2425.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_cluster_default_capacity_provider_strategy_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsClusterDefaultCapacityProviderStrategyDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.base != 0 {
        object.key("Base").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.base).into()),
        );
    }
    if let Some(var_2426) = &input.capacity_provider {
        object.key("CapacityProvider").string(var_2426.as_str());
    }
    if input.weight != 0 {
        object.key("Weight").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.weight).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_task_definition_container_definitions_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionContainerDefinitionsDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2427) = &input.command {
        let mut array_2428 = object.key("Command").start_array();
        for item_2429 in var_2427 {
            {
                array_2428.value().string(item_2429.as_str());
            }
        }
        array_2428.finish();
    }
    if input.cpu != 0 {
        object.key("Cpu").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.cpu).into()),
        );
    }
    if let Some(var_2430) = &input.depends_on {
        let mut array_2431 = object.key("DependsOn").start_array();
        for item_2432 in var_2430 {
            {
                let mut object_2433 = array_2431.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_ecs_task_definition_container_definitions_depends_on_details(&mut object_2433, item_2432)?;
                object_2433.finish();
            }
        }
        array_2431.finish();
    }
    if input.disable_networking {
        object
            .key("DisableNetworking")
            .boolean(input.disable_networking);
    }
    if let Some(var_2434) = &input.dns_search_domains {
        let mut array_2435 = object.key("DnsSearchDomains").start_array();
        for item_2436 in var_2434 {
            {
                array_2435.value().string(item_2436.as_str());
            }
        }
        array_2435.finish();
    }
    if let Some(var_2437) = &input.dns_servers {
        let mut array_2438 = object.key("DnsServers").start_array();
        for item_2439 in var_2437 {
            {
                array_2438.value().string(item_2439.as_str());
            }
        }
        array_2438.finish();
    }
    if let Some(var_2440) = &input.docker_labels {
        let mut object_2441 = object.key("DockerLabels").start_object();
        for (key_2442, value_2443) in var_2440 {
            {
                object_2441.key(key_2442).string(value_2443.as_str());
            }
        }
        object_2441.finish();
    }
    if let Some(var_2444) = &input.docker_security_options {
        let mut array_2445 = object.key("DockerSecurityOptions").start_array();
        for item_2446 in var_2444 {
            {
                array_2445.value().string(item_2446.as_str());
            }
        }
        array_2445.finish();
    }
    if let Some(var_2447) = &input.entry_point {
        let mut array_2448 = object.key("EntryPoint").start_array();
        for item_2449 in var_2447 {
            {
                array_2448.value().string(item_2449.as_str());
            }
        }
        array_2448.finish();
    }
    if let Some(var_2450) = &input.environment {
        let mut array_2451 = object.key("Environment").start_array();
        for item_2452 in var_2450 {
            {
                let mut object_2453 = array_2451.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_ecs_task_definition_container_definitions_environment_details(&mut object_2453, item_2452)?;
                object_2453.finish();
            }
        }
        array_2451.finish();
    }
    if let Some(var_2454) = &input.environment_files {
        let mut array_2455 = object.key("EnvironmentFiles").start_array();
        for item_2456 in var_2454 {
            {
                let mut object_2457 = array_2455.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_ecs_task_definition_container_definitions_environment_files_details(&mut object_2457, item_2456)?;
                object_2457.finish();
            }
        }
        array_2455.finish();
    }
    if input.essential {
        object.key("Essential").boolean(input.essential);
    }
    if let Some(var_2458) = &input.extra_hosts {
        let mut array_2459 = object.key("ExtraHosts").start_array();
        for item_2460 in var_2458 {
            {
                let mut object_2461 = array_2459.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_ecs_task_definition_container_definitions_extra_hosts_details(&mut object_2461, item_2460)?;
                object_2461.finish();
            }
        }
        array_2459.finish();
    }
    if let Some(var_2462) = &input.firelens_configuration {
        let mut object_2463 = object.key("FirelensConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_ecs_task_definition_container_definitions_firelens_configuration_details(&mut object_2463, var_2462)?;
        object_2463.finish();
    }
    if let Some(var_2464) = &input.health_check {
        let mut object_2465 = object.key("HealthCheck").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_ecs_task_definition_container_definitions_health_check_details(&mut object_2465, var_2464)?;
        object_2465.finish();
    }
    if let Some(var_2466) = &input.hostname {
        object.key("Hostname").string(var_2466.as_str());
    }
    if let Some(var_2467) = &input.image {
        object.key("Image").string(var_2467.as_str());
    }
    if input.interactive {
        object.key("Interactive").boolean(input.interactive);
    }
    if let Some(var_2468) = &input.links {
        let mut array_2469 = object.key("Links").start_array();
        for item_2470 in var_2468 {
            {
                array_2469.value().string(item_2470.as_str());
            }
        }
        array_2469.finish();
    }
    if let Some(var_2471) = &input.linux_parameters {
        let mut object_2472 = object.key("LinuxParameters").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_ecs_task_definition_container_definitions_linux_parameters_details(&mut object_2472, var_2471)?;
        object_2472.finish();
    }
    if let Some(var_2473) = &input.log_configuration {
        let mut object_2474 = object.key("LogConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_ecs_task_definition_container_definitions_log_configuration_details(&mut object_2474, var_2473)?;
        object_2474.finish();
    }
    if input.memory != 0 {
        object.key("Memory").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.memory).into()),
        );
    }
    if input.memory_reservation != 0 {
        object.key("MemoryReservation").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.memory_reservation).into()),
        );
    }
    if let Some(var_2475) = &input.mount_points {
        let mut array_2476 = object.key("MountPoints").start_array();
        for item_2477 in var_2475 {
            {
                let mut object_2478 = array_2476.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_ecs_task_definition_container_definitions_mount_points_details(&mut object_2478, item_2477)?;
                object_2478.finish();
            }
        }
        array_2476.finish();
    }
    if let Some(var_2479) = &input.name {
        object.key("Name").string(var_2479.as_str());
    }
    if let Some(var_2480) = &input.port_mappings {
        let mut array_2481 = object.key("PortMappings").start_array();
        for item_2482 in var_2480 {
            {
                let mut object_2483 = array_2481.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_ecs_task_definition_container_definitions_port_mappings_details(&mut object_2483, item_2482)?;
                object_2483.finish();
            }
        }
        array_2481.finish();
    }
    if input.privileged {
        object.key("Privileged").boolean(input.privileged);
    }
    if input.pseudo_terminal {
        object.key("PseudoTerminal").boolean(input.pseudo_terminal);
    }
    if input.readonly_root_filesystem {
        object
            .key("ReadonlyRootFilesystem")
            .boolean(input.readonly_root_filesystem);
    }
    if let Some(var_2484) = &input.repository_credentials {
        let mut object_2485 = object.key("RepositoryCredentials").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_ecs_task_definition_container_definitions_repository_credentials_details(&mut object_2485, var_2484)?;
        object_2485.finish();
    }
    if let Some(var_2486) = &input.resource_requirements {
        let mut array_2487 = object.key("ResourceRequirements").start_array();
        for item_2488 in var_2486 {
            {
                let mut object_2489 = array_2487.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_ecs_task_definition_container_definitions_resource_requirements_details(&mut object_2489, item_2488)?;
                object_2489.finish();
            }
        }
        array_2487.finish();
    }
    if let Some(var_2490) = &input.secrets {
        let mut array_2491 = object.key("Secrets").start_array();
        for item_2492 in var_2490 {
            {
                let mut object_2493 = array_2491.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_ecs_task_definition_container_definitions_secrets_details(&mut object_2493, item_2492)?;
                object_2493.finish();
            }
        }
        array_2491.finish();
    }
    if input.start_timeout != 0 {
        object.key("StartTimeout").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.start_timeout).into()),
        );
    }
    if input.stop_timeout != 0 {
        object.key("StopTimeout").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.stop_timeout).into()),
        );
    }
    if let Some(var_2494) = &input.system_controls {
        let mut array_2495 = object.key("SystemControls").start_array();
        for item_2496 in var_2494 {
            {
                let mut object_2497 = array_2495.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_ecs_task_definition_container_definitions_system_controls_details(&mut object_2497, item_2496)?;
                object_2497.finish();
            }
        }
        array_2495.finish();
    }
    if let Some(var_2498) = &input.ulimits {
        let mut array_2499 = object.key("Ulimits").start_array();
        for item_2500 in var_2498 {
            {
                let mut object_2501 = array_2499.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_ecs_task_definition_container_definitions_ulimits_details(&mut object_2501, item_2500)?;
                object_2501.finish();
            }
        }
        array_2499.finish();
    }
    if let Some(var_2502) = &input.user {
        object.key("User").string(var_2502.as_str());
    }
    if let Some(var_2503) = &input.volumes_from {
        let mut array_2504 = object.key("VolumesFrom").start_array();
        for item_2505 in var_2503 {
            {
                let mut object_2506 = array_2504.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_ecs_task_definition_container_definitions_volumes_from_details(&mut object_2506, item_2505)?;
                object_2506.finish();
            }
        }
        array_2504.finish();
    }
    if let Some(var_2507) = &input.working_directory {
        object.key("WorkingDirectory").string(var_2507.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_task_definition_inference_accelerators_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionInferenceAcceleratorsDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2508) = &input.device_name {
        object.key("DeviceName").string(var_2508.as_str());
    }
    if let Some(var_2509) = &input.device_type {
        object.key("DeviceType").string(var_2509.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_task_definition_placement_constraints_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionPlacementConstraintsDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2510) = &input.expression {
        object.key("Expression").string(var_2510.as_str());
    }
    if let Some(var_2511) = &input.r#type {
        object.key("Type").string(var_2511.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_task_definition_proxy_configuration_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionProxyConfigurationDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2512) = &input.container_name {
        object.key("ContainerName").string(var_2512.as_str());
    }
    if let Some(var_2513) = &input.proxy_configuration_properties {
        let mut array_2514 = object.key("ProxyConfigurationProperties").start_array();
        for item_2515 in var_2513 {
            {
                let mut object_2516 = array_2514.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_ecs_task_definition_proxy_configuration_proxy_configuration_properties_details(&mut object_2516, item_2515)?;
                object_2516.finish();
            }
        }
        array_2514.finish();
    }
    if let Some(var_2517) = &input.r#type {
        object.key("Type").string(var_2517.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_task_definition_volumes_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionVolumesDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2518) = &input.docker_volume_configuration {
        let mut object_2519 = object.key("DockerVolumeConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_ecs_task_definition_volumes_docker_volume_configuration_details(&mut object_2519, var_2518)?;
        object_2519.finish();
    }
    if let Some(var_2520) = &input.efs_volume_configuration {
        let mut object_2521 = object.key("EfsVolumeConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_ecs_task_definition_volumes_efs_volume_configuration_details(&mut object_2521, var_2520)?;
        object_2521.finish();
    }
    if let Some(var_2522) = &input.host {
        let mut object_2523 = object.key("Host").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_ecs_task_definition_volumes_host_details(&mut object_2523, var_2522)?;
        object_2523.finish();
    }
    if let Some(var_2524) = &input.name {
        object.key("Name").string(var_2524.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_service_capacity_provider_strategy_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsServiceCapacityProviderStrategyDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.base != 0 {
        object.key("Base").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.base).into()),
        );
    }
    if let Some(var_2525) = &input.capacity_provider {
        object.key("CapacityProvider").string(var_2525.as_str());
    }
    if input.weight != 0 {
        object.key("Weight").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.weight).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_service_deployment_configuration_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsServiceDeploymentConfigurationDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2526) = &input.deployment_circuit_breaker {
        let mut object_2527 = object.key("DeploymentCircuitBreaker").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_ecs_service_deployment_configuration_deployment_circuit_breaker_details(&mut object_2527, var_2526)?;
        object_2527.finish();
    }
    if input.maximum_percent != 0 {
        object.key("MaximumPercent").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.maximum_percent).into()),
        );
    }
    if input.minimum_healthy_percent != 0 {
        object.key("MinimumHealthyPercent").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.minimum_healthy_percent).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_service_deployment_controller_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsServiceDeploymentControllerDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2528) = &input.r#type {
        object.key("Type").string(var_2528.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_service_load_balancers_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsServiceLoadBalancersDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2529) = &input.container_name {
        object.key("ContainerName").string(var_2529.as_str());
    }
    if input.container_port != 0 {
        object.key("ContainerPort").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.container_port).into()),
        );
    }
    if let Some(var_2530) = &input.load_balancer_name {
        object.key("LoadBalancerName").string(var_2530.as_str());
    }
    if let Some(var_2531) = &input.target_group_arn {
        object.key("TargetGroupArn").string(var_2531.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_service_network_configuration_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsServiceNetworkConfigurationDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2532) = &input.aws_vpc_configuration {
        let mut object_2533 = object.key("AwsVpcConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_ecs_service_network_configuration_aws_vpc_configuration_details(&mut object_2533, var_2532)?;
        object_2533.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_service_placement_constraints_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsServicePlacementConstraintsDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2534) = &input.expression {
        object.key("Expression").string(var_2534.as_str());
    }
    if let Some(var_2535) = &input.r#type {
        object.key("Type").string(var_2535.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_service_placement_strategies_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsServicePlacementStrategiesDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2536) = &input.field {
        object.key("Field").string(var_2536.as_str());
    }
    if let Some(var_2537) = &input.r#type {
        object.key("Type").string(var_2537.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_service_service_registries_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsServiceServiceRegistriesDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2538) = &input.container_name {
        object.key("ContainerName").string(var_2538.as_str());
    }
    if input.container_port != 0 {
        object.key("ContainerPort").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.container_port).into()),
        );
    }
    if input.port != 0 {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.port).into()),
        );
    }
    if let Some(var_2539) = &input.registry_arn {
        object.key("RegistryArn").string(var_2539.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_auto_scaling_launch_configuration_block_device_mappings_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsAutoScalingLaunchConfigurationBlockDeviceMappingsDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2540) = &input.device_name {
        object.key("DeviceName").string(var_2540.as_str());
    }
    if let Some(var_2541) = &input.ebs {
        let mut object_2542 = object.key("Ebs").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_auto_scaling_launch_configuration_block_device_mappings_ebs_details(&mut object_2542, var_2541)?;
        object_2542.finish();
    }
    if input.no_device {
        object.key("NoDevice").boolean(input.no_device);
    }
    if let Some(var_2543) = &input.virtual_name {
        object.key("VirtualName").string(var_2543.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_auto_scaling_launch_configuration_instance_monitoring_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsAutoScalingLaunchConfigurationInstanceMonitoringDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.enabled {
        object.key("Enabled").boolean(input.enabled);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_auto_scaling_launch_configuration_metadata_options(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsAutoScalingLaunchConfigurationMetadataOptions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2544) = &input.http_endpoint {
        object.key("HttpEndpoint").string(var_2544.as_str());
    }
    if input.http_put_response_hop_limit != 0 {
        object.key("HttpPutResponseHopLimit").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.http_put_response_hop_limit).into()),
        );
    }
    if let Some(var_2545) = &input.http_tokens {
        object.key("HttpTokens").string(var_2545.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ec2_vpn_connection_vgw_telemetry_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEc2VpnConnectionVgwTelemetryDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.accepted_route_count != 0 {
        object.key("AcceptedRouteCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.accepted_route_count).into()),
        );
    }
    if let Some(var_2546) = &input.certificate_arn {
        object.key("CertificateArn").string(var_2546.as_str());
    }
    if let Some(var_2547) = &input.last_status_change {
        object.key("LastStatusChange").string(var_2547.as_str());
    }
    if let Some(var_2548) = &input.outside_ip_address {
        object.key("OutsideIpAddress").string(var_2548.as_str());
    }
    if let Some(var_2549) = &input.status {
        object.key("Status").string(var_2549.as_str());
    }
    if let Some(var_2550) = &input.status_message {
        object.key("StatusMessage").string(var_2550.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ec2_vpn_connection_options_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEc2VpnConnectionOptionsDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.static_routes_only {
        object
            .key("StaticRoutesOnly")
            .boolean(input.static_routes_only);
    }
    if let Some(var_2551) = &input.tunnel_options {
        let mut array_2552 = object.key("TunnelOptions").start_array();
        for item_2553 in var_2551 {
            {
                let mut object_2554 = array_2552.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_ec2_vpn_connection_options_tunnel_options_details(&mut object_2554, item_2553)?;
                object_2554.finish();
            }
        }
        array_2552.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ec2_vpn_connection_routes_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEc2VpnConnectionRoutesDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2555) = &input.destination_cidr_block {
        object.key("DestinationCidrBlock").string(var_2555.as_str());
    }
    if let Some(var_2556) = &input.state {
        object.key("State").string(var_2556.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_open_search_service_domain_encryption_at_rest_options_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsOpenSearchServiceDomainEncryptionAtRestOptionsDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.enabled {
        object.key("Enabled").boolean(input.enabled);
    }
    if let Some(var_2557) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_2557.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_open_search_service_domain_node_to_node_encryption_options_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsOpenSearchServiceDomainNodeToNodeEncryptionOptionsDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.enabled {
        object.key("Enabled").boolean(input.enabled);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_open_search_service_domain_service_software_options_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsOpenSearchServiceDomainServiceSoftwareOptionsDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2558) = &input.automated_update_date {
        object.key("AutomatedUpdateDate").string(var_2558.as_str());
    }
    if input.cancellable {
        object.key("Cancellable").boolean(input.cancellable);
    }
    if let Some(var_2559) = &input.current_version {
        object.key("CurrentVersion").string(var_2559.as_str());
    }
    if let Some(var_2560) = &input.description {
        object.key("Description").string(var_2560.as_str());
    }
    if let Some(var_2561) = &input.new_version {
        object.key("NewVersion").string(var_2561.as_str());
    }
    if input.update_available {
        object
            .key("UpdateAvailable")
            .boolean(input.update_available);
    }
    if let Some(var_2562) = &input.update_status {
        object.key("UpdateStatus").string(var_2562.as_str());
    }
    if input.optional_deployment {
        object
            .key("OptionalDeployment")
            .boolean(input.optional_deployment);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_open_search_service_domain_cluster_config_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsOpenSearchServiceDomainClusterConfigDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.instance_count != 0 {
        object.key("InstanceCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.instance_count).into()),
        );
    }
    if input.warm_enabled {
        object.key("WarmEnabled").boolean(input.warm_enabled);
    }
    if input.warm_count != 0 {
        object.key("WarmCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.warm_count).into()),
        );
    }
    if input.dedicated_master_enabled {
        object
            .key("DedicatedMasterEnabled")
            .boolean(input.dedicated_master_enabled);
    }
    if let Some(var_2563) = &input.zone_awareness_config {
        let mut object_2564 = object.key("ZoneAwarenessConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_open_search_service_domain_cluster_config_zone_awareness_config_details(&mut object_2564, var_2563)?;
        object_2564.finish();
    }
    if input.dedicated_master_count != 0 {
        object.key("DedicatedMasterCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.dedicated_master_count).into()),
        );
    }
    if let Some(var_2565) = &input.instance_type {
        object.key("InstanceType").string(var_2565.as_str());
    }
    if let Some(var_2566) = &input.warm_type {
        object.key("WarmType").string(var_2566.as_str());
    }
    if input.zone_awareness_enabled {
        object
            .key("ZoneAwarenessEnabled")
            .boolean(input.zone_awareness_enabled);
    }
    if let Some(var_2567) = &input.dedicated_master_type {
        object.key("DedicatedMasterType").string(var_2567.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_open_search_service_domain_domain_endpoint_options_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsOpenSearchServiceDomainDomainEndpointOptionsDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2568) = &input.custom_endpoint_certificate_arn {
        object
            .key("CustomEndpointCertificateArn")
            .string(var_2568.as_str());
    }
    if input.custom_endpoint_enabled {
        object
            .key("CustomEndpointEnabled")
            .boolean(input.custom_endpoint_enabled);
    }
    if input.enforce_https {
        object.key("EnforceHTTPS").boolean(input.enforce_https);
    }
    if let Some(var_2569) = &input.custom_endpoint {
        object.key("CustomEndpoint").string(var_2569.as_str());
    }
    if let Some(var_2570) = &input.tls_security_policy {
        object.key("TLSSecurityPolicy").string(var_2570.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_open_search_service_domain_vpc_options_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsOpenSearchServiceDomainVpcOptionsDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2571) = &input.security_group_ids {
        let mut array_2572 = object.key("SecurityGroupIds").start_array();
        for item_2573 in var_2571 {
            {
                array_2572.value().string(item_2573.as_str());
            }
        }
        array_2572.finish();
    }
    if let Some(var_2574) = &input.subnet_ids {
        let mut array_2575 = object.key("SubnetIds").start_array();
        for item_2576 in var_2574 {
            {
                array_2575.value().string(item_2576.as_str());
            }
        }
        array_2575.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_open_search_service_domain_log_publishing_options_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsOpenSearchServiceDomainLogPublishingOptionsDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2577) = &input.index_slow_logs {
        let mut object_2578 = object.key("IndexSlowLogs").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_open_search_service_domain_log_publishing_option(&mut object_2578, var_2577)?;
        object_2578.finish();
    }
    if let Some(var_2579) = &input.search_slow_logs {
        let mut object_2580 = object.key("SearchSlowLogs").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_open_search_service_domain_log_publishing_option(&mut object_2580, var_2579)?;
        object_2580.finish();
    }
    if let Some(var_2581) = &input.audit_logs {
        let mut object_2582 = object.key("AuditLogs").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_open_search_service_domain_log_publishing_option(&mut object_2582, var_2581)?;
        object_2582.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ec2_vpc_endpoint_service_service_type_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEc2VpcEndpointServiceServiceTypeDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2583) = &input.service_type {
        object.key("ServiceType").string(var_2583.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_waf_rate_based_rule_match_predicate(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsWafRateBasedRuleMatchPredicate,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2584) = &input.data_id {
        object.key("DataId").string(var_2584.as_str());
    }
    if input.negated {
        object.key("Negated").boolean(input.negated);
    }
    if let Some(var_2585) = &input.r#type {
        object.key("Type").string(var_2585.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_waf_regional_rate_based_rule_match_predicate(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsWafRegionalRateBasedRuleMatchPredicate,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2586) = &input.data_id {
        object.key("DataId").string(var_2586.as_str());
    }
    if input.negated {
        object.key("Negated").boolean(input.negated);
    }
    if let Some(var_2587) = &input.r#type {
        object.key("Type").string(var_2587.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecr_repository_image_scanning_configuration_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcrRepositoryImageScanningConfigurationDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.scan_on_push {
        object.key("ScanOnPush").boolean(input.scan_on_push);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecr_repository_lifecycle_policy_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcrRepositoryLifecyclePolicyDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2588) = &input.lifecycle_policy_text {
        object.key("LifecyclePolicyText").string(var_2588.as_str());
    }
    if let Some(var_2589) = &input.registry_id {
        object.key("RegistryId").string(var_2589.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_eks_cluster_resources_vpc_config_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEksClusterResourcesVpcConfigDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2590) = &input.security_group_ids {
        let mut array_2591 = object.key("SecurityGroupIds").start_array();
        for item_2592 in var_2590 {
            {
                array_2591.value().string(item_2592.as_str());
            }
        }
        array_2591.finish();
    }
    if let Some(var_2593) = &input.subnet_ids {
        let mut array_2594 = object.key("SubnetIds").start_array();
        for item_2595 in var_2593 {
            {
                array_2594.value().string(item_2595.as_str());
            }
        }
        array_2594.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_eks_cluster_logging_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEksClusterLoggingDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2596) = &input.cluster_logging {
        let mut array_2597 = object.key("ClusterLogging").start_array();
        for item_2598 in var_2596 {
            {
                let mut object_2599 = array_2597.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_eks_cluster_logging_cluster_logging_details(&mut object_2599, item_2598)?;
                object_2599.finish();
            }
        }
        array_2597.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_firewall_policy_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FirewallPolicyDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2600) = &input.stateful_rule_group_references {
        let mut array_2601 = object.key("StatefulRuleGroupReferences").start_array();
        for item_2602 in var_2600 {
            {
                let mut object_2603 = array_2601.value().start_object();
                crate::json_ser::serialize_structure_crate_model_firewall_policy_stateful_rule_group_references_details(&mut object_2603, item_2602)?;
                object_2603.finish();
            }
        }
        array_2601.finish();
    }
    if let Some(var_2604) = &input.stateless_custom_actions {
        let mut array_2605 = object.key("StatelessCustomActions").start_array();
        for item_2606 in var_2604 {
            {
                let mut object_2607 = array_2605.value().start_object();
                crate::json_ser::serialize_structure_crate_model_firewall_policy_stateless_custom_actions_details(&mut object_2607, item_2606)?;
                object_2607.finish();
            }
        }
        array_2605.finish();
    }
    if let Some(var_2608) = &input.stateless_default_actions {
        let mut array_2609 = object.key("StatelessDefaultActions").start_array();
        for item_2610 in var_2608 {
            {
                array_2609.value().string(item_2610.as_str());
            }
        }
        array_2609.finish();
    }
    if let Some(var_2611) = &input.stateless_fragment_default_actions {
        let mut array_2612 = object.key("StatelessFragmentDefaultActions").start_array();
        for item_2613 in var_2611 {
            {
                array_2612.value().string(item_2613.as_str());
            }
        }
        array_2612.finish();
    }
    if let Some(var_2614) = &input.stateless_rule_group_references {
        let mut array_2615 = object.key("StatelessRuleGroupReferences").start_array();
        for item_2616 in var_2614 {
            {
                let mut object_2617 = array_2615.value().start_object();
                crate::json_ser::serialize_structure_crate_model_firewall_policy_stateless_rule_group_references_details(&mut object_2617, item_2616)?;
                object_2617.finish();
            }
        }
        array_2615.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_network_firewall_firewall_subnet_mappings_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsNetworkFirewallFirewallSubnetMappingsDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2618) = &input.subnet_id {
        object.key("SubnetId").string(var_2618.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_rule_group_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RuleGroupDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2619) = &input.rule_variables {
        let mut object_2620 = object.key("RuleVariables").start_object();
        crate::json_ser::serialize_structure_crate_model_rule_group_variables(
            &mut object_2620,
            var_2619,
        )?;
        object_2620.finish();
    }
    if let Some(var_2621) = &input.rules_source {
        let mut object_2622 = object.key("RulesSource").start_object();
        crate::json_ser::serialize_structure_crate_model_rule_group_source(
            &mut object_2622,
            var_2621,
        )?;
        object_2622.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_rds_db_security_group_ec2_security_group(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRdsDbSecurityGroupEc2SecurityGroup,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2623) = &input.ec2_security_group_id {
        object.key("Ec2SecurityGroupId").string(var_2623.as_str());
    }
    if let Some(var_2624) = &input.ec2_security_group_name {
        object.key("Ec2SecurityGroupName").string(var_2624.as_str());
    }
    if let Some(var_2625) = &input.ec2_security_group_owner_id {
        object
            .key("Ec2SecurityGroupOwnerId")
            .string(var_2625.as_str());
    }
    if let Some(var_2626) = &input.status {
        object.key("Status").string(var_2626.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_rds_db_security_group_ip_range(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRdsDbSecurityGroupIpRange,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2627) = &input.cidr_ip {
        object.key("CidrIp").string(var_2627.as_str());
    }
    if let Some(var_2628) = &input.status {
        object.key("Status").string(var_2628.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_ip_organization_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::IpOrganizationDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.asn != 0 {
        object.key("Asn").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.asn).into()),
        );
    }
    if let Some(var_2629) = &input.asn_org {
        object.key("AsnOrg").string(var_2629.as_str());
    }
    if let Some(var_2630) = &input.isp {
        object.key("Isp").string(var_2630.as_str());
    }
    if let Some(var_2631) = &input.org {
        object.key("Org").string(var_2631.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_country(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Country,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2632) = &input.country_code {
        object.key("CountryCode").string(var_2632.as_str());
    }
    if let Some(var_2633) = &input.country_name {
        object.key("CountryName").string(var_2633.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_city(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::City,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2634) = &input.city_name {
        object.key("CityName").string(var_2634.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_geo_location(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::GeoLocation,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.lon != 0.0 {
        object.key("Lon").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((input.lon).into()),
        );
    }
    if input.lat != 0.0 {
        object.key("Lat").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((input.lat).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_action_local_ip_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ActionLocalIpDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2635) = &input.ip_address_v4 {
        object.key("IpAddressV4").string(var_2635.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_sensitive_data_detections(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SensitiveDataDetections,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.count != 0 {
        object.key("Count").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.count).into()),
        );
    }
    if let Some(var_2636) = &input.r#type {
        object.key("Type").string(var_2636.as_str());
    }
    if let Some(var_2637) = &input.occurrences {
        let mut object_2638 = object.key("Occurrences").start_object();
        crate::json_ser::serialize_structure_crate_model_occurrences(&mut object_2638, var_2637)?;
        object_2638.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_custom_data_identifiers_detections(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CustomDataIdentifiersDetections,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.count != 0 {
        object.key("Count").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.count).into()),
        );
    }
    if let Some(var_2639) = &input.arn {
        object.key("Arn").string(var_2639.as_str());
    }
    if let Some(var_2640) = &input.name {
        object.key("Name").string(var_2640.as_str());
    }
    if let Some(var_2641) = &input.occurrences {
        let mut object_2642 = object.key("Occurrences").start_object();
        crate::json_ser::serialize_structure_crate_model_occurrences(&mut object_2642, var_2641)?;
        object_2642.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_auto_scaling_auto_scaling_group_mixed_instances_policy_instances_distribution_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsAutoScalingAutoScalingGroupMixedInstancesPolicyInstancesDistributionDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2643) = &input.on_demand_allocation_strategy {
        object
            .key("OnDemandAllocationStrategy")
            .string(var_2643.as_str());
    }
    if input.on_demand_base_capacity != 0 {
        object.key("OnDemandBaseCapacity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.on_demand_base_capacity).into()),
        );
    }
    if input.on_demand_percentage_above_base_capacity != 0 {
        object.key("OnDemandPercentageAboveBaseCapacity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt(
                (input.on_demand_percentage_above_base_capacity).into(),
            ),
        );
    }
    if let Some(var_2644) = &input.spot_allocation_strategy {
        object
            .key("SpotAllocationStrategy")
            .string(var_2644.as_str());
    }
    if input.spot_instance_pools != 0 {
        object.key("SpotInstancePools").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.spot_instance_pools).into()),
        );
    }
    if let Some(var_2645) = &input.spot_max_price {
        object.key("SpotMaxPrice").string(var_2645.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_auto_scaling_auto_scaling_group_mixed_instances_policy_launch_template_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsAutoScalingAutoScalingGroupMixedInstancesPolicyLaunchTemplateDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2646) = &input.launch_template_specification {
        let mut object_2647 = object.key("LaunchTemplateSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_auto_scaling_auto_scaling_group_mixed_instances_policy_launch_template_launch_template_specification(&mut object_2647, var_2646)?;
        object_2647.finish();
    }
    if let Some(var_2648) = &input.overrides {
        let mut array_2649 = object.key("Overrides").start_array();
        for item_2650 in var_2648 {
            {
                let mut object_2651 = array_2649.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_auto_scaling_auto_scaling_group_mixed_instances_policy_launch_template_overrides_list_details(&mut object_2651, item_2650)?;
                object_2651.finish();
            }
        }
        array_2649.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_code_build_project_environment_environment_variables_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCodeBuildProjectEnvironmentEnvironmentVariablesDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2652) = &input.name {
        object.key("Name").string(var_2652.as_str());
    }
    if let Some(var_2653) = &input.r#type {
        object.key("Type").string(var_2653.as_str());
    }
    if let Some(var_2654) = &input.value {
        object.key("Value").string(var_2654.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_code_build_project_environment_registry_credential(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCodeBuildProjectEnvironmentRegistryCredential,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2655) = &input.credential {
        object.key("Credential").string(var_2655.as_str());
    }
    if let Some(var_2656) = &input.credential_provider {
        object.key("CredentialProvider").string(var_2656.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_code_build_project_logs_config_cloud_watch_logs_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCodeBuildProjectLogsConfigCloudWatchLogsDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2657) = &input.group_name {
        object.key("GroupName").string(var_2657.as_str());
    }
    if let Some(var_2658) = &input.status {
        object.key("Status").string(var_2658.as_str());
    }
    if let Some(var_2659) = &input.stream_name {
        object.key("StreamName").string(var_2659.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_code_build_project_logs_config_s3_logs_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCodeBuildProjectLogsConfigS3LogsDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.encryption_disabled {
        object
            .key("EncryptionDisabled")
            .boolean(input.encryption_disabled);
    }
    if let Some(var_2660) = &input.location {
        object.key("Location").string(var_2660.as_str());
    }
    if let Some(var_2661) = &input.status {
        object.key("Status").string(var_2661.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_cloud_front_distribution_cache_behavior(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCloudFrontDistributionCacheBehavior,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2662) = &input.viewer_protocol_policy {
        object.key("ViewerProtocolPolicy").string(var_2662.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_cloud_front_distribution_origin_item(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCloudFrontDistributionOriginItem,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2663) = &input.domain_name {
        object.key("DomainName").string(var_2663.as_str());
    }
    if let Some(var_2664) = &input.id {
        object.key("Id").string(var_2664.as_str());
    }
    if let Some(var_2665) = &input.origin_path {
        object.key("OriginPath").string(var_2665.as_str());
    }
    if let Some(var_2666) = &input.s3_origin_config {
        let mut object_2667 = object.key("S3OriginConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_cloud_front_distribution_origin_s3_origin_config(&mut object_2667, var_2666)?;
        object_2667.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_cloud_front_distribution_origin_group(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCloudFrontDistributionOriginGroup,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2668) = &input.failover_criteria {
        let mut object_2669 = object.key("FailoverCriteria").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_cloud_front_distribution_origin_group_failover(&mut object_2669, var_2668)?;
        object_2669.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ec2_security_group_user_id_group_pair(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEc2SecurityGroupUserIdGroupPair,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2670) = &input.group_id {
        object.key("GroupId").string(var_2670.as_str());
    }
    if let Some(var_2671) = &input.group_name {
        object.key("GroupName").string(var_2671.as_str());
    }
    if let Some(var_2672) = &input.peering_status {
        object.key("PeeringStatus").string(var_2672.as_str());
    }
    if let Some(var_2673) = &input.user_id {
        object.key("UserId").string(var_2673.as_str());
    }
    if let Some(var_2674) = &input.vpc_id {
        object.key("VpcId").string(var_2674.as_str());
    }
    if let Some(var_2675) = &input.vpc_peering_connection_id {
        object
            .key("VpcPeeringConnectionId")
            .string(var_2675.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ec2_security_group_ip_range(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEc2SecurityGroupIpRange,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2676) = &input.cidr_ip {
        object.key("CidrIp").string(var_2676.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ec2_security_group_ipv6_range(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEc2SecurityGroupIpv6Range,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2677) = &input.cidr_ipv6 {
        object.key("CidrIpv6").string(var_2677.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ec2_security_group_prefix_list_id(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEc2SecurityGroupPrefixListId,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2678) = &input.prefix_list_id {
        object.key("PrefixListId").string(var_2678.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_icmp_type_code(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::IcmpTypeCode,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.code != 0 {
        object.key("Code").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.code).into()),
        );
    }
    if input.r#type != 0 {
        object.key("Type").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.r#type).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_port_range_from_to(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PortRangeFromTo,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.from != 0 {
        object.key("From").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.from).into()),
        );
    }
    if input.to != 0 {
        object.key("To").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.to).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_elasticsearch_domain_elasticsearch_cluster_config_zone_awareness_config_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElasticsearchDomainElasticsearchClusterConfigZoneAwarenessConfigDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.availability_zone_count != 0 {
        object.key("AvailabilityZoneCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.availability_zone_count).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_elasticsearch_domain_log_publishing_options_log_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElasticsearchDomainLogPublishingOptionsLogConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2679) = &input.cloud_watch_logs_log_group_arn {
        object
            .key("CloudWatchLogsLogGroupArn")
            .string(var_2679.as_str());
    }
    if input.enabled {
        object.key("Enabled").boolean(input.enabled);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_s3_bucket_server_side_encryption_rule(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsS3BucketServerSideEncryptionRule,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2680) = &input.apply_server_side_encryption_by_default {
        let mut object_2681 = object
            .key("ApplyServerSideEncryptionByDefault")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_aws_s3_bucket_server_side_encryption_by_default(&mut object_2681, var_2680)?;
        object_2681.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_s3_bucket_bucket_lifecycle_configuration_rules_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsS3BucketBucketLifecycleConfigurationRulesDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2682) = &input.abort_incomplete_multipart_upload {
        let mut object_2683 = object.key("AbortIncompleteMultipartUpload").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_s3_bucket_bucket_lifecycle_configuration_rules_abort_incomplete_multipart_upload_details(&mut object_2683, var_2682)?;
        object_2683.finish();
    }
    if let Some(var_2684) = &input.expiration_date {
        object.key("ExpirationDate").string(var_2684.as_str());
    }
    if input.expiration_in_days != 0 {
        object.key("ExpirationInDays").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.expiration_in_days).into()),
        );
    }
    if input.expired_object_delete_marker {
        object
            .key("ExpiredObjectDeleteMarker")
            .boolean(input.expired_object_delete_marker);
    }
    if let Some(var_2685) = &input.filter {
        let mut object_2686 = object.key("Filter").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_s3_bucket_bucket_lifecycle_configuration_rules_filter_details(&mut object_2686, var_2685)?;
        object_2686.finish();
    }
    if let Some(var_2687) = &input.id {
        object.key("ID").string(var_2687.as_str());
    }
    if input.noncurrent_version_expiration_in_days != 0 {
        object.key("NoncurrentVersionExpirationInDays").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.noncurrent_version_expiration_in_days).into()),
        );
    }
    if let Some(var_2688) = &input.noncurrent_version_transitions {
        let mut array_2689 = object.key("NoncurrentVersionTransitions").start_array();
        for item_2690 in var_2688 {
            {
                let mut object_2691 = array_2689.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_s3_bucket_bucket_lifecycle_configuration_rules_noncurrent_version_transitions_details(&mut object_2691, item_2690)?;
                object_2691.finish();
            }
        }
        array_2689.finish();
    }
    if let Some(var_2692) = &input.prefix {
        object.key("Prefix").string(var_2692.as_str());
    }
    if let Some(var_2693) = &input.status {
        object.key("Status").string(var_2693.as_str());
    }
    if let Some(var_2694) = &input.transitions {
        let mut array_2695 = object.key("Transitions").start_array();
        for item_2696 in var_2694 {
            {
                let mut object_2697 = array_2695.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_s3_bucket_bucket_lifecycle_configuration_rules_transitions_details(&mut object_2697, item_2696)?;
                object_2697.finish();
            }
        }
        array_2695.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_s3_bucket_website_configuration_redirect_to(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsS3BucketWebsiteConfigurationRedirectTo,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2698) = &input.hostname {
        object.key("Hostname").string(var_2698.as_str());
    }
    if let Some(var_2699) = &input.protocol {
        object.key("Protocol").string(var_2699.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_s3_bucket_website_configuration_routing_rule(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsS3BucketWebsiteConfigurationRoutingRule,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2700) = &input.condition {
        let mut object_2701 = object.key("Condition").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_s3_bucket_website_configuration_routing_rule_condition(&mut object_2701, var_2700)?;
        object_2701.finish();
    }
    if let Some(var_2702) = &input.redirect {
        let mut object_2703 = object.key("Redirect").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_s3_bucket_website_configuration_routing_rule_redirect(&mut object_2703, var_2702)?;
        object_2703.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_s3_bucket_notification_configuration_detail(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsS3BucketNotificationConfigurationDetail,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2704) = &input.events {
        let mut array_2705 = object.key("Events").start_array();
        for item_2706 in var_2704 {
            {
                array_2705.value().string(item_2706.as_str());
            }
        }
        array_2705.finish();
    }
    if let Some(var_2707) = &input.filter {
        let mut object_2708 = object.key("Filter").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_s3_bucket_notification_configuration_filter(&mut object_2708, var_2707)?;
        object_2708.finish();
    }
    if let Some(var_2709) = &input.destination {
        object.key("Destination").string(var_2709.as_str());
    }
    if let Some(var_2710) = &input.r#type {
        object.key("Type").string(var_2710.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_iam_access_key_session_context_attributes(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsIamAccessKeySessionContextAttributes,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.mfa_authenticated {
        object
            .key("MfaAuthenticated")
            .boolean(input.mfa_authenticated);
    }
    if let Some(var_2711) = &input.creation_date {
        object.key("CreationDate").string(var_2711.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_iam_access_key_session_context_session_issuer(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsIamAccessKeySessionContextSessionIssuer,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2712) = &input.r#type {
        object.key("Type").string(var_2712.as_str());
    }
    if let Some(var_2713) = &input.principal_id {
        object.key("PrincipalId").string(var_2713.as_str());
    }
    if let Some(var_2714) = &input.arn {
        object.key("Arn").string(var_2714.as_str());
    }
    if let Some(var_2715) = &input.account_id {
        object.key("AccountId").string(var_2715.as_str());
    }
    if let Some(var_2716) = &input.user_name {
        object.key("UserName").string(var_2716.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_dynamo_db_table_projection(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsDynamoDbTableProjection,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2717) = &input.non_key_attributes {
        let mut array_2718 = object.key("NonKeyAttributes").start_array();
        for item_2719 in var_2717 {
            {
                array_2718.value().string(item_2719.as_str());
            }
        }
        array_2718.finish();
    }
    if let Some(var_2720) = &input.projection_type {
        object.key("ProjectionType").string(var_2720.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_dynamo_db_table_replica_global_secondary_index(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsDynamoDbTableReplicaGlobalSecondaryIndex,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2721) = &input.index_name {
        object.key("IndexName").string(var_2721.as_str());
    }
    if let Some(var_2722) = &input.provisioned_throughput_override {
        let mut object_2723 = object.key("ProvisionedThroughputOverride").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_dynamo_db_table_provisioned_throughput_override(&mut object_2723, var_2722)?;
        object_2723.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_dynamo_db_table_provisioned_throughput_override(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsDynamoDbTableProvisionedThroughputOverride,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.read_capacity_units != 0 {
        object.key("ReadCapacityUnits").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.read_capacity_units).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ssm_compliance_summary(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsSsmComplianceSummary,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2724) = &input.status {
        object.key("Status").string(var_2724.as_str());
    }
    if input.compliant_critical_count != 0 {
        object.key("CompliantCriticalCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.compliant_critical_count).into()),
        );
    }
    if input.compliant_high_count != 0 {
        object.key("CompliantHighCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.compliant_high_count).into()),
        );
    }
    if input.compliant_medium_count != 0 {
        object.key("CompliantMediumCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.compliant_medium_count).into()),
        );
    }
    if let Some(var_2725) = &input.execution_type {
        object.key("ExecutionType").string(var_2725.as_str());
    }
    if input.non_compliant_critical_count != 0 {
        object.key("NonCompliantCriticalCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.non_compliant_critical_count).into()),
        );
    }
    if input.compliant_informational_count != 0 {
        object.key("CompliantInformationalCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.compliant_informational_count).into()),
        );
    }
    if input.non_compliant_informational_count != 0 {
        object.key("NonCompliantInformationalCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.non_compliant_informational_count).into()),
        );
    }
    if input.compliant_unspecified_count != 0 {
        object.key("CompliantUnspecifiedCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.compliant_unspecified_count).into()),
        );
    }
    if input.non_compliant_low_count != 0 {
        object.key("NonCompliantLowCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.non_compliant_low_count).into()),
        );
    }
    if input.non_compliant_high_count != 0 {
        object.key("NonCompliantHighCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.non_compliant_high_count).into()),
        );
    }
    if input.compliant_low_count != 0 {
        object.key("CompliantLowCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.compliant_low_count).into()),
        );
    }
    if let Some(var_2726) = &input.compliance_type {
        object.key("ComplianceType").string(var_2726.as_str());
    }
    if let Some(var_2727) = &input.patch_baseline_id {
        object.key("PatchBaselineId").string(var_2727.as_str());
    }
    if let Some(var_2728) = &input.overall_severity {
        object.key("OverallSeverity").string(var_2728.as_str());
    }
    if input.non_compliant_medium_count != 0 {
        object.key("NonCompliantMediumCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.non_compliant_medium_count).into()),
        );
    }
    if input.non_compliant_unspecified_count != 0 {
        object.key("NonCompliantUnspecifiedCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.non_compliant_unspecified_count).into()),
        );
    }
    if let Some(var_2729) = &input.patch_group {
        object.key("PatchGroup").string(var_2729.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_certificate_manager_certificate_resource_record(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCertificateManagerCertificateResourceRecord,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2730) = &input.name {
        object.key("Name").string(var_2730.as_str());
    }
    if let Some(var_2731) = &input.r#type {
        object.key("Type").string(var_2731.as_str());
    }
    if let Some(var_2732) = &input.value {
        object.key("Value").string(var_2732.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_redshift_cluster_cluster_parameter_status(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRedshiftClusterClusterParameterStatus,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2733) = &input.parameter_name {
        object.key("ParameterName").string(var_2733.as_str());
    }
    if let Some(var_2734) = &input.parameter_apply_status {
        object.key("ParameterApplyStatus").string(var_2734.as_str());
    }
    if let Some(var_2735) = &input.parameter_apply_error_description {
        object
            .key("ParameterApplyErrorDescription")
            .string(var_2735.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_elb_load_balancer_listener(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElbLoadBalancerListener,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.instance_port != 0 {
        object.key("InstancePort").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.instance_port).into()),
        );
    }
    if let Some(var_2736) = &input.instance_protocol {
        object.key("InstanceProtocol").string(var_2736.as_str());
    }
    if input.load_balancer_port != 0 {
        object.key("LoadBalancerPort").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.load_balancer_port).into()),
        );
    }
    if let Some(var_2737) = &input.protocol {
        object.key("Protocol").string(var_2737.as_str());
    }
    if let Some(var_2738) = &input.ssl_certificate_id {
        object.key("SslCertificateId").string(var_2738.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_elb_load_balancer_access_log(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElbLoadBalancerAccessLog,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.emit_interval != 0 {
        object.key("EmitInterval").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.emit_interval).into()),
        );
    }
    if input.enabled {
        object.key("Enabled").boolean(input.enabled);
    }
    if let Some(var_2739) = &input.s3_bucket_name {
        object.key("S3BucketName").string(var_2739.as_str());
    }
    if let Some(var_2740) = &input.s3_bucket_prefix {
        object.key("S3BucketPrefix").string(var_2740.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_elb_load_balancer_connection_draining(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElbLoadBalancerConnectionDraining,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.enabled {
        object.key("Enabled").boolean(input.enabled);
    }
    if input.timeout != 0 {
        object.key("Timeout").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.timeout).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_elb_load_balancer_connection_settings(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElbLoadBalancerConnectionSettings,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.idle_timeout != 0 {
        object.key("IdleTimeout").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.idle_timeout).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_elb_load_balancer_cross_zone_load_balancing(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElbLoadBalancerCrossZoneLoadBalancing,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.enabled {
        object.key("Enabled").boolean(input.enabled);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_elb_load_balancer_additional_attribute(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElbLoadBalancerAdditionalAttribute,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2741) = &input.key {
        object.key("Key").string(var_2741.as_str());
    }
    if let Some(var_2742) = &input.value {
        object.key("Value").string(var_2742.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_elb_app_cookie_stickiness_policy(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElbAppCookieStickinessPolicy,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2743) = &input.cookie_name {
        object.key("CookieName").string(var_2743.as_str());
    }
    if let Some(var_2744) = &input.policy_name {
        object.key("PolicyName").string(var_2744.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_elb_lb_cookie_stickiness_policy(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElbLbCookieStickinessPolicy,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.cookie_expiration_period != 0 {
        object.key("CookieExpirationPeriod").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.cookie_expiration_period).into()),
        );
    }
    if let Some(var_2745) = &input.policy_name {
        object.key("PolicyName").string(var_2745.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_iam_instance_profile_role(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsIamInstanceProfileRole,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2746) = &input.arn {
        object.key("Arn").string(var_2746.as_str());
    }
    if let Some(var_2747) = &input.assume_role_policy_document {
        object
            .key("AssumeRolePolicyDocument")
            .string(var_2747.as_str());
    }
    if let Some(var_2748) = &input.create_date {
        object.key("CreateDate").string(var_2748.as_str());
    }
    if let Some(var_2749) = &input.path {
        object.key("Path").string(var_2749.as_str());
    }
    if let Some(var_2750) = &input.role_id {
        object.key("RoleId").string(var_2750.as_str());
    }
    if let Some(var_2751) = &input.role_name {
        object.key("RoleName").string(var_2751.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_lambda_function_environment_error(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsLambdaFunctionEnvironmentError,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2752) = &input.error_code {
        object.key("ErrorCode").string(var_2752.as_str());
    }
    if let Some(var_2753) = &input.message {
        object.key("Message").string(var_2753.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_rds_db_subnet_group_subnet(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRdsDbSubnetGroupSubnet,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2754) = &input.subnet_identifier {
        object.key("SubnetIdentifier").string(var_2754.as_str());
    }
    if let Some(var_2755) = &input.subnet_availability_zone {
        let mut object_2756 = object.key("SubnetAvailabilityZone").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_rds_db_subnet_group_subnet_availability_zone(&mut object_2756, var_2755)?;
        object_2756.finish();
    }
    if let Some(var_2757) = &input.subnet_status {
        object.key("SubnetStatus").string(var_2757.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_rds_pending_cloud_watch_logs_exports(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRdsPendingCloudWatchLogsExports,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2758) = &input.log_types_to_enable {
        let mut array_2759 = object.key("LogTypesToEnable").start_array();
        for item_2760 in var_2758 {
            {
                array_2759.value().string(item_2760.as_str());
            }
        }
        array_2759.finish();
    }
    if let Some(var_2761) = &input.log_types_to_disable {
        let mut array_2762 = object.key("LogTypesToDisable").start_array();
        for item_2763 in var_2761 {
            {
                array_2762.value().string(item_2763.as_str());
            }
        }
        array_2762.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_waf_action(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::WafAction,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2764) = &input.r#type {
        object.key("Type").string(var_2764.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_waf_excluded_rule(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::WafExcludedRule,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2765) = &input.rule_id {
        object.key("RuleId").string(var_2765.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_waf_override_action(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::WafOverrideAction,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2766) = &input.r#type {
        object.key("Type").string(var_2766.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_cluster_configuration_execute_command_configuration_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsClusterConfigurationExecuteCommandConfigurationDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2767) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_2767.as_str());
    }
    if let Some(var_2768) = &input.log_configuration {
        let mut object_2769 = object.key("LogConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_ecs_cluster_configuration_execute_command_configuration_log_configuration_details(&mut object_2769, var_2768)?;
        object_2769.finish();
    }
    if let Some(var_2770) = &input.logging {
        object.key("Logging").string(var_2770.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_task_definition_container_definitions_depends_on_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionContainerDefinitionsDependsOnDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2771) = &input.condition {
        object.key("Condition").string(var_2771.as_str());
    }
    if let Some(var_2772) = &input.container_name {
        object.key("ContainerName").string(var_2772.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_task_definition_container_definitions_environment_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionContainerDefinitionsEnvironmentDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2773) = &input.name {
        object.key("Name").string(var_2773.as_str());
    }
    if let Some(var_2774) = &input.value {
        object.key("Value").string(var_2774.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_task_definition_container_definitions_environment_files_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionContainerDefinitionsEnvironmentFilesDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2775) = &input.r#type {
        object.key("Type").string(var_2775.as_str());
    }
    if let Some(var_2776) = &input.value {
        object.key("Value").string(var_2776.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_task_definition_container_definitions_extra_hosts_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionContainerDefinitionsExtraHostsDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2777) = &input.hostname {
        object.key("Hostname").string(var_2777.as_str());
    }
    if let Some(var_2778) = &input.ip_address {
        object.key("IpAddress").string(var_2778.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_task_definition_container_definitions_firelens_configuration_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionContainerDefinitionsFirelensConfigurationDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2779) = &input.options {
        let mut object_2780 = object.key("Options").start_object();
        for (key_2781, value_2782) in var_2779 {
            {
                object_2780.key(key_2781).string(value_2782.as_str());
            }
        }
        object_2780.finish();
    }
    if let Some(var_2783) = &input.r#type {
        object.key("Type").string(var_2783.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_task_definition_container_definitions_health_check_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionContainerDefinitionsHealthCheckDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2784) = &input.command {
        let mut array_2785 = object.key("Command").start_array();
        for item_2786 in var_2784 {
            {
                array_2785.value().string(item_2786.as_str());
            }
        }
        array_2785.finish();
    }
    if input.interval != 0 {
        object.key("Interval").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.interval).into()),
        );
    }
    if input.retries != 0 {
        object.key("Retries").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.retries).into()),
        );
    }
    if input.start_period != 0 {
        object.key("StartPeriod").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.start_period).into()),
        );
    }
    if input.timeout != 0 {
        object.key("Timeout").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.timeout).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_task_definition_container_definitions_linux_parameters_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionContainerDefinitionsLinuxParametersDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2787) = &input.capabilities {
        let mut object_2788 = object.key("Capabilities").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_ecs_task_definition_container_definitions_linux_parameters_capabilities_details(&mut object_2788, var_2787)?;
        object_2788.finish();
    }
    if let Some(var_2789) = &input.devices {
        let mut array_2790 = object.key("Devices").start_array();
        for item_2791 in var_2789 {
            {
                let mut object_2792 = array_2790.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_ecs_task_definition_container_definitions_linux_parameters_devices_details(&mut object_2792, item_2791)?;
                object_2792.finish();
            }
        }
        array_2790.finish();
    }
    if input.init_process_enabled {
        object
            .key("InitProcessEnabled")
            .boolean(input.init_process_enabled);
    }
    if input.max_swap != 0 {
        object.key("MaxSwap").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_swap).into()),
        );
    }
    if input.shared_memory_size != 0 {
        object.key("SharedMemorySize").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.shared_memory_size).into()),
        );
    }
    if input.swappiness != 0 {
        object.key("Swappiness").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.swappiness).into()),
        );
    }
    if let Some(var_2793) = &input.tmpfs {
        let mut array_2794 = object.key("Tmpfs").start_array();
        for item_2795 in var_2793 {
            {
                let mut object_2796 = array_2794.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_ecs_task_definition_container_definitions_linux_parameters_tmpfs_details(&mut object_2796, item_2795)?;
                object_2796.finish();
            }
        }
        array_2794.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_task_definition_container_definitions_log_configuration_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionContainerDefinitionsLogConfigurationDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2797) = &input.log_driver {
        object.key("LogDriver").string(var_2797.as_str());
    }
    if let Some(var_2798) = &input.options {
        let mut object_2799 = object.key("Options").start_object();
        for (key_2800, value_2801) in var_2798 {
            {
                object_2799.key(key_2800).string(value_2801.as_str());
            }
        }
        object_2799.finish();
    }
    if let Some(var_2802) = &input.secret_options {
        let mut array_2803 = object.key("SecretOptions").start_array();
        for item_2804 in var_2802 {
            {
                let mut object_2805 = array_2803.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_ecs_task_definition_container_definitions_log_configuration_secret_options_details(&mut object_2805, item_2804)?;
                object_2805.finish();
            }
        }
        array_2803.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_task_definition_container_definitions_mount_points_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionContainerDefinitionsMountPointsDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2806) = &input.container_path {
        object.key("ContainerPath").string(var_2806.as_str());
    }
    if input.read_only {
        object.key("ReadOnly").boolean(input.read_only);
    }
    if let Some(var_2807) = &input.source_volume {
        object.key("SourceVolume").string(var_2807.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_task_definition_container_definitions_port_mappings_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionContainerDefinitionsPortMappingsDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.container_port != 0 {
        object.key("ContainerPort").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.container_port).into()),
        );
    }
    if input.host_port != 0 {
        object.key("HostPort").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.host_port).into()),
        );
    }
    if let Some(var_2808) = &input.protocol {
        object.key("Protocol").string(var_2808.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_task_definition_container_definitions_repository_credentials_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionContainerDefinitionsRepositoryCredentialsDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2809) = &input.credentials_parameter {
        object.key("CredentialsParameter").string(var_2809.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_task_definition_container_definitions_resource_requirements_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionContainerDefinitionsResourceRequirementsDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2810) = &input.r#type {
        object.key("Type").string(var_2810.as_str());
    }
    if let Some(var_2811) = &input.value {
        object.key("Value").string(var_2811.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_task_definition_container_definitions_secrets_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionContainerDefinitionsSecretsDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2812) = &input.name {
        object.key("Name").string(var_2812.as_str());
    }
    if let Some(var_2813) = &input.value_from {
        object.key("ValueFrom").string(var_2813.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_task_definition_container_definitions_system_controls_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionContainerDefinitionsSystemControlsDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2814) = &input.namespace {
        object.key("Namespace").string(var_2814.as_str());
    }
    if let Some(var_2815) = &input.value {
        object.key("Value").string(var_2815.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_task_definition_container_definitions_ulimits_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionContainerDefinitionsUlimitsDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.hard_limit != 0 {
        object.key("HardLimit").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.hard_limit).into()),
        );
    }
    if let Some(var_2816) = &input.name {
        object.key("Name").string(var_2816.as_str());
    }
    if input.soft_limit != 0 {
        object.key("SoftLimit").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.soft_limit).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_task_definition_container_definitions_volumes_from_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionContainerDefinitionsVolumesFromDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.read_only {
        object.key("ReadOnly").boolean(input.read_only);
    }
    if let Some(var_2817) = &input.source_container {
        object.key("SourceContainer").string(var_2817.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_task_definition_proxy_configuration_proxy_configuration_properties_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionProxyConfigurationProxyConfigurationPropertiesDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2818) = &input.name {
        object.key("Name").string(var_2818.as_str());
    }
    if let Some(var_2819) = &input.value {
        object.key("Value").string(var_2819.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_task_definition_volumes_docker_volume_configuration_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionVolumesDockerVolumeConfigurationDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.autoprovision {
        object.key("Autoprovision").boolean(input.autoprovision);
    }
    if let Some(var_2820) = &input.driver {
        object.key("Driver").string(var_2820.as_str());
    }
    if let Some(var_2821) = &input.driver_opts {
        let mut object_2822 = object.key("DriverOpts").start_object();
        for (key_2823, value_2824) in var_2821 {
            {
                object_2822.key(key_2823).string(value_2824.as_str());
            }
        }
        object_2822.finish();
    }
    if let Some(var_2825) = &input.labels {
        let mut object_2826 = object.key("Labels").start_object();
        for (key_2827, value_2828) in var_2825 {
            {
                object_2826.key(key_2827).string(value_2828.as_str());
            }
        }
        object_2826.finish();
    }
    if let Some(var_2829) = &input.scope {
        object.key("Scope").string(var_2829.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_task_definition_volumes_efs_volume_configuration_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionVolumesEfsVolumeConfigurationDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2830) = &input.authorization_config {
        let mut object_2831 = object.key("AuthorizationConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_ecs_task_definition_volumes_efs_volume_configuration_authorization_config_details(&mut object_2831, var_2830)?;
        object_2831.finish();
    }
    if let Some(var_2832) = &input.filesystem_id {
        object.key("FilesystemId").string(var_2832.as_str());
    }
    if let Some(var_2833) = &input.root_directory {
        object.key("RootDirectory").string(var_2833.as_str());
    }
    if let Some(var_2834) = &input.transit_encryption {
        object.key("TransitEncryption").string(var_2834.as_str());
    }
    if input.transit_encryption_port != 0 {
        object.key("TransitEncryptionPort").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.transit_encryption_port).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_task_definition_volumes_host_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionVolumesHostDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2835) = &input.source_path {
        object.key("SourcePath").string(var_2835.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_service_deployment_configuration_deployment_circuit_breaker_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsServiceDeploymentConfigurationDeploymentCircuitBreakerDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.enable {
        object.key("Enable").boolean(input.enable);
    }
    if input.rollback {
        object.key("Rollback").boolean(input.rollback);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_service_network_configuration_aws_vpc_configuration_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsServiceNetworkConfigurationAwsVpcConfigurationDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2836) = &input.assign_public_ip {
        object.key("AssignPublicIp").string(var_2836.as_str());
    }
    if let Some(var_2837) = &input.security_groups {
        let mut array_2838 = object.key("SecurityGroups").start_array();
        for item_2839 in var_2837 {
            {
                array_2838.value().string(item_2839.as_str());
            }
        }
        array_2838.finish();
    }
    if let Some(var_2840) = &input.subnets {
        let mut array_2841 = object.key("Subnets").start_array();
        for item_2842 in var_2840 {
            {
                array_2841.value().string(item_2842.as_str());
            }
        }
        array_2841.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_auto_scaling_launch_configuration_block_device_mappings_ebs_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsAutoScalingLaunchConfigurationBlockDeviceMappingsEbsDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.delete_on_termination {
        object
            .key("DeleteOnTermination")
            .boolean(input.delete_on_termination);
    }
    if input.encrypted {
        object.key("Encrypted").boolean(input.encrypted);
    }
    if input.iops != 0 {
        object.key("Iops").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.iops).into()),
        );
    }
    if let Some(var_2843) = &input.snapshot_id {
        object.key("SnapshotId").string(var_2843.as_str());
    }
    if input.volume_size != 0 {
        object.key("VolumeSize").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.volume_size).into()),
        );
    }
    if let Some(var_2844) = &input.volume_type {
        object.key("VolumeType").string(var_2844.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ec2_vpn_connection_options_tunnel_options_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEc2VpnConnectionOptionsTunnelOptionsDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.dpd_timeout_seconds != 0 {
        object.key("DpdTimeoutSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.dpd_timeout_seconds).into()),
        );
    }
    if let Some(var_2845) = &input.ike_versions {
        let mut array_2846 = object.key("IkeVersions").start_array();
        for item_2847 in var_2845 {
            {
                array_2846.value().string(item_2847.as_str());
            }
        }
        array_2846.finish();
    }
    if let Some(var_2848) = &input.outside_ip_address {
        object.key("OutsideIpAddress").string(var_2848.as_str());
    }
    if let Some(var_2849) = &input.phase1_dh_group_numbers {
        let mut array_2850 = object.key("Phase1DhGroupNumbers").start_array();
        for item_2851 in var_2849 {
            {
                array_2850.value().number(
                    #[allow(clippy::useless_conversion)]
                    aws_smithy_types::Number::NegInt((*item_2851).into()),
                );
            }
        }
        array_2850.finish();
    }
    if let Some(var_2852) = &input.phase1_encryption_algorithms {
        let mut array_2853 = object.key("Phase1EncryptionAlgorithms").start_array();
        for item_2854 in var_2852 {
            {
                array_2853.value().string(item_2854.as_str());
            }
        }
        array_2853.finish();
    }
    if let Some(var_2855) = &input.phase1_integrity_algorithms {
        let mut array_2856 = object.key("Phase1IntegrityAlgorithms").start_array();
        for item_2857 in var_2855 {
            {
                array_2856.value().string(item_2857.as_str());
            }
        }
        array_2856.finish();
    }
    if input.phase1_lifetime_seconds != 0 {
        object.key("Phase1LifetimeSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.phase1_lifetime_seconds).into()),
        );
    }
    if let Some(var_2858) = &input.phase2_dh_group_numbers {
        let mut array_2859 = object.key("Phase2DhGroupNumbers").start_array();
        for item_2860 in var_2858 {
            {
                array_2859.value().number(
                    #[allow(clippy::useless_conversion)]
                    aws_smithy_types::Number::NegInt((*item_2860).into()),
                );
            }
        }
        array_2859.finish();
    }
    if let Some(var_2861) = &input.phase2_encryption_algorithms {
        let mut array_2862 = object.key("Phase2EncryptionAlgorithms").start_array();
        for item_2863 in var_2861 {
            {
                array_2862.value().string(item_2863.as_str());
            }
        }
        array_2862.finish();
    }
    if let Some(var_2864) = &input.phase2_integrity_algorithms {
        let mut array_2865 = object.key("Phase2IntegrityAlgorithms").start_array();
        for item_2866 in var_2864 {
            {
                array_2865.value().string(item_2866.as_str());
            }
        }
        array_2865.finish();
    }
    if input.phase2_lifetime_seconds != 0 {
        object.key("Phase2LifetimeSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.phase2_lifetime_seconds).into()),
        );
    }
    if let Some(var_2867) = &input.pre_shared_key {
        object.key("PreSharedKey").string(var_2867.as_str());
    }
    if input.rekey_fuzz_percentage != 0 {
        object.key("RekeyFuzzPercentage").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.rekey_fuzz_percentage).into()),
        );
    }
    if input.rekey_margin_time_seconds != 0 {
        object.key("RekeyMarginTimeSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.rekey_margin_time_seconds).into()),
        );
    }
    if input.replay_window_size != 0 {
        object.key("ReplayWindowSize").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.replay_window_size).into()),
        );
    }
    if let Some(var_2868) = &input.tunnel_inside_cidr {
        object.key("TunnelInsideCidr").string(var_2868.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_open_search_service_domain_cluster_config_zone_awareness_config_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsOpenSearchServiceDomainClusterConfigZoneAwarenessConfigDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.availability_zone_count != 0 {
        object.key("AvailabilityZoneCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.availability_zone_count).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_open_search_service_domain_log_publishing_option(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsOpenSearchServiceDomainLogPublishingOption,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2869) = &input.cloud_watch_logs_log_group_arn {
        object
            .key("CloudWatchLogsLogGroupArn")
            .string(var_2869.as_str());
    }
    if input.enabled {
        object.key("Enabled").boolean(input.enabled);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_eks_cluster_logging_cluster_logging_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEksClusterLoggingClusterLoggingDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.enabled {
        object.key("Enabled").boolean(input.enabled);
    }
    if let Some(var_2870) = &input.types {
        let mut array_2871 = object.key("Types").start_array();
        for item_2872 in var_2870 {
            {
                array_2871.value().string(item_2872.as_str());
            }
        }
        array_2871.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_firewall_policy_stateful_rule_group_references_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FirewallPolicyStatefulRuleGroupReferencesDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2873) = &input.resource_arn {
        object.key("ResourceArn").string(var_2873.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_firewall_policy_stateless_custom_actions_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FirewallPolicyStatelessCustomActionsDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2874) = &input.action_definition {
        let mut object_2875 = object.key("ActionDefinition").start_object();
        crate::json_ser::serialize_structure_crate_model_stateless_custom_action_definition(
            &mut object_2875,
            var_2874,
        )?;
        object_2875.finish();
    }
    if let Some(var_2876) = &input.action_name {
        object.key("ActionName").string(var_2876.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_firewall_policy_stateless_rule_group_references_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FirewallPolicyStatelessRuleGroupReferencesDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.priority != 0 {
        object.key("Priority").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.priority).into()),
        );
    }
    if let Some(var_2877) = &input.resource_arn {
        object.key("ResourceArn").string(var_2877.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_rule_group_variables(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RuleGroupVariables,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2878) = &input.ip_sets {
        let mut object_2879 = object.key("IpSets").start_object();
        crate::json_ser::serialize_structure_crate_model_rule_group_variables_ip_sets_details(
            &mut object_2879,
            var_2878,
        )?;
        object_2879.finish();
    }
    if let Some(var_2880) = &input.port_sets {
        let mut object_2881 = object.key("PortSets").start_object();
        crate::json_ser::serialize_structure_crate_model_rule_group_variables_port_sets_details(
            &mut object_2881,
            var_2880,
        )?;
        object_2881.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_rule_group_source(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RuleGroupSource,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2882) = &input.rules_source_list {
        let mut object_2883 = object.key("RulesSourceList").start_object();
        crate::json_ser::serialize_structure_crate_model_rule_group_source_list_details(
            &mut object_2883,
            var_2882,
        )?;
        object_2883.finish();
    }
    if let Some(var_2884) = &input.rules_string {
        object.key("RulesString").string(var_2884.as_str());
    }
    if let Some(var_2885) = &input.stateful_rules {
        let mut array_2886 = object.key("StatefulRules").start_array();
        for item_2887 in var_2885 {
            {
                let mut object_2888 = array_2886.value().start_object();
                crate::json_ser::serialize_structure_crate_model_rule_group_source_stateful_rules_details(&mut object_2888, item_2887)?;
                object_2888.finish();
            }
        }
        array_2886.finish();
    }
    if let Some(var_2889) = &input.stateless_rules_and_custom_actions {
        let mut object_2890 = object.key("StatelessRulesAndCustomActions").start_object();
        crate::json_ser::serialize_structure_crate_model_rule_group_source_stateless_rules_and_custom_actions_details(&mut object_2890, var_2889)?;
        object_2890.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_occurrences(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Occurrences,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2891) = &input.line_ranges {
        let mut array_2892 = object.key("LineRanges").start_array();
        for item_2893 in var_2891 {
            {
                let mut object_2894 = array_2892.value().start_object();
                crate::json_ser::serialize_structure_crate_model_range(
                    &mut object_2894,
                    item_2893,
                )?;
                object_2894.finish();
            }
        }
        array_2892.finish();
    }
    if let Some(var_2895) = &input.offset_ranges {
        let mut array_2896 = object.key("OffsetRanges").start_array();
        for item_2897 in var_2895 {
            {
                let mut object_2898 = array_2896.value().start_object();
                crate::json_ser::serialize_structure_crate_model_range(
                    &mut object_2898,
                    item_2897,
                )?;
                object_2898.finish();
            }
        }
        array_2896.finish();
    }
    if let Some(var_2899) = &input.pages {
        let mut array_2900 = object.key("Pages").start_array();
        for item_2901 in var_2899 {
            {
                let mut object_2902 = array_2900.value().start_object();
                crate::json_ser::serialize_structure_crate_model_page(&mut object_2902, item_2901)?;
                object_2902.finish();
            }
        }
        array_2900.finish();
    }
    if let Some(var_2903) = &input.records {
        let mut array_2904 = object.key("Records").start_array();
        for item_2905 in var_2903 {
            {
                let mut object_2906 = array_2904.value().start_object();
                crate::json_ser::serialize_structure_crate_model_record(
                    &mut object_2906,
                    item_2905,
                )?;
                object_2906.finish();
            }
        }
        array_2904.finish();
    }
    if let Some(var_2907) = &input.cells {
        let mut array_2908 = object.key("Cells").start_array();
        for item_2909 in var_2907 {
            {
                let mut object_2910 = array_2908.value().start_object();
                crate::json_ser::serialize_structure_crate_model_cell(&mut object_2910, item_2909)?;
                object_2910.finish();
            }
        }
        array_2908.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_auto_scaling_auto_scaling_group_mixed_instances_policy_launch_template_launch_template_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsAutoScalingAutoScalingGroupMixedInstancesPolicyLaunchTemplateLaunchTemplateSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2911) = &input.launch_template_id {
        object.key("LaunchTemplateId").string(var_2911.as_str());
    }
    if let Some(var_2912) = &input.launch_template_name {
        object.key("LaunchTemplateName").string(var_2912.as_str());
    }
    if let Some(var_2913) = &input.version {
        object.key("Version").string(var_2913.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_auto_scaling_auto_scaling_group_mixed_instances_policy_launch_template_overrides_list_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsAutoScalingAutoScalingGroupMixedInstancesPolicyLaunchTemplateOverridesListDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2914) = &input.instance_type {
        object.key("InstanceType").string(var_2914.as_str());
    }
    if let Some(var_2915) = &input.weighted_capacity {
        object.key("WeightedCapacity").string(var_2915.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_cloud_front_distribution_origin_s3_origin_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCloudFrontDistributionOriginS3OriginConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2916) = &input.origin_access_identity {
        object.key("OriginAccessIdentity").string(var_2916.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_cloud_front_distribution_origin_group_failover(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCloudFrontDistributionOriginGroupFailover,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2917) = &input.status_codes {
        let mut object_2918 = object.key("StatusCodes").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_cloud_front_distribution_origin_group_failover_status_codes(&mut object_2918, var_2917)?;
        object_2918.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_s3_bucket_server_side_encryption_by_default(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsS3BucketServerSideEncryptionByDefault,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2919) = &input.sse_algorithm {
        object.key("SSEAlgorithm").string(var_2919.as_str());
    }
    if let Some(var_2920) = &input.kms_master_key_id {
        object.key("KMSMasterKeyID").string(var_2920.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_s3_bucket_bucket_lifecycle_configuration_rules_abort_incomplete_multipart_upload_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsS3BucketBucketLifecycleConfigurationRulesAbortIncompleteMultipartUploadDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.days_after_initiation != 0 {
        object.key("DaysAfterInitiation").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.days_after_initiation).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_s3_bucket_bucket_lifecycle_configuration_rules_filter_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsS3BucketBucketLifecycleConfigurationRulesFilterDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2921) = &input.predicate {
        let mut object_2922 = object.key("Predicate").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_s3_bucket_bucket_lifecycle_configuration_rules_filter_predicate_details(&mut object_2922, var_2921)?;
        object_2922.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_s3_bucket_bucket_lifecycle_configuration_rules_noncurrent_version_transitions_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsS3BucketBucketLifecycleConfigurationRulesNoncurrentVersionTransitionsDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.days != 0 {
        object.key("Days").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.days).into()),
        );
    }
    if let Some(var_2923) = &input.storage_class {
        object.key("StorageClass").string(var_2923.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_s3_bucket_bucket_lifecycle_configuration_rules_transitions_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsS3BucketBucketLifecycleConfigurationRulesTransitionsDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2924) = &input.date {
        object.key("Date").string(var_2924.as_str());
    }
    if input.days != 0 {
        object.key("Days").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.days).into()),
        );
    }
    if let Some(var_2925) = &input.storage_class {
        object.key("StorageClass").string(var_2925.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_s3_bucket_website_configuration_routing_rule_condition(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsS3BucketWebsiteConfigurationRoutingRuleCondition,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2926) = &input.http_error_code_returned_equals {
        object
            .key("HttpErrorCodeReturnedEquals")
            .string(var_2926.as_str());
    }
    if let Some(var_2927) = &input.key_prefix_equals {
        object.key("KeyPrefixEquals").string(var_2927.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_s3_bucket_website_configuration_routing_rule_redirect(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsS3BucketWebsiteConfigurationRoutingRuleRedirect,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2928) = &input.hostname {
        object.key("Hostname").string(var_2928.as_str());
    }
    if let Some(var_2929) = &input.http_redirect_code {
        object.key("HttpRedirectCode").string(var_2929.as_str());
    }
    if let Some(var_2930) = &input.protocol {
        object.key("Protocol").string(var_2930.as_str());
    }
    if let Some(var_2931) = &input.replace_key_prefix_with {
        object.key("ReplaceKeyPrefixWith").string(var_2931.as_str());
    }
    if let Some(var_2932) = &input.replace_key_with {
        object.key("ReplaceKeyWith").string(var_2932.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_s3_bucket_notification_configuration_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsS3BucketNotificationConfigurationFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2933) = &input.s3_key_filter {
        let mut object_2934 = object.key("S3KeyFilter").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_s3_bucket_notification_configuration_s3_key_filter(&mut object_2934, var_2933)?;
        object_2934.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_rds_db_subnet_group_subnet_availability_zone(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRdsDbSubnetGroupSubnetAvailabilityZone,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2935) = &input.name {
        object.key("Name").string(var_2935.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_cluster_configuration_execute_command_configuration_log_configuration_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsClusterConfigurationExecuteCommandConfigurationLogConfigurationDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.cloud_watch_encryption_enabled {
        object
            .key("CloudWatchEncryptionEnabled")
            .boolean(input.cloud_watch_encryption_enabled);
    }
    if let Some(var_2936) = &input.cloud_watch_log_group_name {
        object
            .key("CloudWatchLogGroupName")
            .string(var_2936.as_str());
    }
    if let Some(var_2937) = &input.s3_bucket_name {
        object.key("S3BucketName").string(var_2937.as_str());
    }
    if input.s3_encryption_enabled {
        object
            .key("S3EncryptionEnabled")
            .boolean(input.s3_encryption_enabled);
    }
    if let Some(var_2938) = &input.s3_key_prefix {
        object.key("S3KeyPrefix").string(var_2938.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_task_definition_container_definitions_linux_parameters_capabilities_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionContainerDefinitionsLinuxParametersCapabilitiesDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2939) = &input.add {
        let mut array_2940 = object.key("Add").start_array();
        for item_2941 in var_2939 {
            {
                array_2940.value().string(item_2941.as_str());
            }
        }
        array_2940.finish();
    }
    if let Some(var_2942) = &input.drop {
        let mut array_2943 = object.key("Drop").start_array();
        for item_2944 in var_2942 {
            {
                array_2943.value().string(item_2944.as_str());
            }
        }
        array_2943.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_task_definition_container_definitions_linux_parameters_devices_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionContainerDefinitionsLinuxParametersDevicesDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2945) = &input.container_path {
        object.key("ContainerPath").string(var_2945.as_str());
    }
    if let Some(var_2946) = &input.host_path {
        object.key("HostPath").string(var_2946.as_str());
    }
    if let Some(var_2947) = &input.permissions {
        let mut array_2948 = object.key("Permissions").start_array();
        for item_2949 in var_2947 {
            {
                array_2948.value().string(item_2949.as_str());
            }
        }
        array_2948.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_task_definition_container_definitions_linux_parameters_tmpfs_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionContainerDefinitionsLinuxParametersTmpfsDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2950) = &input.container_path {
        object.key("ContainerPath").string(var_2950.as_str());
    }
    if let Some(var_2951) = &input.mount_options {
        let mut array_2952 = object.key("MountOptions").start_array();
        for item_2953 in var_2951 {
            {
                array_2952.value().string(item_2953.as_str());
            }
        }
        array_2952.finish();
    }
    if input.size != 0 {
        object.key("Size").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.size).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_task_definition_container_definitions_log_configuration_secret_options_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionContainerDefinitionsLogConfigurationSecretOptionsDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2954) = &input.name {
        object.key("Name").string(var_2954.as_str());
    }
    if let Some(var_2955) = &input.value_from {
        object.key("ValueFrom").string(var_2955.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_task_definition_volumes_efs_volume_configuration_authorization_config_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionVolumesEfsVolumeConfigurationAuthorizationConfigDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2956) = &input.access_point_id {
        object.key("AccessPointId").string(var_2956.as_str());
    }
    if let Some(var_2957) = &input.iam {
        object.key("Iam").string(var_2957.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_stateless_custom_action_definition(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StatelessCustomActionDefinition,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2958) = &input.publish_metric_action {
        let mut object_2959 = object.key("PublishMetricAction").start_object();
        crate::json_ser::serialize_structure_crate_model_stateless_custom_publish_metric_action(
            &mut object_2959,
            var_2958,
        )?;
        object_2959.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_rule_group_variables_ip_sets_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RuleGroupVariablesIpSetsDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2960) = &input.definition {
        let mut array_2961 = object.key("Definition").start_array();
        for item_2962 in var_2960 {
            {
                array_2961.value().string(item_2962.as_str());
            }
        }
        array_2961.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_rule_group_variables_port_sets_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RuleGroupVariablesPortSetsDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2963) = &input.definition {
        let mut array_2964 = object.key("Definition").start_array();
        for item_2965 in var_2963 {
            {
                array_2964.value().string(item_2965.as_str());
            }
        }
        array_2964.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_rule_group_source_list_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RuleGroupSourceListDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2966) = &input.generated_rules_type {
        object.key("GeneratedRulesType").string(var_2966.as_str());
    }
    if let Some(var_2967) = &input.target_types {
        let mut array_2968 = object.key("TargetTypes").start_array();
        for item_2969 in var_2967 {
            {
                array_2968.value().string(item_2969.as_str());
            }
        }
        array_2968.finish();
    }
    if let Some(var_2970) = &input.targets {
        let mut array_2971 = object.key("Targets").start_array();
        for item_2972 in var_2970 {
            {
                array_2971.value().string(item_2972.as_str());
            }
        }
        array_2971.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_rule_group_source_stateful_rules_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RuleGroupSourceStatefulRulesDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2973) = &input.action {
        object.key("Action").string(var_2973.as_str());
    }
    if let Some(var_2974) = &input.header {
        let mut object_2975 = object.key("Header").start_object();
        crate::json_ser::serialize_structure_crate_model_rule_group_source_stateful_rules_header_details(&mut object_2975, var_2974)?;
        object_2975.finish();
    }
    if let Some(var_2976) = &input.rule_options {
        let mut array_2977 = object.key("RuleOptions").start_array();
        for item_2978 in var_2976 {
            {
                let mut object_2979 = array_2977.value().start_object();
                crate::json_ser::serialize_structure_crate_model_rule_group_source_stateful_rules_options_details(&mut object_2979, item_2978)?;
                object_2979.finish();
            }
        }
        array_2977.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_rule_group_source_stateless_rules_and_custom_actions_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RuleGroupSourceStatelessRulesAndCustomActionsDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2980) = &input.custom_actions {
        let mut array_2981 = object.key("CustomActions").start_array();
        for item_2982 in var_2980 {
            {
                let mut object_2983 = array_2981.value().start_object();
                crate::json_ser::serialize_structure_crate_model_rule_group_source_custom_actions_details(&mut object_2983, item_2982)?;
                object_2983.finish();
            }
        }
        array_2981.finish();
    }
    if let Some(var_2984) = &input.stateless_rules {
        let mut array_2985 = object.key("StatelessRules").start_array();
        for item_2986 in var_2984 {
            {
                let mut object_2987 = array_2985.value().start_object();
                crate::json_ser::serialize_structure_crate_model_rule_group_source_stateless_rules_details(&mut object_2987, item_2986)?;
                object_2987.finish();
            }
        }
        array_2985.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_range(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Range,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.start != 0 {
        object.key("Start").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.start).into()),
        );
    }
    if input.end != 0 {
        object.key("End").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.end).into()),
        );
    }
    if input.start_column != 0 {
        object.key("StartColumn").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.start_column).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_page(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Page,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.page_number != 0 {
        object.key("PageNumber").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.page_number).into()),
        );
    }
    if let Some(var_2988) = &input.line_range {
        let mut object_2989 = object.key("LineRange").start_object();
        crate::json_ser::serialize_structure_crate_model_range(&mut object_2989, var_2988)?;
        object_2989.finish();
    }
    if let Some(var_2990) = &input.offset_range {
        let mut object_2991 = object.key("OffsetRange").start_object();
        crate::json_ser::serialize_structure_crate_model_range(&mut object_2991, var_2990)?;
        object_2991.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_record(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Record,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2992) = &input.json_path {
        object.key("JsonPath").string(var_2992.as_str());
    }
    if input.record_index != 0 {
        object.key("RecordIndex").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.record_index).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_cell(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Cell,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.column != 0 {
        object.key("Column").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.column).into()),
        );
    }
    if input.row != 0 {
        object.key("Row").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.row).into()),
        );
    }
    if let Some(var_2993) = &input.column_name {
        object.key("ColumnName").string(var_2993.as_str());
    }
    if let Some(var_2994) = &input.cell_reference {
        object.key("CellReference").string(var_2994.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_cloud_front_distribution_origin_group_failover_status_codes(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCloudFrontDistributionOriginGroupFailoverStatusCodes,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2995) = &input.items {
        let mut array_2996 = object.key("Items").start_array();
        for item_2997 in var_2995 {
            {
                array_2996.value().number(
                    #[allow(clippy::useless_conversion)]
                    aws_smithy_types::Number::NegInt((*item_2997).into()),
                );
            }
        }
        array_2996.finish();
    }
    if input.quantity != 0 {
        object.key("Quantity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.quantity).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_s3_bucket_bucket_lifecycle_configuration_rules_filter_predicate_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsS3BucketBucketLifecycleConfigurationRulesFilterPredicateDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2998) = &input.operands {
        let mut array_2999 = object.key("Operands").start_array();
        for item_3000 in var_2998 {
            {
                let mut object_3001 = array_2999.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_s3_bucket_bucket_lifecycle_configuration_rules_filter_predicate_operands_details(&mut object_3001, item_3000)?;
                object_3001.finish();
            }
        }
        array_2999.finish();
    }
    if let Some(var_3002) = &input.prefix {
        object.key("Prefix").string(var_3002.as_str());
    }
    if let Some(var_3003) = &input.tag {
        let mut object_3004 = object.key("Tag").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_s3_bucket_bucket_lifecycle_configuration_rules_filter_predicate_tag_details(&mut object_3004, var_3003)?;
        object_3004.finish();
    }
    if let Some(var_3005) = &input.r#type {
        object.key("Type").string(var_3005.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_s3_bucket_notification_configuration_s3_key_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsS3BucketNotificationConfigurationS3KeyFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3006) = &input.filter_rules {
        let mut array_3007 = object.key("FilterRules").start_array();
        for item_3008 in var_3006 {
            {
                let mut object_3009 = array_3007.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_s3_bucket_notification_configuration_s3_key_filter_rule(&mut object_3009, item_3008)?;
                object_3009.finish();
            }
        }
        array_3007.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_stateless_custom_publish_metric_action(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StatelessCustomPublishMetricAction,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3010) = &input.dimensions {
        let mut array_3011 = object.key("Dimensions").start_array();
        for item_3012 in var_3010 {
            {
                let mut object_3013 = array_3011.value().start_object();
                crate::json_ser::serialize_structure_crate_model_stateless_custom_publish_metric_action_dimension(&mut object_3013, item_3012)?;
                object_3013.finish();
            }
        }
        array_3011.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_rule_group_source_stateful_rules_header_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RuleGroupSourceStatefulRulesHeaderDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3014) = &input.destination {
        object.key("Destination").string(var_3014.as_str());
    }
    if let Some(var_3015) = &input.destination_port {
        object.key("DestinationPort").string(var_3015.as_str());
    }
    if let Some(var_3016) = &input.direction {
        object.key("Direction").string(var_3016.as_str());
    }
    if let Some(var_3017) = &input.protocol {
        object.key("Protocol").string(var_3017.as_str());
    }
    if let Some(var_3018) = &input.source {
        object.key("Source").string(var_3018.as_str());
    }
    if let Some(var_3019) = &input.source_port {
        object.key("SourcePort").string(var_3019.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_rule_group_source_stateful_rules_options_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RuleGroupSourceStatefulRulesOptionsDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3020) = &input.keyword {
        object.key("Keyword").string(var_3020.as_str());
    }
    if let Some(var_3021) = &input.settings {
        let mut array_3022 = object.key("Settings").start_array();
        for item_3023 in var_3021 {
            {
                array_3022.value().string(item_3023.as_str());
            }
        }
        array_3022.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_rule_group_source_custom_actions_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RuleGroupSourceCustomActionsDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3024) = &input.action_definition {
        let mut object_3025 = object.key("ActionDefinition").start_object();
        crate::json_ser::serialize_structure_crate_model_stateless_custom_action_definition(
            &mut object_3025,
            var_3024,
        )?;
        object_3025.finish();
    }
    if let Some(var_3026) = &input.action_name {
        object.key("ActionName").string(var_3026.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_rule_group_source_stateless_rules_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RuleGroupSourceStatelessRulesDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.priority != 0 {
        object.key("Priority").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.priority).into()),
        );
    }
    if let Some(var_3027) = &input.rule_definition {
        let mut object_3028 = object.key("RuleDefinition").start_object();
        crate::json_ser::serialize_structure_crate_model_rule_group_source_stateless_rule_definition(&mut object_3028, var_3027)?;
        object_3028.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_s3_bucket_bucket_lifecycle_configuration_rules_filter_predicate_operands_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsS3BucketBucketLifecycleConfigurationRulesFilterPredicateOperandsDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3029) = &input.prefix {
        object.key("Prefix").string(var_3029.as_str());
    }
    if let Some(var_3030) = &input.tag {
        let mut object_3031 = object.key("Tag").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_s3_bucket_bucket_lifecycle_configuration_rules_filter_predicate_operands_tag_details(&mut object_3031, var_3030)?;
        object_3031.finish();
    }
    if let Some(var_3032) = &input.r#type {
        object.key("Type").string(var_3032.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_s3_bucket_bucket_lifecycle_configuration_rules_filter_predicate_tag_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsS3BucketBucketLifecycleConfigurationRulesFilterPredicateTagDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3033) = &input.key {
        object.key("Key").string(var_3033.as_str());
    }
    if let Some(var_3034) = &input.value {
        object.key("Value").string(var_3034.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_s3_bucket_notification_configuration_s3_key_filter_rule(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsS3BucketNotificationConfigurationS3KeyFilterRule,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3035) = &input.name {
        object.key("Name").string(var_3035.as_str());
    }
    if let Some(var_3036) = &input.value {
        object.key("Value").string(var_3036.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_stateless_custom_publish_metric_action_dimension(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StatelessCustomPublishMetricActionDimension,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3037) = &input.value {
        object.key("Value").string(var_3037.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_rule_group_source_stateless_rule_definition(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RuleGroupSourceStatelessRuleDefinition,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3038) = &input.actions {
        let mut array_3039 = object.key("Actions").start_array();
        for item_3040 in var_3038 {
            {
                array_3039.value().string(item_3040.as_str());
            }
        }
        array_3039.finish();
    }
    if let Some(var_3041) = &input.match_attributes {
        let mut object_3042 = object.key("MatchAttributes").start_object();
        crate::json_ser::serialize_structure_crate_model_rule_group_source_stateless_rule_match_attributes(&mut object_3042, var_3041)?;
        object_3042.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_s3_bucket_bucket_lifecycle_configuration_rules_filter_predicate_operands_tag_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsS3BucketBucketLifecycleConfigurationRulesFilterPredicateOperandsTagDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3043) = &input.key {
        object.key("Key").string(var_3043.as_str());
    }
    if let Some(var_3044) = &input.value {
        object.key("Value").string(var_3044.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_rule_group_source_stateless_rule_match_attributes(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RuleGroupSourceStatelessRuleMatchAttributes,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3045) = &input.destination_ports {
        let mut array_3046 = object.key("DestinationPorts").start_array();
        for item_3047 in var_3045 {
            {
                let mut object_3048 = array_3046.value().start_object();
                crate::json_ser::serialize_structure_crate_model_rule_group_source_stateless_rule_match_attributes_destination_ports(&mut object_3048, item_3047)?;
                object_3048.finish();
            }
        }
        array_3046.finish();
    }
    if let Some(var_3049) = &input.destinations {
        let mut array_3050 = object.key("Destinations").start_array();
        for item_3051 in var_3049 {
            {
                let mut object_3052 = array_3050.value().start_object();
                crate::json_ser::serialize_structure_crate_model_rule_group_source_stateless_rule_match_attributes_destinations(&mut object_3052, item_3051)?;
                object_3052.finish();
            }
        }
        array_3050.finish();
    }
    if let Some(var_3053) = &input.protocols {
        let mut array_3054 = object.key("Protocols").start_array();
        for item_3055 in var_3053 {
            {
                array_3054.value().number(
                    #[allow(clippy::useless_conversion)]
                    aws_smithy_types::Number::NegInt((*item_3055).into()),
                );
            }
        }
        array_3054.finish();
    }
    if let Some(var_3056) = &input.source_ports {
        let mut array_3057 = object.key("SourcePorts").start_array();
        for item_3058 in var_3056 {
            {
                let mut object_3059 = array_3057.value().start_object();
                crate::json_ser::serialize_structure_crate_model_rule_group_source_stateless_rule_match_attributes_source_ports(&mut object_3059, item_3058)?;
                object_3059.finish();
            }
        }
        array_3057.finish();
    }
    if let Some(var_3060) = &input.sources {
        let mut array_3061 = object.key("Sources").start_array();
        for item_3062 in var_3060 {
            {
                let mut object_3063 = array_3061.value().start_object();
                crate::json_ser::serialize_structure_crate_model_rule_group_source_stateless_rule_match_attributes_sources(&mut object_3063, item_3062)?;
                object_3063.finish();
            }
        }
        array_3061.finish();
    }
    if let Some(var_3064) = &input.tcp_flags {
        let mut array_3065 = object.key("TcpFlags").start_array();
        for item_3066 in var_3064 {
            {
                let mut object_3067 = array_3065.value().start_object();
                crate::json_ser::serialize_structure_crate_model_rule_group_source_stateless_rule_match_attributes_tcp_flags(&mut object_3067, item_3066)?;
                object_3067.finish();
            }
        }
        array_3065.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_rule_group_source_stateless_rule_match_attributes_destination_ports(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RuleGroupSourceStatelessRuleMatchAttributesDestinationPorts,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.from_port != 0 {
        object.key("FromPort").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.from_port).into()),
        );
    }
    if input.to_port != 0 {
        object.key("ToPort").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.to_port).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_rule_group_source_stateless_rule_match_attributes_destinations(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RuleGroupSourceStatelessRuleMatchAttributesDestinations,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3068) = &input.address_definition {
        object.key("AddressDefinition").string(var_3068.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_rule_group_source_stateless_rule_match_attributes_source_ports(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RuleGroupSourceStatelessRuleMatchAttributesSourcePorts,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.from_port != 0 {
        object.key("FromPort").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.from_port).into()),
        );
    }
    if input.to_port != 0 {
        object.key("ToPort").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.to_port).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_rule_group_source_stateless_rule_match_attributes_sources(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RuleGroupSourceStatelessRuleMatchAttributesSources,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3069) = &input.address_definition {
        object.key("AddressDefinition").string(var_3069.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_rule_group_source_stateless_rule_match_attributes_tcp_flags(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RuleGroupSourceStatelessRuleMatchAttributesTcpFlags,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3070) = &input.flags {
        let mut array_3071 = object.key("Flags").start_array();
        for item_3072 in var_3070 {
            {
                array_3071.value().string(item_3072.as_str());
            }
        }
        array_3071.finish();
    }
    if let Some(var_3073) = &input.masks {
        let mut array_3074 = object.key("Masks").start_array();
        for item_3075 in var_3073 {
            {
                array_3074.value().string(item_3075.as_str());
            }
        }
        array_3074.finish();
    }
    Ok(())
}
