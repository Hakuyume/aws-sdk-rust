// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_cancel_task_execution_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CancelTaskExecutionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1) = &input.task_execution_arn {
        object.key("TaskExecutionArn").string(var_1.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_agent_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateAgentInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2) = &input.activation_key {
        object.key("ActivationKey").string(var_2.as_str());
    }
    if let Some(var_3) = &input.agent_name {
        object.key("AgentName").string(var_3.as_str());
    }
    if let Some(var_4) = &input.tags {
        let mut array_5 = object.key("Tags").start_array();
        for item_6 in var_4 {
            {
                let mut object_7 = array_5.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag_list_entry(
                    &mut object_7,
                    item_6,
                )?;
                object_7.finish();
            }
        }
        array_5.finish();
    }
    if let Some(var_8) = &input.vpc_endpoint_id {
        object.key("VpcEndpointId").string(var_8.as_str());
    }
    if let Some(var_9) = &input.subnet_arns {
        let mut array_10 = object.key("SubnetArns").start_array();
        for item_11 in var_9 {
            {
                array_10.value().string(item_11.as_str());
            }
        }
        array_10.finish();
    }
    if let Some(var_12) = &input.security_group_arns {
        let mut array_13 = object.key("SecurityGroupArns").start_array();
        for item_14 in var_12 {
            {
                array_13.value().string(item_14.as_str());
            }
        }
        array_13.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_location_efs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateLocationEfsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_15) = &input.subdirectory {
        object.key("Subdirectory").string(var_15.as_str());
    }
    if let Some(var_16) = &input.efs_filesystem_arn {
        object.key("EfsFilesystemArn").string(var_16.as_str());
    }
    if let Some(var_17) = &input.ec2_config {
        let mut object_18 = object.key("Ec2Config").start_object();
        crate::json_ser::serialize_structure_crate_model_ec2_config(&mut object_18, var_17)?;
        object_18.finish();
    }
    if let Some(var_19) = &input.tags {
        let mut array_20 = object.key("Tags").start_array();
        for item_21 in var_19 {
            {
                let mut object_22 = array_20.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag_list_entry(
                    &mut object_22,
                    item_21,
                )?;
                object_22.finish();
            }
        }
        array_20.finish();
    }
    if let Some(var_23) = &input.access_point_arn {
        object.key("AccessPointArn").string(var_23.as_str());
    }
    if let Some(var_24) = &input.file_system_access_role_arn {
        object
            .key("FileSystemAccessRoleArn")
            .string(var_24.as_str());
    }
    if let Some(var_25) = &input.in_transit_encryption {
        object.key("InTransitEncryption").string(var_25.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_location_fsx_lustre_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateLocationFsxLustreInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_26) = &input.fsx_filesystem_arn {
        object.key("FsxFilesystemArn").string(var_26.as_str());
    }
    if let Some(var_27) = &input.security_group_arns {
        let mut array_28 = object.key("SecurityGroupArns").start_array();
        for item_29 in var_27 {
            {
                array_28.value().string(item_29.as_str());
            }
        }
        array_28.finish();
    }
    if let Some(var_30) = &input.subdirectory {
        object.key("Subdirectory").string(var_30.as_str());
    }
    if let Some(var_31) = &input.tags {
        let mut array_32 = object.key("Tags").start_array();
        for item_33 in var_31 {
            {
                let mut object_34 = array_32.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag_list_entry(
                    &mut object_34,
                    item_33,
                )?;
                object_34.finish();
            }
        }
        array_32.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_location_fsx_open_zfs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateLocationFsxOpenZfsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_35) = &input.fsx_filesystem_arn {
        object.key("FsxFilesystemArn").string(var_35.as_str());
    }
    if let Some(var_36) = &input.protocol {
        let mut object_37 = object.key("Protocol").start_object();
        crate::json_ser::serialize_structure_crate_model_fsx_protocol(&mut object_37, var_36)?;
        object_37.finish();
    }
    if let Some(var_38) = &input.security_group_arns {
        let mut array_39 = object.key("SecurityGroupArns").start_array();
        for item_40 in var_38 {
            {
                array_39.value().string(item_40.as_str());
            }
        }
        array_39.finish();
    }
    if let Some(var_41) = &input.subdirectory {
        object.key("Subdirectory").string(var_41.as_str());
    }
    if let Some(var_42) = &input.tags {
        let mut array_43 = object.key("Tags").start_array();
        for item_44 in var_42 {
            {
                let mut object_45 = array_43.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag_list_entry(
                    &mut object_45,
                    item_44,
                )?;
                object_45.finish();
            }
        }
        array_43.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_location_fsx_windows_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateLocationFsxWindowsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_46) = &input.subdirectory {
        object.key("Subdirectory").string(var_46.as_str());
    }
    if let Some(var_47) = &input.fsx_filesystem_arn {
        object.key("FsxFilesystemArn").string(var_47.as_str());
    }
    if let Some(var_48) = &input.security_group_arns {
        let mut array_49 = object.key("SecurityGroupArns").start_array();
        for item_50 in var_48 {
            {
                array_49.value().string(item_50.as_str());
            }
        }
        array_49.finish();
    }
    if let Some(var_51) = &input.tags {
        let mut array_52 = object.key("Tags").start_array();
        for item_53 in var_51 {
            {
                let mut object_54 = array_52.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag_list_entry(
                    &mut object_54,
                    item_53,
                )?;
                object_54.finish();
            }
        }
        array_52.finish();
    }
    if let Some(var_55) = &input.user {
        object.key("User").string(var_55.as_str());
    }
    if let Some(var_56) = &input.domain {
        object.key("Domain").string(var_56.as_str());
    }
    if let Some(var_57) = &input.password {
        object.key("Password").string(var_57.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_location_hdfs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateLocationHdfsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_58) = &input.subdirectory {
        object.key("Subdirectory").string(var_58.as_str());
    }
    if let Some(var_59) = &input.name_nodes {
        let mut array_60 = object.key("NameNodes").start_array();
        for item_61 in var_59 {
            {
                let mut object_62 = array_60.value().start_object();
                crate::json_ser::serialize_structure_crate_model_hdfs_name_node(
                    &mut object_62,
                    item_61,
                )?;
                object_62.finish();
            }
        }
        array_60.finish();
    }
    if let Some(var_63) = &input.block_size {
        object.key("BlockSize").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_63).into()),
        );
    }
    if let Some(var_64) = &input.replication_factor {
        object.key("ReplicationFactor").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_64).into()),
        );
    }
    if let Some(var_65) = &input.kms_key_provider_uri {
        object.key("KmsKeyProviderUri").string(var_65.as_str());
    }
    if let Some(var_66) = &input.qop_configuration {
        let mut object_67 = object.key("QopConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_qop_configuration(&mut object_67, var_66)?;
        object_67.finish();
    }
    if let Some(var_68) = &input.authentication_type {
        object.key("AuthenticationType").string(var_68.as_str());
    }
    if let Some(var_69) = &input.simple_user {
        object.key("SimpleUser").string(var_69.as_str());
    }
    if let Some(var_70) = &input.kerberos_principal {
        object.key("KerberosPrincipal").string(var_70.as_str());
    }
    if let Some(var_71) = &input.kerberos_keytab {
        object
            .key("KerberosKeytab")
            .string_unchecked(&aws_smithy_types::base64::encode(var_71));
    }
    if let Some(var_72) = &input.kerberos_krb5_conf {
        object
            .key("KerberosKrb5Conf")
            .string_unchecked(&aws_smithy_types::base64::encode(var_72));
    }
    if let Some(var_73) = &input.agent_arns {
        let mut array_74 = object.key("AgentArns").start_array();
        for item_75 in var_73 {
            {
                array_74.value().string(item_75.as_str());
            }
        }
        array_74.finish();
    }
    if let Some(var_76) = &input.tags {
        let mut array_77 = object.key("Tags").start_array();
        for item_78 in var_76 {
            {
                let mut object_79 = array_77.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag_list_entry(
                    &mut object_79,
                    item_78,
                )?;
                object_79.finish();
            }
        }
        array_77.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_location_nfs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateLocationNfsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_80) = &input.subdirectory {
        object.key("Subdirectory").string(var_80.as_str());
    }
    if let Some(var_81) = &input.server_hostname {
        object.key("ServerHostname").string(var_81.as_str());
    }
    if let Some(var_82) = &input.on_prem_config {
        let mut object_83 = object.key("OnPremConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_on_prem_config(&mut object_83, var_82)?;
        object_83.finish();
    }
    if let Some(var_84) = &input.mount_options {
        let mut object_85 = object.key("MountOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_nfs_mount_options(&mut object_85, var_84)?;
        object_85.finish();
    }
    if let Some(var_86) = &input.tags {
        let mut array_87 = object.key("Tags").start_array();
        for item_88 in var_86 {
            {
                let mut object_89 = array_87.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag_list_entry(
                    &mut object_89,
                    item_88,
                )?;
                object_89.finish();
            }
        }
        array_87.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_location_object_storage_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateLocationObjectStorageInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_90) = &input.server_hostname {
        object.key("ServerHostname").string(var_90.as_str());
    }
    if let Some(var_91) = &input.server_port {
        object.key("ServerPort").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_91).into()),
        );
    }
    if let Some(var_92) = &input.server_protocol {
        object.key("ServerProtocol").string(var_92.as_str());
    }
    if let Some(var_93) = &input.subdirectory {
        object.key("Subdirectory").string(var_93.as_str());
    }
    if let Some(var_94) = &input.bucket_name {
        object.key("BucketName").string(var_94.as_str());
    }
    if let Some(var_95) = &input.access_key {
        object.key("AccessKey").string(var_95.as_str());
    }
    if let Some(var_96) = &input.secret_key {
        object.key("SecretKey").string(var_96.as_str());
    }
    if let Some(var_97) = &input.agent_arns {
        let mut array_98 = object.key("AgentArns").start_array();
        for item_99 in var_97 {
            {
                array_98.value().string(item_99.as_str());
            }
        }
        array_98.finish();
    }
    if let Some(var_100) = &input.tags {
        let mut array_101 = object.key("Tags").start_array();
        for item_102 in var_100 {
            {
                let mut object_103 = array_101.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag_list_entry(
                    &mut object_103,
                    item_102,
                )?;
                object_103.finish();
            }
        }
        array_101.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_location_s3_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateLocationS3Input,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_104) = &input.subdirectory {
        object.key("Subdirectory").string(var_104.as_str());
    }
    if let Some(var_105) = &input.s3_bucket_arn {
        object.key("S3BucketArn").string(var_105.as_str());
    }
    if let Some(var_106) = &input.s3_storage_class {
        object.key("S3StorageClass").string(var_106.as_str());
    }
    if let Some(var_107) = &input.s3_config {
        let mut object_108 = object.key("S3Config").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_config(&mut object_108, var_107)?;
        object_108.finish();
    }
    if let Some(var_109) = &input.agent_arns {
        let mut array_110 = object.key("AgentArns").start_array();
        for item_111 in var_109 {
            {
                array_110.value().string(item_111.as_str());
            }
        }
        array_110.finish();
    }
    if let Some(var_112) = &input.tags {
        let mut array_113 = object.key("Tags").start_array();
        for item_114 in var_112 {
            {
                let mut object_115 = array_113.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag_list_entry(
                    &mut object_115,
                    item_114,
                )?;
                object_115.finish();
            }
        }
        array_113.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_location_smb_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateLocationSmbInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_116) = &input.subdirectory {
        object.key("Subdirectory").string(var_116.as_str());
    }
    if let Some(var_117) = &input.server_hostname {
        object.key("ServerHostname").string(var_117.as_str());
    }
    if let Some(var_118) = &input.user {
        object.key("User").string(var_118.as_str());
    }
    if let Some(var_119) = &input.domain {
        object.key("Domain").string(var_119.as_str());
    }
    if let Some(var_120) = &input.password {
        object.key("Password").string(var_120.as_str());
    }
    if let Some(var_121) = &input.agent_arns {
        let mut array_122 = object.key("AgentArns").start_array();
        for item_123 in var_121 {
            {
                array_122.value().string(item_123.as_str());
            }
        }
        array_122.finish();
    }
    if let Some(var_124) = &input.mount_options {
        let mut object_125 = object.key("MountOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_smb_mount_options(
            &mut object_125,
            var_124,
        )?;
        object_125.finish();
    }
    if let Some(var_126) = &input.tags {
        let mut array_127 = object.key("Tags").start_array();
        for item_128 in var_126 {
            {
                let mut object_129 = array_127.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag_list_entry(
                    &mut object_129,
                    item_128,
                )?;
                object_129.finish();
            }
        }
        array_127.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_task_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateTaskInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_130) = &input.source_location_arn {
        object.key("SourceLocationArn").string(var_130.as_str());
    }
    if let Some(var_131) = &input.destination_location_arn {
        object
            .key("DestinationLocationArn")
            .string(var_131.as_str());
    }
    if let Some(var_132) = &input.cloud_watch_log_group_arn {
        object.key("CloudWatchLogGroupArn").string(var_132.as_str());
    }
    if let Some(var_133) = &input.name {
        object.key("Name").string(var_133.as_str());
    }
    if let Some(var_134) = &input.options {
        let mut object_135 = object.key("Options").start_object();
        crate::json_ser::serialize_structure_crate_model_options(&mut object_135, var_134)?;
        object_135.finish();
    }
    if let Some(var_136) = &input.excludes {
        let mut array_137 = object.key("Excludes").start_array();
        for item_138 in var_136 {
            {
                let mut object_139 = array_137.value().start_object();
                crate::json_ser::serialize_structure_crate_model_filter_rule(
                    &mut object_139,
                    item_138,
                )?;
                object_139.finish();
            }
        }
        array_137.finish();
    }
    if let Some(var_140) = &input.schedule {
        let mut object_141 = object.key("Schedule").start_object();
        crate::json_ser::serialize_structure_crate_model_task_schedule(&mut object_141, var_140)?;
        object_141.finish();
    }
    if let Some(var_142) = &input.tags {
        let mut array_143 = object.key("Tags").start_array();
        for item_144 in var_142 {
            {
                let mut object_145 = array_143.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag_list_entry(
                    &mut object_145,
                    item_144,
                )?;
                object_145.finish();
            }
        }
        array_143.finish();
    }
    if let Some(var_146) = &input.includes {
        let mut array_147 = object.key("Includes").start_array();
        for item_148 in var_146 {
            {
                let mut object_149 = array_147.value().start_object();
                crate::json_ser::serialize_structure_crate_model_filter_rule(
                    &mut object_149,
                    item_148,
                )?;
                object_149.finish();
            }
        }
        array_147.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_agent_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteAgentInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_150) = &input.agent_arn {
        object.key("AgentArn").string(var_150.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_location_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteLocationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_151) = &input.location_arn {
        object.key("LocationArn").string(var_151.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_task_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteTaskInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_152) = &input.task_arn {
        object.key("TaskArn").string(var_152.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_agent_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeAgentInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_153) = &input.agent_arn {
        object.key("AgentArn").string(var_153.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_location_efs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeLocationEfsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_154) = &input.location_arn {
        object.key("LocationArn").string(var_154.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_location_fsx_lustre_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeLocationFsxLustreInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_155) = &input.location_arn {
        object.key("LocationArn").string(var_155.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_location_fsx_open_zfs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeLocationFsxOpenZfsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_156) = &input.location_arn {
        object.key("LocationArn").string(var_156.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_location_fsx_windows_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeLocationFsxWindowsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_157) = &input.location_arn {
        object.key("LocationArn").string(var_157.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_location_hdfs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeLocationHdfsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_158) = &input.location_arn {
        object.key("LocationArn").string(var_158.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_location_nfs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeLocationNfsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_159) = &input.location_arn {
        object.key("LocationArn").string(var_159.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_location_object_storage_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeLocationObjectStorageInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_160) = &input.location_arn {
        object.key("LocationArn").string(var_160.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_location_s3_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeLocationS3Input,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_161) = &input.location_arn {
        object.key("LocationArn").string(var_161.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_location_smb_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeLocationSmbInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_162) = &input.location_arn {
        object.key("LocationArn").string(var_162.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_task_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeTaskInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_163) = &input.task_arn {
        object.key("TaskArn").string(var_163.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_task_execution_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeTaskExecutionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_164) = &input.task_execution_arn {
        object.key("TaskExecutionArn").string(var_164.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_agents_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListAgentsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_165) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_165).into()),
        );
    }
    if let Some(var_166) = &input.next_token {
        object.key("NextToken").string(var_166.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_locations_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListLocationsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_167) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_167).into()),
        );
    }
    if let Some(var_168) = &input.next_token {
        object.key("NextToken").string(var_168.as_str());
    }
    if let Some(var_169) = &input.filters {
        let mut array_170 = object.key("Filters").start_array();
        for item_171 in var_169 {
            {
                let mut object_172 = array_170.value().start_object();
                crate::json_ser::serialize_structure_crate_model_location_filter(
                    &mut object_172,
                    item_171,
                )?;
                object_172.finish();
            }
        }
        array_170.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_tags_for_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTagsForResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_173) = &input.resource_arn {
        object.key("ResourceArn").string(var_173.as_str());
    }
    if let Some(var_174) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_174).into()),
        );
    }
    if let Some(var_175) = &input.next_token {
        object.key("NextToken").string(var_175.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_task_executions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTaskExecutionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_176) = &input.task_arn {
        object.key("TaskArn").string(var_176.as_str());
    }
    if let Some(var_177) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_177).into()),
        );
    }
    if let Some(var_178) = &input.next_token {
        object.key("NextToken").string(var_178.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_tasks_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTasksInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_179) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_179).into()),
        );
    }
    if let Some(var_180) = &input.next_token {
        object.key("NextToken").string(var_180.as_str());
    }
    if let Some(var_181) = &input.filters {
        let mut array_182 = object.key("Filters").start_array();
        for item_183 in var_181 {
            {
                let mut object_184 = array_182.value().start_object();
                crate::json_ser::serialize_structure_crate_model_task_filter(
                    &mut object_184,
                    item_183,
                )?;
                object_184.finish();
            }
        }
        array_182.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_task_execution_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartTaskExecutionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_185) = &input.task_arn {
        object.key("TaskArn").string(var_185.as_str());
    }
    if let Some(var_186) = &input.override_options {
        let mut object_187 = object.key("OverrideOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_options(&mut object_187, var_186)?;
        object_187.finish();
    }
    if let Some(var_188) = &input.includes {
        let mut array_189 = object.key("Includes").start_array();
        for item_190 in var_188 {
            {
                let mut object_191 = array_189.value().start_object();
                crate::json_ser::serialize_structure_crate_model_filter_rule(
                    &mut object_191,
                    item_190,
                )?;
                object_191.finish();
            }
        }
        array_189.finish();
    }
    if let Some(var_192) = &input.excludes {
        let mut array_193 = object.key("Excludes").start_array();
        for item_194 in var_192 {
            {
                let mut object_195 = array_193.value().start_object();
                crate::json_ser::serialize_structure_crate_model_filter_rule(
                    &mut object_195,
                    item_194,
                )?;
                object_195.finish();
            }
        }
        array_193.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_tag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_196) = &input.resource_arn {
        object.key("ResourceArn").string(var_196.as_str());
    }
    if let Some(var_197) = &input.tags {
        let mut array_198 = object.key("Tags").start_array();
        for item_199 in var_197 {
            {
                let mut object_200 = array_198.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag_list_entry(
                    &mut object_200,
                    item_199,
                )?;
                object_200.finish();
            }
        }
        array_198.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_untag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UntagResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_201) = &input.resource_arn {
        object.key("ResourceArn").string(var_201.as_str());
    }
    if let Some(var_202) = &input.keys {
        let mut array_203 = object.key("Keys").start_array();
        for item_204 in var_202 {
            {
                array_203.value().string(item_204.as_str());
            }
        }
        array_203.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_agent_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateAgentInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_205) = &input.agent_arn {
        object.key("AgentArn").string(var_205.as_str());
    }
    if let Some(var_206) = &input.name {
        object.key("Name").string(var_206.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_location_hdfs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateLocationHdfsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_207) = &input.location_arn {
        object.key("LocationArn").string(var_207.as_str());
    }
    if let Some(var_208) = &input.subdirectory {
        object.key("Subdirectory").string(var_208.as_str());
    }
    if let Some(var_209) = &input.name_nodes {
        let mut array_210 = object.key("NameNodes").start_array();
        for item_211 in var_209 {
            {
                let mut object_212 = array_210.value().start_object();
                crate::json_ser::serialize_structure_crate_model_hdfs_name_node(
                    &mut object_212,
                    item_211,
                )?;
                object_212.finish();
            }
        }
        array_210.finish();
    }
    if let Some(var_213) = &input.block_size {
        object.key("BlockSize").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_213).into()),
        );
    }
    if let Some(var_214) = &input.replication_factor {
        object.key("ReplicationFactor").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_214).into()),
        );
    }
    if let Some(var_215) = &input.kms_key_provider_uri {
        object.key("KmsKeyProviderUri").string(var_215.as_str());
    }
    if let Some(var_216) = &input.qop_configuration {
        let mut object_217 = object.key("QopConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_qop_configuration(
            &mut object_217,
            var_216,
        )?;
        object_217.finish();
    }
    if let Some(var_218) = &input.authentication_type {
        object.key("AuthenticationType").string(var_218.as_str());
    }
    if let Some(var_219) = &input.simple_user {
        object.key("SimpleUser").string(var_219.as_str());
    }
    if let Some(var_220) = &input.kerberos_principal {
        object.key("KerberosPrincipal").string(var_220.as_str());
    }
    if let Some(var_221) = &input.kerberos_keytab {
        object
            .key("KerberosKeytab")
            .string_unchecked(&aws_smithy_types::base64::encode(var_221));
    }
    if let Some(var_222) = &input.kerberos_krb5_conf {
        object
            .key("KerberosKrb5Conf")
            .string_unchecked(&aws_smithy_types::base64::encode(var_222));
    }
    if let Some(var_223) = &input.agent_arns {
        let mut array_224 = object.key("AgentArns").start_array();
        for item_225 in var_223 {
            {
                array_224.value().string(item_225.as_str());
            }
        }
        array_224.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_location_nfs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateLocationNfsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_226) = &input.location_arn {
        object.key("LocationArn").string(var_226.as_str());
    }
    if let Some(var_227) = &input.subdirectory {
        object.key("Subdirectory").string(var_227.as_str());
    }
    if let Some(var_228) = &input.on_prem_config {
        let mut object_229 = object.key("OnPremConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_on_prem_config(&mut object_229, var_228)?;
        object_229.finish();
    }
    if let Some(var_230) = &input.mount_options {
        let mut object_231 = object.key("MountOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_nfs_mount_options(
            &mut object_231,
            var_230,
        )?;
        object_231.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_location_object_storage_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateLocationObjectStorageInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_232) = &input.location_arn {
        object.key("LocationArn").string(var_232.as_str());
    }
    if let Some(var_233) = &input.server_port {
        object.key("ServerPort").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_233).into()),
        );
    }
    if let Some(var_234) = &input.server_protocol {
        object.key("ServerProtocol").string(var_234.as_str());
    }
    if let Some(var_235) = &input.subdirectory {
        object.key("Subdirectory").string(var_235.as_str());
    }
    if let Some(var_236) = &input.access_key {
        object.key("AccessKey").string(var_236.as_str());
    }
    if let Some(var_237) = &input.secret_key {
        object.key("SecretKey").string(var_237.as_str());
    }
    if let Some(var_238) = &input.agent_arns {
        let mut array_239 = object.key("AgentArns").start_array();
        for item_240 in var_238 {
            {
                array_239.value().string(item_240.as_str());
            }
        }
        array_239.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_location_smb_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateLocationSmbInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_241) = &input.location_arn {
        object.key("LocationArn").string(var_241.as_str());
    }
    if let Some(var_242) = &input.subdirectory {
        object.key("Subdirectory").string(var_242.as_str());
    }
    if let Some(var_243) = &input.user {
        object.key("User").string(var_243.as_str());
    }
    if let Some(var_244) = &input.domain {
        object.key("Domain").string(var_244.as_str());
    }
    if let Some(var_245) = &input.password {
        object.key("Password").string(var_245.as_str());
    }
    if let Some(var_246) = &input.agent_arns {
        let mut array_247 = object.key("AgentArns").start_array();
        for item_248 in var_246 {
            {
                array_247.value().string(item_248.as_str());
            }
        }
        array_247.finish();
    }
    if let Some(var_249) = &input.mount_options {
        let mut object_250 = object.key("MountOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_smb_mount_options(
            &mut object_250,
            var_249,
        )?;
        object_250.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_task_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateTaskInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_251) = &input.task_arn {
        object.key("TaskArn").string(var_251.as_str());
    }
    if let Some(var_252) = &input.options {
        let mut object_253 = object.key("Options").start_object();
        crate::json_ser::serialize_structure_crate_model_options(&mut object_253, var_252)?;
        object_253.finish();
    }
    if let Some(var_254) = &input.excludes {
        let mut array_255 = object.key("Excludes").start_array();
        for item_256 in var_254 {
            {
                let mut object_257 = array_255.value().start_object();
                crate::json_ser::serialize_structure_crate_model_filter_rule(
                    &mut object_257,
                    item_256,
                )?;
                object_257.finish();
            }
        }
        array_255.finish();
    }
    if let Some(var_258) = &input.schedule {
        let mut object_259 = object.key("Schedule").start_object();
        crate::json_ser::serialize_structure_crate_model_task_schedule(&mut object_259, var_258)?;
        object_259.finish();
    }
    if let Some(var_260) = &input.name {
        object.key("Name").string(var_260.as_str());
    }
    if let Some(var_261) = &input.cloud_watch_log_group_arn {
        object.key("CloudWatchLogGroupArn").string(var_261.as_str());
    }
    if let Some(var_262) = &input.includes {
        let mut array_263 = object.key("Includes").start_array();
        for item_264 in var_262 {
            {
                let mut object_265 = array_263.value().start_object();
                crate::json_ser::serialize_structure_crate_model_filter_rule(
                    &mut object_265,
                    item_264,
                )?;
                object_265.finish();
            }
        }
        array_263.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_task_execution_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateTaskExecutionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_266) = &input.task_execution_arn {
        object.key("TaskExecutionArn").string(var_266.as_str());
    }
    if let Some(var_267) = &input.options {
        let mut object_268 = object.key("Options").start_object();
        crate::json_ser::serialize_structure_crate_model_options(&mut object_268, var_267)?;
        object_268.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_tag_list_entry(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TagListEntry,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_269) = &input.key {
        object.key("Key").string(var_269.as_str());
    }
    if let Some(var_270) = &input.value {
        object.key("Value").string(var_270.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_ec2_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Ec2Config,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_271) = &input.subnet_arn {
        object.key("SubnetArn").string(var_271.as_str());
    }
    if let Some(var_272) = &input.security_group_arns {
        let mut array_273 = object.key("SecurityGroupArns").start_array();
        for item_274 in var_272 {
            {
                array_273.value().string(item_274.as_str());
            }
        }
        array_273.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_fsx_protocol(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FsxProtocol,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_275) = &input.nfs {
        let mut object_276 = object.key("NFS").start_object();
        crate::json_ser::serialize_structure_crate_model_fsx_protocol_nfs(
            &mut object_276,
            var_275,
        )?;
        object_276.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_hdfs_name_node(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HdfsNameNode,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_277) = &input.hostname {
        object.key("Hostname").string(var_277.as_str());
    }
    if let Some(var_278) = &input.port {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_278).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_qop_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::QopConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_279) = &input.rpc_protection {
        object.key("RpcProtection").string(var_279.as_str());
    }
    if let Some(var_280) = &input.data_transfer_protection {
        object
            .key("DataTransferProtection")
            .string(var_280.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_on_prem_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OnPremConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_281) = &input.agent_arns {
        let mut array_282 = object.key("AgentArns").start_array();
        for item_283 in var_281 {
            {
                array_282.value().string(item_283.as_str());
            }
        }
        array_282.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_nfs_mount_options(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::NfsMountOptions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_284) = &input.version {
        object.key("Version").string(var_284.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3Config,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_285) = &input.bucket_access_role_arn {
        object.key("BucketAccessRoleArn").string(var_285.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_smb_mount_options(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SmbMountOptions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_286) = &input.version {
        object.key("Version").string(var_286.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_options(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Options,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_287) = &input.verify_mode {
        object.key("VerifyMode").string(var_287.as_str());
    }
    if let Some(var_288) = &input.overwrite_mode {
        object.key("OverwriteMode").string(var_288.as_str());
    }
    if let Some(var_289) = &input.atime {
        object.key("Atime").string(var_289.as_str());
    }
    if let Some(var_290) = &input.mtime {
        object.key("Mtime").string(var_290.as_str());
    }
    if let Some(var_291) = &input.uid {
        object.key("Uid").string(var_291.as_str());
    }
    if let Some(var_292) = &input.gid {
        object.key("Gid").string(var_292.as_str());
    }
    if let Some(var_293) = &input.preserve_deleted_files {
        object.key("PreserveDeletedFiles").string(var_293.as_str());
    }
    if let Some(var_294) = &input.preserve_devices {
        object.key("PreserveDevices").string(var_294.as_str());
    }
    if let Some(var_295) = &input.posix_permissions {
        object.key("PosixPermissions").string(var_295.as_str());
    }
    if let Some(var_296) = &input.bytes_per_second {
        object.key("BytesPerSecond").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_296).into()),
        );
    }
    if let Some(var_297) = &input.task_queueing {
        object.key("TaskQueueing").string(var_297.as_str());
    }
    if let Some(var_298) = &input.log_level {
        object.key("LogLevel").string(var_298.as_str());
    }
    if let Some(var_299) = &input.transfer_mode {
        object.key("TransferMode").string(var_299.as_str());
    }
    if let Some(var_300) = &input.security_descriptor_copy_flags {
        object
            .key("SecurityDescriptorCopyFlags")
            .string(var_300.as_str());
    }
    if let Some(var_301) = &input.object_tags {
        object.key("ObjectTags").string(var_301.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_filter_rule(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FilterRule,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_302) = &input.filter_type {
        object.key("FilterType").string(var_302.as_str());
    }
    if let Some(var_303) = &input.value {
        object.key("Value").string(var_303.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_task_schedule(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TaskSchedule,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_304) = &input.schedule_expression {
        object.key("ScheduleExpression").string(var_304.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_location_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LocationFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_305) = &input.name {
        object.key("Name").string(var_305.as_str());
    }
    if let Some(var_306) = &input.values {
        let mut array_307 = object.key("Values").start_array();
        for item_308 in var_306 {
            {
                array_307.value().string(item_308.as_str());
            }
        }
        array_307.finish();
    }
    if let Some(var_309) = &input.operator {
        object.key("Operator").string(var_309.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_task_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TaskFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_310) = &input.name {
        object.key("Name").string(var_310.as_str());
    }
    if let Some(var_311) = &input.values {
        let mut array_312 = object.key("Values").start_array();
        for item_313 in var_311 {
            {
                array_312.value().string(item_313.as_str());
            }
        }
        array_312.finish();
    }
    if let Some(var_314) = &input.operator {
        object.key("Operator").string(var_314.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_fsx_protocol_nfs(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FsxProtocolNfs,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_315) = &input.mount_options {
        let mut object_316 = object.key("MountOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_nfs_mount_options(
            &mut object_316,
            var_315,
        )?;
        object_316.finish();
    }
    Ok(())
}
