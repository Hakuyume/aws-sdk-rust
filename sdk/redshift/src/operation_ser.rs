// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_operation_crate_operation_accept_reserved_node_exchange(
    input: &crate::input::AcceptReservedNodeExchangeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AcceptReservedNodeExchange", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("ReservedNodeId");
    if let Some(var_2) = &input.reserved_node_id {
        scope_1.string(var_2);
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("TargetReservedNodeOfferingId");
    if let Some(var_4) = &input.target_reserved_node_offering_id {
        scope_3.string(var_4);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_add_partner(
    input: &crate::input::AddPartnerInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AddPartner", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_5 = writer.prefix("AccountId");
    if let Some(var_6) = &input.account_id {
        scope_5.string(var_6);
    }
    #[allow(unused_mut)]
    let mut scope_7 = writer.prefix("ClusterIdentifier");
    if let Some(var_8) = &input.cluster_identifier {
        scope_7.string(var_8);
    }
    #[allow(unused_mut)]
    let mut scope_9 = writer.prefix("DatabaseName");
    if let Some(var_10) = &input.database_name {
        scope_9.string(var_10);
    }
    #[allow(unused_mut)]
    let mut scope_11 = writer.prefix("PartnerName");
    if let Some(var_12) = &input.partner_name {
        scope_11.string(var_12);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_data_share_consumer(
    input: &crate::input::AssociateDataShareConsumerInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AssociateDataShareConsumer", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_13 = writer.prefix("DataShareArn");
    if let Some(var_14) = &input.data_share_arn {
        scope_13.string(var_14);
    }
    #[allow(unused_mut)]
    let mut scope_15 = writer.prefix("AssociateEntireAccount");
    if let Some(var_16) = &input.associate_entire_account {
        scope_15.boolean(*var_16);
    }
    #[allow(unused_mut)]
    let mut scope_17 = writer.prefix("ConsumerArn");
    if let Some(var_18) = &input.consumer_arn {
        scope_17.string(var_18);
    }
    #[allow(unused_mut)]
    let mut scope_19 = writer.prefix("ConsumerRegion");
    if let Some(var_20) = &input.consumer_region {
        scope_19.string(var_20);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_authorize_cluster_security_group_ingress(
    input: &crate::input::AuthorizeClusterSecurityGroupIngressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "AuthorizeClusterSecurityGroupIngress",
        "2012-12-01",
    );
    #[allow(unused_mut)]
    let mut scope_21 = writer.prefix("ClusterSecurityGroupName");
    if let Some(var_22) = &input.cluster_security_group_name {
        scope_21.string(var_22);
    }
    #[allow(unused_mut)]
    let mut scope_23 = writer.prefix("CIDRIP");
    if let Some(var_24) = &input.cidrip {
        scope_23.string(var_24);
    }
    #[allow(unused_mut)]
    let mut scope_25 = writer.prefix("EC2SecurityGroupName");
    if let Some(var_26) = &input.ec2_security_group_name {
        scope_25.string(var_26);
    }
    #[allow(unused_mut)]
    let mut scope_27 = writer.prefix("EC2SecurityGroupOwnerId");
    if let Some(var_28) = &input.ec2_security_group_owner_id {
        scope_27.string(var_28);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_authorize_data_share(
    input: &crate::input::AuthorizeDataShareInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AuthorizeDataShare", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_29 = writer.prefix("DataShareArn");
    if let Some(var_30) = &input.data_share_arn {
        scope_29.string(var_30);
    }
    #[allow(unused_mut)]
    let mut scope_31 = writer.prefix("ConsumerIdentifier");
    if let Some(var_32) = &input.consumer_identifier {
        scope_31.string(var_32);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_authorize_endpoint_access(
    input: &crate::input::AuthorizeEndpointAccessInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AuthorizeEndpointAccess", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_33 = writer.prefix("ClusterIdentifier");
    if let Some(var_34) = &input.cluster_identifier {
        scope_33.string(var_34);
    }
    #[allow(unused_mut)]
    let mut scope_35 = writer.prefix("Account");
    if let Some(var_36) = &input.account {
        scope_35.string(var_36);
    }
    #[allow(unused_mut)]
    let mut scope_37 = writer.prefix("VpcIds");
    if let Some(var_38) = &input.vpc_ids {
        let mut list_40 = scope_37.start_list(false, Some("VpcIdentifier"));
        for item_39 in var_38 {
            #[allow(unused_mut)]
            let mut entry_41 = list_40.entry();
            entry_41.string(item_39);
        }
        list_40.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_authorize_snapshot_access(
    input: &crate::input::AuthorizeSnapshotAccessInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AuthorizeSnapshotAccess", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_42 = writer.prefix("SnapshotIdentifier");
    if let Some(var_43) = &input.snapshot_identifier {
        scope_42.string(var_43);
    }
    #[allow(unused_mut)]
    let mut scope_44 = writer.prefix("SnapshotClusterIdentifier");
    if let Some(var_45) = &input.snapshot_cluster_identifier {
        scope_44.string(var_45);
    }
    #[allow(unused_mut)]
    let mut scope_46 = writer.prefix("AccountWithRestoreAccess");
    if let Some(var_47) = &input.account_with_restore_access {
        scope_46.string(var_47);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_batch_delete_cluster_snapshots(
    input: &crate::input::BatchDeleteClusterSnapshotsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "BatchDeleteClusterSnapshots", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_48 = writer.prefix("Identifiers");
    if let Some(var_49) = &input.identifiers {
        let mut list_51 = scope_48.start_list(false, Some("DeleteClusterSnapshotMessage"));
        for item_50 in var_49 {
            #[allow(unused_mut)]
            let mut entry_52 = list_51.entry();
            crate::query_ser::serialize_structure_crate_model_delete_cluster_snapshot_message(
                entry_52, item_50,
            )?;
        }
        list_51.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_batch_modify_cluster_snapshots(
    input: &crate::input::BatchModifyClusterSnapshotsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "BatchModifyClusterSnapshots", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_53 = writer.prefix("SnapshotIdentifierList");
    if let Some(var_54) = &input.snapshot_identifier_list {
        let mut list_56 = scope_53.start_list(false, Some("String"));
        for item_55 in var_54 {
            #[allow(unused_mut)]
            let mut entry_57 = list_56.entry();
            entry_57.string(item_55);
        }
        list_56.finish();
    }
    #[allow(unused_mut)]
    let mut scope_58 = writer.prefix("ManualSnapshotRetentionPeriod");
    if let Some(var_59) = &input.manual_snapshot_retention_period {
        scope_58.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_59).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_60 = writer.prefix("Force");
    if input.force {
        scope_60.boolean(input.force);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_resize(
    input: &crate::input::CancelResizeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CancelResize", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_61 = writer.prefix("ClusterIdentifier");
    if let Some(var_62) = &input.cluster_identifier {
        scope_61.string(var_62);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_copy_cluster_snapshot(
    input: &crate::input::CopyClusterSnapshotInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CopyClusterSnapshot", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_63 = writer.prefix("SourceSnapshotIdentifier");
    if let Some(var_64) = &input.source_snapshot_identifier {
        scope_63.string(var_64);
    }
    #[allow(unused_mut)]
    let mut scope_65 = writer.prefix("SourceSnapshotClusterIdentifier");
    if let Some(var_66) = &input.source_snapshot_cluster_identifier {
        scope_65.string(var_66);
    }
    #[allow(unused_mut)]
    let mut scope_67 = writer.prefix("TargetSnapshotIdentifier");
    if let Some(var_68) = &input.target_snapshot_identifier {
        scope_67.string(var_68);
    }
    #[allow(unused_mut)]
    let mut scope_69 = writer.prefix("ManualSnapshotRetentionPeriod");
    if let Some(var_70) = &input.manual_snapshot_retention_period {
        scope_69.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_70).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_authentication_profile(
    input: &crate::input::CreateAuthenticationProfileInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateAuthenticationProfile", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_71 = writer.prefix("AuthenticationProfileName");
    if let Some(var_72) = &input.authentication_profile_name {
        scope_71.string(var_72);
    }
    #[allow(unused_mut)]
    let mut scope_73 = writer.prefix("AuthenticationProfileContent");
    if let Some(var_74) = &input.authentication_profile_content {
        scope_73.string(var_74);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_cluster(
    input: &crate::input::CreateClusterInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateCluster", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_75 = writer.prefix("DBName");
    if let Some(var_76) = &input.db_name {
        scope_75.string(var_76);
    }
    #[allow(unused_mut)]
    let mut scope_77 = writer.prefix("ClusterIdentifier");
    if let Some(var_78) = &input.cluster_identifier {
        scope_77.string(var_78);
    }
    #[allow(unused_mut)]
    let mut scope_79 = writer.prefix("ClusterType");
    if let Some(var_80) = &input.cluster_type {
        scope_79.string(var_80);
    }
    #[allow(unused_mut)]
    let mut scope_81 = writer.prefix("NodeType");
    if let Some(var_82) = &input.node_type {
        scope_81.string(var_82);
    }
    #[allow(unused_mut)]
    let mut scope_83 = writer.prefix("MasterUsername");
    if let Some(var_84) = &input.master_username {
        scope_83.string(var_84);
    }
    #[allow(unused_mut)]
    let mut scope_85 = writer.prefix("MasterUserPassword");
    if let Some(var_86) = &input.master_user_password {
        scope_85.string(var_86);
    }
    #[allow(unused_mut)]
    let mut scope_87 = writer.prefix("ClusterSecurityGroups");
    if let Some(var_88) = &input.cluster_security_groups {
        let mut list_90 = scope_87.start_list(false, Some("ClusterSecurityGroupName"));
        for item_89 in var_88 {
            #[allow(unused_mut)]
            let mut entry_91 = list_90.entry();
            entry_91.string(item_89);
        }
        list_90.finish();
    }
    #[allow(unused_mut)]
    let mut scope_92 = writer.prefix("VpcSecurityGroupIds");
    if let Some(var_93) = &input.vpc_security_group_ids {
        let mut list_95 = scope_92.start_list(false, Some("VpcSecurityGroupId"));
        for item_94 in var_93 {
            #[allow(unused_mut)]
            let mut entry_96 = list_95.entry();
            entry_96.string(item_94);
        }
        list_95.finish();
    }
    #[allow(unused_mut)]
    let mut scope_97 = writer.prefix("ClusterSubnetGroupName");
    if let Some(var_98) = &input.cluster_subnet_group_name {
        scope_97.string(var_98);
    }
    #[allow(unused_mut)]
    let mut scope_99 = writer.prefix("AvailabilityZone");
    if let Some(var_100) = &input.availability_zone {
        scope_99.string(var_100);
    }
    #[allow(unused_mut)]
    let mut scope_101 = writer.prefix("PreferredMaintenanceWindow");
    if let Some(var_102) = &input.preferred_maintenance_window {
        scope_101.string(var_102);
    }
    #[allow(unused_mut)]
    let mut scope_103 = writer.prefix("ClusterParameterGroupName");
    if let Some(var_104) = &input.cluster_parameter_group_name {
        scope_103.string(var_104);
    }
    #[allow(unused_mut)]
    let mut scope_105 = writer.prefix("AutomatedSnapshotRetentionPeriod");
    if let Some(var_106) = &input.automated_snapshot_retention_period {
        scope_105.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_106).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_107 = writer.prefix("ManualSnapshotRetentionPeriod");
    if let Some(var_108) = &input.manual_snapshot_retention_period {
        scope_107.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_108).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_109 = writer.prefix("Port");
    if let Some(var_110) = &input.port {
        scope_109.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_110).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_111 = writer.prefix("ClusterVersion");
    if let Some(var_112) = &input.cluster_version {
        scope_111.string(var_112);
    }
    #[allow(unused_mut)]
    let mut scope_113 = writer.prefix("AllowVersionUpgrade");
    if let Some(var_114) = &input.allow_version_upgrade {
        scope_113.boolean(*var_114);
    }
    #[allow(unused_mut)]
    let mut scope_115 = writer.prefix("NumberOfNodes");
    if let Some(var_116) = &input.number_of_nodes {
        scope_115.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_116).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_117 = writer.prefix("PubliclyAccessible");
    if let Some(var_118) = &input.publicly_accessible {
        scope_117.boolean(*var_118);
    }
    #[allow(unused_mut)]
    let mut scope_119 = writer.prefix("Encrypted");
    if let Some(var_120) = &input.encrypted {
        scope_119.boolean(*var_120);
    }
    #[allow(unused_mut)]
    let mut scope_121 = writer.prefix("HsmClientCertificateIdentifier");
    if let Some(var_122) = &input.hsm_client_certificate_identifier {
        scope_121.string(var_122);
    }
    #[allow(unused_mut)]
    let mut scope_123 = writer.prefix("HsmConfigurationIdentifier");
    if let Some(var_124) = &input.hsm_configuration_identifier {
        scope_123.string(var_124);
    }
    #[allow(unused_mut)]
    let mut scope_125 = writer.prefix("ElasticIp");
    if let Some(var_126) = &input.elastic_ip {
        scope_125.string(var_126);
    }
    #[allow(unused_mut)]
    let mut scope_127 = writer.prefix("Tags");
    if let Some(var_128) = &input.tags {
        let mut list_130 = scope_127.start_list(false, Some("Tag"));
        for item_129 in var_128 {
            #[allow(unused_mut)]
            let mut entry_131 = list_130.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_131, item_129)?;
        }
        list_130.finish();
    }
    #[allow(unused_mut)]
    let mut scope_132 = writer.prefix("KmsKeyId");
    if let Some(var_133) = &input.kms_key_id {
        scope_132.string(var_133);
    }
    #[allow(unused_mut)]
    let mut scope_134 = writer.prefix("EnhancedVpcRouting");
    if let Some(var_135) = &input.enhanced_vpc_routing {
        scope_134.boolean(*var_135);
    }
    #[allow(unused_mut)]
    let mut scope_136 = writer.prefix("AdditionalInfo");
    if let Some(var_137) = &input.additional_info {
        scope_136.string(var_137);
    }
    #[allow(unused_mut)]
    let mut scope_138 = writer.prefix("IamRoles");
    if let Some(var_139) = &input.iam_roles {
        let mut list_141 = scope_138.start_list(false, Some("IamRoleArn"));
        for item_140 in var_139 {
            #[allow(unused_mut)]
            let mut entry_142 = list_141.entry();
            entry_142.string(item_140);
        }
        list_141.finish();
    }
    #[allow(unused_mut)]
    let mut scope_143 = writer.prefix("MaintenanceTrackName");
    if let Some(var_144) = &input.maintenance_track_name {
        scope_143.string(var_144);
    }
    #[allow(unused_mut)]
    let mut scope_145 = writer.prefix("SnapshotScheduleIdentifier");
    if let Some(var_146) = &input.snapshot_schedule_identifier {
        scope_145.string(var_146);
    }
    #[allow(unused_mut)]
    let mut scope_147 = writer.prefix("AvailabilityZoneRelocation");
    if let Some(var_148) = &input.availability_zone_relocation {
        scope_147.boolean(*var_148);
    }
    #[allow(unused_mut)]
    let mut scope_149 = writer.prefix("AquaConfigurationStatus");
    if let Some(var_150) = &input.aqua_configuration_status {
        scope_149.string(var_150.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_151 = writer.prefix("DefaultIamRoleArn");
    if let Some(var_152) = &input.default_iam_role_arn {
        scope_151.string(var_152);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_cluster_parameter_group(
    input: &crate::input::CreateClusterParameterGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateClusterParameterGroup", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_153 = writer.prefix("ParameterGroupName");
    if let Some(var_154) = &input.parameter_group_name {
        scope_153.string(var_154);
    }
    #[allow(unused_mut)]
    let mut scope_155 = writer.prefix("ParameterGroupFamily");
    if let Some(var_156) = &input.parameter_group_family {
        scope_155.string(var_156);
    }
    #[allow(unused_mut)]
    let mut scope_157 = writer.prefix("Description");
    if let Some(var_158) = &input.description {
        scope_157.string(var_158);
    }
    #[allow(unused_mut)]
    let mut scope_159 = writer.prefix("Tags");
    if let Some(var_160) = &input.tags {
        let mut list_162 = scope_159.start_list(false, Some("Tag"));
        for item_161 in var_160 {
            #[allow(unused_mut)]
            let mut entry_163 = list_162.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_163, item_161)?;
        }
        list_162.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_cluster_security_group(
    input: &crate::input::CreateClusterSecurityGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateClusterSecurityGroup", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_164 = writer.prefix("ClusterSecurityGroupName");
    if let Some(var_165) = &input.cluster_security_group_name {
        scope_164.string(var_165);
    }
    #[allow(unused_mut)]
    let mut scope_166 = writer.prefix("Description");
    if let Some(var_167) = &input.description {
        scope_166.string(var_167);
    }
    #[allow(unused_mut)]
    let mut scope_168 = writer.prefix("Tags");
    if let Some(var_169) = &input.tags {
        let mut list_171 = scope_168.start_list(false, Some("Tag"));
        for item_170 in var_169 {
            #[allow(unused_mut)]
            let mut entry_172 = list_171.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_172, item_170)?;
        }
        list_171.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_cluster_snapshot(
    input: &crate::input::CreateClusterSnapshotInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateClusterSnapshot", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_173 = writer.prefix("SnapshotIdentifier");
    if let Some(var_174) = &input.snapshot_identifier {
        scope_173.string(var_174);
    }
    #[allow(unused_mut)]
    let mut scope_175 = writer.prefix("ClusterIdentifier");
    if let Some(var_176) = &input.cluster_identifier {
        scope_175.string(var_176);
    }
    #[allow(unused_mut)]
    let mut scope_177 = writer.prefix("ManualSnapshotRetentionPeriod");
    if let Some(var_178) = &input.manual_snapshot_retention_period {
        scope_177.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_178).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_179 = writer.prefix("Tags");
    if let Some(var_180) = &input.tags {
        let mut list_182 = scope_179.start_list(false, Some("Tag"));
        for item_181 in var_180 {
            #[allow(unused_mut)]
            let mut entry_183 = list_182.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_183, item_181)?;
        }
        list_182.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_cluster_subnet_group(
    input: &crate::input::CreateClusterSubnetGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateClusterSubnetGroup", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_184 = writer.prefix("ClusterSubnetGroupName");
    if let Some(var_185) = &input.cluster_subnet_group_name {
        scope_184.string(var_185);
    }
    #[allow(unused_mut)]
    let mut scope_186 = writer.prefix("Description");
    if let Some(var_187) = &input.description {
        scope_186.string(var_187);
    }
    #[allow(unused_mut)]
    let mut scope_188 = writer.prefix("SubnetIds");
    if let Some(var_189) = &input.subnet_ids {
        let mut list_191 = scope_188.start_list(false, Some("SubnetIdentifier"));
        for item_190 in var_189 {
            #[allow(unused_mut)]
            let mut entry_192 = list_191.entry();
            entry_192.string(item_190);
        }
        list_191.finish();
    }
    #[allow(unused_mut)]
    let mut scope_193 = writer.prefix("Tags");
    if let Some(var_194) = &input.tags {
        let mut list_196 = scope_193.start_list(false, Some("Tag"));
        for item_195 in var_194 {
            #[allow(unused_mut)]
            let mut entry_197 = list_196.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_197, item_195)?;
        }
        list_196.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_endpoint_access(
    input: &crate::input::CreateEndpointAccessInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateEndpointAccess", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_198 = writer.prefix("ClusterIdentifier");
    if let Some(var_199) = &input.cluster_identifier {
        scope_198.string(var_199);
    }
    #[allow(unused_mut)]
    let mut scope_200 = writer.prefix("ResourceOwner");
    if let Some(var_201) = &input.resource_owner {
        scope_200.string(var_201);
    }
    #[allow(unused_mut)]
    let mut scope_202 = writer.prefix("EndpointName");
    if let Some(var_203) = &input.endpoint_name {
        scope_202.string(var_203);
    }
    #[allow(unused_mut)]
    let mut scope_204 = writer.prefix("SubnetGroupName");
    if let Some(var_205) = &input.subnet_group_name {
        scope_204.string(var_205);
    }
    #[allow(unused_mut)]
    let mut scope_206 = writer.prefix("VpcSecurityGroupIds");
    if let Some(var_207) = &input.vpc_security_group_ids {
        let mut list_209 = scope_206.start_list(false, Some("VpcSecurityGroupId"));
        for item_208 in var_207 {
            #[allow(unused_mut)]
            let mut entry_210 = list_209.entry();
            entry_210.string(item_208);
        }
        list_209.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_event_subscription(
    input: &crate::input::CreateEventSubscriptionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateEventSubscription", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_211 = writer.prefix("SubscriptionName");
    if let Some(var_212) = &input.subscription_name {
        scope_211.string(var_212);
    }
    #[allow(unused_mut)]
    let mut scope_213 = writer.prefix("SnsTopicArn");
    if let Some(var_214) = &input.sns_topic_arn {
        scope_213.string(var_214);
    }
    #[allow(unused_mut)]
    let mut scope_215 = writer.prefix("SourceType");
    if let Some(var_216) = &input.source_type {
        scope_215.string(var_216);
    }
    #[allow(unused_mut)]
    let mut scope_217 = writer.prefix("SourceIds");
    if let Some(var_218) = &input.source_ids {
        let mut list_220 = scope_217.start_list(false, Some("SourceId"));
        for item_219 in var_218 {
            #[allow(unused_mut)]
            let mut entry_221 = list_220.entry();
            entry_221.string(item_219);
        }
        list_220.finish();
    }
    #[allow(unused_mut)]
    let mut scope_222 = writer.prefix("EventCategories");
    if let Some(var_223) = &input.event_categories {
        let mut list_225 = scope_222.start_list(false, Some("EventCategory"));
        for item_224 in var_223 {
            #[allow(unused_mut)]
            let mut entry_226 = list_225.entry();
            entry_226.string(item_224);
        }
        list_225.finish();
    }
    #[allow(unused_mut)]
    let mut scope_227 = writer.prefix("Severity");
    if let Some(var_228) = &input.severity {
        scope_227.string(var_228);
    }
    #[allow(unused_mut)]
    let mut scope_229 = writer.prefix("Enabled");
    if let Some(var_230) = &input.enabled {
        scope_229.boolean(*var_230);
    }
    #[allow(unused_mut)]
    let mut scope_231 = writer.prefix("Tags");
    if let Some(var_232) = &input.tags {
        let mut list_234 = scope_231.start_list(false, Some("Tag"));
        for item_233 in var_232 {
            #[allow(unused_mut)]
            let mut entry_235 = list_234.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_235, item_233)?;
        }
        list_234.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_hsm_client_certificate(
    input: &crate::input::CreateHsmClientCertificateInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateHsmClientCertificate", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_236 = writer.prefix("HsmClientCertificateIdentifier");
    if let Some(var_237) = &input.hsm_client_certificate_identifier {
        scope_236.string(var_237);
    }
    #[allow(unused_mut)]
    let mut scope_238 = writer.prefix("Tags");
    if let Some(var_239) = &input.tags {
        let mut list_241 = scope_238.start_list(false, Some("Tag"));
        for item_240 in var_239 {
            #[allow(unused_mut)]
            let mut entry_242 = list_241.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_242, item_240)?;
        }
        list_241.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_hsm_configuration(
    input: &crate::input::CreateHsmConfigurationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateHsmConfiguration", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_243 = writer.prefix("HsmConfigurationIdentifier");
    if let Some(var_244) = &input.hsm_configuration_identifier {
        scope_243.string(var_244);
    }
    #[allow(unused_mut)]
    let mut scope_245 = writer.prefix("Description");
    if let Some(var_246) = &input.description {
        scope_245.string(var_246);
    }
    #[allow(unused_mut)]
    let mut scope_247 = writer.prefix("HsmIpAddress");
    if let Some(var_248) = &input.hsm_ip_address {
        scope_247.string(var_248);
    }
    #[allow(unused_mut)]
    let mut scope_249 = writer.prefix("HsmPartitionName");
    if let Some(var_250) = &input.hsm_partition_name {
        scope_249.string(var_250);
    }
    #[allow(unused_mut)]
    let mut scope_251 = writer.prefix("HsmPartitionPassword");
    if let Some(var_252) = &input.hsm_partition_password {
        scope_251.string(var_252);
    }
    #[allow(unused_mut)]
    let mut scope_253 = writer.prefix("HsmServerPublicCertificate");
    if let Some(var_254) = &input.hsm_server_public_certificate {
        scope_253.string(var_254);
    }
    #[allow(unused_mut)]
    let mut scope_255 = writer.prefix("Tags");
    if let Some(var_256) = &input.tags {
        let mut list_258 = scope_255.start_list(false, Some("Tag"));
        for item_257 in var_256 {
            #[allow(unused_mut)]
            let mut entry_259 = list_258.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_259, item_257)?;
        }
        list_258.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_scheduled_action(
    input: &crate::input::CreateScheduledActionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateScheduledAction", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_260 = writer.prefix("ScheduledActionName");
    if let Some(var_261) = &input.scheduled_action_name {
        scope_260.string(var_261);
    }
    #[allow(unused_mut)]
    let mut scope_262 = writer.prefix("TargetAction");
    if let Some(var_263) = &input.target_action {
        crate::query_ser::serialize_structure_crate_model_scheduled_action_type(
            scope_262, var_263,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_264 = writer.prefix("Schedule");
    if let Some(var_265) = &input.schedule {
        scope_264.string(var_265);
    }
    #[allow(unused_mut)]
    let mut scope_266 = writer.prefix("IamRole");
    if let Some(var_267) = &input.iam_role {
        scope_266.string(var_267);
    }
    #[allow(unused_mut)]
    let mut scope_268 = writer.prefix("ScheduledActionDescription");
    if let Some(var_269) = &input.scheduled_action_description {
        scope_268.string(var_269);
    }
    #[allow(unused_mut)]
    let mut scope_270 = writer.prefix("StartTime");
    if let Some(var_271) = &input.start_time {
        scope_270.date_time(var_271, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_272 = writer.prefix("EndTime");
    if let Some(var_273) = &input.end_time {
        scope_272.date_time(var_273, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_274 = writer.prefix("Enable");
    if let Some(var_275) = &input.enable {
        scope_274.boolean(*var_275);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_snapshot_copy_grant(
    input: &crate::input::CreateSnapshotCopyGrantInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateSnapshotCopyGrant", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_276 = writer.prefix("SnapshotCopyGrantName");
    if let Some(var_277) = &input.snapshot_copy_grant_name {
        scope_276.string(var_277);
    }
    #[allow(unused_mut)]
    let mut scope_278 = writer.prefix("KmsKeyId");
    if let Some(var_279) = &input.kms_key_id {
        scope_278.string(var_279);
    }
    #[allow(unused_mut)]
    let mut scope_280 = writer.prefix("Tags");
    if let Some(var_281) = &input.tags {
        let mut list_283 = scope_280.start_list(false, Some("Tag"));
        for item_282 in var_281 {
            #[allow(unused_mut)]
            let mut entry_284 = list_283.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_284, item_282)?;
        }
        list_283.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_snapshot_schedule(
    input: &crate::input::CreateSnapshotScheduleInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateSnapshotSchedule", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_285 = writer.prefix("ScheduleDefinitions");
    if let Some(var_286) = &input.schedule_definitions {
        let mut list_288 = scope_285.start_list(false, Some("ScheduleDefinition"));
        for item_287 in var_286 {
            #[allow(unused_mut)]
            let mut entry_289 = list_288.entry();
            entry_289.string(item_287);
        }
        list_288.finish();
    }
    #[allow(unused_mut)]
    let mut scope_290 = writer.prefix("ScheduleIdentifier");
    if let Some(var_291) = &input.schedule_identifier {
        scope_290.string(var_291);
    }
    #[allow(unused_mut)]
    let mut scope_292 = writer.prefix("ScheduleDescription");
    if let Some(var_293) = &input.schedule_description {
        scope_292.string(var_293);
    }
    #[allow(unused_mut)]
    let mut scope_294 = writer.prefix("Tags");
    if let Some(var_295) = &input.tags {
        let mut list_297 = scope_294.start_list(false, Some("Tag"));
        for item_296 in var_295 {
            #[allow(unused_mut)]
            let mut entry_298 = list_297.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_298, item_296)?;
        }
        list_297.finish();
    }
    #[allow(unused_mut)]
    let mut scope_299 = writer.prefix("DryRun");
    if let Some(var_300) = &input.dry_run {
        scope_299.boolean(*var_300);
    }
    #[allow(unused_mut)]
    let mut scope_301 = writer.prefix("NextInvocations");
    if let Some(var_302) = &input.next_invocations {
        scope_301.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_302).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_tags(
    input: &crate::input::CreateTagsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateTags", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_303 = writer.prefix("ResourceName");
    if let Some(var_304) = &input.resource_name {
        scope_303.string(var_304);
    }
    #[allow(unused_mut)]
    let mut scope_305 = writer.prefix("Tags");
    if let Some(var_306) = &input.tags {
        let mut list_308 = scope_305.start_list(false, Some("Tag"));
        for item_307 in var_306 {
            #[allow(unused_mut)]
            let mut entry_309 = list_308.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_309, item_307)?;
        }
        list_308.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_usage_limit(
    input: &crate::input::CreateUsageLimitInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateUsageLimit", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_310 = writer.prefix("ClusterIdentifier");
    if let Some(var_311) = &input.cluster_identifier {
        scope_310.string(var_311);
    }
    #[allow(unused_mut)]
    let mut scope_312 = writer.prefix("FeatureType");
    if let Some(var_313) = &input.feature_type {
        scope_312.string(var_313.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_314 = writer.prefix("LimitType");
    if let Some(var_315) = &input.limit_type {
        scope_314.string(var_315.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_316 = writer.prefix("Amount");
    {
        scope_316.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.amount).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_317 = writer.prefix("Period");
    if let Some(var_318) = &input.period {
        scope_317.string(var_318.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_319 = writer.prefix("BreachAction");
    if let Some(var_320) = &input.breach_action {
        scope_319.string(var_320.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_321 = writer.prefix("Tags");
    if let Some(var_322) = &input.tags {
        let mut list_324 = scope_321.start_list(false, Some("Tag"));
        for item_323 in var_322 {
            #[allow(unused_mut)]
            let mut entry_325 = list_324.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_325, item_323)?;
        }
        list_324.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_deauthorize_data_share(
    input: &crate::input::DeauthorizeDataShareInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeauthorizeDataShare", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_326 = writer.prefix("DataShareArn");
    if let Some(var_327) = &input.data_share_arn {
        scope_326.string(var_327);
    }
    #[allow(unused_mut)]
    let mut scope_328 = writer.prefix("ConsumerIdentifier");
    if let Some(var_329) = &input.consumer_identifier {
        scope_328.string(var_329);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_authentication_profile(
    input: &crate::input::DeleteAuthenticationProfileInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteAuthenticationProfile", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_330 = writer.prefix("AuthenticationProfileName");
    if let Some(var_331) = &input.authentication_profile_name {
        scope_330.string(var_331);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_cluster(
    input: &crate::input::DeleteClusterInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteCluster", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_332 = writer.prefix("ClusterIdentifier");
    if let Some(var_333) = &input.cluster_identifier {
        scope_332.string(var_333);
    }
    #[allow(unused_mut)]
    let mut scope_334 = writer.prefix("SkipFinalClusterSnapshot");
    if input.skip_final_cluster_snapshot {
        scope_334.boolean(input.skip_final_cluster_snapshot);
    }
    #[allow(unused_mut)]
    let mut scope_335 = writer.prefix("FinalClusterSnapshotIdentifier");
    if let Some(var_336) = &input.final_cluster_snapshot_identifier {
        scope_335.string(var_336);
    }
    #[allow(unused_mut)]
    let mut scope_337 = writer.prefix("FinalClusterSnapshotRetentionPeriod");
    if let Some(var_338) = &input.final_cluster_snapshot_retention_period {
        scope_337.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_338).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_cluster_parameter_group(
    input: &crate::input::DeleteClusterParameterGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteClusterParameterGroup", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_339 = writer.prefix("ParameterGroupName");
    if let Some(var_340) = &input.parameter_group_name {
        scope_339.string(var_340);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_cluster_security_group(
    input: &crate::input::DeleteClusterSecurityGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteClusterSecurityGroup", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_341 = writer.prefix("ClusterSecurityGroupName");
    if let Some(var_342) = &input.cluster_security_group_name {
        scope_341.string(var_342);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_cluster_snapshot(
    input: &crate::input::DeleteClusterSnapshotInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteClusterSnapshot", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_343 = writer.prefix("SnapshotIdentifier");
    if let Some(var_344) = &input.snapshot_identifier {
        scope_343.string(var_344);
    }
    #[allow(unused_mut)]
    let mut scope_345 = writer.prefix("SnapshotClusterIdentifier");
    if let Some(var_346) = &input.snapshot_cluster_identifier {
        scope_345.string(var_346);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_cluster_subnet_group(
    input: &crate::input::DeleteClusterSubnetGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteClusterSubnetGroup", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_347 = writer.prefix("ClusterSubnetGroupName");
    if let Some(var_348) = &input.cluster_subnet_group_name {
        scope_347.string(var_348);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_endpoint_access(
    input: &crate::input::DeleteEndpointAccessInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteEndpointAccess", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_349 = writer.prefix("EndpointName");
    if let Some(var_350) = &input.endpoint_name {
        scope_349.string(var_350);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_event_subscription(
    input: &crate::input::DeleteEventSubscriptionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteEventSubscription", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_351 = writer.prefix("SubscriptionName");
    if let Some(var_352) = &input.subscription_name {
        scope_351.string(var_352);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_hsm_client_certificate(
    input: &crate::input::DeleteHsmClientCertificateInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteHsmClientCertificate", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_353 = writer.prefix("HsmClientCertificateIdentifier");
    if let Some(var_354) = &input.hsm_client_certificate_identifier {
        scope_353.string(var_354);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_hsm_configuration(
    input: &crate::input::DeleteHsmConfigurationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteHsmConfiguration", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_355 = writer.prefix("HsmConfigurationIdentifier");
    if let Some(var_356) = &input.hsm_configuration_identifier {
        scope_355.string(var_356);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_partner(
    input: &crate::input::DeletePartnerInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeletePartner", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_357 = writer.prefix("AccountId");
    if let Some(var_358) = &input.account_id {
        scope_357.string(var_358);
    }
    #[allow(unused_mut)]
    let mut scope_359 = writer.prefix("ClusterIdentifier");
    if let Some(var_360) = &input.cluster_identifier {
        scope_359.string(var_360);
    }
    #[allow(unused_mut)]
    let mut scope_361 = writer.prefix("DatabaseName");
    if let Some(var_362) = &input.database_name {
        scope_361.string(var_362);
    }
    #[allow(unused_mut)]
    let mut scope_363 = writer.prefix("PartnerName");
    if let Some(var_364) = &input.partner_name {
        scope_363.string(var_364);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_scheduled_action(
    input: &crate::input::DeleteScheduledActionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteScheduledAction", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_365 = writer.prefix("ScheduledActionName");
    if let Some(var_366) = &input.scheduled_action_name {
        scope_365.string(var_366);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_snapshot_copy_grant(
    input: &crate::input::DeleteSnapshotCopyGrantInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteSnapshotCopyGrant", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_367 = writer.prefix("SnapshotCopyGrantName");
    if let Some(var_368) = &input.snapshot_copy_grant_name {
        scope_367.string(var_368);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_snapshot_schedule(
    input: &crate::input::DeleteSnapshotScheduleInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteSnapshotSchedule", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_369 = writer.prefix("ScheduleIdentifier");
    if let Some(var_370) = &input.schedule_identifier {
        scope_369.string(var_370);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_tags(
    input: &crate::input::DeleteTagsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteTags", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_371 = writer.prefix("ResourceName");
    if let Some(var_372) = &input.resource_name {
        scope_371.string(var_372);
    }
    #[allow(unused_mut)]
    let mut scope_373 = writer.prefix("TagKeys");
    if let Some(var_374) = &input.tag_keys {
        let mut list_376 = scope_373.start_list(false, Some("TagKey"));
        for item_375 in var_374 {
            #[allow(unused_mut)]
            let mut entry_377 = list_376.entry();
            entry_377.string(item_375);
        }
        list_376.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_usage_limit(
    input: &crate::input::DeleteUsageLimitInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteUsageLimit", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_378 = writer.prefix("UsageLimitId");
    if let Some(var_379) = &input.usage_limit_id {
        scope_378.string(var_379);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_account_attributes(
    input: &crate::input::DescribeAccountAttributesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeAccountAttributes", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_380 = writer.prefix("AttributeNames");
    if let Some(var_381) = &input.attribute_names {
        let mut list_383 = scope_380.start_list(false, Some("AttributeName"));
        for item_382 in var_381 {
            #[allow(unused_mut)]
            let mut entry_384 = list_383.entry();
            entry_384.string(item_382);
        }
        list_383.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_authentication_profiles(
    input: &crate::input::DescribeAuthenticationProfilesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeAuthenticationProfiles",
        "2012-12-01",
    );
    #[allow(unused_mut)]
    let mut scope_385 = writer.prefix("AuthenticationProfileName");
    if let Some(var_386) = &input.authentication_profile_name {
        scope_385.string(var_386);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_cluster_db_revisions(
    input: &crate::input::DescribeClusterDbRevisionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeClusterDbRevisions", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_387 = writer.prefix("ClusterIdentifier");
    if let Some(var_388) = &input.cluster_identifier {
        scope_387.string(var_388);
    }
    #[allow(unused_mut)]
    let mut scope_389 = writer.prefix("MaxRecords");
    if let Some(var_390) = &input.max_records {
        scope_389.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_390).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_391 = writer.prefix("Marker");
    if let Some(var_392) = &input.marker {
        scope_391.string(var_392);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_cluster_parameter_groups(
    input: &crate::input::DescribeClusterParameterGroupsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeClusterParameterGroups",
        "2012-12-01",
    );
    #[allow(unused_mut)]
    let mut scope_393 = writer.prefix("ParameterGroupName");
    if let Some(var_394) = &input.parameter_group_name {
        scope_393.string(var_394);
    }
    #[allow(unused_mut)]
    let mut scope_395 = writer.prefix("MaxRecords");
    if let Some(var_396) = &input.max_records {
        scope_395.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_396).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_397 = writer.prefix("Marker");
    if let Some(var_398) = &input.marker {
        scope_397.string(var_398);
    }
    #[allow(unused_mut)]
    let mut scope_399 = writer.prefix("TagKeys");
    if let Some(var_400) = &input.tag_keys {
        let mut list_402 = scope_399.start_list(false, Some("TagKey"));
        for item_401 in var_400 {
            #[allow(unused_mut)]
            let mut entry_403 = list_402.entry();
            entry_403.string(item_401);
        }
        list_402.finish();
    }
    #[allow(unused_mut)]
    let mut scope_404 = writer.prefix("TagValues");
    if let Some(var_405) = &input.tag_values {
        let mut list_407 = scope_404.start_list(false, Some("TagValue"));
        for item_406 in var_405 {
            #[allow(unused_mut)]
            let mut entry_408 = list_407.entry();
            entry_408.string(item_406);
        }
        list_407.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_cluster_parameters(
    input: &crate::input::DescribeClusterParametersInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeClusterParameters", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_409 = writer.prefix("ParameterGroupName");
    if let Some(var_410) = &input.parameter_group_name {
        scope_409.string(var_410);
    }
    #[allow(unused_mut)]
    let mut scope_411 = writer.prefix("Source");
    if let Some(var_412) = &input.source {
        scope_411.string(var_412);
    }
    #[allow(unused_mut)]
    let mut scope_413 = writer.prefix("MaxRecords");
    if let Some(var_414) = &input.max_records {
        scope_413.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_414).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_415 = writer.prefix("Marker");
    if let Some(var_416) = &input.marker {
        scope_415.string(var_416);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_clusters(
    input: &crate::input::DescribeClustersInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeClusters", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_417 = writer.prefix("ClusterIdentifier");
    if let Some(var_418) = &input.cluster_identifier {
        scope_417.string(var_418);
    }
    #[allow(unused_mut)]
    let mut scope_419 = writer.prefix("MaxRecords");
    if let Some(var_420) = &input.max_records {
        scope_419.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_420).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_421 = writer.prefix("Marker");
    if let Some(var_422) = &input.marker {
        scope_421.string(var_422);
    }
    #[allow(unused_mut)]
    let mut scope_423 = writer.prefix("TagKeys");
    if let Some(var_424) = &input.tag_keys {
        let mut list_426 = scope_423.start_list(false, Some("TagKey"));
        for item_425 in var_424 {
            #[allow(unused_mut)]
            let mut entry_427 = list_426.entry();
            entry_427.string(item_425);
        }
        list_426.finish();
    }
    #[allow(unused_mut)]
    let mut scope_428 = writer.prefix("TagValues");
    if let Some(var_429) = &input.tag_values {
        let mut list_431 = scope_428.start_list(false, Some("TagValue"));
        for item_430 in var_429 {
            #[allow(unused_mut)]
            let mut entry_432 = list_431.entry();
            entry_432.string(item_430);
        }
        list_431.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_cluster_security_groups(
    input: &crate::input::DescribeClusterSecurityGroupsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeClusterSecurityGroups", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_433 = writer.prefix("ClusterSecurityGroupName");
    if let Some(var_434) = &input.cluster_security_group_name {
        scope_433.string(var_434);
    }
    #[allow(unused_mut)]
    let mut scope_435 = writer.prefix("MaxRecords");
    if let Some(var_436) = &input.max_records {
        scope_435.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_436).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_437 = writer.prefix("Marker");
    if let Some(var_438) = &input.marker {
        scope_437.string(var_438);
    }
    #[allow(unused_mut)]
    let mut scope_439 = writer.prefix("TagKeys");
    if let Some(var_440) = &input.tag_keys {
        let mut list_442 = scope_439.start_list(false, Some("TagKey"));
        for item_441 in var_440 {
            #[allow(unused_mut)]
            let mut entry_443 = list_442.entry();
            entry_443.string(item_441);
        }
        list_442.finish();
    }
    #[allow(unused_mut)]
    let mut scope_444 = writer.prefix("TagValues");
    if let Some(var_445) = &input.tag_values {
        let mut list_447 = scope_444.start_list(false, Some("TagValue"));
        for item_446 in var_445 {
            #[allow(unused_mut)]
            let mut entry_448 = list_447.entry();
            entry_448.string(item_446);
        }
        list_447.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_cluster_snapshots(
    input: &crate::input::DescribeClusterSnapshotsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeClusterSnapshots", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_449 = writer.prefix("ClusterIdentifier");
    if let Some(var_450) = &input.cluster_identifier {
        scope_449.string(var_450);
    }
    #[allow(unused_mut)]
    let mut scope_451 = writer.prefix("SnapshotIdentifier");
    if let Some(var_452) = &input.snapshot_identifier {
        scope_451.string(var_452);
    }
    #[allow(unused_mut)]
    let mut scope_453 = writer.prefix("SnapshotType");
    if let Some(var_454) = &input.snapshot_type {
        scope_453.string(var_454);
    }
    #[allow(unused_mut)]
    let mut scope_455 = writer.prefix("StartTime");
    if let Some(var_456) = &input.start_time {
        scope_455.date_time(var_456, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_457 = writer.prefix("EndTime");
    if let Some(var_458) = &input.end_time {
        scope_457.date_time(var_458, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_459 = writer.prefix("MaxRecords");
    if let Some(var_460) = &input.max_records {
        scope_459.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_460).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_461 = writer.prefix("Marker");
    if let Some(var_462) = &input.marker {
        scope_461.string(var_462);
    }
    #[allow(unused_mut)]
    let mut scope_463 = writer.prefix("OwnerAccount");
    if let Some(var_464) = &input.owner_account {
        scope_463.string(var_464);
    }
    #[allow(unused_mut)]
    let mut scope_465 = writer.prefix("TagKeys");
    if let Some(var_466) = &input.tag_keys {
        let mut list_468 = scope_465.start_list(false, Some("TagKey"));
        for item_467 in var_466 {
            #[allow(unused_mut)]
            let mut entry_469 = list_468.entry();
            entry_469.string(item_467);
        }
        list_468.finish();
    }
    #[allow(unused_mut)]
    let mut scope_470 = writer.prefix("TagValues");
    if let Some(var_471) = &input.tag_values {
        let mut list_473 = scope_470.start_list(false, Some("TagValue"));
        for item_472 in var_471 {
            #[allow(unused_mut)]
            let mut entry_474 = list_473.entry();
            entry_474.string(item_472);
        }
        list_473.finish();
    }
    #[allow(unused_mut)]
    let mut scope_475 = writer.prefix("ClusterExists");
    if let Some(var_476) = &input.cluster_exists {
        scope_475.boolean(*var_476);
    }
    #[allow(unused_mut)]
    let mut scope_477 = writer.prefix("SortingEntities");
    if let Some(var_478) = &input.sorting_entities {
        let mut list_480 = scope_477.start_list(false, Some("SnapshotSortingEntity"));
        for item_479 in var_478 {
            #[allow(unused_mut)]
            let mut entry_481 = list_480.entry();
            crate::query_ser::serialize_structure_crate_model_snapshot_sorting_entity(
                entry_481, item_479,
            )?;
        }
        list_480.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_cluster_subnet_groups(
    input: &crate::input::DescribeClusterSubnetGroupsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeClusterSubnetGroups", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_482 = writer.prefix("ClusterSubnetGroupName");
    if let Some(var_483) = &input.cluster_subnet_group_name {
        scope_482.string(var_483);
    }
    #[allow(unused_mut)]
    let mut scope_484 = writer.prefix("MaxRecords");
    if let Some(var_485) = &input.max_records {
        scope_484.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_485).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_486 = writer.prefix("Marker");
    if let Some(var_487) = &input.marker {
        scope_486.string(var_487);
    }
    #[allow(unused_mut)]
    let mut scope_488 = writer.prefix("TagKeys");
    if let Some(var_489) = &input.tag_keys {
        let mut list_491 = scope_488.start_list(false, Some("TagKey"));
        for item_490 in var_489 {
            #[allow(unused_mut)]
            let mut entry_492 = list_491.entry();
            entry_492.string(item_490);
        }
        list_491.finish();
    }
    #[allow(unused_mut)]
    let mut scope_493 = writer.prefix("TagValues");
    if let Some(var_494) = &input.tag_values {
        let mut list_496 = scope_493.start_list(false, Some("TagValue"));
        for item_495 in var_494 {
            #[allow(unused_mut)]
            let mut entry_497 = list_496.entry();
            entry_497.string(item_495);
        }
        list_496.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_cluster_tracks(
    input: &crate::input::DescribeClusterTracksInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeClusterTracks", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_498 = writer.prefix("MaintenanceTrackName");
    if let Some(var_499) = &input.maintenance_track_name {
        scope_498.string(var_499);
    }
    #[allow(unused_mut)]
    let mut scope_500 = writer.prefix("MaxRecords");
    if let Some(var_501) = &input.max_records {
        scope_500.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_501).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_502 = writer.prefix("Marker");
    if let Some(var_503) = &input.marker {
        scope_502.string(var_503);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_cluster_versions(
    input: &crate::input::DescribeClusterVersionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeClusterVersions", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_504 = writer.prefix("ClusterVersion");
    if let Some(var_505) = &input.cluster_version {
        scope_504.string(var_505);
    }
    #[allow(unused_mut)]
    let mut scope_506 = writer.prefix("ClusterParameterGroupFamily");
    if let Some(var_507) = &input.cluster_parameter_group_family {
        scope_506.string(var_507);
    }
    #[allow(unused_mut)]
    let mut scope_508 = writer.prefix("MaxRecords");
    if let Some(var_509) = &input.max_records {
        scope_508.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_509).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_510 = writer.prefix("Marker");
    if let Some(var_511) = &input.marker {
        scope_510.string(var_511);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_data_shares(
    input: &crate::input::DescribeDataSharesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeDataShares", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_512 = writer.prefix("DataShareArn");
    if let Some(var_513) = &input.data_share_arn {
        scope_512.string(var_513);
    }
    #[allow(unused_mut)]
    let mut scope_514 = writer.prefix("MaxRecords");
    if let Some(var_515) = &input.max_records {
        scope_514.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_515).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_516 = writer.prefix("Marker");
    if let Some(var_517) = &input.marker {
        scope_516.string(var_517);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_data_shares_for_consumer(
    input: &crate::input::DescribeDataSharesForConsumerInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeDataSharesForConsumer", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_518 = writer.prefix("ConsumerArn");
    if let Some(var_519) = &input.consumer_arn {
        scope_518.string(var_519);
    }
    #[allow(unused_mut)]
    let mut scope_520 = writer.prefix("Status");
    if let Some(var_521) = &input.status {
        scope_520.string(var_521.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_522 = writer.prefix("MaxRecords");
    if let Some(var_523) = &input.max_records {
        scope_522.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_523).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_524 = writer.prefix("Marker");
    if let Some(var_525) = &input.marker {
        scope_524.string(var_525);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_data_shares_for_producer(
    input: &crate::input::DescribeDataSharesForProducerInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeDataSharesForProducer", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_526 = writer.prefix("ProducerArn");
    if let Some(var_527) = &input.producer_arn {
        scope_526.string(var_527);
    }
    #[allow(unused_mut)]
    let mut scope_528 = writer.prefix("Status");
    if let Some(var_529) = &input.status {
        scope_528.string(var_529.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_530 = writer.prefix("MaxRecords");
    if let Some(var_531) = &input.max_records {
        scope_530.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_531).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_532 = writer.prefix("Marker");
    if let Some(var_533) = &input.marker {
        scope_532.string(var_533);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_default_cluster_parameters(
    input: &crate::input::DescribeDefaultClusterParametersInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeDefaultClusterParameters",
        "2012-12-01",
    );
    #[allow(unused_mut)]
    let mut scope_534 = writer.prefix("ParameterGroupFamily");
    if let Some(var_535) = &input.parameter_group_family {
        scope_534.string(var_535);
    }
    #[allow(unused_mut)]
    let mut scope_536 = writer.prefix("MaxRecords");
    if let Some(var_537) = &input.max_records {
        scope_536.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_537).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_538 = writer.prefix("Marker");
    if let Some(var_539) = &input.marker {
        scope_538.string(var_539);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_endpoint_access(
    input: &crate::input::DescribeEndpointAccessInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeEndpointAccess", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_540 = writer.prefix("ClusterIdentifier");
    if let Some(var_541) = &input.cluster_identifier {
        scope_540.string(var_541);
    }
    #[allow(unused_mut)]
    let mut scope_542 = writer.prefix("ResourceOwner");
    if let Some(var_543) = &input.resource_owner {
        scope_542.string(var_543);
    }
    #[allow(unused_mut)]
    let mut scope_544 = writer.prefix("EndpointName");
    if let Some(var_545) = &input.endpoint_name {
        scope_544.string(var_545);
    }
    #[allow(unused_mut)]
    let mut scope_546 = writer.prefix("VpcId");
    if let Some(var_547) = &input.vpc_id {
        scope_546.string(var_547);
    }
    #[allow(unused_mut)]
    let mut scope_548 = writer.prefix("MaxRecords");
    if let Some(var_549) = &input.max_records {
        scope_548.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_549).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_550 = writer.prefix("Marker");
    if let Some(var_551) = &input.marker {
        scope_550.string(var_551);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_endpoint_authorization(
    input: &crate::input::DescribeEndpointAuthorizationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeEndpointAuthorization", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_552 = writer.prefix("ClusterIdentifier");
    if let Some(var_553) = &input.cluster_identifier {
        scope_552.string(var_553);
    }
    #[allow(unused_mut)]
    let mut scope_554 = writer.prefix("Account");
    if let Some(var_555) = &input.account {
        scope_554.string(var_555);
    }
    #[allow(unused_mut)]
    let mut scope_556 = writer.prefix("Grantee");
    if let Some(var_557) = &input.grantee {
        scope_556.boolean(*var_557);
    }
    #[allow(unused_mut)]
    let mut scope_558 = writer.prefix("MaxRecords");
    if let Some(var_559) = &input.max_records {
        scope_558.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_559).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_560 = writer.prefix("Marker");
    if let Some(var_561) = &input.marker {
        scope_560.string(var_561);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_event_categories(
    input: &crate::input::DescribeEventCategoriesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeEventCategories", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_562 = writer.prefix("SourceType");
    if let Some(var_563) = &input.source_type {
        scope_562.string(var_563);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_events(
    input: &crate::input::DescribeEventsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeEvents", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_564 = writer.prefix("SourceIdentifier");
    if let Some(var_565) = &input.source_identifier {
        scope_564.string(var_565);
    }
    #[allow(unused_mut)]
    let mut scope_566 = writer.prefix("SourceType");
    if let Some(var_567) = &input.source_type {
        scope_566.string(var_567.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_568 = writer.prefix("StartTime");
    if let Some(var_569) = &input.start_time {
        scope_568.date_time(var_569, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_570 = writer.prefix("EndTime");
    if let Some(var_571) = &input.end_time {
        scope_570.date_time(var_571, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_572 = writer.prefix("Duration");
    if let Some(var_573) = &input.duration {
        scope_572.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_573).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_574 = writer.prefix("MaxRecords");
    if let Some(var_575) = &input.max_records {
        scope_574.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_575).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_576 = writer.prefix("Marker");
    if let Some(var_577) = &input.marker {
        scope_576.string(var_577);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_event_subscriptions(
    input: &crate::input::DescribeEventSubscriptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeEventSubscriptions", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_578 = writer.prefix("SubscriptionName");
    if let Some(var_579) = &input.subscription_name {
        scope_578.string(var_579);
    }
    #[allow(unused_mut)]
    let mut scope_580 = writer.prefix("MaxRecords");
    if let Some(var_581) = &input.max_records {
        scope_580.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_581).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_582 = writer.prefix("Marker");
    if let Some(var_583) = &input.marker {
        scope_582.string(var_583);
    }
    #[allow(unused_mut)]
    let mut scope_584 = writer.prefix("TagKeys");
    if let Some(var_585) = &input.tag_keys {
        let mut list_587 = scope_584.start_list(false, Some("TagKey"));
        for item_586 in var_585 {
            #[allow(unused_mut)]
            let mut entry_588 = list_587.entry();
            entry_588.string(item_586);
        }
        list_587.finish();
    }
    #[allow(unused_mut)]
    let mut scope_589 = writer.prefix("TagValues");
    if let Some(var_590) = &input.tag_values {
        let mut list_592 = scope_589.start_list(false, Some("TagValue"));
        for item_591 in var_590 {
            #[allow(unused_mut)]
            let mut entry_593 = list_592.entry();
            entry_593.string(item_591);
        }
        list_592.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_hsm_client_certificates(
    input: &crate::input::DescribeHsmClientCertificatesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeHsmClientCertificates", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_594 = writer.prefix("HsmClientCertificateIdentifier");
    if let Some(var_595) = &input.hsm_client_certificate_identifier {
        scope_594.string(var_595);
    }
    #[allow(unused_mut)]
    let mut scope_596 = writer.prefix("MaxRecords");
    if let Some(var_597) = &input.max_records {
        scope_596.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_597).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_598 = writer.prefix("Marker");
    if let Some(var_599) = &input.marker {
        scope_598.string(var_599);
    }
    #[allow(unused_mut)]
    let mut scope_600 = writer.prefix("TagKeys");
    if let Some(var_601) = &input.tag_keys {
        let mut list_603 = scope_600.start_list(false, Some("TagKey"));
        for item_602 in var_601 {
            #[allow(unused_mut)]
            let mut entry_604 = list_603.entry();
            entry_604.string(item_602);
        }
        list_603.finish();
    }
    #[allow(unused_mut)]
    let mut scope_605 = writer.prefix("TagValues");
    if let Some(var_606) = &input.tag_values {
        let mut list_608 = scope_605.start_list(false, Some("TagValue"));
        for item_607 in var_606 {
            #[allow(unused_mut)]
            let mut entry_609 = list_608.entry();
            entry_609.string(item_607);
        }
        list_608.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_hsm_configurations(
    input: &crate::input::DescribeHsmConfigurationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeHsmConfigurations", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_610 = writer.prefix("HsmConfigurationIdentifier");
    if let Some(var_611) = &input.hsm_configuration_identifier {
        scope_610.string(var_611);
    }
    #[allow(unused_mut)]
    let mut scope_612 = writer.prefix("MaxRecords");
    if let Some(var_613) = &input.max_records {
        scope_612.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_613).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_614 = writer.prefix("Marker");
    if let Some(var_615) = &input.marker {
        scope_614.string(var_615);
    }
    #[allow(unused_mut)]
    let mut scope_616 = writer.prefix("TagKeys");
    if let Some(var_617) = &input.tag_keys {
        let mut list_619 = scope_616.start_list(false, Some("TagKey"));
        for item_618 in var_617 {
            #[allow(unused_mut)]
            let mut entry_620 = list_619.entry();
            entry_620.string(item_618);
        }
        list_619.finish();
    }
    #[allow(unused_mut)]
    let mut scope_621 = writer.prefix("TagValues");
    if let Some(var_622) = &input.tag_values {
        let mut list_624 = scope_621.start_list(false, Some("TagValue"));
        for item_623 in var_622 {
            #[allow(unused_mut)]
            let mut entry_625 = list_624.entry();
            entry_625.string(item_623);
        }
        list_624.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_logging_status(
    input: &crate::input::DescribeLoggingStatusInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeLoggingStatus", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_626 = writer.prefix("ClusterIdentifier");
    if let Some(var_627) = &input.cluster_identifier {
        scope_626.string(var_627);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_node_configuration_options(
    input: &crate::input::DescribeNodeConfigurationOptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeNodeConfigurationOptions",
        "2012-12-01",
    );
    #[allow(unused_mut)]
    let mut scope_628 = writer.prefix("ActionType");
    if let Some(var_629) = &input.action_type {
        scope_628.string(var_629.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_630 = writer.prefix("ClusterIdentifier");
    if let Some(var_631) = &input.cluster_identifier {
        scope_630.string(var_631);
    }
    #[allow(unused_mut)]
    let mut scope_632 = writer.prefix("SnapshotIdentifier");
    if let Some(var_633) = &input.snapshot_identifier {
        scope_632.string(var_633);
    }
    #[allow(unused_mut)]
    let mut scope_634 = writer.prefix("OwnerAccount");
    if let Some(var_635) = &input.owner_account {
        scope_634.string(var_635);
    }
    #[allow(unused_mut)]
    let mut scope_636 = writer.prefix("Filter");
    if let Some(var_637) = &input.filters {
        let mut list_639 = scope_636.start_list(false, Some("NodeConfigurationOptionsFilter"));
        for item_638 in var_637 {
            #[allow(unused_mut)]
            let mut entry_640 = list_639.entry();
            crate::query_ser::serialize_structure_crate_model_node_configuration_options_filter(
                entry_640, item_638,
            )?;
        }
        list_639.finish();
    }
    #[allow(unused_mut)]
    let mut scope_641 = writer.prefix("Marker");
    if let Some(var_642) = &input.marker {
        scope_641.string(var_642);
    }
    #[allow(unused_mut)]
    let mut scope_643 = writer.prefix("MaxRecords");
    if let Some(var_644) = &input.max_records {
        scope_643.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_644).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_orderable_cluster_options(
    input: &crate::input::DescribeOrderableClusterOptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeOrderableClusterOptions",
        "2012-12-01",
    );
    #[allow(unused_mut)]
    let mut scope_645 = writer.prefix("ClusterVersion");
    if let Some(var_646) = &input.cluster_version {
        scope_645.string(var_646);
    }
    #[allow(unused_mut)]
    let mut scope_647 = writer.prefix("NodeType");
    if let Some(var_648) = &input.node_type {
        scope_647.string(var_648);
    }
    #[allow(unused_mut)]
    let mut scope_649 = writer.prefix("MaxRecords");
    if let Some(var_650) = &input.max_records {
        scope_649.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_650).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_651 = writer.prefix("Marker");
    if let Some(var_652) = &input.marker {
        scope_651.string(var_652);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_partners(
    input: &crate::input::DescribePartnersInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribePartners", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_653 = writer.prefix("AccountId");
    if let Some(var_654) = &input.account_id {
        scope_653.string(var_654);
    }
    #[allow(unused_mut)]
    let mut scope_655 = writer.prefix("ClusterIdentifier");
    if let Some(var_656) = &input.cluster_identifier {
        scope_655.string(var_656);
    }
    #[allow(unused_mut)]
    let mut scope_657 = writer.prefix("DatabaseName");
    if let Some(var_658) = &input.database_name {
        scope_657.string(var_658);
    }
    #[allow(unused_mut)]
    let mut scope_659 = writer.prefix("PartnerName");
    if let Some(var_660) = &input.partner_name {
        scope_659.string(var_660);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_reserved_node_exchange_status(
    input: &crate::input::DescribeReservedNodeExchangeStatusInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeReservedNodeExchangeStatus",
        "2012-12-01",
    );
    #[allow(unused_mut)]
    let mut scope_661 = writer.prefix("ReservedNodeId");
    if let Some(var_662) = &input.reserved_node_id {
        scope_661.string(var_662);
    }
    #[allow(unused_mut)]
    let mut scope_663 = writer.prefix("ReservedNodeExchangeRequestId");
    if let Some(var_664) = &input.reserved_node_exchange_request_id {
        scope_663.string(var_664);
    }
    #[allow(unused_mut)]
    let mut scope_665 = writer.prefix("MaxRecords");
    if let Some(var_666) = &input.max_records {
        scope_665.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_666).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_667 = writer.prefix("Marker");
    if let Some(var_668) = &input.marker {
        scope_667.string(var_668);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_reserved_node_offerings(
    input: &crate::input::DescribeReservedNodeOfferingsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeReservedNodeOfferings", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_669 = writer.prefix("ReservedNodeOfferingId");
    if let Some(var_670) = &input.reserved_node_offering_id {
        scope_669.string(var_670);
    }
    #[allow(unused_mut)]
    let mut scope_671 = writer.prefix("MaxRecords");
    if let Some(var_672) = &input.max_records {
        scope_671.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_672).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_673 = writer.prefix("Marker");
    if let Some(var_674) = &input.marker {
        scope_673.string(var_674);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_reserved_nodes(
    input: &crate::input::DescribeReservedNodesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeReservedNodes", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_675 = writer.prefix("ReservedNodeId");
    if let Some(var_676) = &input.reserved_node_id {
        scope_675.string(var_676);
    }
    #[allow(unused_mut)]
    let mut scope_677 = writer.prefix("MaxRecords");
    if let Some(var_678) = &input.max_records {
        scope_677.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_678).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_679 = writer.prefix("Marker");
    if let Some(var_680) = &input.marker {
        scope_679.string(var_680);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_resize(
    input: &crate::input::DescribeResizeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeResize", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_681 = writer.prefix("ClusterIdentifier");
    if let Some(var_682) = &input.cluster_identifier {
        scope_681.string(var_682);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_scheduled_actions(
    input: &crate::input::DescribeScheduledActionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeScheduledActions", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_683 = writer.prefix("ScheduledActionName");
    if let Some(var_684) = &input.scheduled_action_name {
        scope_683.string(var_684);
    }
    #[allow(unused_mut)]
    let mut scope_685 = writer.prefix("TargetActionType");
    if let Some(var_686) = &input.target_action_type {
        scope_685.string(var_686.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_687 = writer.prefix("StartTime");
    if let Some(var_688) = &input.start_time {
        scope_687.date_time(var_688, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_689 = writer.prefix("EndTime");
    if let Some(var_690) = &input.end_time {
        scope_689.date_time(var_690, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_691 = writer.prefix("Active");
    if let Some(var_692) = &input.active {
        scope_691.boolean(*var_692);
    }
    #[allow(unused_mut)]
    let mut scope_693 = writer.prefix("Filters");
    if let Some(var_694) = &input.filters {
        let mut list_696 = scope_693.start_list(false, Some("ScheduledActionFilter"));
        for item_695 in var_694 {
            #[allow(unused_mut)]
            let mut entry_697 = list_696.entry();
            crate::query_ser::serialize_structure_crate_model_scheduled_action_filter(
                entry_697, item_695,
            )?;
        }
        list_696.finish();
    }
    #[allow(unused_mut)]
    let mut scope_698 = writer.prefix("Marker");
    if let Some(var_699) = &input.marker {
        scope_698.string(var_699);
    }
    #[allow(unused_mut)]
    let mut scope_700 = writer.prefix("MaxRecords");
    if let Some(var_701) = &input.max_records {
        scope_700.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_701).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_snapshot_copy_grants(
    input: &crate::input::DescribeSnapshotCopyGrantsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeSnapshotCopyGrants", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_702 = writer.prefix("SnapshotCopyGrantName");
    if let Some(var_703) = &input.snapshot_copy_grant_name {
        scope_702.string(var_703);
    }
    #[allow(unused_mut)]
    let mut scope_704 = writer.prefix("MaxRecords");
    if let Some(var_705) = &input.max_records {
        scope_704.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_705).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_706 = writer.prefix("Marker");
    if let Some(var_707) = &input.marker {
        scope_706.string(var_707);
    }
    #[allow(unused_mut)]
    let mut scope_708 = writer.prefix("TagKeys");
    if let Some(var_709) = &input.tag_keys {
        let mut list_711 = scope_708.start_list(false, Some("TagKey"));
        for item_710 in var_709 {
            #[allow(unused_mut)]
            let mut entry_712 = list_711.entry();
            entry_712.string(item_710);
        }
        list_711.finish();
    }
    #[allow(unused_mut)]
    let mut scope_713 = writer.prefix("TagValues");
    if let Some(var_714) = &input.tag_values {
        let mut list_716 = scope_713.start_list(false, Some("TagValue"));
        for item_715 in var_714 {
            #[allow(unused_mut)]
            let mut entry_717 = list_716.entry();
            entry_717.string(item_715);
        }
        list_716.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_snapshot_schedules(
    input: &crate::input::DescribeSnapshotSchedulesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeSnapshotSchedules", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_718 = writer.prefix("ClusterIdentifier");
    if let Some(var_719) = &input.cluster_identifier {
        scope_718.string(var_719);
    }
    #[allow(unused_mut)]
    let mut scope_720 = writer.prefix("ScheduleIdentifier");
    if let Some(var_721) = &input.schedule_identifier {
        scope_720.string(var_721);
    }
    #[allow(unused_mut)]
    let mut scope_722 = writer.prefix("TagKeys");
    if let Some(var_723) = &input.tag_keys {
        let mut list_725 = scope_722.start_list(false, Some("TagKey"));
        for item_724 in var_723 {
            #[allow(unused_mut)]
            let mut entry_726 = list_725.entry();
            entry_726.string(item_724);
        }
        list_725.finish();
    }
    #[allow(unused_mut)]
    let mut scope_727 = writer.prefix("TagValues");
    if let Some(var_728) = &input.tag_values {
        let mut list_730 = scope_727.start_list(false, Some("TagValue"));
        for item_729 in var_728 {
            #[allow(unused_mut)]
            let mut entry_731 = list_730.entry();
            entry_731.string(item_729);
        }
        list_730.finish();
    }
    #[allow(unused_mut)]
    let mut scope_732 = writer.prefix("Marker");
    if let Some(var_733) = &input.marker {
        scope_732.string(var_733);
    }
    #[allow(unused_mut)]
    let mut scope_734 = writer.prefix("MaxRecords");
    if let Some(var_735) = &input.max_records {
        scope_734.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_735).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_storage(
    input: &crate::input::DescribeStorageInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let _ = input;
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeStorage", "2012-12-01");
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_table_restore_status(
    input: &crate::input::DescribeTableRestoreStatusInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeTableRestoreStatus", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_736 = writer.prefix("ClusterIdentifier");
    if let Some(var_737) = &input.cluster_identifier {
        scope_736.string(var_737);
    }
    #[allow(unused_mut)]
    let mut scope_738 = writer.prefix("TableRestoreRequestId");
    if let Some(var_739) = &input.table_restore_request_id {
        scope_738.string(var_739);
    }
    #[allow(unused_mut)]
    let mut scope_740 = writer.prefix("MaxRecords");
    if let Some(var_741) = &input.max_records {
        scope_740.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_741).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_742 = writer.prefix("Marker");
    if let Some(var_743) = &input.marker {
        scope_742.string(var_743);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_tags(
    input: &crate::input::DescribeTagsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeTags", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_744 = writer.prefix("ResourceName");
    if let Some(var_745) = &input.resource_name {
        scope_744.string(var_745);
    }
    #[allow(unused_mut)]
    let mut scope_746 = writer.prefix("ResourceType");
    if let Some(var_747) = &input.resource_type {
        scope_746.string(var_747);
    }
    #[allow(unused_mut)]
    let mut scope_748 = writer.prefix("MaxRecords");
    if let Some(var_749) = &input.max_records {
        scope_748.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_749).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_750 = writer.prefix("Marker");
    if let Some(var_751) = &input.marker {
        scope_750.string(var_751);
    }
    #[allow(unused_mut)]
    let mut scope_752 = writer.prefix("TagKeys");
    if let Some(var_753) = &input.tag_keys {
        let mut list_755 = scope_752.start_list(false, Some("TagKey"));
        for item_754 in var_753 {
            #[allow(unused_mut)]
            let mut entry_756 = list_755.entry();
            entry_756.string(item_754);
        }
        list_755.finish();
    }
    #[allow(unused_mut)]
    let mut scope_757 = writer.prefix("TagValues");
    if let Some(var_758) = &input.tag_values {
        let mut list_760 = scope_757.start_list(false, Some("TagValue"));
        for item_759 in var_758 {
            #[allow(unused_mut)]
            let mut entry_761 = list_760.entry();
            entry_761.string(item_759);
        }
        list_760.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_usage_limits(
    input: &crate::input::DescribeUsageLimitsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeUsageLimits", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_762 = writer.prefix("UsageLimitId");
    if let Some(var_763) = &input.usage_limit_id {
        scope_762.string(var_763);
    }
    #[allow(unused_mut)]
    let mut scope_764 = writer.prefix("ClusterIdentifier");
    if let Some(var_765) = &input.cluster_identifier {
        scope_764.string(var_765);
    }
    #[allow(unused_mut)]
    let mut scope_766 = writer.prefix("FeatureType");
    if let Some(var_767) = &input.feature_type {
        scope_766.string(var_767.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_768 = writer.prefix("MaxRecords");
    if let Some(var_769) = &input.max_records {
        scope_768.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_769).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_770 = writer.prefix("Marker");
    if let Some(var_771) = &input.marker {
        scope_770.string(var_771);
    }
    #[allow(unused_mut)]
    let mut scope_772 = writer.prefix("TagKeys");
    if let Some(var_773) = &input.tag_keys {
        let mut list_775 = scope_772.start_list(false, Some("TagKey"));
        for item_774 in var_773 {
            #[allow(unused_mut)]
            let mut entry_776 = list_775.entry();
            entry_776.string(item_774);
        }
        list_775.finish();
    }
    #[allow(unused_mut)]
    let mut scope_777 = writer.prefix("TagValues");
    if let Some(var_778) = &input.tag_values {
        let mut list_780 = scope_777.start_list(false, Some("TagValue"));
        for item_779 in var_778 {
            #[allow(unused_mut)]
            let mut entry_781 = list_780.entry();
            entry_781.string(item_779);
        }
        list_780.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_logging(
    input: &crate::input::DisableLoggingInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DisableLogging", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_782 = writer.prefix("ClusterIdentifier");
    if let Some(var_783) = &input.cluster_identifier {
        scope_782.string(var_783);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_snapshot_copy(
    input: &crate::input::DisableSnapshotCopyInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisableSnapshotCopy", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_784 = writer.prefix("ClusterIdentifier");
    if let Some(var_785) = &input.cluster_identifier {
        scope_784.string(var_785);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_data_share_consumer(
    input: &crate::input::DisassociateDataShareConsumerInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisassociateDataShareConsumer", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_786 = writer.prefix("DataShareArn");
    if let Some(var_787) = &input.data_share_arn {
        scope_786.string(var_787);
    }
    #[allow(unused_mut)]
    let mut scope_788 = writer.prefix("DisassociateEntireAccount");
    if let Some(var_789) = &input.disassociate_entire_account {
        scope_788.boolean(*var_789);
    }
    #[allow(unused_mut)]
    let mut scope_790 = writer.prefix("ConsumerArn");
    if let Some(var_791) = &input.consumer_arn {
        scope_790.string(var_791);
    }
    #[allow(unused_mut)]
    let mut scope_792 = writer.prefix("ConsumerRegion");
    if let Some(var_793) = &input.consumer_region {
        scope_792.string(var_793);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_logging(
    input: &crate::input::EnableLoggingInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "EnableLogging", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_794 = writer.prefix("ClusterIdentifier");
    if let Some(var_795) = &input.cluster_identifier {
        scope_794.string(var_795);
    }
    #[allow(unused_mut)]
    let mut scope_796 = writer.prefix("BucketName");
    if let Some(var_797) = &input.bucket_name {
        scope_796.string(var_797);
    }
    #[allow(unused_mut)]
    let mut scope_798 = writer.prefix("S3KeyPrefix");
    if let Some(var_799) = &input.s3_key_prefix {
        scope_798.string(var_799);
    }
    #[allow(unused_mut)]
    let mut scope_800 = writer.prefix("LogDestinationType");
    if let Some(var_801) = &input.log_destination_type {
        scope_800.string(var_801.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_802 = writer.prefix("LogExports");
    if let Some(var_803) = &input.log_exports {
        let mut list_805 = scope_802.start_list(false, None);
        for item_804 in var_803 {
            #[allow(unused_mut)]
            let mut entry_806 = list_805.entry();
            entry_806.string(item_804);
        }
        list_805.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_snapshot_copy(
    input: &crate::input::EnableSnapshotCopyInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "EnableSnapshotCopy", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_807 = writer.prefix("ClusterIdentifier");
    if let Some(var_808) = &input.cluster_identifier {
        scope_807.string(var_808);
    }
    #[allow(unused_mut)]
    let mut scope_809 = writer.prefix("DestinationRegion");
    if let Some(var_810) = &input.destination_region {
        scope_809.string(var_810);
    }
    #[allow(unused_mut)]
    let mut scope_811 = writer.prefix("RetentionPeriod");
    if let Some(var_812) = &input.retention_period {
        scope_811.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_812).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_813 = writer.prefix("SnapshotCopyGrantName");
    if let Some(var_814) = &input.snapshot_copy_grant_name {
        scope_813.string(var_814);
    }
    #[allow(unused_mut)]
    let mut scope_815 = writer.prefix("ManualSnapshotRetentionPeriod");
    if let Some(var_816) = &input.manual_snapshot_retention_period {
        scope_815.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_816).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_cluster_credentials(
    input: &crate::input::GetClusterCredentialsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetClusterCredentials", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_817 = writer.prefix("DbUser");
    if let Some(var_818) = &input.db_user {
        scope_817.string(var_818);
    }
    #[allow(unused_mut)]
    let mut scope_819 = writer.prefix("DbName");
    if let Some(var_820) = &input.db_name {
        scope_819.string(var_820);
    }
    #[allow(unused_mut)]
    let mut scope_821 = writer.prefix("ClusterIdentifier");
    if let Some(var_822) = &input.cluster_identifier {
        scope_821.string(var_822);
    }
    #[allow(unused_mut)]
    let mut scope_823 = writer.prefix("DurationSeconds");
    if let Some(var_824) = &input.duration_seconds {
        scope_823.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_824).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_825 = writer.prefix("AutoCreate");
    if let Some(var_826) = &input.auto_create {
        scope_825.boolean(*var_826);
    }
    #[allow(unused_mut)]
    let mut scope_827 = writer.prefix("DbGroups");
    if let Some(var_828) = &input.db_groups {
        let mut list_830 = scope_827.start_list(false, Some("DbGroup"));
        for item_829 in var_828 {
            #[allow(unused_mut)]
            let mut entry_831 = list_830.entry();
            entry_831.string(item_829);
        }
        list_830.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_reserved_node_exchange_configuration_options(
    input: &crate::input::GetReservedNodeExchangeConfigurationOptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetReservedNodeExchangeConfigurationOptions",
        "2012-12-01",
    );
    #[allow(unused_mut)]
    let mut scope_832 = writer.prefix("ActionType");
    if let Some(var_833) = &input.action_type {
        scope_832.string(var_833.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_834 = writer.prefix("ClusterIdentifier");
    if let Some(var_835) = &input.cluster_identifier {
        scope_834.string(var_835);
    }
    #[allow(unused_mut)]
    let mut scope_836 = writer.prefix("SnapshotIdentifier");
    if let Some(var_837) = &input.snapshot_identifier {
        scope_836.string(var_837);
    }
    #[allow(unused_mut)]
    let mut scope_838 = writer.prefix("MaxRecords");
    if let Some(var_839) = &input.max_records {
        scope_838.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_839).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_840 = writer.prefix("Marker");
    if let Some(var_841) = &input.marker {
        scope_840.string(var_841);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_reserved_node_exchange_offerings(
    input: &crate::input::GetReservedNodeExchangeOfferingsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetReservedNodeExchangeOfferings",
        "2012-12-01",
    );
    #[allow(unused_mut)]
    let mut scope_842 = writer.prefix("ReservedNodeId");
    if let Some(var_843) = &input.reserved_node_id {
        scope_842.string(var_843);
    }
    #[allow(unused_mut)]
    let mut scope_844 = writer.prefix("MaxRecords");
    if let Some(var_845) = &input.max_records {
        scope_844.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_845).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_846 = writer.prefix("Marker");
    if let Some(var_847) = &input.marker {
        scope_846.string(var_847);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_aqua_configuration(
    input: &crate::input::ModifyAquaConfigurationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyAquaConfiguration", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_848 = writer.prefix("ClusterIdentifier");
    if let Some(var_849) = &input.cluster_identifier {
        scope_848.string(var_849);
    }
    #[allow(unused_mut)]
    let mut scope_850 = writer.prefix("AquaConfigurationStatus");
    if let Some(var_851) = &input.aqua_configuration_status {
        scope_850.string(var_851.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_authentication_profile(
    input: &crate::input::ModifyAuthenticationProfileInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyAuthenticationProfile", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_852 = writer.prefix("AuthenticationProfileName");
    if let Some(var_853) = &input.authentication_profile_name {
        scope_852.string(var_853);
    }
    #[allow(unused_mut)]
    let mut scope_854 = writer.prefix("AuthenticationProfileContent");
    if let Some(var_855) = &input.authentication_profile_content {
        scope_854.string(var_855);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_cluster(
    input: &crate::input::ModifyClusterInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyCluster", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_856 = writer.prefix("ClusterIdentifier");
    if let Some(var_857) = &input.cluster_identifier {
        scope_856.string(var_857);
    }
    #[allow(unused_mut)]
    let mut scope_858 = writer.prefix("ClusterType");
    if let Some(var_859) = &input.cluster_type {
        scope_858.string(var_859);
    }
    #[allow(unused_mut)]
    let mut scope_860 = writer.prefix("NodeType");
    if let Some(var_861) = &input.node_type {
        scope_860.string(var_861);
    }
    #[allow(unused_mut)]
    let mut scope_862 = writer.prefix("NumberOfNodes");
    if let Some(var_863) = &input.number_of_nodes {
        scope_862.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_863).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_864 = writer.prefix("ClusterSecurityGroups");
    if let Some(var_865) = &input.cluster_security_groups {
        let mut list_867 = scope_864.start_list(false, Some("ClusterSecurityGroupName"));
        for item_866 in var_865 {
            #[allow(unused_mut)]
            let mut entry_868 = list_867.entry();
            entry_868.string(item_866);
        }
        list_867.finish();
    }
    #[allow(unused_mut)]
    let mut scope_869 = writer.prefix("VpcSecurityGroupIds");
    if let Some(var_870) = &input.vpc_security_group_ids {
        let mut list_872 = scope_869.start_list(false, Some("VpcSecurityGroupId"));
        for item_871 in var_870 {
            #[allow(unused_mut)]
            let mut entry_873 = list_872.entry();
            entry_873.string(item_871);
        }
        list_872.finish();
    }
    #[allow(unused_mut)]
    let mut scope_874 = writer.prefix("MasterUserPassword");
    if let Some(var_875) = &input.master_user_password {
        scope_874.string(var_875);
    }
    #[allow(unused_mut)]
    let mut scope_876 = writer.prefix("ClusterParameterGroupName");
    if let Some(var_877) = &input.cluster_parameter_group_name {
        scope_876.string(var_877);
    }
    #[allow(unused_mut)]
    let mut scope_878 = writer.prefix("AutomatedSnapshotRetentionPeriod");
    if let Some(var_879) = &input.automated_snapshot_retention_period {
        scope_878.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_879).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_880 = writer.prefix("ManualSnapshotRetentionPeriod");
    if let Some(var_881) = &input.manual_snapshot_retention_period {
        scope_880.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_881).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_882 = writer.prefix("PreferredMaintenanceWindow");
    if let Some(var_883) = &input.preferred_maintenance_window {
        scope_882.string(var_883);
    }
    #[allow(unused_mut)]
    let mut scope_884 = writer.prefix("ClusterVersion");
    if let Some(var_885) = &input.cluster_version {
        scope_884.string(var_885);
    }
    #[allow(unused_mut)]
    let mut scope_886 = writer.prefix("AllowVersionUpgrade");
    if let Some(var_887) = &input.allow_version_upgrade {
        scope_886.boolean(*var_887);
    }
    #[allow(unused_mut)]
    let mut scope_888 = writer.prefix("HsmClientCertificateIdentifier");
    if let Some(var_889) = &input.hsm_client_certificate_identifier {
        scope_888.string(var_889);
    }
    #[allow(unused_mut)]
    let mut scope_890 = writer.prefix("HsmConfigurationIdentifier");
    if let Some(var_891) = &input.hsm_configuration_identifier {
        scope_890.string(var_891);
    }
    #[allow(unused_mut)]
    let mut scope_892 = writer.prefix("NewClusterIdentifier");
    if let Some(var_893) = &input.new_cluster_identifier {
        scope_892.string(var_893);
    }
    #[allow(unused_mut)]
    let mut scope_894 = writer.prefix("PubliclyAccessible");
    if let Some(var_895) = &input.publicly_accessible {
        scope_894.boolean(*var_895);
    }
    #[allow(unused_mut)]
    let mut scope_896 = writer.prefix("ElasticIp");
    if let Some(var_897) = &input.elastic_ip {
        scope_896.string(var_897);
    }
    #[allow(unused_mut)]
    let mut scope_898 = writer.prefix("EnhancedVpcRouting");
    if let Some(var_899) = &input.enhanced_vpc_routing {
        scope_898.boolean(*var_899);
    }
    #[allow(unused_mut)]
    let mut scope_900 = writer.prefix("MaintenanceTrackName");
    if let Some(var_901) = &input.maintenance_track_name {
        scope_900.string(var_901);
    }
    #[allow(unused_mut)]
    let mut scope_902 = writer.prefix("Encrypted");
    if let Some(var_903) = &input.encrypted {
        scope_902.boolean(*var_903);
    }
    #[allow(unused_mut)]
    let mut scope_904 = writer.prefix("KmsKeyId");
    if let Some(var_905) = &input.kms_key_id {
        scope_904.string(var_905);
    }
    #[allow(unused_mut)]
    let mut scope_906 = writer.prefix("AvailabilityZoneRelocation");
    if let Some(var_907) = &input.availability_zone_relocation {
        scope_906.boolean(*var_907);
    }
    #[allow(unused_mut)]
    let mut scope_908 = writer.prefix("AvailabilityZone");
    if let Some(var_909) = &input.availability_zone {
        scope_908.string(var_909);
    }
    #[allow(unused_mut)]
    let mut scope_910 = writer.prefix("Port");
    if let Some(var_911) = &input.port {
        scope_910.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_911).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_cluster_db_revision(
    input: &crate::input::ModifyClusterDbRevisionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyClusterDbRevision", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_912 = writer.prefix("ClusterIdentifier");
    if let Some(var_913) = &input.cluster_identifier {
        scope_912.string(var_913);
    }
    #[allow(unused_mut)]
    let mut scope_914 = writer.prefix("RevisionTarget");
    if let Some(var_915) = &input.revision_target {
        scope_914.string(var_915);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_cluster_iam_roles(
    input: &crate::input::ModifyClusterIamRolesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyClusterIamRoles", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_916 = writer.prefix("ClusterIdentifier");
    if let Some(var_917) = &input.cluster_identifier {
        scope_916.string(var_917);
    }
    #[allow(unused_mut)]
    let mut scope_918 = writer.prefix("AddIamRoles");
    if let Some(var_919) = &input.add_iam_roles {
        let mut list_921 = scope_918.start_list(false, Some("IamRoleArn"));
        for item_920 in var_919 {
            #[allow(unused_mut)]
            let mut entry_922 = list_921.entry();
            entry_922.string(item_920);
        }
        list_921.finish();
    }
    #[allow(unused_mut)]
    let mut scope_923 = writer.prefix("RemoveIamRoles");
    if let Some(var_924) = &input.remove_iam_roles {
        let mut list_926 = scope_923.start_list(false, Some("IamRoleArn"));
        for item_925 in var_924 {
            #[allow(unused_mut)]
            let mut entry_927 = list_926.entry();
            entry_927.string(item_925);
        }
        list_926.finish();
    }
    #[allow(unused_mut)]
    let mut scope_928 = writer.prefix("DefaultIamRoleArn");
    if let Some(var_929) = &input.default_iam_role_arn {
        scope_928.string(var_929);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_cluster_maintenance(
    input: &crate::input::ModifyClusterMaintenanceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyClusterMaintenance", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_930 = writer.prefix("ClusterIdentifier");
    if let Some(var_931) = &input.cluster_identifier {
        scope_930.string(var_931);
    }
    #[allow(unused_mut)]
    let mut scope_932 = writer.prefix("DeferMaintenance");
    if let Some(var_933) = &input.defer_maintenance {
        scope_932.boolean(*var_933);
    }
    #[allow(unused_mut)]
    let mut scope_934 = writer.prefix("DeferMaintenanceIdentifier");
    if let Some(var_935) = &input.defer_maintenance_identifier {
        scope_934.string(var_935);
    }
    #[allow(unused_mut)]
    let mut scope_936 = writer.prefix("DeferMaintenanceStartTime");
    if let Some(var_937) = &input.defer_maintenance_start_time {
        scope_936.date_time(var_937, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_938 = writer.prefix("DeferMaintenanceEndTime");
    if let Some(var_939) = &input.defer_maintenance_end_time {
        scope_938.date_time(var_939, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_940 = writer.prefix("DeferMaintenanceDuration");
    if let Some(var_941) = &input.defer_maintenance_duration {
        scope_940.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_941).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_cluster_parameter_group(
    input: &crate::input::ModifyClusterParameterGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyClusterParameterGroup", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_942 = writer.prefix("ParameterGroupName");
    if let Some(var_943) = &input.parameter_group_name {
        scope_942.string(var_943);
    }
    #[allow(unused_mut)]
    let mut scope_944 = writer.prefix("Parameters");
    if let Some(var_945) = &input.parameters {
        let mut list_947 = scope_944.start_list(false, Some("Parameter"));
        for item_946 in var_945 {
            #[allow(unused_mut)]
            let mut entry_948 = list_947.entry();
            crate::query_ser::serialize_structure_crate_model_parameter(entry_948, item_946)?;
        }
        list_947.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_cluster_snapshot(
    input: &crate::input::ModifyClusterSnapshotInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyClusterSnapshot", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_949 = writer.prefix("SnapshotIdentifier");
    if let Some(var_950) = &input.snapshot_identifier {
        scope_949.string(var_950);
    }
    #[allow(unused_mut)]
    let mut scope_951 = writer.prefix("ManualSnapshotRetentionPeriod");
    if let Some(var_952) = &input.manual_snapshot_retention_period {
        scope_951.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_952).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_953 = writer.prefix("Force");
    if input.force {
        scope_953.boolean(input.force);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_cluster_snapshot_schedule(
    input: &crate::input::ModifyClusterSnapshotScheduleInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyClusterSnapshotSchedule", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_954 = writer.prefix("ClusterIdentifier");
    if let Some(var_955) = &input.cluster_identifier {
        scope_954.string(var_955);
    }
    #[allow(unused_mut)]
    let mut scope_956 = writer.prefix("ScheduleIdentifier");
    if let Some(var_957) = &input.schedule_identifier {
        scope_956.string(var_957);
    }
    #[allow(unused_mut)]
    let mut scope_958 = writer.prefix("DisassociateSchedule");
    if let Some(var_959) = &input.disassociate_schedule {
        scope_958.boolean(*var_959);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_cluster_subnet_group(
    input: &crate::input::ModifyClusterSubnetGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyClusterSubnetGroup", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_960 = writer.prefix("ClusterSubnetGroupName");
    if let Some(var_961) = &input.cluster_subnet_group_name {
        scope_960.string(var_961);
    }
    #[allow(unused_mut)]
    let mut scope_962 = writer.prefix("Description");
    if let Some(var_963) = &input.description {
        scope_962.string(var_963);
    }
    #[allow(unused_mut)]
    let mut scope_964 = writer.prefix("SubnetIds");
    if let Some(var_965) = &input.subnet_ids {
        let mut list_967 = scope_964.start_list(false, Some("SubnetIdentifier"));
        for item_966 in var_965 {
            #[allow(unused_mut)]
            let mut entry_968 = list_967.entry();
            entry_968.string(item_966);
        }
        list_967.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_endpoint_access(
    input: &crate::input::ModifyEndpointAccessInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyEndpointAccess", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_969 = writer.prefix("EndpointName");
    if let Some(var_970) = &input.endpoint_name {
        scope_969.string(var_970);
    }
    #[allow(unused_mut)]
    let mut scope_971 = writer.prefix("VpcSecurityGroupIds");
    if let Some(var_972) = &input.vpc_security_group_ids {
        let mut list_974 = scope_971.start_list(false, Some("VpcSecurityGroupId"));
        for item_973 in var_972 {
            #[allow(unused_mut)]
            let mut entry_975 = list_974.entry();
            entry_975.string(item_973);
        }
        list_974.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_event_subscription(
    input: &crate::input::ModifyEventSubscriptionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyEventSubscription", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_976 = writer.prefix("SubscriptionName");
    if let Some(var_977) = &input.subscription_name {
        scope_976.string(var_977);
    }
    #[allow(unused_mut)]
    let mut scope_978 = writer.prefix("SnsTopicArn");
    if let Some(var_979) = &input.sns_topic_arn {
        scope_978.string(var_979);
    }
    #[allow(unused_mut)]
    let mut scope_980 = writer.prefix("SourceType");
    if let Some(var_981) = &input.source_type {
        scope_980.string(var_981);
    }
    #[allow(unused_mut)]
    let mut scope_982 = writer.prefix("SourceIds");
    if let Some(var_983) = &input.source_ids {
        let mut list_985 = scope_982.start_list(false, Some("SourceId"));
        for item_984 in var_983 {
            #[allow(unused_mut)]
            let mut entry_986 = list_985.entry();
            entry_986.string(item_984);
        }
        list_985.finish();
    }
    #[allow(unused_mut)]
    let mut scope_987 = writer.prefix("EventCategories");
    if let Some(var_988) = &input.event_categories {
        let mut list_990 = scope_987.start_list(false, Some("EventCategory"));
        for item_989 in var_988 {
            #[allow(unused_mut)]
            let mut entry_991 = list_990.entry();
            entry_991.string(item_989);
        }
        list_990.finish();
    }
    #[allow(unused_mut)]
    let mut scope_992 = writer.prefix("Severity");
    if let Some(var_993) = &input.severity {
        scope_992.string(var_993);
    }
    #[allow(unused_mut)]
    let mut scope_994 = writer.prefix("Enabled");
    if let Some(var_995) = &input.enabled {
        scope_994.boolean(*var_995);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_scheduled_action(
    input: &crate::input::ModifyScheduledActionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyScheduledAction", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_996 = writer.prefix("ScheduledActionName");
    if let Some(var_997) = &input.scheduled_action_name {
        scope_996.string(var_997);
    }
    #[allow(unused_mut)]
    let mut scope_998 = writer.prefix("TargetAction");
    if let Some(var_999) = &input.target_action {
        crate::query_ser::serialize_structure_crate_model_scheduled_action_type(
            scope_998, var_999,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1000 = writer.prefix("Schedule");
    if let Some(var_1001) = &input.schedule {
        scope_1000.string(var_1001);
    }
    #[allow(unused_mut)]
    let mut scope_1002 = writer.prefix("IamRole");
    if let Some(var_1003) = &input.iam_role {
        scope_1002.string(var_1003);
    }
    #[allow(unused_mut)]
    let mut scope_1004 = writer.prefix("ScheduledActionDescription");
    if let Some(var_1005) = &input.scheduled_action_description {
        scope_1004.string(var_1005);
    }
    #[allow(unused_mut)]
    let mut scope_1006 = writer.prefix("StartTime");
    if let Some(var_1007) = &input.start_time {
        scope_1006.date_time(var_1007, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_1008 = writer.prefix("EndTime");
    if let Some(var_1009) = &input.end_time {
        scope_1008.date_time(var_1009, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_1010 = writer.prefix("Enable");
    if let Some(var_1011) = &input.enable {
        scope_1010.boolean(*var_1011);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_snapshot_copy_retention_period(
    input: &crate::input::ModifySnapshotCopyRetentionPeriodInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifySnapshotCopyRetentionPeriod",
        "2012-12-01",
    );
    #[allow(unused_mut)]
    let mut scope_1012 = writer.prefix("ClusterIdentifier");
    if let Some(var_1013) = &input.cluster_identifier {
        scope_1012.string(var_1013);
    }
    #[allow(unused_mut)]
    let mut scope_1014 = writer.prefix("RetentionPeriod");
    {
        scope_1014.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.retention_period).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1015 = writer.prefix("Manual");
    if input.manual {
        scope_1015.boolean(input.manual);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_snapshot_schedule(
    input: &crate::input::ModifySnapshotScheduleInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifySnapshotSchedule", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_1016 = writer.prefix("ScheduleIdentifier");
    if let Some(var_1017) = &input.schedule_identifier {
        scope_1016.string(var_1017);
    }
    #[allow(unused_mut)]
    let mut scope_1018 = writer.prefix("ScheduleDefinitions");
    if let Some(var_1019) = &input.schedule_definitions {
        let mut list_1021 = scope_1018.start_list(false, Some("ScheduleDefinition"));
        for item_1020 in var_1019 {
            #[allow(unused_mut)]
            let mut entry_1022 = list_1021.entry();
            entry_1022.string(item_1020);
        }
        list_1021.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_usage_limit(
    input: &crate::input::ModifyUsageLimitInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyUsageLimit", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_1023 = writer.prefix("UsageLimitId");
    if let Some(var_1024) = &input.usage_limit_id {
        scope_1023.string(var_1024);
    }
    #[allow(unused_mut)]
    let mut scope_1025 = writer.prefix("Amount");
    if let Some(var_1026) = &input.amount {
        scope_1025.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1026).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1027 = writer.prefix("BreachAction");
    if let Some(var_1028) = &input.breach_action {
        scope_1027.string(var_1028.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_pause_cluster(
    input: &crate::input::PauseClusterInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "PauseCluster", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_1029 = writer.prefix("ClusterIdentifier");
    if let Some(var_1030) = &input.cluster_identifier {
        scope_1029.string(var_1030);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_purchase_reserved_node_offering(
    input: &crate::input::PurchaseReservedNodeOfferingInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "PurchaseReservedNodeOffering", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_1031 = writer.prefix("ReservedNodeOfferingId");
    if let Some(var_1032) = &input.reserved_node_offering_id {
        scope_1031.string(var_1032);
    }
    #[allow(unused_mut)]
    let mut scope_1033 = writer.prefix("NodeCount");
    if let Some(var_1034) = &input.node_count {
        scope_1033.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1034).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reboot_cluster(
    input: &crate::input::RebootClusterInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "RebootCluster", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_1035 = writer.prefix("ClusterIdentifier");
    if let Some(var_1036) = &input.cluster_identifier {
        scope_1035.string(var_1036);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reject_data_share(
    input: &crate::input::RejectDataShareInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "RejectDataShare", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_1037 = writer.prefix("DataShareArn");
    if let Some(var_1038) = &input.data_share_arn {
        scope_1037.string(var_1038);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reset_cluster_parameter_group(
    input: &crate::input::ResetClusterParameterGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ResetClusterParameterGroup", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_1039 = writer.prefix("ParameterGroupName");
    if let Some(var_1040) = &input.parameter_group_name {
        scope_1039.string(var_1040);
    }
    #[allow(unused_mut)]
    let mut scope_1041 = writer.prefix("ResetAllParameters");
    if input.reset_all_parameters {
        scope_1041.boolean(input.reset_all_parameters);
    }
    #[allow(unused_mut)]
    let mut scope_1042 = writer.prefix("Parameters");
    if let Some(var_1043) = &input.parameters {
        let mut list_1045 = scope_1042.start_list(false, Some("Parameter"));
        for item_1044 in var_1043 {
            #[allow(unused_mut)]
            let mut entry_1046 = list_1045.entry();
            crate::query_ser::serialize_structure_crate_model_parameter(entry_1046, item_1044)?;
        }
        list_1045.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_resize_cluster(
    input: &crate::input::ResizeClusterInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ResizeCluster", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_1047 = writer.prefix("ClusterIdentifier");
    if let Some(var_1048) = &input.cluster_identifier {
        scope_1047.string(var_1048);
    }
    #[allow(unused_mut)]
    let mut scope_1049 = writer.prefix("ClusterType");
    if let Some(var_1050) = &input.cluster_type {
        scope_1049.string(var_1050);
    }
    #[allow(unused_mut)]
    let mut scope_1051 = writer.prefix("NodeType");
    if let Some(var_1052) = &input.node_type {
        scope_1051.string(var_1052);
    }
    #[allow(unused_mut)]
    let mut scope_1053 = writer.prefix("NumberOfNodes");
    if let Some(var_1054) = &input.number_of_nodes {
        scope_1053.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1054).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1055 = writer.prefix("Classic");
    if let Some(var_1056) = &input.classic {
        scope_1055.boolean(*var_1056);
    }
    #[allow(unused_mut)]
    let mut scope_1057 = writer.prefix("ReservedNodeId");
    if let Some(var_1058) = &input.reserved_node_id {
        scope_1057.string(var_1058);
    }
    #[allow(unused_mut)]
    let mut scope_1059 = writer.prefix("TargetReservedNodeOfferingId");
    if let Some(var_1060) = &input.target_reserved_node_offering_id {
        scope_1059.string(var_1060);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_restore_from_cluster_snapshot(
    input: &crate::input::RestoreFromClusterSnapshotInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RestoreFromClusterSnapshot", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_1061 = writer.prefix("ClusterIdentifier");
    if let Some(var_1062) = &input.cluster_identifier {
        scope_1061.string(var_1062);
    }
    #[allow(unused_mut)]
    let mut scope_1063 = writer.prefix("SnapshotIdentifier");
    if let Some(var_1064) = &input.snapshot_identifier {
        scope_1063.string(var_1064);
    }
    #[allow(unused_mut)]
    let mut scope_1065 = writer.prefix("SnapshotClusterIdentifier");
    if let Some(var_1066) = &input.snapshot_cluster_identifier {
        scope_1065.string(var_1066);
    }
    #[allow(unused_mut)]
    let mut scope_1067 = writer.prefix("Port");
    if let Some(var_1068) = &input.port {
        scope_1067.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1068).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1069 = writer.prefix("AvailabilityZone");
    if let Some(var_1070) = &input.availability_zone {
        scope_1069.string(var_1070);
    }
    #[allow(unused_mut)]
    let mut scope_1071 = writer.prefix("AllowVersionUpgrade");
    if let Some(var_1072) = &input.allow_version_upgrade {
        scope_1071.boolean(*var_1072);
    }
    #[allow(unused_mut)]
    let mut scope_1073 = writer.prefix("ClusterSubnetGroupName");
    if let Some(var_1074) = &input.cluster_subnet_group_name {
        scope_1073.string(var_1074);
    }
    #[allow(unused_mut)]
    let mut scope_1075 = writer.prefix("PubliclyAccessible");
    if let Some(var_1076) = &input.publicly_accessible {
        scope_1075.boolean(*var_1076);
    }
    #[allow(unused_mut)]
    let mut scope_1077 = writer.prefix("OwnerAccount");
    if let Some(var_1078) = &input.owner_account {
        scope_1077.string(var_1078);
    }
    #[allow(unused_mut)]
    let mut scope_1079 = writer.prefix("HsmClientCertificateIdentifier");
    if let Some(var_1080) = &input.hsm_client_certificate_identifier {
        scope_1079.string(var_1080);
    }
    #[allow(unused_mut)]
    let mut scope_1081 = writer.prefix("HsmConfigurationIdentifier");
    if let Some(var_1082) = &input.hsm_configuration_identifier {
        scope_1081.string(var_1082);
    }
    #[allow(unused_mut)]
    let mut scope_1083 = writer.prefix("ElasticIp");
    if let Some(var_1084) = &input.elastic_ip {
        scope_1083.string(var_1084);
    }
    #[allow(unused_mut)]
    let mut scope_1085 = writer.prefix("ClusterParameterGroupName");
    if let Some(var_1086) = &input.cluster_parameter_group_name {
        scope_1085.string(var_1086);
    }
    #[allow(unused_mut)]
    let mut scope_1087 = writer.prefix("ClusterSecurityGroups");
    if let Some(var_1088) = &input.cluster_security_groups {
        let mut list_1090 = scope_1087.start_list(false, Some("ClusterSecurityGroupName"));
        for item_1089 in var_1088 {
            #[allow(unused_mut)]
            let mut entry_1091 = list_1090.entry();
            entry_1091.string(item_1089);
        }
        list_1090.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1092 = writer.prefix("VpcSecurityGroupIds");
    if let Some(var_1093) = &input.vpc_security_group_ids {
        let mut list_1095 = scope_1092.start_list(false, Some("VpcSecurityGroupId"));
        for item_1094 in var_1093 {
            #[allow(unused_mut)]
            let mut entry_1096 = list_1095.entry();
            entry_1096.string(item_1094);
        }
        list_1095.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1097 = writer.prefix("PreferredMaintenanceWindow");
    if let Some(var_1098) = &input.preferred_maintenance_window {
        scope_1097.string(var_1098);
    }
    #[allow(unused_mut)]
    let mut scope_1099 = writer.prefix("AutomatedSnapshotRetentionPeriod");
    if let Some(var_1100) = &input.automated_snapshot_retention_period {
        scope_1099.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1100).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1101 = writer.prefix("ManualSnapshotRetentionPeriod");
    if let Some(var_1102) = &input.manual_snapshot_retention_period {
        scope_1101.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1102).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1103 = writer.prefix("KmsKeyId");
    if let Some(var_1104) = &input.kms_key_id {
        scope_1103.string(var_1104);
    }
    #[allow(unused_mut)]
    let mut scope_1105 = writer.prefix("NodeType");
    if let Some(var_1106) = &input.node_type {
        scope_1105.string(var_1106);
    }
    #[allow(unused_mut)]
    let mut scope_1107 = writer.prefix("EnhancedVpcRouting");
    if let Some(var_1108) = &input.enhanced_vpc_routing {
        scope_1107.boolean(*var_1108);
    }
    #[allow(unused_mut)]
    let mut scope_1109 = writer.prefix("AdditionalInfo");
    if let Some(var_1110) = &input.additional_info {
        scope_1109.string(var_1110);
    }
    #[allow(unused_mut)]
    let mut scope_1111 = writer.prefix("IamRoles");
    if let Some(var_1112) = &input.iam_roles {
        let mut list_1114 = scope_1111.start_list(false, Some("IamRoleArn"));
        for item_1113 in var_1112 {
            #[allow(unused_mut)]
            let mut entry_1115 = list_1114.entry();
            entry_1115.string(item_1113);
        }
        list_1114.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1116 = writer.prefix("MaintenanceTrackName");
    if let Some(var_1117) = &input.maintenance_track_name {
        scope_1116.string(var_1117);
    }
    #[allow(unused_mut)]
    let mut scope_1118 = writer.prefix("SnapshotScheduleIdentifier");
    if let Some(var_1119) = &input.snapshot_schedule_identifier {
        scope_1118.string(var_1119);
    }
    #[allow(unused_mut)]
    let mut scope_1120 = writer.prefix("NumberOfNodes");
    if let Some(var_1121) = &input.number_of_nodes {
        scope_1120.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1121).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1122 = writer.prefix("AvailabilityZoneRelocation");
    if let Some(var_1123) = &input.availability_zone_relocation {
        scope_1122.boolean(*var_1123);
    }
    #[allow(unused_mut)]
    let mut scope_1124 = writer.prefix("AquaConfigurationStatus");
    if let Some(var_1125) = &input.aqua_configuration_status {
        scope_1124.string(var_1125.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1126 = writer.prefix("DefaultIamRoleArn");
    if let Some(var_1127) = &input.default_iam_role_arn {
        scope_1126.string(var_1127);
    }
    #[allow(unused_mut)]
    let mut scope_1128 = writer.prefix("ReservedNodeId");
    if let Some(var_1129) = &input.reserved_node_id {
        scope_1128.string(var_1129);
    }
    #[allow(unused_mut)]
    let mut scope_1130 = writer.prefix("TargetReservedNodeOfferingId");
    if let Some(var_1131) = &input.target_reserved_node_offering_id {
        scope_1130.string(var_1131);
    }
    #[allow(unused_mut)]
    let mut scope_1132 = writer.prefix("Encrypted");
    if let Some(var_1133) = &input.encrypted {
        scope_1132.boolean(*var_1133);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_restore_table_from_cluster_snapshot(
    input: &crate::input::RestoreTableFromClusterSnapshotInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "RestoreTableFromClusterSnapshot",
        "2012-12-01",
    );
    #[allow(unused_mut)]
    let mut scope_1134 = writer.prefix("ClusterIdentifier");
    if let Some(var_1135) = &input.cluster_identifier {
        scope_1134.string(var_1135);
    }
    #[allow(unused_mut)]
    let mut scope_1136 = writer.prefix("SnapshotIdentifier");
    if let Some(var_1137) = &input.snapshot_identifier {
        scope_1136.string(var_1137);
    }
    #[allow(unused_mut)]
    let mut scope_1138 = writer.prefix("SourceDatabaseName");
    if let Some(var_1139) = &input.source_database_name {
        scope_1138.string(var_1139);
    }
    #[allow(unused_mut)]
    let mut scope_1140 = writer.prefix("SourceSchemaName");
    if let Some(var_1141) = &input.source_schema_name {
        scope_1140.string(var_1141);
    }
    #[allow(unused_mut)]
    let mut scope_1142 = writer.prefix("SourceTableName");
    if let Some(var_1143) = &input.source_table_name {
        scope_1142.string(var_1143);
    }
    #[allow(unused_mut)]
    let mut scope_1144 = writer.prefix("TargetDatabaseName");
    if let Some(var_1145) = &input.target_database_name {
        scope_1144.string(var_1145);
    }
    #[allow(unused_mut)]
    let mut scope_1146 = writer.prefix("TargetSchemaName");
    if let Some(var_1147) = &input.target_schema_name {
        scope_1146.string(var_1147);
    }
    #[allow(unused_mut)]
    let mut scope_1148 = writer.prefix("NewTableName");
    if let Some(var_1149) = &input.new_table_name {
        scope_1148.string(var_1149);
    }
    #[allow(unused_mut)]
    let mut scope_1150 = writer.prefix("EnableCaseSensitiveIdentifier");
    if let Some(var_1151) = &input.enable_case_sensitive_identifier {
        scope_1150.boolean(*var_1151);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_resume_cluster(
    input: &crate::input::ResumeClusterInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ResumeCluster", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_1152 = writer.prefix("ClusterIdentifier");
    if let Some(var_1153) = &input.cluster_identifier {
        scope_1152.string(var_1153);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_revoke_cluster_security_group_ingress(
    input: &crate::input::RevokeClusterSecurityGroupIngressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "RevokeClusterSecurityGroupIngress",
        "2012-12-01",
    );
    #[allow(unused_mut)]
    let mut scope_1154 = writer.prefix("ClusterSecurityGroupName");
    if let Some(var_1155) = &input.cluster_security_group_name {
        scope_1154.string(var_1155);
    }
    #[allow(unused_mut)]
    let mut scope_1156 = writer.prefix("CIDRIP");
    if let Some(var_1157) = &input.cidrip {
        scope_1156.string(var_1157);
    }
    #[allow(unused_mut)]
    let mut scope_1158 = writer.prefix("EC2SecurityGroupName");
    if let Some(var_1159) = &input.ec2_security_group_name {
        scope_1158.string(var_1159);
    }
    #[allow(unused_mut)]
    let mut scope_1160 = writer.prefix("EC2SecurityGroupOwnerId");
    if let Some(var_1161) = &input.ec2_security_group_owner_id {
        scope_1160.string(var_1161);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_revoke_endpoint_access(
    input: &crate::input::RevokeEndpointAccessInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RevokeEndpointAccess", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_1162 = writer.prefix("ClusterIdentifier");
    if let Some(var_1163) = &input.cluster_identifier {
        scope_1162.string(var_1163);
    }
    #[allow(unused_mut)]
    let mut scope_1164 = writer.prefix("Account");
    if let Some(var_1165) = &input.account {
        scope_1164.string(var_1165);
    }
    #[allow(unused_mut)]
    let mut scope_1166 = writer.prefix("VpcIds");
    if let Some(var_1167) = &input.vpc_ids {
        let mut list_1169 = scope_1166.start_list(false, Some("VpcIdentifier"));
        for item_1168 in var_1167 {
            #[allow(unused_mut)]
            let mut entry_1170 = list_1169.entry();
            entry_1170.string(item_1168);
        }
        list_1169.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1171 = writer.prefix("Force");
    if input.force {
        scope_1171.boolean(input.force);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_revoke_snapshot_access(
    input: &crate::input::RevokeSnapshotAccessInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RevokeSnapshotAccess", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_1172 = writer.prefix("SnapshotIdentifier");
    if let Some(var_1173) = &input.snapshot_identifier {
        scope_1172.string(var_1173);
    }
    #[allow(unused_mut)]
    let mut scope_1174 = writer.prefix("SnapshotClusterIdentifier");
    if let Some(var_1175) = &input.snapshot_cluster_identifier {
        scope_1174.string(var_1175);
    }
    #[allow(unused_mut)]
    let mut scope_1176 = writer.prefix("AccountWithRestoreAccess");
    if let Some(var_1177) = &input.account_with_restore_access {
        scope_1176.string(var_1177);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_rotate_encryption_key(
    input: &crate::input::RotateEncryptionKeyInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RotateEncryptionKey", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_1178 = writer.prefix("ClusterIdentifier");
    if let Some(var_1179) = &input.cluster_identifier {
        scope_1178.string(var_1179);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_update_partner_status(
    input: &crate::input::UpdatePartnerStatusInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "UpdatePartnerStatus", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_1180 = writer.prefix("AccountId");
    if let Some(var_1181) = &input.account_id {
        scope_1180.string(var_1181);
    }
    #[allow(unused_mut)]
    let mut scope_1182 = writer.prefix("ClusterIdentifier");
    if let Some(var_1183) = &input.cluster_identifier {
        scope_1182.string(var_1183);
    }
    #[allow(unused_mut)]
    let mut scope_1184 = writer.prefix("DatabaseName");
    if let Some(var_1185) = &input.database_name {
        scope_1184.string(var_1185);
    }
    #[allow(unused_mut)]
    let mut scope_1186 = writer.prefix("PartnerName");
    if let Some(var_1187) = &input.partner_name {
        scope_1186.string(var_1187);
    }
    #[allow(unused_mut)]
    let mut scope_1188 = writer.prefix("Status");
    if let Some(var_1189) = &input.status {
        scope_1188.string(var_1189.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1190 = writer.prefix("StatusMessage");
    if let Some(var_1191) = &input.status_message {
        scope_1190.string(var_1191);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}
