// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_batch_create_partition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchCreatePartitionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1) = &input.catalog_id {
        object.key("CatalogId").string(var_1.as_str());
    }
    if let Some(var_2) = &input.database_name {
        object.key("DatabaseName").string(var_2.as_str());
    }
    if let Some(var_3) = &input.table_name {
        object.key("TableName").string(var_3.as_str());
    }
    if let Some(var_4) = &input.partition_input_list {
        let mut array_5 = object.key("PartitionInputList").start_array();
        for item_6 in var_4 {
            {
                let mut object_7 = array_5.value().start_object();
                crate::json_ser::serialize_structure_crate_model_partition_input(
                    &mut object_7,
                    item_6,
                )?;
                object_7.finish();
            }
        }
        array_5.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_delete_connection_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchDeleteConnectionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_8) = &input.catalog_id {
        object.key("CatalogId").string(var_8.as_str());
    }
    if let Some(var_9) = &input.connection_name_list {
        let mut array_10 = object.key("ConnectionNameList").start_array();
        for item_11 in var_9 {
            {
                array_10.value().string(item_11.as_str());
            }
        }
        array_10.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_delete_partition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchDeletePartitionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_12) = &input.catalog_id {
        object.key("CatalogId").string(var_12.as_str());
    }
    if let Some(var_13) = &input.database_name {
        object.key("DatabaseName").string(var_13.as_str());
    }
    if let Some(var_14) = &input.table_name {
        object.key("TableName").string(var_14.as_str());
    }
    if let Some(var_15) = &input.partitions_to_delete {
        let mut array_16 = object.key("PartitionsToDelete").start_array();
        for item_17 in var_15 {
            {
                let mut object_18 = array_16.value().start_object();
                crate::json_ser::serialize_structure_crate_model_partition_value_list(
                    &mut object_18,
                    item_17,
                )?;
                object_18.finish();
            }
        }
        array_16.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_delete_table_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchDeleteTableInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_19) = &input.catalog_id {
        object.key("CatalogId").string(var_19.as_str());
    }
    if let Some(var_20) = &input.database_name {
        object.key("DatabaseName").string(var_20.as_str());
    }
    if let Some(var_21) = &input.tables_to_delete {
        let mut array_22 = object.key("TablesToDelete").start_array();
        for item_23 in var_21 {
            {
                array_22.value().string(item_23.as_str());
            }
        }
        array_22.finish();
    }
    if let Some(var_24) = &input.transaction_id {
        object.key("TransactionId").string(var_24.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_delete_table_version_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchDeleteTableVersionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_25) = &input.catalog_id {
        object.key("CatalogId").string(var_25.as_str());
    }
    if let Some(var_26) = &input.database_name {
        object.key("DatabaseName").string(var_26.as_str());
    }
    if let Some(var_27) = &input.table_name {
        object.key("TableName").string(var_27.as_str());
    }
    if let Some(var_28) = &input.version_ids {
        let mut array_29 = object.key("VersionIds").start_array();
        for item_30 in var_28 {
            {
                array_29.value().string(item_30.as_str());
            }
        }
        array_29.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_get_blueprints_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchGetBlueprintsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_31) = &input.names {
        let mut array_32 = object.key("Names").start_array();
        for item_33 in var_31 {
            {
                array_32.value().string(item_33.as_str());
            }
        }
        array_32.finish();
    }
    if let Some(var_34) = &input.include_blueprint {
        object.key("IncludeBlueprint").boolean(*var_34);
    }
    if let Some(var_35) = &input.include_parameter_spec {
        object.key("IncludeParameterSpec").boolean(*var_35);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_get_crawlers_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchGetCrawlersInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_36) = &input.crawler_names {
        let mut array_37 = object.key("CrawlerNames").start_array();
        for item_38 in var_36 {
            {
                array_37.value().string(item_38.as_str());
            }
        }
        array_37.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_get_custom_entity_types_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchGetCustomEntityTypesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_39) = &input.names {
        let mut array_40 = object.key("Names").start_array();
        for item_41 in var_39 {
            {
                array_40.value().string(item_41.as_str());
            }
        }
        array_40.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_get_dev_endpoints_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchGetDevEndpointsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_42) = &input.dev_endpoint_names {
        let mut array_43 = object.key("DevEndpointNames").start_array();
        for item_44 in var_42 {
            {
                array_43.value().string(item_44.as_str());
            }
        }
        array_43.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_get_jobs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchGetJobsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_45) = &input.job_names {
        let mut array_46 = object.key("JobNames").start_array();
        for item_47 in var_45 {
            {
                array_46.value().string(item_47.as_str());
            }
        }
        array_46.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_get_partition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchGetPartitionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_48) = &input.catalog_id {
        object.key("CatalogId").string(var_48.as_str());
    }
    if let Some(var_49) = &input.database_name {
        object.key("DatabaseName").string(var_49.as_str());
    }
    if let Some(var_50) = &input.table_name {
        object.key("TableName").string(var_50.as_str());
    }
    if let Some(var_51) = &input.partitions_to_get {
        let mut array_52 = object.key("PartitionsToGet").start_array();
        for item_53 in var_51 {
            {
                let mut object_54 = array_52.value().start_object();
                crate::json_ser::serialize_structure_crate_model_partition_value_list(
                    &mut object_54,
                    item_53,
                )?;
                object_54.finish();
            }
        }
        array_52.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_get_triggers_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchGetTriggersInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_55) = &input.trigger_names {
        let mut array_56 = object.key("TriggerNames").start_array();
        for item_57 in var_55 {
            {
                array_56.value().string(item_57.as_str());
            }
        }
        array_56.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_get_workflows_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchGetWorkflowsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_58) = &input.names {
        let mut array_59 = object.key("Names").start_array();
        for item_60 in var_58 {
            {
                array_59.value().string(item_60.as_str());
            }
        }
        array_59.finish();
    }
    if let Some(var_61) = &input.include_graph {
        object.key("IncludeGraph").boolean(*var_61);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_stop_job_run_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchStopJobRunInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_62) = &input.job_name {
        object.key("JobName").string(var_62.as_str());
    }
    if let Some(var_63) = &input.job_run_ids {
        let mut array_64 = object.key("JobRunIds").start_array();
        for item_65 in var_63 {
            {
                array_64.value().string(item_65.as_str());
            }
        }
        array_64.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_update_partition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchUpdatePartitionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_66) = &input.catalog_id {
        object.key("CatalogId").string(var_66.as_str());
    }
    if let Some(var_67) = &input.database_name {
        object.key("DatabaseName").string(var_67.as_str());
    }
    if let Some(var_68) = &input.table_name {
        object.key("TableName").string(var_68.as_str());
    }
    if let Some(var_69) = &input.entries {
        let mut array_70 = object.key("Entries").start_array();
        for item_71 in var_69 {
            {
                let mut object_72 = array_70.value().start_object();
                crate::json_ser::serialize_structure_crate_model_batch_update_partition_request_entry(&mut object_72, item_71)?;
                object_72.finish();
            }
        }
        array_70.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_cancel_ml_task_run_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CancelMlTaskRunInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_73) = &input.transform_id {
        object.key("TransformId").string(var_73.as_str());
    }
    if let Some(var_74) = &input.task_run_id {
        object.key("TaskRunId").string(var_74.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_cancel_statement_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CancelStatementInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_75) = &input.session_id {
        object.key("SessionId").string(var_75.as_str());
    }
    {
        object.key("Id").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.id).into()),
        );
    }
    if let Some(var_76) = &input.request_origin {
        object.key("RequestOrigin").string(var_76.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_check_schema_version_validity_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CheckSchemaVersionValidityInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_77) = &input.data_format {
        object.key("DataFormat").string(var_77.as_str());
    }
    if let Some(var_78) = &input.schema_definition {
        object.key("SchemaDefinition").string(var_78.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_blueprint_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateBlueprintInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_79) = &input.name {
        object.key("Name").string(var_79.as_str());
    }
    if let Some(var_80) = &input.description {
        object.key("Description").string(var_80.as_str());
    }
    if let Some(var_81) = &input.blueprint_location {
        object.key("BlueprintLocation").string(var_81.as_str());
    }
    if let Some(var_82) = &input.tags {
        let mut object_83 = object.key("Tags").start_object();
        for (key_84, value_85) in var_82 {
            {
                object_83.key(key_84).string(value_85.as_str());
            }
        }
        object_83.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_classifier_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateClassifierInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_86) = &input.grok_classifier {
        let mut object_87 = object.key("GrokClassifier").start_object();
        crate::json_ser::serialize_structure_crate_model_create_grok_classifier_request(
            &mut object_87,
            var_86,
        )?;
        object_87.finish();
    }
    if let Some(var_88) = &input.xml_classifier {
        let mut object_89 = object.key("XMLClassifier").start_object();
        crate::json_ser::serialize_structure_crate_model_create_xml_classifier_request(
            &mut object_89,
            var_88,
        )?;
        object_89.finish();
    }
    if let Some(var_90) = &input.json_classifier {
        let mut object_91 = object.key("JsonClassifier").start_object();
        crate::json_ser::serialize_structure_crate_model_create_json_classifier_request(
            &mut object_91,
            var_90,
        )?;
        object_91.finish();
    }
    if let Some(var_92) = &input.csv_classifier {
        let mut object_93 = object.key("CsvClassifier").start_object();
        crate::json_ser::serialize_structure_crate_model_create_csv_classifier_request(
            &mut object_93,
            var_92,
        )?;
        object_93.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_connection_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateConnectionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_94) = &input.catalog_id {
        object.key("CatalogId").string(var_94.as_str());
    }
    if let Some(var_95) = &input.connection_input {
        let mut object_96 = object.key("ConnectionInput").start_object();
        crate::json_ser::serialize_structure_crate_model_connection_input(&mut object_96, var_95)?;
        object_96.finish();
    }
    if let Some(var_97) = &input.tags {
        let mut object_98 = object.key("Tags").start_object();
        for (key_99, value_100) in var_97 {
            {
                object_98.key(key_99).string(value_100.as_str());
            }
        }
        object_98.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_crawler_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateCrawlerInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_101) = &input.name {
        object.key("Name").string(var_101.as_str());
    }
    if let Some(var_102) = &input.role {
        object.key("Role").string(var_102.as_str());
    }
    if let Some(var_103) = &input.database_name {
        object.key("DatabaseName").string(var_103.as_str());
    }
    if let Some(var_104) = &input.description {
        object.key("Description").string(var_104.as_str());
    }
    if let Some(var_105) = &input.targets {
        let mut object_106 = object.key("Targets").start_object();
        crate::json_ser::serialize_structure_crate_model_crawler_targets(&mut object_106, var_105)?;
        object_106.finish();
    }
    if let Some(var_107) = &input.schedule {
        object.key("Schedule").string(var_107.as_str());
    }
    if let Some(var_108) = &input.classifiers {
        let mut array_109 = object.key("Classifiers").start_array();
        for item_110 in var_108 {
            {
                array_109.value().string(item_110.as_str());
            }
        }
        array_109.finish();
    }
    if let Some(var_111) = &input.table_prefix {
        object.key("TablePrefix").string(var_111.as_str());
    }
    if let Some(var_112) = &input.schema_change_policy {
        let mut object_113 = object.key("SchemaChangePolicy").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_change_policy(
            &mut object_113,
            var_112,
        )?;
        object_113.finish();
    }
    if let Some(var_114) = &input.recrawl_policy {
        let mut object_115 = object.key("RecrawlPolicy").start_object();
        crate::json_ser::serialize_structure_crate_model_recrawl_policy(&mut object_115, var_114)?;
        object_115.finish();
    }
    if let Some(var_116) = &input.lineage_configuration {
        let mut object_117 = object.key("LineageConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_lineage_configuration(
            &mut object_117,
            var_116,
        )?;
        object_117.finish();
    }
    if let Some(var_118) = &input.lake_formation_configuration {
        let mut object_119 = object.key("LakeFormationConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_lake_formation_configuration(
            &mut object_119,
            var_118,
        )?;
        object_119.finish();
    }
    if let Some(var_120) = &input.configuration {
        object.key("Configuration").string(var_120.as_str());
    }
    if let Some(var_121) = &input.crawler_security_configuration {
        object
            .key("CrawlerSecurityConfiguration")
            .string(var_121.as_str());
    }
    if let Some(var_122) = &input.tags {
        let mut object_123 = object.key("Tags").start_object();
        for (key_124, value_125) in var_122 {
            {
                object_123.key(key_124).string(value_125.as_str());
            }
        }
        object_123.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_custom_entity_type_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateCustomEntityTypeInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_126) = &input.name {
        object.key("Name").string(var_126.as_str());
    }
    if let Some(var_127) = &input.regex_string {
        object.key("RegexString").string(var_127.as_str());
    }
    if let Some(var_128) = &input.context_words {
        let mut array_129 = object.key("ContextWords").start_array();
        for item_130 in var_128 {
            {
                array_129.value().string(item_130.as_str());
            }
        }
        array_129.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_database_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDatabaseInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_131) = &input.catalog_id {
        object.key("CatalogId").string(var_131.as_str());
    }
    if let Some(var_132) = &input.database_input {
        let mut object_133 = object.key("DatabaseInput").start_object();
        crate::json_ser::serialize_structure_crate_model_database_input(&mut object_133, var_132)?;
        object_133.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_dev_endpoint_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDevEndpointInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_134) = &input.endpoint_name {
        object.key("EndpointName").string(var_134.as_str());
    }
    if let Some(var_135) = &input.role_arn {
        object.key("RoleArn").string(var_135.as_str());
    }
    if let Some(var_136) = &input.security_group_ids {
        let mut array_137 = object.key("SecurityGroupIds").start_array();
        for item_138 in var_136 {
            {
                array_137.value().string(item_138.as_str());
            }
        }
        array_137.finish();
    }
    if let Some(var_139) = &input.subnet_id {
        object.key("SubnetId").string(var_139.as_str());
    }
    if let Some(var_140) = &input.public_key {
        object.key("PublicKey").string(var_140.as_str());
    }
    if let Some(var_141) = &input.public_keys {
        let mut array_142 = object.key("PublicKeys").start_array();
        for item_143 in var_141 {
            {
                array_142.value().string(item_143.as_str());
            }
        }
        array_142.finish();
    }
    if input.number_of_nodes != 0 {
        object.key("NumberOfNodes").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.number_of_nodes).into()),
        );
    }
    if let Some(var_144) = &input.worker_type {
        object.key("WorkerType").string(var_144.as_str());
    }
    if let Some(var_145) = &input.glue_version {
        object.key("GlueVersion").string(var_145.as_str());
    }
    if let Some(var_146) = &input.number_of_workers {
        object.key("NumberOfWorkers").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_146).into()),
        );
    }
    if let Some(var_147) = &input.extra_python_libs_s3_path {
        object.key("ExtraPythonLibsS3Path").string(var_147.as_str());
    }
    if let Some(var_148) = &input.extra_jars_s3_path {
        object.key("ExtraJarsS3Path").string(var_148.as_str());
    }
    if let Some(var_149) = &input.security_configuration {
        object.key("SecurityConfiguration").string(var_149.as_str());
    }
    if let Some(var_150) = &input.tags {
        let mut object_151 = object.key("Tags").start_object();
        for (key_152, value_153) in var_150 {
            {
                object_151.key(key_152).string(value_153.as_str());
            }
        }
        object_151.finish();
    }
    if let Some(var_154) = &input.arguments {
        let mut object_155 = object.key("Arguments").start_object();
        for (key_156, value_157) in var_154 {
            {
                object_155.key(key_156).string(value_157.as_str());
            }
        }
        object_155.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_158) = &input.name {
        object.key("Name").string(var_158.as_str());
    }
    if let Some(var_159) = &input.description {
        object.key("Description").string(var_159.as_str());
    }
    if let Some(var_160) = &input.log_uri {
        object.key("LogUri").string(var_160.as_str());
    }
    if let Some(var_161) = &input.role {
        object.key("Role").string(var_161.as_str());
    }
    if let Some(var_162) = &input.execution_property {
        let mut object_163 = object.key("ExecutionProperty").start_object();
        crate::json_ser::serialize_structure_crate_model_execution_property(
            &mut object_163,
            var_162,
        )?;
        object_163.finish();
    }
    if let Some(var_164) = &input.command {
        let mut object_165 = object.key("Command").start_object();
        crate::json_ser::serialize_structure_crate_model_job_command(&mut object_165, var_164)?;
        object_165.finish();
    }
    if let Some(var_166) = &input.default_arguments {
        let mut object_167 = object.key("DefaultArguments").start_object();
        for (key_168, value_169) in var_166 {
            {
                object_167.key(key_168).string(value_169.as_str());
            }
        }
        object_167.finish();
    }
    if let Some(var_170) = &input.non_overridable_arguments {
        let mut object_171 = object.key("NonOverridableArguments").start_object();
        for (key_172, value_173) in var_170 {
            {
                object_171.key(key_172).string(value_173.as_str());
            }
        }
        object_171.finish();
    }
    if let Some(var_174) = &input.connections {
        let mut object_175 = object.key("Connections").start_object();
        crate::json_ser::serialize_structure_crate_model_connections_list(
            &mut object_175,
            var_174,
        )?;
        object_175.finish();
    }
    if input.max_retries != 0 {
        object.key("MaxRetries").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_retries).into()),
        );
    }
    if input.allocated_capacity != 0 {
        object.key("AllocatedCapacity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.allocated_capacity).into()),
        );
    }
    if let Some(var_176) = &input.timeout {
        object.key("Timeout").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_176).into()),
        );
    }
    if let Some(var_177) = &input.max_capacity {
        object.key("MaxCapacity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_177).into()),
        );
    }
    if let Some(var_178) = &input.security_configuration {
        object.key("SecurityConfiguration").string(var_178.as_str());
    }
    if let Some(var_179) = &input.tags {
        let mut object_180 = object.key("Tags").start_object();
        for (key_181, value_182) in var_179 {
            {
                object_180.key(key_181).string(value_182.as_str());
            }
        }
        object_180.finish();
    }
    if let Some(var_183) = &input.notification_property {
        let mut object_184 = object.key("NotificationProperty").start_object();
        crate::json_ser::serialize_structure_crate_model_notification_property(
            &mut object_184,
            var_183,
        )?;
        object_184.finish();
    }
    if let Some(var_185) = &input.glue_version {
        object.key("GlueVersion").string(var_185.as_str());
    }
    if let Some(var_186) = &input.number_of_workers {
        object.key("NumberOfWorkers").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_186).into()),
        );
    }
    if let Some(var_187) = &input.worker_type {
        object.key("WorkerType").string(var_187.as_str());
    }
    if let Some(var_188) = &input.code_gen_configuration_nodes {
        let mut object_189 = object.key("CodeGenConfigurationNodes").start_object();
        for (key_190, value_191) in var_188 {
            {
                let mut object_192 = object_189.key(key_190).start_object();
                crate::json_ser::serialize_structure_crate_model_code_gen_configuration_node(
                    &mut object_192,
                    value_191,
                )?;
                object_192.finish();
            }
        }
        object_189.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_ml_transform_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateMlTransformInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_193) = &input.name {
        object.key("Name").string(var_193.as_str());
    }
    if let Some(var_194) = &input.description {
        object.key("Description").string(var_194.as_str());
    }
    if let Some(var_195) = &input.input_record_tables {
        let mut array_196 = object.key("InputRecordTables").start_array();
        for item_197 in var_195 {
            {
                let mut object_198 = array_196.value().start_object();
                crate::json_ser::serialize_structure_crate_model_glue_table(
                    &mut object_198,
                    item_197,
                )?;
                object_198.finish();
            }
        }
        array_196.finish();
    }
    if let Some(var_199) = &input.parameters {
        let mut object_200 = object.key("Parameters").start_object();
        crate::json_ser::serialize_structure_crate_model_transform_parameters(
            &mut object_200,
            var_199,
        )?;
        object_200.finish();
    }
    if let Some(var_201) = &input.role {
        object.key("Role").string(var_201.as_str());
    }
    if let Some(var_202) = &input.glue_version {
        object.key("GlueVersion").string(var_202.as_str());
    }
    if let Some(var_203) = &input.max_capacity {
        object.key("MaxCapacity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_203).into()),
        );
    }
    if let Some(var_204) = &input.worker_type {
        object.key("WorkerType").string(var_204.as_str());
    }
    if let Some(var_205) = &input.number_of_workers {
        object.key("NumberOfWorkers").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_205).into()),
        );
    }
    if let Some(var_206) = &input.timeout {
        object.key("Timeout").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_206).into()),
        );
    }
    if let Some(var_207) = &input.max_retries {
        object.key("MaxRetries").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_207).into()),
        );
    }
    if let Some(var_208) = &input.tags {
        let mut object_209 = object.key("Tags").start_object();
        for (key_210, value_211) in var_208 {
            {
                object_209.key(key_210).string(value_211.as_str());
            }
        }
        object_209.finish();
    }
    if let Some(var_212) = &input.transform_encryption {
        let mut object_213 = object.key("TransformEncryption").start_object();
        crate::json_ser::serialize_structure_crate_model_transform_encryption(
            &mut object_213,
            var_212,
        )?;
        object_213.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_partition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreatePartitionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_214) = &input.catalog_id {
        object.key("CatalogId").string(var_214.as_str());
    }
    if let Some(var_215) = &input.database_name {
        object.key("DatabaseName").string(var_215.as_str());
    }
    if let Some(var_216) = &input.table_name {
        object.key("TableName").string(var_216.as_str());
    }
    if let Some(var_217) = &input.partition_input {
        let mut object_218 = object.key("PartitionInput").start_object();
        crate::json_ser::serialize_structure_crate_model_partition_input(&mut object_218, var_217)?;
        object_218.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_partition_index_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreatePartitionIndexInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_219) = &input.catalog_id {
        object.key("CatalogId").string(var_219.as_str());
    }
    if let Some(var_220) = &input.database_name {
        object.key("DatabaseName").string(var_220.as_str());
    }
    if let Some(var_221) = &input.table_name {
        object.key("TableName").string(var_221.as_str());
    }
    if let Some(var_222) = &input.partition_index {
        let mut object_223 = object.key("PartitionIndex").start_object();
        crate::json_ser::serialize_structure_crate_model_partition_index(&mut object_223, var_222)?;
        object_223.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_registry_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateRegistryInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_224) = &input.registry_name {
        object.key("RegistryName").string(var_224.as_str());
    }
    if let Some(var_225) = &input.description {
        object.key("Description").string(var_225.as_str());
    }
    if let Some(var_226) = &input.tags {
        let mut object_227 = object.key("Tags").start_object();
        for (key_228, value_229) in var_226 {
            {
                object_227.key(key_228).string(value_229.as_str());
            }
        }
        object_227.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_schema_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateSchemaInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_230) = &input.registry_id {
        let mut object_231 = object.key("RegistryId").start_object();
        crate::json_ser::serialize_structure_crate_model_registry_id(&mut object_231, var_230)?;
        object_231.finish();
    }
    if let Some(var_232) = &input.schema_name {
        object.key("SchemaName").string(var_232.as_str());
    }
    if let Some(var_233) = &input.data_format {
        object.key("DataFormat").string(var_233.as_str());
    }
    if let Some(var_234) = &input.compatibility {
        object.key("Compatibility").string(var_234.as_str());
    }
    if let Some(var_235) = &input.description {
        object.key("Description").string(var_235.as_str());
    }
    if let Some(var_236) = &input.tags {
        let mut object_237 = object.key("Tags").start_object();
        for (key_238, value_239) in var_236 {
            {
                object_237.key(key_238).string(value_239.as_str());
            }
        }
        object_237.finish();
    }
    if let Some(var_240) = &input.schema_definition {
        object.key("SchemaDefinition").string(var_240.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_script_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateScriptInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_241) = &input.dag_nodes {
        let mut array_242 = object.key("DagNodes").start_array();
        for item_243 in var_241 {
            {
                let mut object_244 = array_242.value().start_object();
                crate::json_ser::serialize_structure_crate_model_code_gen_node(
                    &mut object_244,
                    item_243,
                )?;
                object_244.finish();
            }
        }
        array_242.finish();
    }
    if let Some(var_245) = &input.dag_edges {
        let mut array_246 = object.key("DagEdges").start_array();
        for item_247 in var_245 {
            {
                let mut object_248 = array_246.value().start_object();
                crate::json_ser::serialize_structure_crate_model_code_gen_edge(
                    &mut object_248,
                    item_247,
                )?;
                object_248.finish();
            }
        }
        array_246.finish();
    }
    if let Some(var_249) = &input.language {
        object.key("Language").string(var_249.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_security_configuration_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateSecurityConfigurationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_250) = &input.name {
        object.key("Name").string(var_250.as_str());
    }
    if let Some(var_251) = &input.encryption_configuration {
        let mut object_252 = object.key("EncryptionConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_encryption_configuration(
            &mut object_252,
            var_251,
        )?;
        object_252.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_session_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateSessionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_253) = &input.id {
        object.key("Id").string(var_253.as_str());
    }
    if let Some(var_254) = &input.description {
        object.key("Description").string(var_254.as_str());
    }
    if let Some(var_255) = &input.role {
        object.key("Role").string(var_255.as_str());
    }
    if let Some(var_256) = &input.command {
        let mut object_257 = object.key("Command").start_object();
        crate::json_ser::serialize_structure_crate_model_session_command(&mut object_257, var_256)?;
        object_257.finish();
    }
    if let Some(var_258) = &input.timeout {
        object.key("Timeout").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_258).into()),
        );
    }
    if let Some(var_259) = &input.idle_timeout {
        object.key("IdleTimeout").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_259).into()),
        );
    }
    if let Some(var_260) = &input.default_arguments {
        let mut object_261 = object.key("DefaultArguments").start_object();
        for (key_262, value_263) in var_260 {
            {
                object_261.key(key_262).string(value_263.as_str());
            }
        }
        object_261.finish();
    }
    if let Some(var_264) = &input.connections {
        let mut object_265 = object.key("Connections").start_object();
        crate::json_ser::serialize_structure_crate_model_connections_list(
            &mut object_265,
            var_264,
        )?;
        object_265.finish();
    }
    if let Some(var_266) = &input.max_capacity {
        object.key("MaxCapacity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_266).into()),
        );
    }
    if let Some(var_267) = &input.number_of_workers {
        object.key("NumberOfWorkers").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_267).into()),
        );
    }
    if let Some(var_268) = &input.worker_type {
        object.key("WorkerType").string(var_268.as_str());
    }
    if let Some(var_269) = &input.security_configuration {
        object.key("SecurityConfiguration").string(var_269.as_str());
    }
    if let Some(var_270) = &input.glue_version {
        object.key("GlueVersion").string(var_270.as_str());
    }
    if let Some(var_271) = &input.tags {
        let mut object_272 = object.key("Tags").start_object();
        for (key_273, value_274) in var_271 {
            {
                object_272.key(key_273).string(value_274.as_str());
            }
        }
        object_272.finish();
    }
    if let Some(var_275) = &input.request_origin {
        object.key("RequestOrigin").string(var_275.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_table_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateTableInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_276) = &input.catalog_id {
        object.key("CatalogId").string(var_276.as_str());
    }
    if let Some(var_277) = &input.database_name {
        object.key("DatabaseName").string(var_277.as_str());
    }
    if let Some(var_278) = &input.table_input {
        let mut object_279 = object.key("TableInput").start_object();
        crate::json_ser::serialize_structure_crate_model_table_input(&mut object_279, var_278)?;
        object_279.finish();
    }
    if let Some(var_280) = &input.partition_indexes {
        let mut array_281 = object.key("PartitionIndexes").start_array();
        for item_282 in var_280 {
            {
                let mut object_283 = array_281.value().start_object();
                crate::json_ser::serialize_structure_crate_model_partition_index(
                    &mut object_283,
                    item_282,
                )?;
                object_283.finish();
            }
        }
        array_281.finish();
    }
    if let Some(var_284) = &input.transaction_id {
        object.key("TransactionId").string(var_284.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_trigger_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateTriggerInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_285) = &input.name {
        object.key("Name").string(var_285.as_str());
    }
    if let Some(var_286) = &input.workflow_name {
        object.key("WorkflowName").string(var_286.as_str());
    }
    if let Some(var_287) = &input.r#type {
        object.key("Type").string(var_287.as_str());
    }
    if let Some(var_288) = &input.schedule {
        object.key("Schedule").string(var_288.as_str());
    }
    if let Some(var_289) = &input.predicate {
        let mut object_290 = object.key("Predicate").start_object();
        crate::json_ser::serialize_structure_crate_model_predicate(&mut object_290, var_289)?;
        object_290.finish();
    }
    if let Some(var_291) = &input.actions {
        let mut array_292 = object.key("Actions").start_array();
        for item_293 in var_291 {
            {
                let mut object_294 = array_292.value().start_object();
                crate::json_ser::serialize_structure_crate_model_action(&mut object_294, item_293)?;
                object_294.finish();
            }
        }
        array_292.finish();
    }
    if let Some(var_295) = &input.description {
        object.key("Description").string(var_295.as_str());
    }
    if input.start_on_creation {
        object
            .key("StartOnCreation")
            .boolean(input.start_on_creation);
    }
    if let Some(var_296) = &input.tags {
        let mut object_297 = object.key("Tags").start_object();
        for (key_298, value_299) in var_296 {
            {
                object_297.key(key_298).string(value_299.as_str());
            }
        }
        object_297.finish();
    }
    if let Some(var_300) = &input.event_batching_condition {
        let mut object_301 = object.key("EventBatchingCondition").start_object();
        crate::json_ser::serialize_structure_crate_model_event_batching_condition(
            &mut object_301,
            var_300,
        )?;
        object_301.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_user_defined_function_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateUserDefinedFunctionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_302) = &input.catalog_id {
        object.key("CatalogId").string(var_302.as_str());
    }
    if let Some(var_303) = &input.database_name {
        object.key("DatabaseName").string(var_303.as_str());
    }
    if let Some(var_304) = &input.function_input {
        let mut object_305 = object.key("FunctionInput").start_object();
        crate::json_ser::serialize_structure_crate_model_user_defined_function_input(
            &mut object_305,
            var_304,
        )?;
        object_305.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_workflow_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateWorkflowInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_306) = &input.name {
        object.key("Name").string(var_306.as_str());
    }
    if let Some(var_307) = &input.description {
        object.key("Description").string(var_307.as_str());
    }
    if let Some(var_308) = &input.default_run_properties {
        let mut object_309 = object.key("DefaultRunProperties").start_object();
        for (key_310, value_311) in var_308 {
            {
                object_309.key(key_310).string(value_311.as_str());
            }
        }
        object_309.finish();
    }
    if let Some(var_312) = &input.tags {
        let mut object_313 = object.key("Tags").start_object();
        for (key_314, value_315) in var_312 {
            {
                object_313.key(key_314).string(value_315.as_str());
            }
        }
        object_313.finish();
    }
    if let Some(var_316) = &input.max_concurrent_runs {
        object.key("MaxConcurrentRuns").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_316).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_blueprint_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteBlueprintInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_317) = &input.name {
        object.key("Name").string(var_317.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_classifier_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteClassifierInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_318) = &input.name {
        object.key("Name").string(var_318.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_column_statistics_for_partition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteColumnStatisticsForPartitionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_319) = &input.catalog_id {
        object.key("CatalogId").string(var_319.as_str());
    }
    if let Some(var_320) = &input.database_name {
        object.key("DatabaseName").string(var_320.as_str());
    }
    if let Some(var_321) = &input.table_name {
        object.key("TableName").string(var_321.as_str());
    }
    if let Some(var_322) = &input.partition_values {
        let mut array_323 = object.key("PartitionValues").start_array();
        for item_324 in var_322 {
            {
                array_323.value().string(item_324.as_str());
            }
        }
        array_323.finish();
    }
    if let Some(var_325) = &input.column_name {
        object.key("ColumnName").string(var_325.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_column_statistics_for_table_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteColumnStatisticsForTableInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_326) = &input.catalog_id {
        object.key("CatalogId").string(var_326.as_str());
    }
    if let Some(var_327) = &input.database_name {
        object.key("DatabaseName").string(var_327.as_str());
    }
    if let Some(var_328) = &input.table_name {
        object.key("TableName").string(var_328.as_str());
    }
    if let Some(var_329) = &input.column_name {
        object.key("ColumnName").string(var_329.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_connection_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteConnectionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_330) = &input.catalog_id {
        object.key("CatalogId").string(var_330.as_str());
    }
    if let Some(var_331) = &input.connection_name {
        object.key("ConnectionName").string(var_331.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_crawler_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteCrawlerInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_332) = &input.name {
        object.key("Name").string(var_332.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_custom_entity_type_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteCustomEntityTypeInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_333) = &input.name {
        object.key("Name").string(var_333.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_database_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteDatabaseInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_334) = &input.catalog_id {
        object.key("CatalogId").string(var_334.as_str());
    }
    if let Some(var_335) = &input.name {
        object.key("Name").string(var_335.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_dev_endpoint_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteDevEndpointInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_336) = &input.endpoint_name {
        object.key("EndpointName").string(var_336.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_337) = &input.job_name {
        object.key("JobName").string(var_337.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_ml_transform_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteMlTransformInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_338) = &input.transform_id {
        object.key("TransformId").string(var_338.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_partition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeletePartitionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_339) = &input.catalog_id {
        object.key("CatalogId").string(var_339.as_str());
    }
    if let Some(var_340) = &input.database_name {
        object.key("DatabaseName").string(var_340.as_str());
    }
    if let Some(var_341) = &input.table_name {
        object.key("TableName").string(var_341.as_str());
    }
    if let Some(var_342) = &input.partition_values {
        let mut array_343 = object.key("PartitionValues").start_array();
        for item_344 in var_342 {
            {
                array_343.value().string(item_344.as_str());
            }
        }
        array_343.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_partition_index_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeletePartitionIndexInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_345) = &input.catalog_id {
        object.key("CatalogId").string(var_345.as_str());
    }
    if let Some(var_346) = &input.database_name {
        object.key("DatabaseName").string(var_346.as_str());
    }
    if let Some(var_347) = &input.table_name {
        object.key("TableName").string(var_347.as_str());
    }
    if let Some(var_348) = &input.index_name {
        object.key("IndexName").string(var_348.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_registry_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteRegistryInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_349) = &input.registry_id {
        let mut object_350 = object.key("RegistryId").start_object();
        crate::json_ser::serialize_structure_crate_model_registry_id(&mut object_350, var_349)?;
        object_350.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_resource_policy_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteResourcePolicyInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_351) = &input.policy_hash_condition {
        object.key("PolicyHashCondition").string(var_351.as_str());
    }
    if let Some(var_352) = &input.resource_arn {
        object.key("ResourceArn").string(var_352.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_schema_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteSchemaInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_353) = &input.schema_id {
        let mut object_354 = object.key("SchemaId").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_id(&mut object_354, var_353)?;
        object_354.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_schema_versions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteSchemaVersionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_355) = &input.schema_id {
        let mut object_356 = object.key("SchemaId").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_id(&mut object_356, var_355)?;
        object_356.finish();
    }
    if let Some(var_357) = &input.versions {
        object.key("Versions").string(var_357.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_security_configuration_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteSecurityConfigurationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_358) = &input.name {
        object.key("Name").string(var_358.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_session_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteSessionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_359) = &input.id {
        object.key("Id").string(var_359.as_str());
    }
    if let Some(var_360) = &input.request_origin {
        object.key("RequestOrigin").string(var_360.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_table_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteTableInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_361) = &input.catalog_id {
        object.key("CatalogId").string(var_361.as_str());
    }
    if let Some(var_362) = &input.database_name {
        object.key("DatabaseName").string(var_362.as_str());
    }
    if let Some(var_363) = &input.name {
        object.key("Name").string(var_363.as_str());
    }
    if let Some(var_364) = &input.transaction_id {
        object.key("TransactionId").string(var_364.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_table_version_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteTableVersionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_365) = &input.catalog_id {
        object.key("CatalogId").string(var_365.as_str());
    }
    if let Some(var_366) = &input.database_name {
        object.key("DatabaseName").string(var_366.as_str());
    }
    if let Some(var_367) = &input.table_name {
        object.key("TableName").string(var_367.as_str());
    }
    if let Some(var_368) = &input.version_id {
        object.key("VersionId").string(var_368.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_trigger_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteTriggerInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_369) = &input.name {
        object.key("Name").string(var_369.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_user_defined_function_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteUserDefinedFunctionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_370) = &input.catalog_id {
        object.key("CatalogId").string(var_370.as_str());
    }
    if let Some(var_371) = &input.database_name {
        object.key("DatabaseName").string(var_371.as_str());
    }
    if let Some(var_372) = &input.function_name {
        object.key("FunctionName").string(var_372.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_workflow_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteWorkflowInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_373) = &input.name {
        object.key("Name").string(var_373.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_blueprint_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetBlueprintInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_374) = &input.name {
        object.key("Name").string(var_374.as_str());
    }
    if let Some(var_375) = &input.include_blueprint {
        object.key("IncludeBlueprint").boolean(*var_375);
    }
    if let Some(var_376) = &input.include_parameter_spec {
        object.key("IncludeParameterSpec").boolean(*var_376);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_blueprint_run_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetBlueprintRunInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_377) = &input.blueprint_name {
        object.key("BlueprintName").string(var_377.as_str());
    }
    if let Some(var_378) = &input.run_id {
        object.key("RunId").string(var_378.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_blueprint_runs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetBlueprintRunsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_379) = &input.blueprint_name {
        object.key("BlueprintName").string(var_379.as_str());
    }
    if let Some(var_380) = &input.next_token {
        object.key("NextToken").string(var_380.as_str());
    }
    if let Some(var_381) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_381).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_catalog_import_status_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetCatalogImportStatusInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_382) = &input.catalog_id {
        object.key("CatalogId").string(var_382.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_classifier_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetClassifierInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_383) = &input.name {
        object.key("Name").string(var_383.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_classifiers_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetClassifiersInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_384) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_384).into()),
        );
    }
    if let Some(var_385) = &input.next_token {
        object.key("NextToken").string(var_385.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_column_statistics_for_partition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetColumnStatisticsForPartitionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_386) = &input.catalog_id {
        object.key("CatalogId").string(var_386.as_str());
    }
    if let Some(var_387) = &input.database_name {
        object.key("DatabaseName").string(var_387.as_str());
    }
    if let Some(var_388) = &input.table_name {
        object.key("TableName").string(var_388.as_str());
    }
    if let Some(var_389) = &input.partition_values {
        let mut array_390 = object.key("PartitionValues").start_array();
        for item_391 in var_389 {
            {
                array_390.value().string(item_391.as_str());
            }
        }
        array_390.finish();
    }
    if let Some(var_392) = &input.column_names {
        let mut array_393 = object.key("ColumnNames").start_array();
        for item_394 in var_392 {
            {
                array_393.value().string(item_394.as_str());
            }
        }
        array_393.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_column_statistics_for_table_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetColumnStatisticsForTableInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_395) = &input.catalog_id {
        object.key("CatalogId").string(var_395.as_str());
    }
    if let Some(var_396) = &input.database_name {
        object.key("DatabaseName").string(var_396.as_str());
    }
    if let Some(var_397) = &input.table_name {
        object.key("TableName").string(var_397.as_str());
    }
    if let Some(var_398) = &input.column_names {
        let mut array_399 = object.key("ColumnNames").start_array();
        for item_400 in var_398 {
            {
                array_399.value().string(item_400.as_str());
            }
        }
        array_399.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_connection_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetConnectionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_401) = &input.catalog_id {
        object.key("CatalogId").string(var_401.as_str());
    }
    if let Some(var_402) = &input.name {
        object.key("Name").string(var_402.as_str());
    }
    if input.hide_password {
        object.key("HidePassword").boolean(input.hide_password);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_connections_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetConnectionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_403) = &input.catalog_id {
        object.key("CatalogId").string(var_403.as_str());
    }
    if let Some(var_404) = &input.filter {
        let mut object_405 = object.key("Filter").start_object();
        crate::json_ser::serialize_structure_crate_model_get_connections_filter(
            &mut object_405,
            var_404,
        )?;
        object_405.finish();
    }
    if input.hide_password {
        object.key("HidePassword").boolean(input.hide_password);
    }
    if let Some(var_406) = &input.next_token {
        object.key("NextToken").string(var_406.as_str());
    }
    if let Some(var_407) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_407).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_crawler_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetCrawlerInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_408) = &input.name {
        object.key("Name").string(var_408.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_crawler_metrics_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetCrawlerMetricsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_409) = &input.crawler_name_list {
        let mut array_410 = object.key("CrawlerNameList").start_array();
        for item_411 in var_409 {
            {
                array_410.value().string(item_411.as_str());
            }
        }
        array_410.finish();
    }
    if let Some(var_412) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_412).into()),
        );
    }
    if let Some(var_413) = &input.next_token {
        object.key("NextToken").string(var_413.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_crawlers_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetCrawlersInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_414) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_414).into()),
        );
    }
    if let Some(var_415) = &input.next_token {
        object.key("NextToken").string(var_415.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_custom_entity_type_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetCustomEntityTypeInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_416) = &input.name {
        object.key("Name").string(var_416.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_database_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetDatabaseInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_417) = &input.catalog_id {
        object.key("CatalogId").string(var_417.as_str());
    }
    if let Some(var_418) = &input.name {
        object.key("Name").string(var_418.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_databases_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetDatabasesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_419) = &input.catalog_id {
        object.key("CatalogId").string(var_419.as_str());
    }
    if let Some(var_420) = &input.next_token {
        object.key("NextToken").string(var_420.as_str());
    }
    if let Some(var_421) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_421).into()),
        );
    }
    if let Some(var_422) = &input.resource_share_type {
        object.key("ResourceShareType").string(var_422.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_data_catalog_encryption_settings_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetDataCatalogEncryptionSettingsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_423) = &input.catalog_id {
        object.key("CatalogId").string(var_423.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_dataflow_graph_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetDataflowGraphInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_424) = &input.python_script {
        object.key("PythonScript").string(var_424.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_dev_endpoint_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetDevEndpointInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_425) = &input.endpoint_name {
        object.key("EndpointName").string(var_425.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_dev_endpoints_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetDevEndpointsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_426) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_426).into()),
        );
    }
    if let Some(var_427) = &input.next_token {
        object.key("NextToken").string(var_427.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_428) = &input.job_name {
        object.key("JobName").string(var_428.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_job_bookmark_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetJobBookmarkInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_429) = &input.job_name {
        object.key("JobName").string(var_429.as_str());
    }
    if let Some(var_430) = &input.run_id {
        object.key("RunId").string(var_430.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_job_run_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetJobRunInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_431) = &input.job_name {
        object.key("JobName").string(var_431.as_str());
    }
    if let Some(var_432) = &input.run_id {
        object.key("RunId").string(var_432.as_str());
    }
    if input.predecessors_included {
        object
            .key("PredecessorsIncluded")
            .boolean(input.predecessors_included);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_job_runs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetJobRunsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_433) = &input.job_name {
        object.key("JobName").string(var_433.as_str());
    }
    if let Some(var_434) = &input.next_token {
        object.key("NextToken").string(var_434.as_str());
    }
    if let Some(var_435) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_435).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_jobs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetJobsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_436) = &input.next_token {
        object.key("NextToken").string(var_436.as_str());
    }
    if let Some(var_437) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_437).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_mapping_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetMappingInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_438) = &input.source {
        let mut object_439 = object.key("Source").start_object();
        crate::json_ser::serialize_structure_crate_model_catalog_entry(&mut object_439, var_438)?;
        object_439.finish();
    }
    if let Some(var_440) = &input.sinks {
        let mut array_441 = object.key("Sinks").start_array();
        for item_442 in var_440 {
            {
                let mut object_443 = array_441.value().start_object();
                crate::json_ser::serialize_structure_crate_model_catalog_entry(
                    &mut object_443,
                    item_442,
                )?;
                object_443.finish();
            }
        }
        array_441.finish();
    }
    if let Some(var_444) = &input.location {
        let mut object_445 = object.key("Location").start_object();
        crate::json_ser::serialize_structure_crate_model_location(&mut object_445, var_444)?;
        object_445.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_ml_task_run_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetMlTaskRunInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_446) = &input.transform_id {
        object.key("TransformId").string(var_446.as_str());
    }
    if let Some(var_447) = &input.task_run_id {
        object.key("TaskRunId").string(var_447.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_ml_task_runs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetMlTaskRunsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_448) = &input.transform_id {
        object.key("TransformId").string(var_448.as_str());
    }
    if let Some(var_449) = &input.next_token {
        object.key("NextToken").string(var_449.as_str());
    }
    if let Some(var_450) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_450).into()),
        );
    }
    if let Some(var_451) = &input.filter {
        let mut object_452 = object.key("Filter").start_object();
        crate::json_ser::serialize_structure_crate_model_task_run_filter_criteria(
            &mut object_452,
            var_451,
        )?;
        object_452.finish();
    }
    if let Some(var_453) = &input.sort {
        let mut object_454 = object.key("Sort").start_object();
        crate::json_ser::serialize_structure_crate_model_task_run_sort_criteria(
            &mut object_454,
            var_453,
        )?;
        object_454.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_ml_transform_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetMlTransformInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_455) = &input.transform_id {
        object.key("TransformId").string(var_455.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_ml_transforms_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetMlTransformsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_456) = &input.next_token {
        object.key("NextToken").string(var_456.as_str());
    }
    if let Some(var_457) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_457).into()),
        );
    }
    if let Some(var_458) = &input.filter {
        let mut object_459 = object.key("Filter").start_object();
        crate::json_ser::serialize_structure_crate_model_transform_filter_criteria(
            &mut object_459,
            var_458,
        )?;
        object_459.finish();
    }
    if let Some(var_460) = &input.sort {
        let mut object_461 = object.key("Sort").start_object();
        crate::json_ser::serialize_structure_crate_model_transform_sort_criteria(
            &mut object_461,
            var_460,
        )?;
        object_461.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_partition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetPartitionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_462) = &input.catalog_id {
        object.key("CatalogId").string(var_462.as_str());
    }
    if let Some(var_463) = &input.database_name {
        object.key("DatabaseName").string(var_463.as_str());
    }
    if let Some(var_464) = &input.table_name {
        object.key("TableName").string(var_464.as_str());
    }
    if let Some(var_465) = &input.partition_values {
        let mut array_466 = object.key("PartitionValues").start_array();
        for item_467 in var_465 {
            {
                array_466.value().string(item_467.as_str());
            }
        }
        array_466.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_partition_indexes_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetPartitionIndexesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_468) = &input.catalog_id {
        object.key("CatalogId").string(var_468.as_str());
    }
    if let Some(var_469) = &input.database_name {
        object.key("DatabaseName").string(var_469.as_str());
    }
    if let Some(var_470) = &input.table_name {
        object.key("TableName").string(var_470.as_str());
    }
    if let Some(var_471) = &input.next_token {
        object.key("NextToken").string(var_471.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_partitions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetPartitionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_472) = &input.catalog_id {
        object.key("CatalogId").string(var_472.as_str());
    }
    if let Some(var_473) = &input.database_name {
        object.key("DatabaseName").string(var_473.as_str());
    }
    if let Some(var_474) = &input.table_name {
        object.key("TableName").string(var_474.as_str());
    }
    if let Some(var_475) = &input.expression {
        object.key("Expression").string(var_475.as_str());
    }
    if let Some(var_476) = &input.next_token {
        object.key("NextToken").string(var_476.as_str());
    }
    if let Some(var_477) = &input.segment {
        let mut object_478 = object.key("Segment").start_object();
        crate::json_ser::serialize_structure_crate_model_segment(&mut object_478, var_477)?;
        object_478.finish();
    }
    if let Some(var_479) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_479).into()),
        );
    }
    if let Some(var_480) = &input.exclude_column_schema {
        object.key("ExcludeColumnSchema").boolean(*var_480);
    }
    if let Some(var_481) = &input.transaction_id {
        object.key("TransactionId").string(var_481.as_str());
    }
    if let Some(var_482) = &input.query_as_of_time {
        object
            .key("QueryAsOfTime")
            .date_time(var_482, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_plan_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetPlanInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_483) = &input.mapping {
        let mut array_484 = object.key("Mapping").start_array();
        for item_485 in var_483 {
            {
                let mut object_486 = array_484.value().start_object();
                crate::json_ser::serialize_structure_crate_model_mapping_entry(
                    &mut object_486,
                    item_485,
                )?;
                object_486.finish();
            }
        }
        array_484.finish();
    }
    if let Some(var_487) = &input.source {
        let mut object_488 = object.key("Source").start_object();
        crate::json_ser::serialize_structure_crate_model_catalog_entry(&mut object_488, var_487)?;
        object_488.finish();
    }
    if let Some(var_489) = &input.sinks {
        let mut array_490 = object.key("Sinks").start_array();
        for item_491 in var_489 {
            {
                let mut object_492 = array_490.value().start_object();
                crate::json_ser::serialize_structure_crate_model_catalog_entry(
                    &mut object_492,
                    item_491,
                )?;
                object_492.finish();
            }
        }
        array_490.finish();
    }
    if let Some(var_493) = &input.location {
        let mut object_494 = object.key("Location").start_object();
        crate::json_ser::serialize_structure_crate_model_location(&mut object_494, var_493)?;
        object_494.finish();
    }
    if let Some(var_495) = &input.language {
        object.key("Language").string(var_495.as_str());
    }
    if let Some(var_496) = &input.additional_plan_options_map {
        let mut object_497 = object.key("AdditionalPlanOptionsMap").start_object();
        for (key_498, value_499) in var_496 {
            {
                object_497.key(key_498).string(value_499.as_str());
            }
        }
        object_497.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_registry_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetRegistryInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_500) = &input.registry_id {
        let mut object_501 = object.key("RegistryId").start_object();
        crate::json_ser::serialize_structure_crate_model_registry_id(&mut object_501, var_500)?;
        object_501.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_resource_policies_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetResourcePoliciesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_502) = &input.next_token {
        object.key("NextToken").string(var_502.as_str());
    }
    if let Some(var_503) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_503).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_resource_policy_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetResourcePolicyInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_504) = &input.resource_arn {
        object.key("ResourceArn").string(var_504.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_schema_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetSchemaInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_505) = &input.schema_id {
        let mut object_506 = object.key("SchemaId").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_id(&mut object_506, var_505)?;
        object_506.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_schema_by_definition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetSchemaByDefinitionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_507) = &input.schema_id {
        let mut object_508 = object.key("SchemaId").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_id(&mut object_508, var_507)?;
        object_508.finish();
    }
    if let Some(var_509) = &input.schema_definition {
        object.key("SchemaDefinition").string(var_509.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_schema_version_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetSchemaVersionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_510) = &input.schema_id {
        let mut object_511 = object.key("SchemaId").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_id(&mut object_511, var_510)?;
        object_511.finish();
    }
    if let Some(var_512) = &input.schema_version_id {
        object.key("SchemaVersionId").string(var_512.as_str());
    }
    if let Some(var_513) = &input.schema_version_number {
        let mut object_514 = object.key("SchemaVersionNumber").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_version_number(
            &mut object_514,
            var_513,
        )?;
        object_514.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_schema_versions_diff_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetSchemaVersionsDiffInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_515) = &input.schema_id {
        let mut object_516 = object.key("SchemaId").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_id(&mut object_516, var_515)?;
        object_516.finish();
    }
    if let Some(var_517) = &input.first_schema_version_number {
        let mut object_518 = object.key("FirstSchemaVersionNumber").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_version_number(
            &mut object_518,
            var_517,
        )?;
        object_518.finish();
    }
    if let Some(var_519) = &input.second_schema_version_number {
        let mut object_520 = object.key("SecondSchemaVersionNumber").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_version_number(
            &mut object_520,
            var_519,
        )?;
        object_520.finish();
    }
    if let Some(var_521) = &input.schema_diff_type {
        object.key("SchemaDiffType").string(var_521.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_security_configuration_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetSecurityConfigurationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_522) = &input.name {
        object.key("Name").string(var_522.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_security_configurations_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetSecurityConfigurationsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_523) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_523).into()),
        );
    }
    if let Some(var_524) = &input.next_token {
        object.key("NextToken").string(var_524.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_session_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetSessionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_525) = &input.id {
        object.key("Id").string(var_525.as_str());
    }
    if let Some(var_526) = &input.request_origin {
        object.key("RequestOrigin").string(var_526.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_statement_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetStatementInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_527) = &input.session_id {
        object.key("SessionId").string(var_527.as_str());
    }
    {
        object.key("Id").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.id).into()),
        );
    }
    if let Some(var_528) = &input.request_origin {
        object.key("RequestOrigin").string(var_528.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_table_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetTableInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_529) = &input.catalog_id {
        object.key("CatalogId").string(var_529.as_str());
    }
    if let Some(var_530) = &input.database_name {
        object.key("DatabaseName").string(var_530.as_str());
    }
    if let Some(var_531) = &input.name {
        object.key("Name").string(var_531.as_str());
    }
    if let Some(var_532) = &input.transaction_id {
        object.key("TransactionId").string(var_532.as_str());
    }
    if let Some(var_533) = &input.query_as_of_time {
        object
            .key("QueryAsOfTime")
            .date_time(var_533, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_tables_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetTablesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_534) = &input.catalog_id {
        object.key("CatalogId").string(var_534.as_str());
    }
    if let Some(var_535) = &input.database_name {
        object.key("DatabaseName").string(var_535.as_str());
    }
    if let Some(var_536) = &input.expression {
        object.key("Expression").string(var_536.as_str());
    }
    if let Some(var_537) = &input.next_token {
        object.key("NextToken").string(var_537.as_str());
    }
    if let Some(var_538) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_538).into()),
        );
    }
    if let Some(var_539) = &input.transaction_id {
        object.key("TransactionId").string(var_539.as_str());
    }
    if let Some(var_540) = &input.query_as_of_time {
        object
            .key("QueryAsOfTime")
            .date_time(var_540, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_table_version_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetTableVersionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_541) = &input.catalog_id {
        object.key("CatalogId").string(var_541.as_str());
    }
    if let Some(var_542) = &input.database_name {
        object.key("DatabaseName").string(var_542.as_str());
    }
    if let Some(var_543) = &input.table_name {
        object.key("TableName").string(var_543.as_str());
    }
    if let Some(var_544) = &input.version_id {
        object.key("VersionId").string(var_544.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_table_versions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetTableVersionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_545) = &input.catalog_id {
        object.key("CatalogId").string(var_545.as_str());
    }
    if let Some(var_546) = &input.database_name {
        object.key("DatabaseName").string(var_546.as_str());
    }
    if let Some(var_547) = &input.table_name {
        object.key("TableName").string(var_547.as_str());
    }
    if let Some(var_548) = &input.next_token {
        object.key("NextToken").string(var_548.as_str());
    }
    if let Some(var_549) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_549).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_tags_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetTagsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_550) = &input.resource_arn {
        object.key("ResourceArn").string(var_550.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_trigger_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetTriggerInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_551) = &input.name {
        object.key("Name").string(var_551.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_triggers_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetTriggersInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_552) = &input.next_token {
        object.key("NextToken").string(var_552.as_str());
    }
    if let Some(var_553) = &input.dependent_job_name {
        object.key("DependentJobName").string(var_553.as_str());
    }
    if let Some(var_554) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_554).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_unfiltered_partition_metadata_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetUnfilteredPartitionMetadataInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_555) = &input.catalog_id {
        object.key("CatalogId").string(var_555.as_str());
    }
    if let Some(var_556) = &input.database_name {
        object.key("DatabaseName").string(var_556.as_str());
    }
    if let Some(var_557) = &input.table_name {
        object.key("TableName").string(var_557.as_str());
    }
    if let Some(var_558) = &input.partition_values {
        let mut array_559 = object.key("PartitionValues").start_array();
        for item_560 in var_558 {
            {
                array_559.value().string(item_560.as_str());
            }
        }
        array_559.finish();
    }
    if let Some(var_561) = &input.audit_context {
        let mut object_562 = object.key("AuditContext").start_object();
        crate::json_ser::serialize_structure_crate_model_audit_context(&mut object_562, var_561)?;
        object_562.finish();
    }
    if let Some(var_563) = &input.supported_permission_types {
        let mut array_564 = object.key("SupportedPermissionTypes").start_array();
        for item_565 in var_563 {
            {
                array_564.value().string(item_565.as_str());
            }
        }
        array_564.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_unfiltered_partitions_metadata_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetUnfilteredPartitionsMetadataInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_566) = &input.catalog_id {
        object.key("CatalogId").string(var_566.as_str());
    }
    if let Some(var_567) = &input.database_name {
        object.key("DatabaseName").string(var_567.as_str());
    }
    if let Some(var_568) = &input.table_name {
        object.key("TableName").string(var_568.as_str());
    }
    if let Some(var_569) = &input.expression {
        object.key("Expression").string(var_569.as_str());
    }
    if let Some(var_570) = &input.audit_context {
        let mut object_571 = object.key("AuditContext").start_object();
        crate::json_ser::serialize_structure_crate_model_audit_context(&mut object_571, var_570)?;
        object_571.finish();
    }
    if let Some(var_572) = &input.supported_permission_types {
        let mut array_573 = object.key("SupportedPermissionTypes").start_array();
        for item_574 in var_572 {
            {
                array_573.value().string(item_574.as_str());
            }
        }
        array_573.finish();
    }
    if let Some(var_575) = &input.next_token {
        object.key("NextToken").string(var_575.as_str());
    }
    if let Some(var_576) = &input.segment {
        let mut object_577 = object.key("Segment").start_object();
        crate::json_ser::serialize_structure_crate_model_segment(&mut object_577, var_576)?;
        object_577.finish();
    }
    if let Some(var_578) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_578).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_unfiltered_table_metadata_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetUnfilteredTableMetadataInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_579) = &input.catalog_id {
        object.key("CatalogId").string(var_579.as_str());
    }
    if let Some(var_580) = &input.database_name {
        object.key("DatabaseName").string(var_580.as_str());
    }
    if let Some(var_581) = &input.name {
        object.key("Name").string(var_581.as_str());
    }
    if let Some(var_582) = &input.audit_context {
        let mut object_583 = object.key("AuditContext").start_object();
        crate::json_ser::serialize_structure_crate_model_audit_context(&mut object_583, var_582)?;
        object_583.finish();
    }
    if let Some(var_584) = &input.supported_permission_types {
        let mut array_585 = object.key("SupportedPermissionTypes").start_array();
        for item_586 in var_584 {
            {
                array_585.value().string(item_586.as_str());
            }
        }
        array_585.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_user_defined_function_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetUserDefinedFunctionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_587) = &input.catalog_id {
        object.key("CatalogId").string(var_587.as_str());
    }
    if let Some(var_588) = &input.database_name {
        object.key("DatabaseName").string(var_588.as_str());
    }
    if let Some(var_589) = &input.function_name {
        object.key("FunctionName").string(var_589.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_user_defined_functions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetUserDefinedFunctionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_590) = &input.catalog_id {
        object.key("CatalogId").string(var_590.as_str());
    }
    if let Some(var_591) = &input.database_name {
        object.key("DatabaseName").string(var_591.as_str());
    }
    if let Some(var_592) = &input.pattern {
        object.key("Pattern").string(var_592.as_str());
    }
    if let Some(var_593) = &input.next_token {
        object.key("NextToken").string(var_593.as_str());
    }
    if let Some(var_594) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_594).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_workflow_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetWorkflowInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_595) = &input.name {
        object.key("Name").string(var_595.as_str());
    }
    if let Some(var_596) = &input.include_graph {
        object.key("IncludeGraph").boolean(*var_596);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_workflow_run_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetWorkflowRunInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_597) = &input.name {
        object.key("Name").string(var_597.as_str());
    }
    if let Some(var_598) = &input.run_id {
        object.key("RunId").string(var_598.as_str());
    }
    if let Some(var_599) = &input.include_graph {
        object.key("IncludeGraph").boolean(*var_599);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_workflow_run_properties_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetWorkflowRunPropertiesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_600) = &input.name {
        object.key("Name").string(var_600.as_str());
    }
    if let Some(var_601) = &input.run_id {
        object.key("RunId").string(var_601.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_workflow_runs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetWorkflowRunsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_602) = &input.name {
        object.key("Name").string(var_602.as_str());
    }
    if let Some(var_603) = &input.include_graph {
        object.key("IncludeGraph").boolean(*var_603);
    }
    if let Some(var_604) = &input.next_token {
        object.key("NextToken").string(var_604.as_str());
    }
    if let Some(var_605) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_605).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_import_catalog_to_glue_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ImportCatalogToGlueInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_606) = &input.catalog_id {
        object.key("CatalogId").string(var_606.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_blueprints_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListBlueprintsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_607) = &input.next_token {
        object.key("NextToken").string(var_607.as_str());
    }
    if let Some(var_608) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_608).into()),
        );
    }
    if let Some(var_609) = &input.tags {
        let mut object_610 = object.key("Tags").start_object();
        for (key_611, value_612) in var_609 {
            {
                object_610.key(key_611).string(value_612.as_str());
            }
        }
        object_610.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_crawlers_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListCrawlersInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_613) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_613).into()),
        );
    }
    if let Some(var_614) = &input.next_token {
        object.key("NextToken").string(var_614.as_str());
    }
    if let Some(var_615) = &input.tags {
        let mut object_616 = object.key("Tags").start_object();
        for (key_617, value_618) in var_615 {
            {
                object_616.key(key_617).string(value_618.as_str());
            }
        }
        object_616.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_custom_entity_types_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListCustomEntityTypesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_619) = &input.next_token {
        object.key("NextToken").string(var_619.as_str());
    }
    if let Some(var_620) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_620).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_dev_endpoints_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListDevEndpointsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_621) = &input.next_token {
        object.key("NextToken").string(var_621.as_str());
    }
    if let Some(var_622) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_622).into()),
        );
    }
    if let Some(var_623) = &input.tags {
        let mut object_624 = object.key("Tags").start_object();
        for (key_625, value_626) in var_623 {
            {
                object_624.key(key_625).string(value_626.as_str());
            }
        }
        object_624.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_jobs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListJobsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_627) = &input.next_token {
        object.key("NextToken").string(var_627.as_str());
    }
    if let Some(var_628) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_628).into()),
        );
    }
    if let Some(var_629) = &input.tags {
        let mut object_630 = object.key("Tags").start_object();
        for (key_631, value_632) in var_629 {
            {
                object_630.key(key_631).string(value_632.as_str());
            }
        }
        object_630.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_ml_transforms_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListMlTransformsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_633) = &input.next_token {
        object.key("NextToken").string(var_633.as_str());
    }
    if let Some(var_634) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_634).into()),
        );
    }
    if let Some(var_635) = &input.filter {
        let mut object_636 = object.key("Filter").start_object();
        crate::json_ser::serialize_structure_crate_model_transform_filter_criteria(
            &mut object_636,
            var_635,
        )?;
        object_636.finish();
    }
    if let Some(var_637) = &input.sort {
        let mut object_638 = object.key("Sort").start_object();
        crate::json_ser::serialize_structure_crate_model_transform_sort_criteria(
            &mut object_638,
            var_637,
        )?;
        object_638.finish();
    }
    if let Some(var_639) = &input.tags {
        let mut object_640 = object.key("Tags").start_object();
        for (key_641, value_642) in var_639 {
            {
                object_640.key(key_641).string(value_642.as_str());
            }
        }
        object_640.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_registries_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListRegistriesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_643) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_643).into()),
        );
    }
    if let Some(var_644) = &input.next_token {
        object.key("NextToken").string(var_644.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_schemas_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListSchemasInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_645) = &input.registry_id {
        let mut object_646 = object.key("RegistryId").start_object();
        crate::json_ser::serialize_structure_crate_model_registry_id(&mut object_646, var_645)?;
        object_646.finish();
    }
    if let Some(var_647) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_647).into()),
        );
    }
    if let Some(var_648) = &input.next_token {
        object.key("NextToken").string(var_648.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_schema_versions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListSchemaVersionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_649) = &input.schema_id {
        let mut object_650 = object.key("SchemaId").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_id(&mut object_650, var_649)?;
        object_650.finish();
    }
    if let Some(var_651) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_651).into()),
        );
    }
    if let Some(var_652) = &input.next_token {
        object.key("NextToken").string(var_652.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_sessions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListSessionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_653) = &input.next_token {
        object.key("NextToken").string(var_653.as_str());
    }
    if let Some(var_654) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_654).into()),
        );
    }
    if let Some(var_655) = &input.tags {
        let mut object_656 = object.key("Tags").start_object();
        for (key_657, value_658) in var_655 {
            {
                object_656.key(key_657).string(value_658.as_str());
            }
        }
        object_656.finish();
    }
    if let Some(var_659) = &input.request_origin {
        object.key("RequestOrigin").string(var_659.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_statements_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListStatementsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_660) = &input.session_id {
        object.key("SessionId").string(var_660.as_str());
    }
    if let Some(var_661) = &input.request_origin {
        object.key("RequestOrigin").string(var_661.as_str());
    }
    if let Some(var_662) = &input.next_token {
        object.key("NextToken").string(var_662.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_triggers_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTriggersInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_663) = &input.next_token {
        object.key("NextToken").string(var_663.as_str());
    }
    if let Some(var_664) = &input.dependent_job_name {
        object.key("DependentJobName").string(var_664.as_str());
    }
    if let Some(var_665) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_665).into()),
        );
    }
    if let Some(var_666) = &input.tags {
        let mut object_667 = object.key("Tags").start_object();
        for (key_668, value_669) in var_666 {
            {
                object_667.key(key_668).string(value_669.as_str());
            }
        }
        object_667.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_workflows_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListWorkflowsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_670) = &input.next_token {
        object.key("NextToken").string(var_670.as_str());
    }
    if let Some(var_671) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_671).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_data_catalog_encryption_settings_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutDataCatalogEncryptionSettingsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_672) = &input.catalog_id {
        object.key("CatalogId").string(var_672.as_str());
    }
    if let Some(var_673) = &input.data_catalog_encryption_settings {
        let mut object_674 = object.key("DataCatalogEncryptionSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_data_catalog_encryption_settings(
            &mut object_674,
            var_673,
        )?;
        object_674.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_resource_policy_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutResourcePolicyInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_675) = &input.policy_in_json {
        object.key("PolicyInJson").string(var_675.as_str());
    }
    if let Some(var_676) = &input.resource_arn {
        object.key("ResourceArn").string(var_676.as_str());
    }
    if let Some(var_677) = &input.policy_hash_condition {
        object.key("PolicyHashCondition").string(var_677.as_str());
    }
    if let Some(var_678) = &input.policy_exists_condition {
        object.key("PolicyExistsCondition").string(var_678.as_str());
    }
    if let Some(var_679) = &input.enable_hybrid {
        object.key("EnableHybrid").string(var_679.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_schema_version_metadata_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutSchemaVersionMetadataInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_680) = &input.schema_id {
        let mut object_681 = object.key("SchemaId").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_id(&mut object_681, var_680)?;
        object_681.finish();
    }
    if let Some(var_682) = &input.schema_version_number {
        let mut object_683 = object.key("SchemaVersionNumber").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_version_number(
            &mut object_683,
            var_682,
        )?;
        object_683.finish();
    }
    if let Some(var_684) = &input.schema_version_id {
        object.key("SchemaVersionId").string(var_684.as_str());
    }
    if let Some(var_685) = &input.metadata_key_value {
        let mut object_686 = object.key("MetadataKeyValue").start_object();
        crate::json_ser::serialize_structure_crate_model_metadata_key_value_pair(
            &mut object_686,
            var_685,
        )?;
        object_686.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_workflow_run_properties_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutWorkflowRunPropertiesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_687) = &input.name {
        object.key("Name").string(var_687.as_str());
    }
    if let Some(var_688) = &input.run_id {
        object.key("RunId").string(var_688.as_str());
    }
    if let Some(var_689) = &input.run_properties {
        let mut object_690 = object.key("RunProperties").start_object();
        for (key_691, value_692) in var_689 {
            {
                object_690.key(key_691).string(value_692.as_str());
            }
        }
        object_690.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_query_schema_version_metadata_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::QuerySchemaVersionMetadataInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_693) = &input.schema_id {
        let mut object_694 = object.key("SchemaId").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_id(&mut object_694, var_693)?;
        object_694.finish();
    }
    if let Some(var_695) = &input.schema_version_number {
        let mut object_696 = object.key("SchemaVersionNumber").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_version_number(
            &mut object_696,
            var_695,
        )?;
        object_696.finish();
    }
    if let Some(var_697) = &input.schema_version_id {
        object.key("SchemaVersionId").string(var_697.as_str());
    }
    if let Some(var_698) = &input.metadata_list {
        let mut array_699 = object.key("MetadataList").start_array();
        for item_700 in var_698 {
            {
                let mut object_701 = array_699.value().start_object();
                crate::json_ser::serialize_structure_crate_model_metadata_key_value_pair(
                    &mut object_701,
                    item_700,
                )?;
                object_701.finish();
            }
        }
        array_699.finish();
    }
    if input.max_results != 0 {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_results).into()),
        );
    }
    if let Some(var_702) = &input.next_token {
        object.key("NextToken").string(var_702.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_register_schema_version_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RegisterSchemaVersionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_703) = &input.schema_id {
        let mut object_704 = object.key("SchemaId").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_id(&mut object_704, var_703)?;
        object_704.finish();
    }
    if let Some(var_705) = &input.schema_definition {
        object.key("SchemaDefinition").string(var_705.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_remove_schema_version_metadata_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RemoveSchemaVersionMetadataInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_706) = &input.schema_id {
        let mut object_707 = object.key("SchemaId").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_id(&mut object_707, var_706)?;
        object_707.finish();
    }
    if let Some(var_708) = &input.schema_version_number {
        let mut object_709 = object.key("SchemaVersionNumber").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_version_number(
            &mut object_709,
            var_708,
        )?;
        object_709.finish();
    }
    if let Some(var_710) = &input.schema_version_id {
        object.key("SchemaVersionId").string(var_710.as_str());
    }
    if let Some(var_711) = &input.metadata_key_value {
        let mut object_712 = object.key("MetadataKeyValue").start_object();
        crate::json_ser::serialize_structure_crate_model_metadata_key_value_pair(
            &mut object_712,
            var_711,
        )?;
        object_712.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_reset_job_bookmark_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ResetJobBookmarkInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_713) = &input.job_name {
        object.key("JobName").string(var_713.as_str());
    }
    if let Some(var_714) = &input.run_id {
        object.key("RunId").string(var_714.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_resume_workflow_run_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ResumeWorkflowRunInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_715) = &input.name {
        object.key("Name").string(var_715.as_str());
    }
    if let Some(var_716) = &input.run_id {
        object.key("RunId").string(var_716.as_str());
    }
    if let Some(var_717) = &input.node_ids {
        let mut array_718 = object.key("NodeIds").start_array();
        for item_719 in var_717 {
            {
                array_718.value().string(item_719.as_str());
            }
        }
        array_718.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_run_statement_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RunStatementInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_720) = &input.session_id {
        object.key("SessionId").string(var_720.as_str());
    }
    if let Some(var_721) = &input.code {
        object.key("Code").string(var_721.as_str());
    }
    if let Some(var_722) = &input.request_origin {
        object.key("RequestOrigin").string(var_722.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_search_tables_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SearchTablesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_723) = &input.catalog_id {
        object.key("CatalogId").string(var_723.as_str());
    }
    if let Some(var_724) = &input.next_token {
        object.key("NextToken").string(var_724.as_str());
    }
    if let Some(var_725) = &input.filters {
        let mut array_726 = object.key("Filters").start_array();
        for item_727 in var_725 {
            {
                let mut object_728 = array_726.value().start_object();
                crate::json_ser::serialize_structure_crate_model_property_predicate(
                    &mut object_728,
                    item_727,
                )?;
                object_728.finish();
            }
        }
        array_726.finish();
    }
    if let Some(var_729) = &input.search_text {
        object.key("SearchText").string(var_729.as_str());
    }
    if let Some(var_730) = &input.sort_criteria {
        let mut array_731 = object.key("SortCriteria").start_array();
        for item_732 in var_730 {
            {
                let mut object_733 = array_731.value().start_object();
                crate::json_ser::serialize_structure_crate_model_sort_criterion(
                    &mut object_733,
                    item_732,
                )?;
                object_733.finish();
            }
        }
        array_731.finish();
    }
    if let Some(var_734) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_734).into()),
        );
    }
    if let Some(var_735) = &input.resource_share_type {
        object.key("ResourceShareType").string(var_735.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_blueprint_run_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartBlueprintRunInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_736) = &input.blueprint_name {
        object.key("BlueprintName").string(var_736.as_str());
    }
    if let Some(var_737) = &input.parameters {
        object.key("Parameters").string(var_737.as_str());
    }
    if let Some(var_738) = &input.role_arn {
        object.key("RoleArn").string(var_738.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_crawler_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartCrawlerInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_739) = &input.name {
        object.key("Name").string(var_739.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_crawler_schedule_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartCrawlerScheduleInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_740) = &input.crawler_name {
        object.key("CrawlerName").string(var_740.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_export_labels_task_run_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartExportLabelsTaskRunInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_741) = &input.transform_id {
        object.key("TransformId").string(var_741.as_str());
    }
    if let Some(var_742) = &input.output_s3_path {
        object.key("OutputS3Path").string(var_742.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_import_labels_task_run_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartImportLabelsTaskRunInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_743) = &input.transform_id {
        object.key("TransformId").string(var_743.as_str());
    }
    if let Some(var_744) = &input.input_s3_path {
        object.key("InputS3Path").string(var_744.as_str());
    }
    if input.replace_all_labels {
        object
            .key("ReplaceAllLabels")
            .boolean(input.replace_all_labels);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_job_run_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartJobRunInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_745) = &input.job_name {
        object.key("JobName").string(var_745.as_str());
    }
    if let Some(var_746) = &input.job_run_id {
        object.key("JobRunId").string(var_746.as_str());
    }
    if let Some(var_747) = &input.arguments {
        let mut object_748 = object.key("Arguments").start_object();
        for (key_749, value_750) in var_747 {
            {
                object_748.key(key_749).string(value_750.as_str());
            }
        }
        object_748.finish();
    }
    if input.allocated_capacity != 0 {
        object.key("AllocatedCapacity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.allocated_capacity).into()),
        );
    }
    if let Some(var_751) = &input.timeout {
        object.key("Timeout").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_751).into()),
        );
    }
    if let Some(var_752) = &input.max_capacity {
        object.key("MaxCapacity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_752).into()),
        );
    }
    if let Some(var_753) = &input.security_configuration {
        object.key("SecurityConfiguration").string(var_753.as_str());
    }
    if let Some(var_754) = &input.notification_property {
        let mut object_755 = object.key("NotificationProperty").start_object();
        crate::json_ser::serialize_structure_crate_model_notification_property(
            &mut object_755,
            var_754,
        )?;
        object_755.finish();
    }
    if let Some(var_756) = &input.worker_type {
        object.key("WorkerType").string(var_756.as_str());
    }
    if let Some(var_757) = &input.number_of_workers {
        object.key("NumberOfWorkers").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_757).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_ml_evaluation_task_run_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartMlEvaluationTaskRunInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_758) = &input.transform_id {
        object.key("TransformId").string(var_758.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_ml_labeling_set_generation_task_run_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartMlLabelingSetGenerationTaskRunInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_759) = &input.transform_id {
        object.key("TransformId").string(var_759.as_str());
    }
    if let Some(var_760) = &input.output_s3_path {
        object.key("OutputS3Path").string(var_760.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_trigger_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartTriggerInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_761) = &input.name {
        object.key("Name").string(var_761.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_workflow_run_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartWorkflowRunInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_762) = &input.name {
        object.key("Name").string(var_762.as_str());
    }
    if let Some(var_763) = &input.run_properties {
        let mut object_764 = object.key("RunProperties").start_object();
        for (key_765, value_766) in var_763 {
            {
                object_764.key(key_765).string(value_766.as_str());
            }
        }
        object_764.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_crawler_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopCrawlerInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_767) = &input.name {
        object.key("Name").string(var_767.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_crawler_schedule_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopCrawlerScheduleInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_768) = &input.crawler_name {
        object.key("CrawlerName").string(var_768.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_session_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopSessionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_769) = &input.id {
        object.key("Id").string(var_769.as_str());
    }
    if let Some(var_770) = &input.request_origin {
        object.key("RequestOrigin").string(var_770.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_trigger_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopTriggerInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_771) = &input.name {
        object.key("Name").string(var_771.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_workflow_run_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopWorkflowRunInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_772) = &input.name {
        object.key("Name").string(var_772.as_str());
    }
    if let Some(var_773) = &input.run_id {
        object.key("RunId").string(var_773.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_tag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_774) = &input.resource_arn {
        object.key("ResourceArn").string(var_774.as_str());
    }
    if let Some(var_775) = &input.tags_to_add {
        let mut object_776 = object.key("TagsToAdd").start_object();
        for (key_777, value_778) in var_775 {
            {
                object_776.key(key_777).string(value_778.as_str());
            }
        }
        object_776.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_untag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UntagResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_779) = &input.resource_arn {
        object.key("ResourceArn").string(var_779.as_str());
    }
    if let Some(var_780) = &input.tags_to_remove {
        let mut array_781 = object.key("TagsToRemove").start_array();
        for item_782 in var_780 {
            {
                array_781.value().string(item_782.as_str());
            }
        }
        array_781.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_blueprint_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateBlueprintInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_783) = &input.name {
        object.key("Name").string(var_783.as_str());
    }
    if let Some(var_784) = &input.description {
        object.key("Description").string(var_784.as_str());
    }
    if let Some(var_785) = &input.blueprint_location {
        object.key("BlueprintLocation").string(var_785.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_classifier_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateClassifierInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_786) = &input.grok_classifier {
        let mut object_787 = object.key("GrokClassifier").start_object();
        crate::json_ser::serialize_structure_crate_model_update_grok_classifier_request(
            &mut object_787,
            var_786,
        )?;
        object_787.finish();
    }
    if let Some(var_788) = &input.xml_classifier {
        let mut object_789 = object.key("XMLClassifier").start_object();
        crate::json_ser::serialize_structure_crate_model_update_xml_classifier_request(
            &mut object_789,
            var_788,
        )?;
        object_789.finish();
    }
    if let Some(var_790) = &input.json_classifier {
        let mut object_791 = object.key("JsonClassifier").start_object();
        crate::json_ser::serialize_structure_crate_model_update_json_classifier_request(
            &mut object_791,
            var_790,
        )?;
        object_791.finish();
    }
    if let Some(var_792) = &input.csv_classifier {
        let mut object_793 = object.key("CsvClassifier").start_object();
        crate::json_ser::serialize_structure_crate_model_update_csv_classifier_request(
            &mut object_793,
            var_792,
        )?;
        object_793.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_column_statistics_for_partition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateColumnStatisticsForPartitionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_794) = &input.catalog_id {
        object.key("CatalogId").string(var_794.as_str());
    }
    if let Some(var_795) = &input.database_name {
        object.key("DatabaseName").string(var_795.as_str());
    }
    if let Some(var_796) = &input.table_name {
        object.key("TableName").string(var_796.as_str());
    }
    if let Some(var_797) = &input.partition_values {
        let mut array_798 = object.key("PartitionValues").start_array();
        for item_799 in var_797 {
            {
                array_798.value().string(item_799.as_str());
            }
        }
        array_798.finish();
    }
    if let Some(var_800) = &input.column_statistics_list {
        let mut array_801 = object.key("ColumnStatisticsList").start_array();
        for item_802 in var_800 {
            {
                let mut object_803 = array_801.value().start_object();
                crate::json_ser::serialize_structure_crate_model_column_statistics(
                    &mut object_803,
                    item_802,
                )?;
                object_803.finish();
            }
        }
        array_801.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_column_statistics_for_table_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateColumnStatisticsForTableInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_804) = &input.catalog_id {
        object.key("CatalogId").string(var_804.as_str());
    }
    if let Some(var_805) = &input.database_name {
        object.key("DatabaseName").string(var_805.as_str());
    }
    if let Some(var_806) = &input.table_name {
        object.key("TableName").string(var_806.as_str());
    }
    if let Some(var_807) = &input.column_statistics_list {
        let mut array_808 = object.key("ColumnStatisticsList").start_array();
        for item_809 in var_807 {
            {
                let mut object_810 = array_808.value().start_object();
                crate::json_ser::serialize_structure_crate_model_column_statistics(
                    &mut object_810,
                    item_809,
                )?;
                object_810.finish();
            }
        }
        array_808.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_connection_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateConnectionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_811) = &input.catalog_id {
        object.key("CatalogId").string(var_811.as_str());
    }
    if let Some(var_812) = &input.name {
        object.key("Name").string(var_812.as_str());
    }
    if let Some(var_813) = &input.connection_input {
        let mut object_814 = object.key("ConnectionInput").start_object();
        crate::json_ser::serialize_structure_crate_model_connection_input(
            &mut object_814,
            var_813,
        )?;
        object_814.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_crawler_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateCrawlerInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_815) = &input.name {
        object.key("Name").string(var_815.as_str());
    }
    if let Some(var_816) = &input.role {
        object.key("Role").string(var_816.as_str());
    }
    if let Some(var_817) = &input.database_name {
        object.key("DatabaseName").string(var_817.as_str());
    }
    if let Some(var_818) = &input.description {
        object.key("Description").string(var_818.as_str());
    }
    if let Some(var_819) = &input.targets {
        let mut object_820 = object.key("Targets").start_object();
        crate::json_ser::serialize_structure_crate_model_crawler_targets(&mut object_820, var_819)?;
        object_820.finish();
    }
    if let Some(var_821) = &input.schedule {
        object.key("Schedule").string(var_821.as_str());
    }
    if let Some(var_822) = &input.classifiers {
        let mut array_823 = object.key("Classifiers").start_array();
        for item_824 in var_822 {
            {
                array_823.value().string(item_824.as_str());
            }
        }
        array_823.finish();
    }
    if let Some(var_825) = &input.table_prefix {
        object.key("TablePrefix").string(var_825.as_str());
    }
    if let Some(var_826) = &input.schema_change_policy {
        let mut object_827 = object.key("SchemaChangePolicy").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_change_policy(
            &mut object_827,
            var_826,
        )?;
        object_827.finish();
    }
    if let Some(var_828) = &input.recrawl_policy {
        let mut object_829 = object.key("RecrawlPolicy").start_object();
        crate::json_ser::serialize_structure_crate_model_recrawl_policy(&mut object_829, var_828)?;
        object_829.finish();
    }
    if let Some(var_830) = &input.lineage_configuration {
        let mut object_831 = object.key("LineageConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_lineage_configuration(
            &mut object_831,
            var_830,
        )?;
        object_831.finish();
    }
    if let Some(var_832) = &input.lake_formation_configuration {
        let mut object_833 = object.key("LakeFormationConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_lake_formation_configuration(
            &mut object_833,
            var_832,
        )?;
        object_833.finish();
    }
    if let Some(var_834) = &input.configuration {
        object.key("Configuration").string(var_834.as_str());
    }
    if let Some(var_835) = &input.crawler_security_configuration {
        object
            .key("CrawlerSecurityConfiguration")
            .string(var_835.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_crawler_schedule_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateCrawlerScheduleInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_836) = &input.crawler_name {
        object.key("CrawlerName").string(var_836.as_str());
    }
    if let Some(var_837) = &input.schedule {
        object.key("Schedule").string(var_837.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_database_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDatabaseInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_838) = &input.catalog_id {
        object.key("CatalogId").string(var_838.as_str());
    }
    if let Some(var_839) = &input.name {
        object.key("Name").string(var_839.as_str());
    }
    if let Some(var_840) = &input.database_input {
        let mut object_841 = object.key("DatabaseInput").start_object();
        crate::json_ser::serialize_structure_crate_model_database_input(&mut object_841, var_840)?;
        object_841.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_dev_endpoint_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDevEndpointInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_842) = &input.endpoint_name {
        object.key("EndpointName").string(var_842.as_str());
    }
    if let Some(var_843) = &input.public_key {
        object.key("PublicKey").string(var_843.as_str());
    }
    if let Some(var_844) = &input.add_public_keys {
        let mut array_845 = object.key("AddPublicKeys").start_array();
        for item_846 in var_844 {
            {
                array_845.value().string(item_846.as_str());
            }
        }
        array_845.finish();
    }
    if let Some(var_847) = &input.delete_public_keys {
        let mut array_848 = object.key("DeletePublicKeys").start_array();
        for item_849 in var_847 {
            {
                array_848.value().string(item_849.as_str());
            }
        }
        array_848.finish();
    }
    if let Some(var_850) = &input.custom_libraries {
        let mut object_851 = object.key("CustomLibraries").start_object();
        crate::json_ser::serialize_structure_crate_model_dev_endpoint_custom_libraries(
            &mut object_851,
            var_850,
        )?;
        object_851.finish();
    }
    if input.update_etl_libraries {
        object
            .key("UpdateEtlLibraries")
            .boolean(input.update_etl_libraries);
    }
    if let Some(var_852) = &input.delete_arguments {
        let mut array_853 = object.key("DeleteArguments").start_array();
        for item_854 in var_852 {
            {
                array_853.value().string(item_854.as_str());
            }
        }
        array_853.finish();
    }
    if let Some(var_855) = &input.add_arguments {
        let mut object_856 = object.key("AddArguments").start_object();
        for (key_857, value_858) in var_855 {
            {
                object_856.key(key_857).string(value_858.as_str());
            }
        }
        object_856.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_859) = &input.job_name {
        object.key("JobName").string(var_859.as_str());
    }
    if let Some(var_860) = &input.job_update {
        let mut object_861 = object.key("JobUpdate").start_object();
        crate::json_ser::serialize_structure_crate_model_job_update(&mut object_861, var_860)?;
        object_861.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_ml_transform_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateMlTransformInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_862) = &input.transform_id {
        object.key("TransformId").string(var_862.as_str());
    }
    if let Some(var_863) = &input.name {
        object.key("Name").string(var_863.as_str());
    }
    if let Some(var_864) = &input.description {
        object.key("Description").string(var_864.as_str());
    }
    if let Some(var_865) = &input.parameters {
        let mut object_866 = object.key("Parameters").start_object();
        crate::json_ser::serialize_structure_crate_model_transform_parameters(
            &mut object_866,
            var_865,
        )?;
        object_866.finish();
    }
    if let Some(var_867) = &input.role {
        object.key("Role").string(var_867.as_str());
    }
    if let Some(var_868) = &input.glue_version {
        object.key("GlueVersion").string(var_868.as_str());
    }
    if let Some(var_869) = &input.max_capacity {
        object.key("MaxCapacity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_869).into()),
        );
    }
    if let Some(var_870) = &input.worker_type {
        object.key("WorkerType").string(var_870.as_str());
    }
    if let Some(var_871) = &input.number_of_workers {
        object.key("NumberOfWorkers").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_871).into()),
        );
    }
    if let Some(var_872) = &input.timeout {
        object.key("Timeout").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_872).into()),
        );
    }
    if let Some(var_873) = &input.max_retries {
        object.key("MaxRetries").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_873).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_partition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdatePartitionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_874) = &input.catalog_id {
        object.key("CatalogId").string(var_874.as_str());
    }
    if let Some(var_875) = &input.database_name {
        object.key("DatabaseName").string(var_875.as_str());
    }
    if let Some(var_876) = &input.table_name {
        object.key("TableName").string(var_876.as_str());
    }
    if let Some(var_877) = &input.partition_value_list {
        let mut array_878 = object.key("PartitionValueList").start_array();
        for item_879 in var_877 {
            {
                array_878.value().string(item_879.as_str());
            }
        }
        array_878.finish();
    }
    if let Some(var_880) = &input.partition_input {
        let mut object_881 = object.key("PartitionInput").start_object();
        crate::json_ser::serialize_structure_crate_model_partition_input(&mut object_881, var_880)?;
        object_881.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_registry_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateRegistryInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_882) = &input.registry_id {
        let mut object_883 = object.key("RegistryId").start_object();
        crate::json_ser::serialize_structure_crate_model_registry_id(&mut object_883, var_882)?;
        object_883.finish();
    }
    if let Some(var_884) = &input.description {
        object.key("Description").string(var_884.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_schema_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateSchemaInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_885) = &input.schema_id {
        let mut object_886 = object.key("SchemaId").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_id(&mut object_886, var_885)?;
        object_886.finish();
    }
    if let Some(var_887) = &input.schema_version_number {
        let mut object_888 = object.key("SchemaVersionNumber").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_version_number(
            &mut object_888,
            var_887,
        )?;
        object_888.finish();
    }
    if let Some(var_889) = &input.compatibility {
        object.key("Compatibility").string(var_889.as_str());
    }
    if let Some(var_890) = &input.description {
        object.key("Description").string(var_890.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_table_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateTableInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_891) = &input.catalog_id {
        object.key("CatalogId").string(var_891.as_str());
    }
    if let Some(var_892) = &input.database_name {
        object.key("DatabaseName").string(var_892.as_str());
    }
    if let Some(var_893) = &input.table_input {
        let mut object_894 = object.key("TableInput").start_object();
        crate::json_ser::serialize_structure_crate_model_table_input(&mut object_894, var_893)?;
        object_894.finish();
    }
    if let Some(var_895) = &input.skip_archive {
        object.key("SkipArchive").boolean(*var_895);
    }
    if let Some(var_896) = &input.transaction_id {
        object.key("TransactionId").string(var_896.as_str());
    }
    if let Some(var_897) = &input.version_id {
        object.key("VersionId").string(var_897.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_trigger_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateTriggerInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_898) = &input.name {
        object.key("Name").string(var_898.as_str());
    }
    if let Some(var_899) = &input.trigger_update {
        let mut object_900 = object.key("TriggerUpdate").start_object();
        crate::json_ser::serialize_structure_crate_model_trigger_update(&mut object_900, var_899)?;
        object_900.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_user_defined_function_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateUserDefinedFunctionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_901) = &input.catalog_id {
        object.key("CatalogId").string(var_901.as_str());
    }
    if let Some(var_902) = &input.database_name {
        object.key("DatabaseName").string(var_902.as_str());
    }
    if let Some(var_903) = &input.function_name {
        object.key("FunctionName").string(var_903.as_str());
    }
    if let Some(var_904) = &input.function_input {
        let mut object_905 = object.key("FunctionInput").start_object();
        crate::json_ser::serialize_structure_crate_model_user_defined_function_input(
            &mut object_905,
            var_904,
        )?;
        object_905.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_workflow_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateWorkflowInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_906) = &input.name {
        object.key("Name").string(var_906.as_str());
    }
    if let Some(var_907) = &input.description {
        object.key("Description").string(var_907.as_str());
    }
    if let Some(var_908) = &input.default_run_properties {
        let mut object_909 = object.key("DefaultRunProperties").start_object();
        for (key_910, value_911) in var_908 {
            {
                object_909.key(key_910).string(value_911.as_str());
            }
        }
        object_909.finish();
    }
    if let Some(var_912) = &input.max_concurrent_runs {
        object.key("MaxConcurrentRuns").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_912).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_partition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PartitionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_913) = &input.values {
        let mut array_914 = object.key("Values").start_array();
        for item_915 in var_913 {
            {
                array_914.value().string(item_915.as_str());
            }
        }
        array_914.finish();
    }
    if let Some(var_916) = &input.last_access_time {
        object
            .key("LastAccessTime")
            .date_time(var_916, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_917) = &input.storage_descriptor {
        let mut object_918 = object.key("StorageDescriptor").start_object();
        crate::json_ser::serialize_structure_crate_model_storage_descriptor(
            &mut object_918,
            var_917,
        )?;
        object_918.finish();
    }
    if let Some(var_919) = &input.parameters {
        let mut object_920 = object.key("Parameters").start_object();
        for (key_921, value_922) in var_919 {
            {
                object_920.key(key_921).string(value_922.as_str());
            }
        }
        object_920.finish();
    }
    if let Some(var_923) = &input.last_analyzed_time {
        object
            .key("LastAnalyzedTime")
            .date_time(var_923, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_model_partition_value_list(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PartitionValueList,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_924) = &input.values {
        let mut array_925 = object.key("Values").start_array();
        for item_926 in var_924 {
            {
                array_925.value().string(item_926.as_str());
            }
        }
        array_925.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_batch_update_partition_request_entry(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BatchUpdatePartitionRequestEntry,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_927) = &input.partition_value_list {
        let mut array_928 = object.key("PartitionValueList").start_array();
        for item_929 in var_927 {
            {
                array_928.value().string(item_929.as_str());
            }
        }
        array_928.finish();
    }
    if let Some(var_930) = &input.partition_input {
        let mut object_931 = object.key("PartitionInput").start_object();
        crate::json_ser::serialize_structure_crate_model_partition_input(&mut object_931, var_930)?;
        object_931.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_create_grok_classifier_request(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CreateGrokClassifierRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_932) = &input.classification {
        object.key("Classification").string(var_932.as_str());
    }
    if let Some(var_933) = &input.name {
        object.key("Name").string(var_933.as_str());
    }
    if let Some(var_934) = &input.grok_pattern {
        object.key("GrokPattern").string(var_934.as_str());
    }
    if let Some(var_935) = &input.custom_patterns {
        object.key("CustomPatterns").string(var_935.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_create_xml_classifier_request(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CreateXmlClassifierRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_936) = &input.classification {
        object.key("Classification").string(var_936.as_str());
    }
    if let Some(var_937) = &input.name {
        object.key("Name").string(var_937.as_str());
    }
    if let Some(var_938) = &input.row_tag {
        object.key("RowTag").string(var_938.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_create_json_classifier_request(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CreateJsonClassifierRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_939) = &input.name {
        object.key("Name").string(var_939.as_str());
    }
    if let Some(var_940) = &input.json_path {
        object.key("JsonPath").string(var_940.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_create_csv_classifier_request(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CreateCsvClassifierRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_941) = &input.name {
        object.key("Name").string(var_941.as_str());
    }
    if let Some(var_942) = &input.delimiter {
        object.key("Delimiter").string(var_942.as_str());
    }
    if let Some(var_943) = &input.quote_symbol {
        object.key("QuoteSymbol").string(var_943.as_str());
    }
    if let Some(var_944) = &input.contains_header {
        object.key("ContainsHeader").string(var_944.as_str());
    }
    if let Some(var_945) = &input.header {
        let mut array_946 = object.key("Header").start_array();
        for item_947 in var_945 {
            {
                array_946.value().string(item_947.as_str());
            }
        }
        array_946.finish();
    }
    if let Some(var_948) = &input.disable_value_trimming {
        object.key("DisableValueTrimming").boolean(*var_948);
    }
    if let Some(var_949) = &input.allow_single_column {
        object.key("AllowSingleColumn").boolean(*var_949);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_connection_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConnectionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_950) = &input.name {
        object.key("Name").string(var_950.as_str());
    }
    if let Some(var_951) = &input.description {
        object.key("Description").string(var_951.as_str());
    }
    if let Some(var_952) = &input.connection_type {
        object.key("ConnectionType").string(var_952.as_str());
    }
    if let Some(var_953) = &input.match_criteria {
        let mut array_954 = object.key("MatchCriteria").start_array();
        for item_955 in var_953 {
            {
                array_954.value().string(item_955.as_str());
            }
        }
        array_954.finish();
    }
    if let Some(var_956) = &input.connection_properties {
        let mut object_957 = object.key("ConnectionProperties").start_object();
        for (key_958, value_959) in var_956 {
            {
                object_957.key(key_958.as_str()).string(value_959.as_str());
            }
        }
        object_957.finish();
    }
    if let Some(var_960) = &input.physical_connection_requirements {
        let mut object_961 = object.key("PhysicalConnectionRequirements").start_object();
        crate::json_ser::serialize_structure_crate_model_physical_connection_requirements(
            &mut object_961,
            var_960,
        )?;
        object_961.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_crawler_targets(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CrawlerTargets,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_962) = &input.s3_targets {
        let mut array_963 = object.key("S3Targets").start_array();
        for item_964 in var_962 {
            {
                let mut object_965 = array_963.value().start_object();
                crate::json_ser::serialize_structure_crate_model_s3_target(
                    &mut object_965,
                    item_964,
                )?;
                object_965.finish();
            }
        }
        array_963.finish();
    }
    if let Some(var_966) = &input.jdbc_targets {
        let mut array_967 = object.key("JdbcTargets").start_array();
        for item_968 in var_966 {
            {
                let mut object_969 = array_967.value().start_object();
                crate::json_ser::serialize_structure_crate_model_jdbc_target(
                    &mut object_969,
                    item_968,
                )?;
                object_969.finish();
            }
        }
        array_967.finish();
    }
    if let Some(var_970) = &input.mongo_db_targets {
        let mut array_971 = object.key("MongoDBTargets").start_array();
        for item_972 in var_970 {
            {
                let mut object_973 = array_971.value().start_object();
                crate::json_ser::serialize_structure_crate_model_mongo_db_target(
                    &mut object_973,
                    item_972,
                )?;
                object_973.finish();
            }
        }
        array_971.finish();
    }
    if let Some(var_974) = &input.dynamo_db_targets {
        let mut array_975 = object.key("DynamoDBTargets").start_array();
        for item_976 in var_974 {
            {
                let mut object_977 = array_975.value().start_object();
                crate::json_ser::serialize_structure_crate_model_dynamo_db_target(
                    &mut object_977,
                    item_976,
                )?;
                object_977.finish();
            }
        }
        array_975.finish();
    }
    if let Some(var_978) = &input.catalog_targets {
        let mut array_979 = object.key("CatalogTargets").start_array();
        for item_980 in var_978 {
            {
                let mut object_981 = array_979.value().start_object();
                crate::json_ser::serialize_structure_crate_model_catalog_target(
                    &mut object_981,
                    item_980,
                )?;
                object_981.finish();
            }
        }
        array_979.finish();
    }
    if let Some(var_982) = &input.delta_targets {
        let mut array_983 = object.key("DeltaTargets").start_array();
        for item_984 in var_982 {
            {
                let mut object_985 = array_983.value().start_object();
                crate::json_ser::serialize_structure_crate_model_delta_target(
                    &mut object_985,
                    item_984,
                )?;
                object_985.finish();
            }
        }
        array_983.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_schema_change_policy(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SchemaChangePolicy,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_986) = &input.update_behavior {
        object.key("UpdateBehavior").string(var_986.as_str());
    }
    if let Some(var_987) = &input.delete_behavior {
        object.key("DeleteBehavior").string(var_987.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_recrawl_policy(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RecrawlPolicy,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_988) = &input.recrawl_behavior {
        object.key("RecrawlBehavior").string(var_988.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_lineage_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LineageConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_989) = &input.crawler_lineage_settings {
        object
            .key("CrawlerLineageSettings")
            .string(var_989.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_lake_formation_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LakeFormationConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_990) = &input.use_lake_formation_credentials {
        object.key("UseLakeFormationCredentials").boolean(*var_990);
    }
    if let Some(var_991) = &input.account_id {
        object.key("AccountId").string(var_991.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_database_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DatabaseInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_992) = &input.name {
        object.key("Name").string(var_992.as_str());
    }
    if let Some(var_993) = &input.description {
        object.key("Description").string(var_993.as_str());
    }
    if let Some(var_994) = &input.location_uri {
        object.key("LocationUri").string(var_994.as_str());
    }
    if let Some(var_995) = &input.parameters {
        let mut object_996 = object.key("Parameters").start_object();
        for (key_997, value_998) in var_995 {
            {
                object_996.key(key_997).string(value_998.as_str());
            }
        }
        object_996.finish();
    }
    if let Some(var_999) = &input.create_table_default_permissions {
        let mut array_1000 = object.key("CreateTableDefaultPermissions").start_array();
        for item_1001 in var_999 {
            {
                let mut object_1002 = array_1000.value().start_object();
                crate::json_ser::serialize_structure_crate_model_principal_permissions(
                    &mut object_1002,
                    item_1001,
                )?;
                object_1002.finish();
            }
        }
        array_1000.finish();
    }
    if let Some(var_1003) = &input.target_database {
        let mut object_1004 = object.key("TargetDatabase").start_object();
        crate::json_ser::serialize_structure_crate_model_database_identifier(
            &mut object_1004,
            var_1003,
        )?;
        object_1004.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_execution_property(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ExecutionProperty,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.max_concurrent_runs != 0 {
        object.key("MaxConcurrentRuns").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_concurrent_runs).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_job_command(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::JobCommand,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1005) = &input.name {
        object.key("Name").string(var_1005.as_str());
    }
    if let Some(var_1006) = &input.script_location {
        object.key("ScriptLocation").string(var_1006.as_str());
    }
    if let Some(var_1007) = &input.python_version {
        object.key("PythonVersion").string(var_1007.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_connections_list(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConnectionsList,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1008) = &input.connections {
        let mut array_1009 = object.key("Connections").start_array();
        for item_1010 in var_1008 {
            {
                array_1009.value().string(item_1010.as_str());
            }
        }
        array_1009.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_notification_property(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::NotificationProperty,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1011) = &input.notify_delay_after {
        object.key("NotifyDelayAfter").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1011).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_code_gen_configuration_node(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CodeGenConfigurationNode,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1012) = &input.athena_connector_source {
        let mut object_1013 = object.key("AthenaConnectorSource").start_object();
        crate::json_ser::serialize_structure_crate_model_athena_connector_source(
            &mut object_1013,
            var_1012,
        )?;
        object_1013.finish();
    }
    if let Some(var_1014) = &input.jdbc_connector_source {
        let mut object_1015 = object.key("JDBCConnectorSource").start_object();
        crate::json_ser::serialize_structure_crate_model_jdbc_connector_source(
            &mut object_1015,
            var_1014,
        )?;
        object_1015.finish();
    }
    if let Some(var_1016) = &input.spark_connector_source {
        let mut object_1017 = object.key("SparkConnectorSource").start_object();
        crate::json_ser::serialize_structure_crate_model_spark_connector_source(
            &mut object_1017,
            var_1016,
        )?;
        object_1017.finish();
    }
    if let Some(var_1018) = &input.catalog_source {
        let mut object_1019 = object.key("CatalogSource").start_object();
        crate::json_ser::serialize_structure_crate_model_catalog_source(
            &mut object_1019,
            var_1018,
        )?;
        object_1019.finish();
    }
    if let Some(var_1020) = &input.redshift_source {
        let mut object_1021 = object.key("RedshiftSource").start_object();
        crate::json_ser::serialize_structure_crate_model_redshift_source(
            &mut object_1021,
            var_1020,
        )?;
        object_1021.finish();
    }
    if let Some(var_1022) = &input.s3_catalog_source {
        let mut object_1023 = object.key("S3CatalogSource").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_catalog_source(
            &mut object_1023,
            var_1022,
        )?;
        object_1023.finish();
    }
    if let Some(var_1024) = &input.s3_csv_source {
        let mut object_1025 = object.key("S3CsvSource").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_csv_source(&mut object_1025, var_1024)?;
        object_1025.finish();
    }
    if let Some(var_1026) = &input.s3_json_source {
        let mut object_1027 = object.key("S3JsonSource").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_json_source(
            &mut object_1027,
            var_1026,
        )?;
        object_1027.finish();
    }
    if let Some(var_1028) = &input.s3_parquet_source {
        let mut object_1029 = object.key("S3ParquetSource").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_parquet_source(
            &mut object_1029,
            var_1028,
        )?;
        object_1029.finish();
    }
    if let Some(var_1030) = &input.relational_catalog_source {
        let mut object_1031 = object.key("RelationalCatalogSource").start_object();
        crate::json_ser::serialize_structure_crate_model_relational_catalog_source(
            &mut object_1031,
            var_1030,
        )?;
        object_1031.finish();
    }
    if let Some(var_1032) = &input.dynamo_db_catalog_source {
        let mut object_1033 = object.key("DynamoDBCatalogSource").start_object();
        crate::json_ser::serialize_structure_crate_model_dynamo_db_catalog_source(
            &mut object_1033,
            var_1032,
        )?;
        object_1033.finish();
    }
    if let Some(var_1034) = &input.jdbc_connector_target {
        let mut object_1035 = object.key("JDBCConnectorTarget").start_object();
        crate::json_ser::serialize_structure_crate_model_jdbc_connector_target(
            &mut object_1035,
            var_1034,
        )?;
        object_1035.finish();
    }
    if let Some(var_1036) = &input.spark_connector_target {
        let mut object_1037 = object.key("SparkConnectorTarget").start_object();
        crate::json_ser::serialize_structure_crate_model_spark_connector_target(
            &mut object_1037,
            var_1036,
        )?;
        object_1037.finish();
    }
    if let Some(var_1038) = &input.catalog_target {
        let mut object_1039 = object.key("CatalogTarget").start_object();
        crate::json_ser::serialize_structure_crate_model_basic_catalog_target(
            &mut object_1039,
            var_1038,
        )?;
        object_1039.finish();
    }
    if let Some(var_1040) = &input.redshift_target {
        let mut object_1041 = object.key("RedshiftTarget").start_object();
        crate::json_ser::serialize_structure_crate_model_redshift_target(
            &mut object_1041,
            var_1040,
        )?;
        object_1041.finish();
    }
    if let Some(var_1042) = &input.s3_catalog_target {
        let mut object_1043 = object.key("S3CatalogTarget").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_catalog_target(
            &mut object_1043,
            var_1042,
        )?;
        object_1043.finish();
    }
    if let Some(var_1044) = &input.s3_glue_parquet_target {
        let mut object_1045 = object.key("S3GlueParquetTarget").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_glue_parquet_target(
            &mut object_1045,
            var_1044,
        )?;
        object_1045.finish();
    }
    if let Some(var_1046) = &input.s3_direct_target {
        let mut object_1047 = object.key("S3DirectTarget").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_direct_target(
            &mut object_1047,
            var_1046,
        )?;
        object_1047.finish();
    }
    if let Some(var_1048) = &input.apply_mapping {
        let mut object_1049 = object.key("ApplyMapping").start_object();
        crate::json_ser::serialize_structure_crate_model_apply_mapping(&mut object_1049, var_1048)?;
        object_1049.finish();
    }
    if let Some(var_1050) = &input.select_fields {
        let mut object_1051 = object.key("SelectFields").start_object();
        crate::json_ser::serialize_structure_crate_model_select_fields(&mut object_1051, var_1050)?;
        object_1051.finish();
    }
    if let Some(var_1052) = &input.drop_fields {
        let mut object_1053 = object.key("DropFields").start_object();
        crate::json_ser::serialize_structure_crate_model_drop_fields(&mut object_1053, var_1052)?;
        object_1053.finish();
    }
    if let Some(var_1054) = &input.rename_field {
        let mut object_1055 = object.key("RenameField").start_object();
        crate::json_ser::serialize_structure_crate_model_rename_field(&mut object_1055, var_1054)?;
        object_1055.finish();
    }
    if let Some(var_1056) = &input.spigot {
        let mut object_1057 = object.key("Spigot").start_object();
        crate::json_ser::serialize_structure_crate_model_spigot(&mut object_1057, var_1056)?;
        object_1057.finish();
    }
    if let Some(var_1058) = &input.join {
        let mut object_1059 = object.key("Join").start_object();
        crate::json_ser::serialize_structure_crate_model_join(&mut object_1059, var_1058)?;
        object_1059.finish();
    }
    if let Some(var_1060) = &input.split_fields {
        let mut object_1061 = object.key("SplitFields").start_object();
        crate::json_ser::serialize_structure_crate_model_split_fields(&mut object_1061, var_1060)?;
        object_1061.finish();
    }
    if let Some(var_1062) = &input.select_from_collection {
        let mut object_1063 = object.key("SelectFromCollection").start_object();
        crate::json_ser::serialize_structure_crate_model_select_from_collection(
            &mut object_1063,
            var_1062,
        )?;
        object_1063.finish();
    }
    if let Some(var_1064) = &input.fill_missing_values {
        let mut object_1065 = object.key("FillMissingValues").start_object();
        crate::json_ser::serialize_structure_crate_model_fill_missing_values(
            &mut object_1065,
            var_1064,
        )?;
        object_1065.finish();
    }
    if let Some(var_1066) = &input.filter {
        let mut object_1067 = object.key("Filter").start_object();
        crate::json_ser::serialize_structure_crate_model_filter(&mut object_1067, var_1066)?;
        object_1067.finish();
    }
    if let Some(var_1068) = &input.custom_code {
        let mut object_1069 = object.key("CustomCode").start_object();
        crate::json_ser::serialize_structure_crate_model_custom_code(&mut object_1069, var_1068)?;
        object_1069.finish();
    }
    if let Some(var_1070) = &input.spark_sql {
        let mut object_1071 = object.key("SparkSQL").start_object();
        crate::json_ser::serialize_structure_crate_model_spark_sql(&mut object_1071, var_1070)?;
        object_1071.finish();
    }
    if let Some(var_1072) = &input.direct_kinesis_source {
        let mut object_1073 = object.key("DirectKinesisSource").start_object();
        crate::json_ser::serialize_structure_crate_model_direct_kinesis_source(
            &mut object_1073,
            var_1072,
        )?;
        object_1073.finish();
    }
    if let Some(var_1074) = &input.direct_kafka_source {
        let mut object_1075 = object.key("DirectKafkaSource").start_object();
        crate::json_ser::serialize_structure_crate_model_direct_kafka_source(
            &mut object_1075,
            var_1074,
        )?;
        object_1075.finish();
    }
    if let Some(var_1076) = &input.catalog_kinesis_source {
        let mut object_1077 = object.key("CatalogKinesisSource").start_object();
        crate::json_ser::serialize_structure_crate_model_catalog_kinesis_source(
            &mut object_1077,
            var_1076,
        )?;
        object_1077.finish();
    }
    if let Some(var_1078) = &input.catalog_kafka_source {
        let mut object_1079 = object.key("CatalogKafkaSource").start_object();
        crate::json_ser::serialize_structure_crate_model_catalog_kafka_source(
            &mut object_1079,
            var_1078,
        )?;
        object_1079.finish();
    }
    if let Some(var_1080) = &input.drop_null_fields {
        let mut object_1081 = object.key("DropNullFields").start_object();
        crate::json_ser::serialize_structure_crate_model_drop_null_fields(
            &mut object_1081,
            var_1080,
        )?;
        object_1081.finish();
    }
    if let Some(var_1082) = &input.merge {
        let mut object_1083 = object.key("Merge").start_object();
        crate::json_ser::serialize_structure_crate_model_merge(&mut object_1083, var_1082)?;
        object_1083.finish();
    }
    if let Some(var_1084) = &input.union {
        let mut object_1085 = object.key("Union").start_object();
        crate::json_ser::serialize_structure_crate_model_union(&mut object_1085, var_1084)?;
        object_1085.finish();
    }
    if let Some(var_1086) = &input.pii_detection {
        let mut object_1087 = object.key("PIIDetection").start_object();
        crate::json_ser::serialize_structure_crate_model_pii_detection(&mut object_1087, var_1086)?;
        object_1087.finish();
    }
    if let Some(var_1088) = &input.aggregate {
        let mut object_1089 = object.key("Aggregate").start_object();
        crate::json_ser::serialize_structure_crate_model_aggregate(&mut object_1089, var_1088)?;
        object_1089.finish();
    }
    if let Some(var_1090) = &input.drop_duplicates {
        let mut object_1091 = object.key("DropDuplicates").start_object();
        crate::json_ser::serialize_structure_crate_model_drop_duplicates(
            &mut object_1091,
            var_1090,
        )?;
        object_1091.finish();
    }
    if let Some(var_1092) = &input.governed_catalog_target {
        let mut object_1093 = object.key("GovernedCatalogTarget").start_object();
        crate::json_ser::serialize_structure_crate_model_governed_catalog_target(
            &mut object_1093,
            var_1092,
        )?;
        object_1093.finish();
    }
    if let Some(var_1094) = &input.governed_catalog_source {
        let mut object_1095 = object.key("GovernedCatalogSource").start_object();
        crate::json_ser::serialize_structure_crate_model_governed_catalog_source(
            &mut object_1095,
            var_1094,
        )?;
        object_1095.finish();
    }
    if let Some(var_1096) = &input.microsoft_sql_server_catalog_source {
        let mut object_1097 = object.key("MicrosoftSQLServerCatalogSource").start_object();
        crate::json_ser::serialize_structure_crate_model_microsoft_sql_server_catalog_source(
            &mut object_1097,
            var_1096,
        )?;
        object_1097.finish();
    }
    if let Some(var_1098) = &input.my_sql_catalog_source {
        let mut object_1099 = object.key("MySQLCatalogSource").start_object();
        crate::json_ser::serialize_structure_crate_model_my_sql_catalog_source(
            &mut object_1099,
            var_1098,
        )?;
        object_1099.finish();
    }
    if let Some(var_1100) = &input.oracle_sql_catalog_source {
        let mut object_1101 = object.key("OracleSQLCatalogSource").start_object();
        crate::json_ser::serialize_structure_crate_model_oracle_sql_catalog_source(
            &mut object_1101,
            var_1100,
        )?;
        object_1101.finish();
    }
    if let Some(var_1102) = &input.postgre_sql_catalog_source {
        let mut object_1103 = object.key("PostgreSQLCatalogSource").start_object();
        crate::json_ser::serialize_structure_crate_model_postgre_sql_catalog_source(
            &mut object_1103,
            var_1102,
        )?;
        object_1103.finish();
    }
    if let Some(var_1104) = &input.microsoft_sql_server_catalog_target {
        let mut object_1105 = object.key("MicrosoftSQLServerCatalogTarget").start_object();
        crate::json_ser::serialize_structure_crate_model_microsoft_sql_server_catalog_target(
            &mut object_1105,
            var_1104,
        )?;
        object_1105.finish();
    }
    if let Some(var_1106) = &input.my_sql_catalog_target {
        let mut object_1107 = object.key("MySQLCatalogTarget").start_object();
        crate::json_ser::serialize_structure_crate_model_my_sql_catalog_target(
            &mut object_1107,
            var_1106,
        )?;
        object_1107.finish();
    }
    if let Some(var_1108) = &input.oracle_sql_catalog_target {
        let mut object_1109 = object.key("OracleSQLCatalogTarget").start_object();
        crate::json_ser::serialize_structure_crate_model_oracle_sql_catalog_target(
            &mut object_1109,
            var_1108,
        )?;
        object_1109.finish();
    }
    if let Some(var_1110) = &input.postgre_sql_catalog_target {
        let mut object_1111 = object.key("PostgreSQLCatalogTarget").start_object();
        crate::json_ser::serialize_structure_crate_model_postgre_sql_catalog_target(
            &mut object_1111,
            var_1110,
        )?;
        object_1111.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_glue_table(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::GlueTable,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1112) = &input.database_name {
        object.key("DatabaseName").string(var_1112.as_str());
    }
    if let Some(var_1113) = &input.table_name {
        object.key("TableName").string(var_1113.as_str());
    }
    if let Some(var_1114) = &input.catalog_id {
        object.key("CatalogId").string(var_1114.as_str());
    }
    if let Some(var_1115) = &input.connection_name {
        object.key("ConnectionName").string(var_1115.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_transform_parameters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TransformParameters,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1116) = &input.transform_type {
        object.key("TransformType").string(var_1116.as_str());
    }
    if let Some(var_1117) = &input.find_matches_parameters {
        let mut object_1118 = object.key("FindMatchesParameters").start_object();
        crate::json_ser::serialize_structure_crate_model_find_matches_parameters(
            &mut object_1118,
            var_1117,
        )?;
        object_1118.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_transform_encryption(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TransformEncryption,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1119) = &input.ml_user_data_encryption {
        let mut object_1120 = object.key("MlUserDataEncryption").start_object();
        crate::json_ser::serialize_structure_crate_model_ml_user_data_encryption(
            &mut object_1120,
            var_1119,
        )?;
        object_1120.finish();
    }
    if let Some(var_1121) = &input.task_run_security_configuration_name {
        object
            .key("TaskRunSecurityConfigurationName")
            .string(var_1121.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_partition_index(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PartitionIndex,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1122) = &input.keys {
        let mut array_1123 = object.key("Keys").start_array();
        for item_1124 in var_1122 {
            {
                array_1123.value().string(item_1124.as_str());
            }
        }
        array_1123.finish();
    }
    if let Some(var_1125) = &input.index_name {
        object.key("IndexName").string(var_1125.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_registry_id(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RegistryId,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1126) = &input.registry_name {
        object.key("RegistryName").string(var_1126.as_str());
    }
    if let Some(var_1127) = &input.registry_arn {
        object.key("RegistryArn").string(var_1127.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_code_gen_node(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CodeGenNode,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1128) = &input.id {
        object.key("Id").string(var_1128.as_str());
    }
    if let Some(var_1129) = &input.node_type {
        object.key("NodeType").string(var_1129.as_str());
    }
    if let Some(var_1130) = &input.args {
        let mut array_1131 = object.key("Args").start_array();
        for item_1132 in var_1130 {
            {
                let mut object_1133 = array_1131.value().start_object();
                crate::json_ser::serialize_structure_crate_model_code_gen_node_arg(
                    &mut object_1133,
                    item_1132,
                )?;
                object_1133.finish();
            }
        }
        array_1131.finish();
    }
    if input.line_number != 0 {
        object.key("LineNumber").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.line_number).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_code_gen_edge(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CodeGenEdge,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1134) = &input.source {
        object.key("Source").string(var_1134.as_str());
    }
    if let Some(var_1135) = &input.target {
        object.key("Target").string(var_1135.as_str());
    }
    if let Some(var_1136) = &input.target_parameter {
        object.key("TargetParameter").string(var_1136.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_encryption_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EncryptionConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1137) = &input.s3_encryption {
        let mut array_1138 = object.key("S3Encryption").start_array();
        for item_1139 in var_1137 {
            {
                let mut object_1140 = array_1138.value().start_object();
                crate::json_ser::serialize_structure_crate_model_s3_encryption(
                    &mut object_1140,
                    item_1139,
                )?;
                object_1140.finish();
            }
        }
        array_1138.finish();
    }
    if let Some(var_1141) = &input.cloud_watch_encryption {
        let mut object_1142 = object.key("CloudWatchEncryption").start_object();
        crate::json_ser::serialize_structure_crate_model_cloud_watch_encryption(
            &mut object_1142,
            var_1141,
        )?;
        object_1142.finish();
    }
    if let Some(var_1143) = &input.job_bookmarks_encryption {
        let mut object_1144 = object.key("JobBookmarksEncryption").start_object();
        crate::json_ser::serialize_structure_crate_model_job_bookmarks_encryption(
            &mut object_1144,
            var_1143,
        )?;
        object_1144.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_session_command(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SessionCommand,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1145) = &input.name {
        object.key("Name").string(var_1145.as_str());
    }
    if let Some(var_1146) = &input.python_version {
        object.key("PythonVersion").string(var_1146.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_table_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TableInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1147) = &input.name {
        object.key("Name").string(var_1147.as_str());
    }
    if let Some(var_1148) = &input.description {
        object.key("Description").string(var_1148.as_str());
    }
    if let Some(var_1149) = &input.owner {
        object.key("Owner").string(var_1149.as_str());
    }
    if let Some(var_1150) = &input.last_access_time {
        object
            .key("LastAccessTime")
            .date_time(var_1150, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1151) = &input.last_analyzed_time {
        object
            .key("LastAnalyzedTime")
            .date_time(var_1151, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if input.retention != 0 {
        object.key("Retention").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.retention).into()),
        );
    }
    if let Some(var_1152) = &input.storage_descriptor {
        let mut object_1153 = object.key("StorageDescriptor").start_object();
        crate::json_ser::serialize_structure_crate_model_storage_descriptor(
            &mut object_1153,
            var_1152,
        )?;
        object_1153.finish();
    }
    if let Some(var_1154) = &input.partition_keys {
        let mut array_1155 = object.key("PartitionKeys").start_array();
        for item_1156 in var_1154 {
            {
                let mut object_1157 = array_1155.value().start_object();
                crate::json_ser::serialize_structure_crate_model_column(
                    &mut object_1157,
                    item_1156,
                )?;
                object_1157.finish();
            }
        }
        array_1155.finish();
    }
    if let Some(var_1158) = &input.view_original_text {
        object.key("ViewOriginalText").string(var_1158.as_str());
    }
    if let Some(var_1159) = &input.view_expanded_text {
        object.key("ViewExpandedText").string(var_1159.as_str());
    }
    if let Some(var_1160) = &input.table_type {
        object.key("TableType").string(var_1160.as_str());
    }
    if let Some(var_1161) = &input.parameters {
        let mut object_1162 = object.key("Parameters").start_object();
        for (key_1163, value_1164) in var_1161 {
            {
                object_1162.key(key_1163).string(value_1164.as_str());
            }
        }
        object_1162.finish();
    }
    if let Some(var_1165) = &input.target_table {
        let mut object_1166 = object.key("TargetTable").start_object();
        crate::json_ser::serialize_structure_crate_model_table_identifier(
            &mut object_1166,
            var_1165,
        )?;
        object_1166.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_predicate(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Predicate,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1167) = &input.logical {
        object.key("Logical").string(var_1167.as_str());
    }
    if let Some(var_1168) = &input.conditions {
        let mut array_1169 = object.key("Conditions").start_array();
        for item_1170 in var_1168 {
            {
                let mut object_1171 = array_1169.value().start_object();
                crate::json_ser::serialize_structure_crate_model_condition(
                    &mut object_1171,
                    item_1170,
                )?;
                object_1171.finish();
            }
        }
        array_1169.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_action(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Action,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1172) = &input.job_name {
        object.key("JobName").string(var_1172.as_str());
    }
    if let Some(var_1173) = &input.arguments {
        let mut object_1174 = object.key("Arguments").start_object();
        for (key_1175, value_1176) in var_1173 {
            {
                object_1174.key(key_1175).string(value_1176.as_str());
            }
        }
        object_1174.finish();
    }
    if let Some(var_1177) = &input.timeout {
        object.key("Timeout").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1177).into()),
        );
    }
    if let Some(var_1178) = &input.security_configuration {
        object
            .key("SecurityConfiguration")
            .string(var_1178.as_str());
    }
    if let Some(var_1179) = &input.notification_property {
        let mut object_1180 = object.key("NotificationProperty").start_object();
        crate::json_ser::serialize_structure_crate_model_notification_property(
            &mut object_1180,
            var_1179,
        )?;
        object_1180.finish();
    }
    if let Some(var_1181) = &input.crawler_name {
        object.key("CrawlerName").string(var_1181.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_event_batching_condition(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EventBatchingCondition,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object.key("BatchSize").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.batch_size).into()),
        );
    }
    if let Some(var_1182) = &input.batch_window {
        object.key("BatchWindow").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1182).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_user_defined_function_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UserDefinedFunctionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1183) = &input.function_name {
        object.key("FunctionName").string(var_1183.as_str());
    }
    if let Some(var_1184) = &input.class_name {
        object.key("ClassName").string(var_1184.as_str());
    }
    if let Some(var_1185) = &input.owner_name {
        object.key("OwnerName").string(var_1185.as_str());
    }
    if let Some(var_1186) = &input.owner_type {
        object.key("OwnerType").string(var_1186.as_str());
    }
    if let Some(var_1187) = &input.resource_uris {
        let mut array_1188 = object.key("ResourceUris").start_array();
        for item_1189 in var_1187 {
            {
                let mut object_1190 = array_1188.value().start_object();
                crate::json_ser::serialize_structure_crate_model_resource_uri(
                    &mut object_1190,
                    item_1189,
                )?;
                object_1190.finish();
            }
        }
        array_1188.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_schema_id(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SchemaId,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1191) = &input.schema_arn {
        object.key("SchemaArn").string(var_1191.as_str());
    }
    if let Some(var_1192) = &input.schema_name {
        object.key("SchemaName").string(var_1192.as_str());
    }
    if let Some(var_1193) = &input.registry_name {
        object.key("RegistryName").string(var_1193.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_get_connections_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::GetConnectionsFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1194) = &input.match_criteria {
        let mut array_1195 = object.key("MatchCriteria").start_array();
        for item_1196 in var_1194 {
            {
                array_1195.value().string(item_1196.as_str());
            }
        }
        array_1195.finish();
    }
    if let Some(var_1197) = &input.connection_type {
        object.key("ConnectionType").string(var_1197.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_catalog_entry(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CatalogEntry,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1198) = &input.database_name {
        object.key("DatabaseName").string(var_1198.as_str());
    }
    if let Some(var_1199) = &input.table_name {
        object.key("TableName").string(var_1199.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_location(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Location,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1200) = &input.jdbc {
        let mut array_1201 = object.key("Jdbc").start_array();
        for item_1202 in var_1200 {
            {
                let mut object_1203 = array_1201.value().start_object();
                crate::json_ser::serialize_structure_crate_model_code_gen_node_arg(
                    &mut object_1203,
                    item_1202,
                )?;
                object_1203.finish();
            }
        }
        array_1201.finish();
    }
    if let Some(var_1204) = &input.s3 {
        let mut array_1205 = object.key("S3").start_array();
        for item_1206 in var_1204 {
            {
                let mut object_1207 = array_1205.value().start_object();
                crate::json_ser::serialize_structure_crate_model_code_gen_node_arg(
                    &mut object_1207,
                    item_1206,
                )?;
                object_1207.finish();
            }
        }
        array_1205.finish();
    }
    if let Some(var_1208) = &input.dynamo_db {
        let mut array_1209 = object.key("DynamoDB").start_array();
        for item_1210 in var_1208 {
            {
                let mut object_1211 = array_1209.value().start_object();
                crate::json_ser::serialize_structure_crate_model_code_gen_node_arg(
                    &mut object_1211,
                    item_1210,
                )?;
                object_1211.finish();
            }
        }
        array_1209.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_task_run_filter_criteria(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TaskRunFilterCriteria,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1212) = &input.task_run_type {
        object.key("TaskRunType").string(var_1212.as_str());
    }
    if let Some(var_1213) = &input.status {
        object.key("Status").string(var_1213.as_str());
    }
    if let Some(var_1214) = &input.started_before {
        object
            .key("StartedBefore")
            .date_time(var_1214, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1215) = &input.started_after {
        object
            .key("StartedAfter")
            .date_time(var_1215, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_model_task_run_sort_criteria(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TaskRunSortCriteria,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1216) = &input.column {
        object.key("Column").string(var_1216.as_str());
    }
    if let Some(var_1217) = &input.sort_direction {
        object.key("SortDirection").string(var_1217.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_transform_filter_criteria(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TransformFilterCriteria,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1218) = &input.name {
        object.key("Name").string(var_1218.as_str());
    }
    if let Some(var_1219) = &input.transform_type {
        object.key("TransformType").string(var_1219.as_str());
    }
    if let Some(var_1220) = &input.status {
        object.key("Status").string(var_1220.as_str());
    }
    if let Some(var_1221) = &input.glue_version {
        object.key("GlueVersion").string(var_1221.as_str());
    }
    if let Some(var_1222) = &input.created_before {
        object
            .key("CreatedBefore")
            .date_time(var_1222, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1223) = &input.created_after {
        object
            .key("CreatedAfter")
            .date_time(var_1223, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1224) = &input.last_modified_before {
        object
            .key("LastModifiedBefore")
            .date_time(var_1224, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1225) = &input.last_modified_after {
        object
            .key("LastModifiedAfter")
            .date_time(var_1225, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1226) = &input.schema {
        let mut array_1227 = object.key("Schema").start_array();
        for item_1228 in var_1226 {
            {
                let mut object_1229 = array_1227.value().start_object();
                crate::json_ser::serialize_structure_crate_model_schema_column(
                    &mut object_1229,
                    item_1228,
                )?;
                object_1229.finish();
            }
        }
        array_1227.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_transform_sort_criteria(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TransformSortCriteria,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1230) = &input.column {
        object.key("Column").string(var_1230.as_str());
    }
    if let Some(var_1231) = &input.sort_direction {
        object.key("SortDirection").string(var_1231.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_segment(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Segment,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object.key("SegmentNumber").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.segment_number).into()),
        );
    }
    {
        object.key("TotalSegments").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.total_segments).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_mapping_entry(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MappingEntry,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1232) = &input.source_table {
        object.key("SourceTable").string(var_1232.as_str());
    }
    if let Some(var_1233) = &input.source_path {
        object.key("SourcePath").string(var_1233.as_str());
    }
    if let Some(var_1234) = &input.source_type {
        object.key("SourceType").string(var_1234.as_str());
    }
    if let Some(var_1235) = &input.target_table {
        object.key("TargetTable").string(var_1235.as_str());
    }
    if let Some(var_1236) = &input.target_path {
        object.key("TargetPath").string(var_1236.as_str());
    }
    if let Some(var_1237) = &input.target_type {
        object.key("TargetType").string(var_1237.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_schema_version_number(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SchemaVersionNumber,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.latest_version {
        object.key("LatestVersion").boolean(input.latest_version);
    }
    if input.version_number != 0 {
        object.key("VersionNumber").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.version_number).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_audit_context(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AuditContext,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1238) = &input.additional_audit_context {
        object
            .key("AdditionalAuditContext")
            .string(var_1238.as_str());
    }
    if let Some(var_1239) = &input.requested_columns {
        let mut array_1240 = object.key("RequestedColumns").start_array();
        for item_1241 in var_1239 {
            {
                array_1240.value().string(item_1241.as_str());
            }
        }
        array_1240.finish();
    }
    if let Some(var_1242) = &input.all_columns_requested {
        object.key("AllColumnsRequested").boolean(*var_1242);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_data_catalog_encryption_settings(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataCatalogEncryptionSettings,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1243) = &input.encryption_at_rest {
        let mut object_1244 = object.key("EncryptionAtRest").start_object();
        crate::json_ser::serialize_structure_crate_model_encryption_at_rest(
            &mut object_1244,
            var_1243,
        )?;
        object_1244.finish();
    }
    if let Some(var_1245) = &input.connection_password_encryption {
        let mut object_1246 = object.key("ConnectionPasswordEncryption").start_object();
        crate::json_ser::serialize_structure_crate_model_connection_password_encryption(
            &mut object_1246,
            var_1245,
        )?;
        object_1246.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_metadata_key_value_pair(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MetadataKeyValuePair,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1247) = &input.metadata_key {
        object.key("MetadataKey").string(var_1247.as_str());
    }
    if let Some(var_1248) = &input.metadata_value {
        object.key("MetadataValue").string(var_1248.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_property_predicate(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PropertyPredicate,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1249) = &input.key {
        object.key("Key").string(var_1249.as_str());
    }
    if let Some(var_1250) = &input.value {
        object.key("Value").string(var_1250.as_str());
    }
    if let Some(var_1251) = &input.comparator {
        object.key("Comparator").string(var_1251.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_sort_criterion(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SortCriterion,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1252) = &input.field_name {
        object.key("FieldName").string(var_1252.as_str());
    }
    if let Some(var_1253) = &input.sort {
        object.key("Sort").string(var_1253.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_update_grok_classifier_request(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UpdateGrokClassifierRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1254) = &input.name {
        object.key("Name").string(var_1254.as_str());
    }
    if let Some(var_1255) = &input.classification {
        object.key("Classification").string(var_1255.as_str());
    }
    if let Some(var_1256) = &input.grok_pattern {
        object.key("GrokPattern").string(var_1256.as_str());
    }
    if let Some(var_1257) = &input.custom_patterns {
        object.key("CustomPatterns").string(var_1257.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_update_xml_classifier_request(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UpdateXmlClassifierRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1258) = &input.name {
        object.key("Name").string(var_1258.as_str());
    }
    if let Some(var_1259) = &input.classification {
        object.key("Classification").string(var_1259.as_str());
    }
    if let Some(var_1260) = &input.row_tag {
        object.key("RowTag").string(var_1260.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_update_json_classifier_request(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UpdateJsonClassifierRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1261) = &input.name {
        object.key("Name").string(var_1261.as_str());
    }
    if let Some(var_1262) = &input.json_path {
        object.key("JsonPath").string(var_1262.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_update_csv_classifier_request(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UpdateCsvClassifierRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1263) = &input.name {
        object.key("Name").string(var_1263.as_str());
    }
    if let Some(var_1264) = &input.delimiter {
        object.key("Delimiter").string(var_1264.as_str());
    }
    if let Some(var_1265) = &input.quote_symbol {
        object.key("QuoteSymbol").string(var_1265.as_str());
    }
    if let Some(var_1266) = &input.contains_header {
        object.key("ContainsHeader").string(var_1266.as_str());
    }
    if let Some(var_1267) = &input.header {
        let mut array_1268 = object.key("Header").start_array();
        for item_1269 in var_1267 {
            {
                array_1268.value().string(item_1269.as_str());
            }
        }
        array_1268.finish();
    }
    if let Some(var_1270) = &input.disable_value_trimming {
        object.key("DisableValueTrimming").boolean(*var_1270);
    }
    if let Some(var_1271) = &input.allow_single_column {
        object.key("AllowSingleColumn").boolean(*var_1271);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_column_statistics(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ColumnStatistics,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1272) = &input.column_name {
        object.key("ColumnName").string(var_1272.as_str());
    }
    if let Some(var_1273) = &input.column_type {
        object.key("ColumnType").string(var_1273.as_str());
    }
    if let Some(var_1274) = &input.analyzed_time {
        object
            .key("AnalyzedTime")
            .date_time(var_1274, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1275) = &input.statistics_data {
        let mut object_1276 = object.key("StatisticsData").start_object();
        crate::json_ser::serialize_structure_crate_model_column_statistics_data(
            &mut object_1276,
            var_1275,
        )?;
        object_1276.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_dev_endpoint_custom_libraries(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DevEndpointCustomLibraries,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1277) = &input.extra_python_libs_s3_path {
        object
            .key("ExtraPythonLibsS3Path")
            .string(var_1277.as_str());
    }
    if let Some(var_1278) = &input.extra_jars_s3_path {
        object.key("ExtraJarsS3Path").string(var_1278.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_job_update(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::JobUpdate,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1279) = &input.description {
        object.key("Description").string(var_1279.as_str());
    }
    if let Some(var_1280) = &input.log_uri {
        object.key("LogUri").string(var_1280.as_str());
    }
    if let Some(var_1281) = &input.role {
        object.key("Role").string(var_1281.as_str());
    }
    if let Some(var_1282) = &input.execution_property {
        let mut object_1283 = object.key("ExecutionProperty").start_object();
        crate::json_ser::serialize_structure_crate_model_execution_property(
            &mut object_1283,
            var_1282,
        )?;
        object_1283.finish();
    }
    if let Some(var_1284) = &input.command {
        let mut object_1285 = object.key("Command").start_object();
        crate::json_ser::serialize_structure_crate_model_job_command(&mut object_1285, var_1284)?;
        object_1285.finish();
    }
    if let Some(var_1286) = &input.default_arguments {
        let mut object_1287 = object.key("DefaultArguments").start_object();
        for (key_1288, value_1289) in var_1286 {
            {
                object_1287.key(key_1288).string(value_1289.as_str());
            }
        }
        object_1287.finish();
    }
    if let Some(var_1290) = &input.non_overridable_arguments {
        let mut object_1291 = object.key("NonOverridableArguments").start_object();
        for (key_1292, value_1293) in var_1290 {
            {
                object_1291.key(key_1292).string(value_1293.as_str());
            }
        }
        object_1291.finish();
    }
    if let Some(var_1294) = &input.connections {
        let mut object_1295 = object.key("Connections").start_object();
        crate::json_ser::serialize_structure_crate_model_connections_list(
            &mut object_1295,
            var_1294,
        )?;
        object_1295.finish();
    }
    if input.max_retries != 0 {
        object.key("MaxRetries").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_retries).into()),
        );
    }
    if input.allocated_capacity != 0 {
        object.key("AllocatedCapacity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.allocated_capacity).into()),
        );
    }
    if let Some(var_1296) = &input.timeout {
        object.key("Timeout").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1296).into()),
        );
    }
    if let Some(var_1297) = &input.max_capacity {
        object.key("MaxCapacity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_1297).into()),
        );
    }
    if let Some(var_1298) = &input.worker_type {
        object.key("WorkerType").string(var_1298.as_str());
    }
    if let Some(var_1299) = &input.number_of_workers {
        object.key("NumberOfWorkers").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1299).into()),
        );
    }
    if let Some(var_1300) = &input.security_configuration {
        object
            .key("SecurityConfiguration")
            .string(var_1300.as_str());
    }
    if let Some(var_1301) = &input.notification_property {
        let mut object_1302 = object.key("NotificationProperty").start_object();
        crate::json_ser::serialize_structure_crate_model_notification_property(
            &mut object_1302,
            var_1301,
        )?;
        object_1302.finish();
    }
    if let Some(var_1303) = &input.glue_version {
        object.key("GlueVersion").string(var_1303.as_str());
    }
    if let Some(var_1304) = &input.code_gen_configuration_nodes {
        let mut object_1305 = object.key("CodeGenConfigurationNodes").start_object();
        for (key_1306, value_1307) in var_1304 {
            {
                let mut object_1308 = object_1305.key(key_1306).start_object();
                crate::json_ser::serialize_structure_crate_model_code_gen_configuration_node(
                    &mut object_1308,
                    value_1307,
                )?;
                object_1308.finish();
            }
        }
        object_1305.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_trigger_update(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TriggerUpdate,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1309) = &input.name {
        object.key("Name").string(var_1309.as_str());
    }
    if let Some(var_1310) = &input.description {
        object.key("Description").string(var_1310.as_str());
    }
    if let Some(var_1311) = &input.schedule {
        object.key("Schedule").string(var_1311.as_str());
    }
    if let Some(var_1312) = &input.actions {
        let mut array_1313 = object.key("Actions").start_array();
        for item_1314 in var_1312 {
            {
                let mut object_1315 = array_1313.value().start_object();
                crate::json_ser::serialize_structure_crate_model_action(
                    &mut object_1315,
                    item_1314,
                )?;
                object_1315.finish();
            }
        }
        array_1313.finish();
    }
    if let Some(var_1316) = &input.predicate {
        let mut object_1317 = object.key("Predicate").start_object();
        crate::json_ser::serialize_structure_crate_model_predicate(&mut object_1317, var_1316)?;
        object_1317.finish();
    }
    if let Some(var_1318) = &input.event_batching_condition {
        let mut object_1319 = object.key("EventBatchingCondition").start_object();
        crate::json_ser::serialize_structure_crate_model_event_batching_condition(
            &mut object_1319,
            var_1318,
        )?;
        object_1319.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_storage_descriptor(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StorageDescriptor,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1320) = &input.columns {
        let mut array_1321 = object.key("Columns").start_array();
        for item_1322 in var_1320 {
            {
                let mut object_1323 = array_1321.value().start_object();
                crate::json_ser::serialize_structure_crate_model_column(
                    &mut object_1323,
                    item_1322,
                )?;
                object_1323.finish();
            }
        }
        array_1321.finish();
    }
    if let Some(var_1324) = &input.location {
        object.key("Location").string(var_1324.as_str());
    }
    if let Some(var_1325) = &input.additional_locations {
        let mut array_1326 = object.key("AdditionalLocations").start_array();
        for item_1327 in var_1325 {
            {
                array_1326.value().string(item_1327.as_str());
            }
        }
        array_1326.finish();
    }
    if let Some(var_1328) = &input.input_format {
        object.key("InputFormat").string(var_1328.as_str());
    }
    if let Some(var_1329) = &input.output_format {
        object.key("OutputFormat").string(var_1329.as_str());
    }
    if input.compressed {
        object.key("Compressed").boolean(input.compressed);
    }
    if input.number_of_buckets != 0 {
        object.key("NumberOfBuckets").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.number_of_buckets).into()),
        );
    }
    if let Some(var_1330) = &input.serde_info {
        let mut object_1331 = object.key("SerdeInfo").start_object();
        crate::json_ser::serialize_structure_crate_model_ser_de_info(&mut object_1331, var_1330)?;
        object_1331.finish();
    }
    if let Some(var_1332) = &input.bucket_columns {
        let mut array_1333 = object.key("BucketColumns").start_array();
        for item_1334 in var_1332 {
            {
                array_1333.value().string(item_1334.as_str());
            }
        }
        array_1333.finish();
    }
    if let Some(var_1335) = &input.sort_columns {
        let mut array_1336 = object.key("SortColumns").start_array();
        for item_1337 in var_1335 {
            {
                let mut object_1338 = array_1336.value().start_object();
                crate::json_ser::serialize_structure_crate_model_order(
                    &mut object_1338,
                    item_1337,
                )?;
                object_1338.finish();
            }
        }
        array_1336.finish();
    }
    if let Some(var_1339) = &input.parameters {
        let mut object_1340 = object.key("Parameters").start_object();
        for (key_1341, value_1342) in var_1339 {
            {
                object_1340.key(key_1341).string(value_1342.as_str());
            }
        }
        object_1340.finish();
    }
    if let Some(var_1343) = &input.skewed_info {
        let mut object_1344 = object.key("SkewedInfo").start_object();
        crate::json_ser::serialize_structure_crate_model_skewed_info(&mut object_1344, var_1343)?;
        object_1344.finish();
    }
    if input.stored_as_sub_directories {
        object
            .key("StoredAsSubDirectories")
            .boolean(input.stored_as_sub_directories);
    }
    if let Some(var_1345) = &input.schema_reference {
        let mut object_1346 = object.key("SchemaReference").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_reference(
            &mut object_1346,
            var_1345,
        )?;
        object_1346.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_physical_connection_requirements(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PhysicalConnectionRequirements,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1347) = &input.subnet_id {
        object.key("SubnetId").string(var_1347.as_str());
    }
    if let Some(var_1348) = &input.security_group_id_list {
        let mut array_1349 = object.key("SecurityGroupIdList").start_array();
        for item_1350 in var_1348 {
            {
                array_1349.value().string(item_1350.as_str());
            }
        }
        array_1349.finish();
    }
    if let Some(var_1351) = &input.availability_zone {
        object.key("AvailabilityZone").string(var_1351.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_target(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3Target,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1352) = &input.path {
        object.key("Path").string(var_1352.as_str());
    }
    if let Some(var_1353) = &input.exclusions {
        let mut array_1354 = object.key("Exclusions").start_array();
        for item_1355 in var_1353 {
            {
                array_1354.value().string(item_1355.as_str());
            }
        }
        array_1354.finish();
    }
    if let Some(var_1356) = &input.connection_name {
        object.key("ConnectionName").string(var_1356.as_str());
    }
    if let Some(var_1357) = &input.sample_size {
        object.key("SampleSize").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1357).into()),
        );
    }
    if let Some(var_1358) = &input.event_queue_arn {
        object.key("EventQueueArn").string(var_1358.as_str());
    }
    if let Some(var_1359) = &input.dlq_event_queue_arn {
        object.key("DlqEventQueueArn").string(var_1359.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_jdbc_target(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::JdbcTarget,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1360) = &input.connection_name {
        object.key("ConnectionName").string(var_1360.as_str());
    }
    if let Some(var_1361) = &input.path {
        object.key("Path").string(var_1361.as_str());
    }
    if let Some(var_1362) = &input.exclusions {
        let mut array_1363 = object.key("Exclusions").start_array();
        for item_1364 in var_1362 {
            {
                array_1363.value().string(item_1364.as_str());
            }
        }
        array_1363.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_mongo_db_target(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MongoDbTarget,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1365) = &input.connection_name {
        object.key("ConnectionName").string(var_1365.as_str());
    }
    if let Some(var_1366) = &input.path {
        object.key("Path").string(var_1366.as_str());
    }
    if let Some(var_1367) = &input.scan_all {
        object.key("ScanAll").boolean(*var_1367);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_dynamo_db_target(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DynamoDbTarget,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1368) = &input.path {
        object.key("Path").string(var_1368.as_str());
    }
    if let Some(var_1369) = &input.scan_all {
        object.key("scanAll").boolean(*var_1369);
    }
    if let Some(var_1370) = &input.scan_rate {
        object.key("scanRate").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_1370).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_catalog_target(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CatalogTarget,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1371) = &input.database_name {
        object.key("DatabaseName").string(var_1371.as_str());
    }
    if let Some(var_1372) = &input.tables {
        let mut array_1373 = object.key("Tables").start_array();
        for item_1374 in var_1372 {
            {
                array_1373.value().string(item_1374.as_str());
            }
        }
        array_1373.finish();
    }
    if let Some(var_1375) = &input.connection_name {
        object.key("ConnectionName").string(var_1375.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_delta_target(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DeltaTarget,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1376) = &input.delta_tables {
        let mut array_1377 = object.key("DeltaTables").start_array();
        for item_1378 in var_1376 {
            {
                array_1377.value().string(item_1378.as_str());
            }
        }
        array_1377.finish();
    }
    if let Some(var_1379) = &input.connection_name {
        object.key("ConnectionName").string(var_1379.as_str());
    }
    if let Some(var_1380) = &input.write_manifest {
        object.key("WriteManifest").boolean(*var_1380);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_principal_permissions(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PrincipalPermissions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1381) = &input.principal {
        let mut object_1382 = object.key("Principal").start_object();
        crate::json_ser::serialize_structure_crate_model_data_lake_principal(
            &mut object_1382,
            var_1381,
        )?;
        object_1382.finish();
    }
    if let Some(var_1383) = &input.permissions {
        let mut array_1384 = object.key("Permissions").start_array();
        for item_1385 in var_1383 {
            {
                array_1384.value().string(item_1385.as_str());
            }
        }
        array_1384.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_database_identifier(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DatabaseIdentifier,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1386) = &input.catalog_id {
        object.key("CatalogId").string(var_1386.as_str());
    }
    if let Some(var_1387) = &input.database_name {
        object.key("DatabaseName").string(var_1387.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_athena_connector_source(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AthenaConnectorSource,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1388) = &input.name {
        object.key("Name").string(var_1388.as_str());
    }
    if let Some(var_1389) = &input.connection_name {
        object.key("ConnectionName").string(var_1389.as_str());
    }
    if let Some(var_1390) = &input.connector_name {
        object.key("ConnectorName").string(var_1390.as_str());
    }
    if let Some(var_1391) = &input.connection_type {
        object.key("ConnectionType").string(var_1391.as_str());
    }
    if let Some(var_1392) = &input.connection_table {
        object.key("ConnectionTable").string(var_1392.as_str());
    }
    if let Some(var_1393) = &input.schema_name {
        object.key("SchemaName").string(var_1393.as_str());
    }
    if let Some(var_1394) = &input.output_schemas {
        let mut array_1395 = object.key("OutputSchemas").start_array();
        for item_1396 in var_1394 {
            {
                let mut object_1397 = array_1395.value().start_object();
                crate::json_ser::serialize_structure_crate_model_glue_schema(
                    &mut object_1397,
                    item_1396,
                )?;
                object_1397.finish();
            }
        }
        array_1395.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_jdbc_connector_source(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::JdbcConnectorSource,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1398) = &input.name {
        object.key("Name").string(var_1398.as_str());
    }
    if let Some(var_1399) = &input.connection_name {
        object.key("ConnectionName").string(var_1399.as_str());
    }
    if let Some(var_1400) = &input.connector_name {
        object.key("ConnectorName").string(var_1400.as_str());
    }
    if let Some(var_1401) = &input.connection_type {
        object.key("ConnectionType").string(var_1401.as_str());
    }
    if let Some(var_1402) = &input.additional_options {
        let mut object_1403 = object.key("AdditionalOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_jdbc_connector_options(
            &mut object_1403,
            var_1402,
        )?;
        object_1403.finish();
    }
    if let Some(var_1404) = &input.connection_table {
        object.key("ConnectionTable").string(var_1404.as_str());
    }
    if let Some(var_1405) = &input.query {
        object.key("Query").string(var_1405.as_str());
    }
    if let Some(var_1406) = &input.output_schemas {
        let mut array_1407 = object.key("OutputSchemas").start_array();
        for item_1408 in var_1406 {
            {
                let mut object_1409 = array_1407.value().start_object();
                crate::json_ser::serialize_structure_crate_model_glue_schema(
                    &mut object_1409,
                    item_1408,
                )?;
                object_1409.finish();
            }
        }
        array_1407.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_spark_connector_source(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SparkConnectorSource,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1410) = &input.name {
        object.key("Name").string(var_1410.as_str());
    }
    if let Some(var_1411) = &input.connection_name {
        object.key("ConnectionName").string(var_1411.as_str());
    }
    if let Some(var_1412) = &input.connector_name {
        object.key("ConnectorName").string(var_1412.as_str());
    }
    if let Some(var_1413) = &input.connection_type {
        object.key("ConnectionType").string(var_1413.as_str());
    }
    if let Some(var_1414) = &input.additional_options {
        let mut object_1415 = object.key("AdditionalOptions").start_object();
        for (key_1416, value_1417) in var_1414 {
            {
                object_1415.key(key_1416).string(value_1417.as_str());
            }
        }
        object_1415.finish();
    }
    if let Some(var_1418) = &input.output_schemas {
        let mut array_1419 = object.key("OutputSchemas").start_array();
        for item_1420 in var_1418 {
            {
                let mut object_1421 = array_1419.value().start_object();
                crate::json_ser::serialize_structure_crate_model_glue_schema(
                    &mut object_1421,
                    item_1420,
                )?;
                object_1421.finish();
            }
        }
        array_1419.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_catalog_source(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CatalogSource,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1422) = &input.name {
        object.key("Name").string(var_1422.as_str());
    }
    if let Some(var_1423) = &input.database {
        object.key("Database").string(var_1423.as_str());
    }
    if let Some(var_1424) = &input.table {
        object.key("Table").string(var_1424.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_redshift_source(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RedshiftSource,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1425) = &input.name {
        object.key("Name").string(var_1425.as_str());
    }
    if let Some(var_1426) = &input.database {
        object.key("Database").string(var_1426.as_str());
    }
    if let Some(var_1427) = &input.table {
        object.key("Table").string(var_1427.as_str());
    }
    if let Some(var_1428) = &input.redshift_tmp_dir {
        object.key("RedshiftTmpDir").string(var_1428.as_str());
    }
    if let Some(var_1429) = &input.tmp_dir_iam_role {
        object.key("TmpDirIAMRole").string(var_1429.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_catalog_source(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3CatalogSource,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1430) = &input.name {
        object.key("Name").string(var_1430.as_str());
    }
    if let Some(var_1431) = &input.database {
        object.key("Database").string(var_1431.as_str());
    }
    if let Some(var_1432) = &input.table {
        object.key("Table").string(var_1432.as_str());
    }
    if let Some(var_1433) = &input.partition_predicate {
        object.key("PartitionPredicate").string(var_1433.as_str());
    }
    if let Some(var_1434) = &input.additional_options {
        let mut object_1435 = object.key("AdditionalOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_source_additional_options(
            &mut object_1435,
            var_1434,
        )?;
        object_1435.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_csv_source(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3CsvSource,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1436) = &input.name {
        object.key("Name").string(var_1436.as_str());
    }
    if let Some(var_1437) = &input.paths {
        let mut array_1438 = object.key("Paths").start_array();
        for item_1439 in var_1437 {
            {
                array_1438.value().string(item_1439.as_str());
            }
        }
        array_1438.finish();
    }
    if let Some(var_1440) = &input.compression_type {
        object.key("CompressionType").string(var_1440.as_str());
    }
    if let Some(var_1441) = &input.exclusions {
        let mut array_1442 = object.key("Exclusions").start_array();
        for item_1443 in var_1441 {
            {
                array_1442.value().string(item_1443.as_str());
            }
        }
        array_1442.finish();
    }
    if let Some(var_1444) = &input.group_size {
        object.key("GroupSize").string(var_1444.as_str());
    }
    if let Some(var_1445) = &input.group_files {
        object.key("GroupFiles").string(var_1445.as_str());
    }
    if let Some(var_1446) = &input.recurse {
        object.key("Recurse").boolean(*var_1446);
    }
    if let Some(var_1447) = &input.max_band {
        object.key("MaxBand").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1447).into()),
        );
    }
    if let Some(var_1448) = &input.max_files_in_band {
        object.key("MaxFilesInBand").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1448).into()),
        );
    }
    if let Some(var_1449) = &input.additional_options {
        let mut object_1450 = object.key("AdditionalOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_direct_source_additional_options(
            &mut object_1450,
            var_1449,
        )?;
        object_1450.finish();
    }
    if let Some(var_1451) = &input.separator {
        object.key("Separator").string(var_1451.as_str());
    }
    if let Some(var_1452) = &input.escaper {
        object.key("Escaper").string(var_1452.as_str());
    }
    if let Some(var_1453) = &input.quote_char {
        object.key("QuoteChar").string(var_1453.as_str());
    }
    if let Some(var_1454) = &input.multiline {
        object.key("Multiline").boolean(*var_1454);
    }
    if let Some(var_1455) = &input.with_header {
        object.key("WithHeader").boolean(*var_1455);
    }
    if let Some(var_1456) = &input.write_header {
        object.key("WriteHeader").boolean(*var_1456);
    }
    if let Some(var_1457) = &input.skip_first {
        object.key("SkipFirst").boolean(*var_1457);
    }
    if input.optimize_performance {
        object
            .key("OptimizePerformance")
            .boolean(input.optimize_performance);
    }
    if let Some(var_1458) = &input.output_schemas {
        let mut array_1459 = object.key("OutputSchemas").start_array();
        for item_1460 in var_1458 {
            {
                let mut object_1461 = array_1459.value().start_object();
                crate::json_ser::serialize_structure_crate_model_glue_schema(
                    &mut object_1461,
                    item_1460,
                )?;
                object_1461.finish();
            }
        }
        array_1459.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_json_source(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3JsonSource,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1462) = &input.name {
        object.key("Name").string(var_1462.as_str());
    }
    if let Some(var_1463) = &input.paths {
        let mut array_1464 = object.key("Paths").start_array();
        for item_1465 in var_1463 {
            {
                array_1464.value().string(item_1465.as_str());
            }
        }
        array_1464.finish();
    }
    if let Some(var_1466) = &input.compression_type {
        object.key("CompressionType").string(var_1466.as_str());
    }
    if let Some(var_1467) = &input.exclusions {
        let mut array_1468 = object.key("Exclusions").start_array();
        for item_1469 in var_1467 {
            {
                array_1468.value().string(item_1469.as_str());
            }
        }
        array_1468.finish();
    }
    if let Some(var_1470) = &input.group_size {
        object.key("GroupSize").string(var_1470.as_str());
    }
    if let Some(var_1471) = &input.group_files {
        object.key("GroupFiles").string(var_1471.as_str());
    }
    if let Some(var_1472) = &input.recurse {
        object.key("Recurse").boolean(*var_1472);
    }
    if let Some(var_1473) = &input.max_band {
        object.key("MaxBand").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1473).into()),
        );
    }
    if let Some(var_1474) = &input.max_files_in_band {
        object.key("MaxFilesInBand").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1474).into()),
        );
    }
    if let Some(var_1475) = &input.additional_options {
        let mut object_1476 = object.key("AdditionalOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_direct_source_additional_options(
            &mut object_1476,
            var_1475,
        )?;
        object_1476.finish();
    }
    if let Some(var_1477) = &input.json_path {
        object.key("JsonPath").string(var_1477.as_str());
    }
    if let Some(var_1478) = &input.multiline {
        object.key("Multiline").boolean(*var_1478);
    }
    if let Some(var_1479) = &input.output_schemas {
        let mut array_1480 = object.key("OutputSchemas").start_array();
        for item_1481 in var_1479 {
            {
                let mut object_1482 = array_1480.value().start_object();
                crate::json_ser::serialize_structure_crate_model_glue_schema(
                    &mut object_1482,
                    item_1481,
                )?;
                object_1482.finish();
            }
        }
        array_1480.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_parquet_source(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3ParquetSource,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1483) = &input.name {
        object.key("Name").string(var_1483.as_str());
    }
    if let Some(var_1484) = &input.paths {
        let mut array_1485 = object.key("Paths").start_array();
        for item_1486 in var_1484 {
            {
                array_1485.value().string(item_1486.as_str());
            }
        }
        array_1485.finish();
    }
    if let Some(var_1487) = &input.compression_type {
        object.key("CompressionType").string(var_1487.as_str());
    }
    if let Some(var_1488) = &input.exclusions {
        let mut array_1489 = object.key("Exclusions").start_array();
        for item_1490 in var_1488 {
            {
                array_1489.value().string(item_1490.as_str());
            }
        }
        array_1489.finish();
    }
    if let Some(var_1491) = &input.group_size {
        object.key("GroupSize").string(var_1491.as_str());
    }
    if let Some(var_1492) = &input.group_files {
        object.key("GroupFiles").string(var_1492.as_str());
    }
    if let Some(var_1493) = &input.recurse {
        object.key("Recurse").boolean(*var_1493);
    }
    if let Some(var_1494) = &input.max_band {
        object.key("MaxBand").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1494).into()),
        );
    }
    if let Some(var_1495) = &input.max_files_in_band {
        object.key("MaxFilesInBand").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1495).into()),
        );
    }
    if let Some(var_1496) = &input.additional_options {
        let mut object_1497 = object.key("AdditionalOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_direct_source_additional_options(
            &mut object_1497,
            var_1496,
        )?;
        object_1497.finish();
    }
    if let Some(var_1498) = &input.output_schemas {
        let mut array_1499 = object.key("OutputSchemas").start_array();
        for item_1500 in var_1498 {
            {
                let mut object_1501 = array_1499.value().start_object();
                crate::json_ser::serialize_structure_crate_model_glue_schema(
                    &mut object_1501,
                    item_1500,
                )?;
                object_1501.finish();
            }
        }
        array_1499.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_relational_catalog_source(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RelationalCatalogSource,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1502) = &input.name {
        object.key("Name").string(var_1502.as_str());
    }
    if let Some(var_1503) = &input.database {
        object.key("Database").string(var_1503.as_str());
    }
    if let Some(var_1504) = &input.table {
        object.key("Table").string(var_1504.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_dynamo_db_catalog_source(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DynamoDbCatalogSource,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1505) = &input.name {
        object.key("Name").string(var_1505.as_str());
    }
    if let Some(var_1506) = &input.database {
        object.key("Database").string(var_1506.as_str());
    }
    if let Some(var_1507) = &input.table {
        object.key("Table").string(var_1507.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_jdbc_connector_target(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::JdbcConnectorTarget,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1508) = &input.name {
        object.key("Name").string(var_1508.as_str());
    }
    if let Some(var_1509) = &input.inputs {
        let mut array_1510 = object.key("Inputs").start_array();
        for item_1511 in var_1509 {
            {
                array_1510.value().string(item_1511.as_str());
            }
        }
        array_1510.finish();
    }
    if let Some(var_1512) = &input.connection_name {
        object.key("ConnectionName").string(var_1512.as_str());
    }
    if let Some(var_1513) = &input.connection_table {
        object.key("ConnectionTable").string(var_1513.as_str());
    }
    if let Some(var_1514) = &input.connector_name {
        object.key("ConnectorName").string(var_1514.as_str());
    }
    if let Some(var_1515) = &input.connection_type {
        object.key("ConnectionType").string(var_1515.as_str());
    }
    if let Some(var_1516) = &input.additional_options {
        let mut object_1517 = object.key("AdditionalOptions").start_object();
        for (key_1518, value_1519) in var_1516 {
            {
                object_1517.key(key_1518).string(value_1519.as_str());
            }
        }
        object_1517.finish();
    }
    if let Some(var_1520) = &input.output_schemas {
        let mut array_1521 = object.key("OutputSchemas").start_array();
        for item_1522 in var_1520 {
            {
                let mut object_1523 = array_1521.value().start_object();
                crate::json_ser::serialize_structure_crate_model_glue_schema(
                    &mut object_1523,
                    item_1522,
                )?;
                object_1523.finish();
            }
        }
        array_1521.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_spark_connector_target(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SparkConnectorTarget,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1524) = &input.name {
        object.key("Name").string(var_1524.as_str());
    }
    if let Some(var_1525) = &input.inputs {
        let mut array_1526 = object.key("Inputs").start_array();
        for item_1527 in var_1525 {
            {
                array_1526.value().string(item_1527.as_str());
            }
        }
        array_1526.finish();
    }
    if let Some(var_1528) = &input.connection_name {
        object.key("ConnectionName").string(var_1528.as_str());
    }
    if let Some(var_1529) = &input.connector_name {
        object.key("ConnectorName").string(var_1529.as_str());
    }
    if let Some(var_1530) = &input.connection_type {
        object.key("ConnectionType").string(var_1530.as_str());
    }
    if let Some(var_1531) = &input.additional_options {
        let mut object_1532 = object.key("AdditionalOptions").start_object();
        for (key_1533, value_1534) in var_1531 {
            {
                object_1532.key(key_1533).string(value_1534.as_str());
            }
        }
        object_1532.finish();
    }
    if let Some(var_1535) = &input.output_schemas {
        let mut array_1536 = object.key("OutputSchemas").start_array();
        for item_1537 in var_1535 {
            {
                let mut object_1538 = array_1536.value().start_object();
                crate::json_ser::serialize_structure_crate_model_glue_schema(
                    &mut object_1538,
                    item_1537,
                )?;
                object_1538.finish();
            }
        }
        array_1536.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_basic_catalog_target(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BasicCatalogTarget,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1539) = &input.name {
        object.key("Name").string(var_1539.as_str());
    }
    if let Some(var_1540) = &input.inputs {
        let mut array_1541 = object.key("Inputs").start_array();
        for item_1542 in var_1540 {
            {
                array_1541.value().string(item_1542.as_str());
            }
        }
        array_1541.finish();
    }
    if let Some(var_1543) = &input.database {
        object.key("Database").string(var_1543.as_str());
    }
    if let Some(var_1544) = &input.table {
        object.key("Table").string(var_1544.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_redshift_target(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RedshiftTarget,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1545) = &input.name {
        object.key("Name").string(var_1545.as_str());
    }
    if let Some(var_1546) = &input.inputs {
        let mut array_1547 = object.key("Inputs").start_array();
        for item_1548 in var_1546 {
            {
                array_1547.value().string(item_1548.as_str());
            }
        }
        array_1547.finish();
    }
    if let Some(var_1549) = &input.database {
        object.key("Database").string(var_1549.as_str());
    }
    if let Some(var_1550) = &input.table {
        object.key("Table").string(var_1550.as_str());
    }
    if let Some(var_1551) = &input.redshift_tmp_dir {
        object.key("RedshiftTmpDir").string(var_1551.as_str());
    }
    if let Some(var_1552) = &input.tmp_dir_iam_role {
        object.key("TmpDirIAMRole").string(var_1552.as_str());
    }
    if let Some(var_1553) = &input.upsert_redshift_options {
        let mut object_1554 = object.key("UpsertRedshiftOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_upsert_redshift_target_options(
            &mut object_1554,
            var_1553,
        )?;
        object_1554.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_catalog_target(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3CatalogTarget,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1555) = &input.name {
        object.key("Name").string(var_1555.as_str());
    }
    if let Some(var_1556) = &input.inputs {
        let mut array_1557 = object.key("Inputs").start_array();
        for item_1558 in var_1556 {
            {
                array_1557.value().string(item_1558.as_str());
            }
        }
        array_1557.finish();
    }
    if let Some(var_1559) = &input.partition_keys {
        let mut array_1560 = object.key("PartitionKeys").start_array();
        for item_1561 in var_1559 {
            {
                let mut array_1562 = array_1560.value().start_array();
                for item_1563 in item_1561 {
                    {
                        array_1562.value().string(item_1563.as_str());
                    }
                }
                array_1562.finish();
            }
        }
        array_1560.finish();
    }
    if let Some(var_1564) = &input.table {
        object.key("Table").string(var_1564.as_str());
    }
    if let Some(var_1565) = &input.database {
        object.key("Database").string(var_1565.as_str());
    }
    if let Some(var_1566) = &input.schema_change_policy {
        let mut object_1567 = object.key("SchemaChangePolicy").start_object();
        crate::json_ser::serialize_structure_crate_model_catalog_schema_change_policy(
            &mut object_1567,
            var_1566,
        )?;
        object_1567.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_glue_parquet_target(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3GlueParquetTarget,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1568) = &input.name {
        object.key("Name").string(var_1568.as_str());
    }
    if let Some(var_1569) = &input.inputs {
        let mut array_1570 = object.key("Inputs").start_array();
        for item_1571 in var_1569 {
            {
                array_1570.value().string(item_1571.as_str());
            }
        }
        array_1570.finish();
    }
    if let Some(var_1572) = &input.partition_keys {
        let mut array_1573 = object.key("PartitionKeys").start_array();
        for item_1574 in var_1572 {
            {
                let mut array_1575 = array_1573.value().start_array();
                for item_1576 in item_1574 {
                    {
                        array_1575.value().string(item_1576.as_str());
                    }
                }
                array_1575.finish();
            }
        }
        array_1573.finish();
    }
    if let Some(var_1577) = &input.path {
        object.key("Path").string(var_1577.as_str());
    }
    if let Some(var_1578) = &input.compression {
        object.key("Compression").string(var_1578.as_str());
    }
    if let Some(var_1579) = &input.schema_change_policy {
        let mut object_1580 = object.key("SchemaChangePolicy").start_object();
        crate::json_ser::serialize_structure_crate_model_direct_schema_change_policy(
            &mut object_1580,
            var_1579,
        )?;
        object_1580.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_direct_target(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3DirectTarget,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1581) = &input.name {
        object.key("Name").string(var_1581.as_str());
    }
    if let Some(var_1582) = &input.inputs {
        let mut array_1583 = object.key("Inputs").start_array();
        for item_1584 in var_1582 {
            {
                array_1583.value().string(item_1584.as_str());
            }
        }
        array_1583.finish();
    }
    if let Some(var_1585) = &input.partition_keys {
        let mut array_1586 = object.key("PartitionKeys").start_array();
        for item_1587 in var_1585 {
            {
                let mut array_1588 = array_1586.value().start_array();
                for item_1589 in item_1587 {
                    {
                        array_1588.value().string(item_1589.as_str());
                    }
                }
                array_1588.finish();
            }
        }
        array_1586.finish();
    }
    if let Some(var_1590) = &input.path {
        object.key("Path").string(var_1590.as_str());
    }
    if let Some(var_1591) = &input.compression {
        object.key("Compression").string(var_1591.as_str());
    }
    if let Some(var_1592) = &input.format {
        object.key("Format").string(var_1592.as_str());
    }
    if let Some(var_1593) = &input.schema_change_policy {
        let mut object_1594 = object.key("SchemaChangePolicy").start_object();
        crate::json_ser::serialize_structure_crate_model_direct_schema_change_policy(
            &mut object_1594,
            var_1593,
        )?;
        object_1594.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_apply_mapping(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ApplyMapping,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1595) = &input.name {
        object.key("Name").string(var_1595.as_str());
    }
    if let Some(var_1596) = &input.inputs {
        let mut array_1597 = object.key("Inputs").start_array();
        for item_1598 in var_1596 {
            {
                array_1597.value().string(item_1598.as_str());
            }
        }
        array_1597.finish();
    }
    if let Some(var_1599) = &input.mapping {
        let mut array_1600 = object.key("Mapping").start_array();
        for item_1601 in var_1599 {
            {
                let mut object_1602 = array_1600.value().start_object();
                crate::json_ser::serialize_structure_crate_model_mapping(
                    &mut object_1602,
                    item_1601,
                )?;
                object_1602.finish();
            }
        }
        array_1600.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_select_fields(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SelectFields,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1603) = &input.name {
        object.key("Name").string(var_1603.as_str());
    }
    if let Some(var_1604) = &input.inputs {
        let mut array_1605 = object.key("Inputs").start_array();
        for item_1606 in var_1604 {
            {
                array_1605.value().string(item_1606.as_str());
            }
        }
        array_1605.finish();
    }
    if let Some(var_1607) = &input.paths {
        let mut array_1608 = object.key("Paths").start_array();
        for item_1609 in var_1607 {
            {
                let mut array_1610 = array_1608.value().start_array();
                for item_1611 in item_1609 {
                    {
                        array_1610.value().string(item_1611.as_str());
                    }
                }
                array_1610.finish();
            }
        }
        array_1608.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_drop_fields(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DropFields,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1612) = &input.name {
        object.key("Name").string(var_1612.as_str());
    }
    if let Some(var_1613) = &input.inputs {
        let mut array_1614 = object.key("Inputs").start_array();
        for item_1615 in var_1613 {
            {
                array_1614.value().string(item_1615.as_str());
            }
        }
        array_1614.finish();
    }
    if let Some(var_1616) = &input.paths {
        let mut array_1617 = object.key("Paths").start_array();
        for item_1618 in var_1616 {
            {
                let mut array_1619 = array_1617.value().start_array();
                for item_1620 in item_1618 {
                    {
                        array_1619.value().string(item_1620.as_str());
                    }
                }
                array_1619.finish();
            }
        }
        array_1617.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_rename_field(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RenameField,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1621) = &input.name {
        object.key("Name").string(var_1621.as_str());
    }
    if let Some(var_1622) = &input.inputs {
        let mut array_1623 = object.key("Inputs").start_array();
        for item_1624 in var_1622 {
            {
                array_1623.value().string(item_1624.as_str());
            }
        }
        array_1623.finish();
    }
    if let Some(var_1625) = &input.source_path {
        let mut array_1626 = object.key("SourcePath").start_array();
        for item_1627 in var_1625 {
            {
                array_1626.value().string(item_1627.as_str());
            }
        }
        array_1626.finish();
    }
    if let Some(var_1628) = &input.target_path {
        let mut array_1629 = object.key("TargetPath").start_array();
        for item_1630 in var_1628 {
            {
                array_1629.value().string(item_1630.as_str());
            }
        }
        array_1629.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_spigot(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Spigot,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1631) = &input.name {
        object.key("Name").string(var_1631.as_str());
    }
    if let Some(var_1632) = &input.inputs {
        let mut array_1633 = object.key("Inputs").start_array();
        for item_1634 in var_1632 {
            {
                array_1633.value().string(item_1634.as_str());
            }
        }
        array_1633.finish();
    }
    if let Some(var_1635) = &input.path {
        object.key("Path").string(var_1635.as_str());
    }
    if let Some(var_1636) = &input.topk {
        object.key("Topk").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1636).into()),
        );
    }
    if let Some(var_1637) = &input.prob {
        object.key("Prob").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_1637).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_join(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Join,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1638) = &input.name {
        object.key("Name").string(var_1638.as_str());
    }
    if let Some(var_1639) = &input.inputs {
        let mut array_1640 = object.key("Inputs").start_array();
        for item_1641 in var_1639 {
            {
                array_1640.value().string(item_1641.as_str());
            }
        }
        array_1640.finish();
    }
    if let Some(var_1642) = &input.join_type {
        object.key("JoinType").string(var_1642.as_str());
    }
    if let Some(var_1643) = &input.columns {
        let mut array_1644 = object.key("Columns").start_array();
        for item_1645 in var_1643 {
            {
                let mut object_1646 = array_1644.value().start_object();
                crate::json_ser::serialize_structure_crate_model_join_column(
                    &mut object_1646,
                    item_1645,
                )?;
                object_1646.finish();
            }
        }
        array_1644.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_split_fields(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SplitFields,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1647) = &input.name {
        object.key("Name").string(var_1647.as_str());
    }
    if let Some(var_1648) = &input.inputs {
        let mut array_1649 = object.key("Inputs").start_array();
        for item_1650 in var_1648 {
            {
                array_1649.value().string(item_1650.as_str());
            }
        }
        array_1649.finish();
    }
    if let Some(var_1651) = &input.paths {
        let mut array_1652 = object.key("Paths").start_array();
        for item_1653 in var_1651 {
            {
                let mut array_1654 = array_1652.value().start_array();
                for item_1655 in item_1653 {
                    {
                        array_1654.value().string(item_1655.as_str());
                    }
                }
                array_1654.finish();
            }
        }
        array_1652.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_select_from_collection(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SelectFromCollection,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1656) = &input.name {
        object.key("Name").string(var_1656.as_str());
    }
    if let Some(var_1657) = &input.inputs {
        let mut array_1658 = object.key("Inputs").start_array();
        for item_1659 in var_1657 {
            {
                array_1658.value().string(item_1659.as_str());
            }
        }
        array_1658.finish();
    }
    {
        object.key("Index").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.index).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_fill_missing_values(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FillMissingValues,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1660) = &input.name {
        object.key("Name").string(var_1660.as_str());
    }
    if let Some(var_1661) = &input.inputs {
        let mut array_1662 = object.key("Inputs").start_array();
        for item_1663 in var_1661 {
            {
                array_1662.value().string(item_1663.as_str());
            }
        }
        array_1662.finish();
    }
    if let Some(var_1664) = &input.imputed_path {
        object.key("ImputedPath").string(var_1664.as_str());
    }
    if let Some(var_1665) = &input.filled_path {
        object.key("FilledPath").string(var_1665.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Filter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1666) = &input.name {
        object.key("Name").string(var_1666.as_str());
    }
    if let Some(var_1667) = &input.inputs {
        let mut array_1668 = object.key("Inputs").start_array();
        for item_1669 in var_1667 {
            {
                array_1668.value().string(item_1669.as_str());
            }
        }
        array_1668.finish();
    }
    if let Some(var_1670) = &input.logical_operator {
        object.key("LogicalOperator").string(var_1670.as_str());
    }
    if let Some(var_1671) = &input.filters {
        let mut array_1672 = object.key("Filters").start_array();
        for item_1673 in var_1671 {
            {
                let mut object_1674 = array_1672.value().start_object();
                crate::json_ser::serialize_structure_crate_model_filter_expression(
                    &mut object_1674,
                    item_1673,
                )?;
                object_1674.finish();
            }
        }
        array_1672.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_custom_code(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CustomCode,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1675) = &input.name {
        object.key("Name").string(var_1675.as_str());
    }
    if let Some(var_1676) = &input.inputs {
        let mut array_1677 = object.key("Inputs").start_array();
        for item_1678 in var_1676 {
            {
                array_1677.value().string(item_1678.as_str());
            }
        }
        array_1677.finish();
    }
    if let Some(var_1679) = &input.code {
        object.key("Code").string(var_1679.as_str());
    }
    if let Some(var_1680) = &input.class_name {
        object.key("ClassName").string(var_1680.as_str());
    }
    if let Some(var_1681) = &input.output_schemas {
        let mut array_1682 = object.key("OutputSchemas").start_array();
        for item_1683 in var_1681 {
            {
                let mut object_1684 = array_1682.value().start_object();
                crate::json_ser::serialize_structure_crate_model_glue_schema(
                    &mut object_1684,
                    item_1683,
                )?;
                object_1684.finish();
            }
        }
        array_1682.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_spark_sql(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SparkSql,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1685) = &input.name {
        object.key("Name").string(var_1685.as_str());
    }
    if let Some(var_1686) = &input.inputs {
        let mut array_1687 = object.key("Inputs").start_array();
        for item_1688 in var_1686 {
            {
                array_1687.value().string(item_1688.as_str());
            }
        }
        array_1687.finish();
    }
    if let Some(var_1689) = &input.sql_query {
        object.key("SqlQuery").string(var_1689.as_str());
    }
    if let Some(var_1690) = &input.sql_aliases {
        let mut array_1691 = object.key("SqlAliases").start_array();
        for item_1692 in var_1690 {
            {
                let mut object_1693 = array_1691.value().start_object();
                crate::json_ser::serialize_structure_crate_model_sql_alias(
                    &mut object_1693,
                    item_1692,
                )?;
                object_1693.finish();
            }
        }
        array_1691.finish();
    }
    if let Some(var_1694) = &input.output_schemas {
        let mut array_1695 = object.key("OutputSchemas").start_array();
        for item_1696 in var_1694 {
            {
                let mut object_1697 = array_1695.value().start_object();
                crate::json_ser::serialize_structure_crate_model_glue_schema(
                    &mut object_1697,
                    item_1696,
                )?;
                object_1697.finish();
            }
        }
        array_1695.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_direct_kinesis_source(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DirectKinesisSource,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1698) = &input.name {
        object.key("Name").string(var_1698.as_str());
    }
    if let Some(var_1699) = &input.window_size {
        object.key("WindowSize").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1699).into()),
        );
    }
    if let Some(var_1700) = &input.detect_schema {
        object.key("DetectSchema").boolean(*var_1700);
    }
    if let Some(var_1701) = &input.streaming_options {
        let mut object_1702 = object.key("StreamingOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_kinesis_streaming_source_options(
            &mut object_1702,
            var_1701,
        )?;
        object_1702.finish();
    }
    if let Some(var_1703) = &input.data_preview_options {
        let mut object_1704 = object.key("DataPreviewOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_streaming_data_preview_options(
            &mut object_1704,
            var_1703,
        )?;
        object_1704.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_direct_kafka_source(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DirectKafkaSource,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1705) = &input.name {
        object.key("Name").string(var_1705.as_str());
    }
    if let Some(var_1706) = &input.streaming_options {
        let mut object_1707 = object.key("StreamingOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_kafka_streaming_source_options(
            &mut object_1707,
            var_1706,
        )?;
        object_1707.finish();
    }
    if let Some(var_1708) = &input.window_size {
        object.key("WindowSize").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1708).into()),
        );
    }
    if let Some(var_1709) = &input.detect_schema {
        object.key("DetectSchema").boolean(*var_1709);
    }
    if let Some(var_1710) = &input.data_preview_options {
        let mut object_1711 = object.key("DataPreviewOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_streaming_data_preview_options(
            &mut object_1711,
            var_1710,
        )?;
        object_1711.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_catalog_kinesis_source(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CatalogKinesisSource,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1712) = &input.name {
        object.key("Name").string(var_1712.as_str());
    }
    if let Some(var_1713) = &input.window_size {
        object.key("WindowSize").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1713).into()),
        );
    }
    if let Some(var_1714) = &input.detect_schema {
        object.key("DetectSchema").boolean(*var_1714);
    }
    if let Some(var_1715) = &input.table {
        object.key("Table").string(var_1715.as_str());
    }
    if let Some(var_1716) = &input.database {
        object.key("Database").string(var_1716.as_str());
    }
    if let Some(var_1717) = &input.streaming_options {
        let mut object_1718 = object.key("StreamingOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_kinesis_streaming_source_options(
            &mut object_1718,
            var_1717,
        )?;
        object_1718.finish();
    }
    if let Some(var_1719) = &input.data_preview_options {
        let mut object_1720 = object.key("DataPreviewOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_streaming_data_preview_options(
            &mut object_1720,
            var_1719,
        )?;
        object_1720.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_catalog_kafka_source(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CatalogKafkaSource,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1721) = &input.name {
        object.key("Name").string(var_1721.as_str());
    }
    if let Some(var_1722) = &input.window_size {
        object.key("WindowSize").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1722).into()),
        );
    }
    if let Some(var_1723) = &input.detect_schema {
        object.key("DetectSchema").boolean(*var_1723);
    }
    if let Some(var_1724) = &input.table {
        object.key("Table").string(var_1724.as_str());
    }
    if let Some(var_1725) = &input.database {
        object.key("Database").string(var_1725.as_str());
    }
    if let Some(var_1726) = &input.streaming_options {
        let mut object_1727 = object.key("StreamingOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_kafka_streaming_source_options(
            &mut object_1727,
            var_1726,
        )?;
        object_1727.finish();
    }
    if let Some(var_1728) = &input.data_preview_options {
        let mut object_1729 = object.key("DataPreviewOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_streaming_data_preview_options(
            &mut object_1729,
            var_1728,
        )?;
        object_1729.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_drop_null_fields(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DropNullFields,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1730) = &input.name {
        object.key("Name").string(var_1730.as_str());
    }
    if let Some(var_1731) = &input.inputs {
        let mut array_1732 = object.key("Inputs").start_array();
        for item_1733 in var_1731 {
            {
                array_1732.value().string(item_1733.as_str());
            }
        }
        array_1732.finish();
    }
    if let Some(var_1734) = &input.null_check_box_list {
        let mut object_1735 = object.key("NullCheckBoxList").start_object();
        crate::json_ser::serialize_structure_crate_model_null_check_box_list(
            &mut object_1735,
            var_1734,
        )?;
        object_1735.finish();
    }
    if let Some(var_1736) = &input.null_text_list {
        let mut array_1737 = object.key("NullTextList").start_array();
        for item_1738 in var_1736 {
            {
                let mut object_1739 = array_1737.value().start_object();
                crate::json_ser::serialize_structure_crate_model_null_value_field(
                    &mut object_1739,
                    item_1738,
                )?;
                object_1739.finish();
            }
        }
        array_1737.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_merge(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Merge,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1740) = &input.name {
        object.key("Name").string(var_1740.as_str());
    }
    if let Some(var_1741) = &input.inputs {
        let mut array_1742 = object.key("Inputs").start_array();
        for item_1743 in var_1741 {
            {
                array_1742.value().string(item_1743.as_str());
            }
        }
        array_1742.finish();
    }
    if let Some(var_1744) = &input.source {
        object.key("Source").string(var_1744.as_str());
    }
    if let Some(var_1745) = &input.primary_keys {
        let mut array_1746 = object.key("PrimaryKeys").start_array();
        for item_1747 in var_1745 {
            {
                let mut array_1748 = array_1746.value().start_array();
                for item_1749 in item_1747 {
                    {
                        array_1748.value().string(item_1749.as_str());
                    }
                }
                array_1748.finish();
            }
        }
        array_1746.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_union(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Union,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1750) = &input.name {
        object.key("Name").string(var_1750.as_str());
    }
    if let Some(var_1751) = &input.inputs {
        let mut array_1752 = object.key("Inputs").start_array();
        for item_1753 in var_1751 {
            {
                array_1752.value().string(item_1753.as_str());
            }
        }
        array_1752.finish();
    }
    if let Some(var_1754) = &input.union_type {
        object.key("UnionType").string(var_1754.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_pii_detection(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PiiDetection,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1755) = &input.name {
        object.key("Name").string(var_1755.as_str());
    }
    if let Some(var_1756) = &input.inputs {
        let mut array_1757 = object.key("Inputs").start_array();
        for item_1758 in var_1756 {
            {
                array_1757.value().string(item_1758.as_str());
            }
        }
        array_1757.finish();
    }
    if let Some(var_1759) = &input.pii_type {
        object.key("PiiType").string(var_1759.as_str());
    }
    if let Some(var_1760) = &input.entity_types_to_detect {
        let mut array_1761 = object.key("EntityTypesToDetect").start_array();
        for item_1762 in var_1760 {
            {
                array_1761.value().string(item_1762.as_str());
            }
        }
        array_1761.finish();
    }
    if let Some(var_1763) = &input.output_column_name {
        object.key("OutputColumnName").string(var_1763.as_str());
    }
    if let Some(var_1764) = &input.sample_fraction {
        object.key("SampleFraction").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_1764).into()),
        );
    }
    if let Some(var_1765) = &input.threshold_fraction {
        object.key("ThresholdFraction").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_1765).into()),
        );
    }
    if let Some(var_1766) = &input.mask_value {
        object.key("MaskValue").string(var_1766.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aggregate(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Aggregate,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1767) = &input.name {
        object.key("Name").string(var_1767.as_str());
    }
    if let Some(var_1768) = &input.inputs {
        let mut array_1769 = object.key("Inputs").start_array();
        for item_1770 in var_1768 {
            {
                array_1769.value().string(item_1770.as_str());
            }
        }
        array_1769.finish();
    }
    if let Some(var_1771) = &input.groups {
        let mut array_1772 = object.key("Groups").start_array();
        for item_1773 in var_1771 {
            {
                let mut array_1774 = array_1772.value().start_array();
                for item_1775 in item_1773 {
                    {
                        array_1774.value().string(item_1775.as_str());
                    }
                }
                array_1774.finish();
            }
        }
        array_1772.finish();
    }
    if let Some(var_1776) = &input.aggs {
        let mut array_1777 = object.key("Aggs").start_array();
        for item_1778 in var_1776 {
            {
                let mut object_1779 = array_1777.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aggregate_operation(
                    &mut object_1779,
                    item_1778,
                )?;
                object_1779.finish();
            }
        }
        array_1777.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_drop_duplicates(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DropDuplicates,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1780) = &input.name {
        object.key("Name").string(var_1780.as_str());
    }
    if let Some(var_1781) = &input.inputs {
        let mut array_1782 = object.key("Inputs").start_array();
        for item_1783 in var_1781 {
            {
                array_1782.value().string(item_1783.as_str());
            }
        }
        array_1782.finish();
    }
    if let Some(var_1784) = &input.columns {
        let mut array_1785 = object.key("Columns").start_array();
        for item_1786 in var_1784 {
            {
                let mut array_1787 = array_1785.value().start_array();
                for item_1788 in item_1786 {
                    {
                        array_1787.value().string(item_1788.as_str());
                    }
                }
                array_1787.finish();
            }
        }
        array_1785.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_governed_catalog_target(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::GovernedCatalogTarget,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1789) = &input.name {
        object.key("Name").string(var_1789.as_str());
    }
    if let Some(var_1790) = &input.inputs {
        let mut array_1791 = object.key("Inputs").start_array();
        for item_1792 in var_1790 {
            {
                array_1791.value().string(item_1792.as_str());
            }
        }
        array_1791.finish();
    }
    if let Some(var_1793) = &input.partition_keys {
        let mut array_1794 = object.key("PartitionKeys").start_array();
        for item_1795 in var_1793 {
            {
                let mut array_1796 = array_1794.value().start_array();
                for item_1797 in item_1795 {
                    {
                        array_1796.value().string(item_1797.as_str());
                    }
                }
                array_1796.finish();
            }
        }
        array_1794.finish();
    }
    if let Some(var_1798) = &input.table {
        object.key("Table").string(var_1798.as_str());
    }
    if let Some(var_1799) = &input.database {
        object.key("Database").string(var_1799.as_str());
    }
    if let Some(var_1800) = &input.schema_change_policy {
        let mut object_1801 = object.key("SchemaChangePolicy").start_object();
        crate::json_ser::serialize_structure_crate_model_catalog_schema_change_policy(
            &mut object_1801,
            var_1800,
        )?;
        object_1801.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_governed_catalog_source(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::GovernedCatalogSource,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1802) = &input.name {
        object.key("Name").string(var_1802.as_str());
    }
    if let Some(var_1803) = &input.database {
        object.key("Database").string(var_1803.as_str());
    }
    if let Some(var_1804) = &input.table {
        object.key("Table").string(var_1804.as_str());
    }
    if let Some(var_1805) = &input.partition_predicate {
        object.key("PartitionPredicate").string(var_1805.as_str());
    }
    if let Some(var_1806) = &input.additional_options {
        let mut object_1807 = object.key("AdditionalOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_source_additional_options(
            &mut object_1807,
            var_1806,
        )?;
        object_1807.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_microsoft_sql_server_catalog_source(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MicrosoftSqlServerCatalogSource,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1808) = &input.name {
        object.key("Name").string(var_1808.as_str());
    }
    if let Some(var_1809) = &input.database {
        object.key("Database").string(var_1809.as_str());
    }
    if let Some(var_1810) = &input.table {
        object.key("Table").string(var_1810.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_my_sql_catalog_source(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MySqlCatalogSource,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1811) = &input.name {
        object.key("Name").string(var_1811.as_str());
    }
    if let Some(var_1812) = &input.database {
        object.key("Database").string(var_1812.as_str());
    }
    if let Some(var_1813) = &input.table {
        object.key("Table").string(var_1813.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_oracle_sql_catalog_source(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OracleSqlCatalogSource,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1814) = &input.name {
        object.key("Name").string(var_1814.as_str());
    }
    if let Some(var_1815) = &input.database {
        object.key("Database").string(var_1815.as_str());
    }
    if let Some(var_1816) = &input.table {
        object.key("Table").string(var_1816.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_postgre_sql_catalog_source(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PostgreSqlCatalogSource,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1817) = &input.name {
        object.key("Name").string(var_1817.as_str());
    }
    if let Some(var_1818) = &input.database {
        object.key("Database").string(var_1818.as_str());
    }
    if let Some(var_1819) = &input.table {
        object.key("Table").string(var_1819.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_microsoft_sql_server_catalog_target(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MicrosoftSqlServerCatalogTarget,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1820) = &input.name {
        object.key("Name").string(var_1820.as_str());
    }
    if let Some(var_1821) = &input.inputs {
        let mut array_1822 = object.key("Inputs").start_array();
        for item_1823 in var_1821 {
            {
                array_1822.value().string(item_1823.as_str());
            }
        }
        array_1822.finish();
    }
    if let Some(var_1824) = &input.database {
        object.key("Database").string(var_1824.as_str());
    }
    if let Some(var_1825) = &input.table {
        object.key("Table").string(var_1825.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_my_sql_catalog_target(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MySqlCatalogTarget,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1826) = &input.name {
        object.key("Name").string(var_1826.as_str());
    }
    if let Some(var_1827) = &input.inputs {
        let mut array_1828 = object.key("Inputs").start_array();
        for item_1829 in var_1827 {
            {
                array_1828.value().string(item_1829.as_str());
            }
        }
        array_1828.finish();
    }
    if let Some(var_1830) = &input.database {
        object.key("Database").string(var_1830.as_str());
    }
    if let Some(var_1831) = &input.table {
        object.key("Table").string(var_1831.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_oracle_sql_catalog_target(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OracleSqlCatalogTarget,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1832) = &input.name {
        object.key("Name").string(var_1832.as_str());
    }
    if let Some(var_1833) = &input.inputs {
        let mut array_1834 = object.key("Inputs").start_array();
        for item_1835 in var_1833 {
            {
                array_1834.value().string(item_1835.as_str());
            }
        }
        array_1834.finish();
    }
    if let Some(var_1836) = &input.database {
        object.key("Database").string(var_1836.as_str());
    }
    if let Some(var_1837) = &input.table {
        object.key("Table").string(var_1837.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_postgre_sql_catalog_target(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PostgreSqlCatalogTarget,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1838) = &input.name {
        object.key("Name").string(var_1838.as_str());
    }
    if let Some(var_1839) = &input.inputs {
        let mut array_1840 = object.key("Inputs").start_array();
        for item_1841 in var_1839 {
            {
                array_1840.value().string(item_1841.as_str());
            }
        }
        array_1840.finish();
    }
    if let Some(var_1842) = &input.database {
        object.key("Database").string(var_1842.as_str());
    }
    if let Some(var_1843) = &input.table {
        object.key("Table").string(var_1843.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_find_matches_parameters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FindMatchesParameters,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1844) = &input.primary_key_column_name {
        object.key("PrimaryKeyColumnName").string(var_1844.as_str());
    }
    if let Some(var_1845) = &input.precision_recall_tradeoff {
        object.key("PrecisionRecallTradeoff").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_1845).into()),
        );
    }
    if let Some(var_1846) = &input.accuracy_cost_tradeoff {
        object.key("AccuracyCostTradeoff").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_1846).into()),
        );
    }
    if let Some(var_1847) = &input.enforce_provided_labels {
        object.key("EnforceProvidedLabels").boolean(*var_1847);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_ml_user_data_encryption(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MlUserDataEncryption,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1848) = &input.ml_user_data_encryption_mode {
        object
            .key("MlUserDataEncryptionMode")
            .string(var_1848.as_str());
    }
    if let Some(var_1849) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1849.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_code_gen_node_arg(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CodeGenNodeArg,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1850) = &input.name {
        object.key("Name").string(var_1850.as_str());
    }
    if let Some(var_1851) = &input.value {
        object.key("Value").string(var_1851.as_str());
    }
    if input.param {
        object.key("Param").boolean(input.param);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_encryption(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3Encryption,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1852) = &input.s3_encryption_mode {
        object.key("S3EncryptionMode").string(var_1852.as_str());
    }
    if let Some(var_1853) = &input.kms_key_arn {
        object.key("KmsKeyArn").string(var_1853.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_cloud_watch_encryption(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CloudWatchEncryption,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1854) = &input.cloud_watch_encryption_mode {
        object
            .key("CloudWatchEncryptionMode")
            .string(var_1854.as_str());
    }
    if let Some(var_1855) = &input.kms_key_arn {
        object.key("KmsKeyArn").string(var_1855.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_job_bookmarks_encryption(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::JobBookmarksEncryption,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1856) = &input.job_bookmarks_encryption_mode {
        object
            .key("JobBookmarksEncryptionMode")
            .string(var_1856.as_str());
    }
    if let Some(var_1857) = &input.kms_key_arn {
        object.key("KmsKeyArn").string(var_1857.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_column(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Column,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1858) = &input.name {
        object.key("Name").string(var_1858.as_str());
    }
    if let Some(var_1859) = &input.r#type {
        object.key("Type").string(var_1859.as_str());
    }
    if let Some(var_1860) = &input.comment {
        object.key("Comment").string(var_1860.as_str());
    }
    if let Some(var_1861) = &input.parameters {
        let mut object_1862 = object.key("Parameters").start_object();
        for (key_1863, value_1864) in var_1861 {
            {
                object_1862.key(key_1863).string(value_1864.as_str());
            }
        }
        object_1862.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_table_identifier(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TableIdentifier,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1865) = &input.catalog_id {
        object.key("CatalogId").string(var_1865.as_str());
    }
    if let Some(var_1866) = &input.database_name {
        object.key("DatabaseName").string(var_1866.as_str());
    }
    if let Some(var_1867) = &input.name {
        object.key("Name").string(var_1867.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_condition(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Condition,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1868) = &input.logical_operator {
        object.key("LogicalOperator").string(var_1868.as_str());
    }
    if let Some(var_1869) = &input.job_name {
        object.key("JobName").string(var_1869.as_str());
    }
    if let Some(var_1870) = &input.state {
        object.key("State").string(var_1870.as_str());
    }
    if let Some(var_1871) = &input.crawler_name {
        object.key("CrawlerName").string(var_1871.as_str());
    }
    if let Some(var_1872) = &input.crawl_state {
        object.key("CrawlState").string(var_1872.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_resource_uri(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ResourceUri,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1873) = &input.resource_type {
        object.key("ResourceType").string(var_1873.as_str());
    }
    if let Some(var_1874) = &input.uri {
        object.key("Uri").string(var_1874.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_schema_column(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SchemaColumn,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1875) = &input.name {
        object.key("Name").string(var_1875.as_str());
    }
    if let Some(var_1876) = &input.data_type {
        object.key("DataType").string(var_1876.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_encryption_at_rest(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EncryptionAtRest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1877) = &input.catalog_encryption_mode {
        object
            .key("CatalogEncryptionMode")
            .string(var_1877.as_str());
    }
    if let Some(var_1878) = &input.sse_aws_kms_key_id {
        object.key("SseAwsKmsKeyId").string(var_1878.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_connection_password_encryption(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConnectionPasswordEncryption,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object
            .key("ReturnConnectionPasswordEncrypted")
            .boolean(input.return_connection_password_encrypted);
    }
    if let Some(var_1879) = &input.aws_kms_key_id {
        object.key("AwsKmsKeyId").string(var_1879.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_column_statistics_data(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ColumnStatisticsData,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1880) = &input.r#type {
        object.key("Type").string(var_1880.as_str());
    }
    if let Some(var_1881) = &input.boolean_column_statistics_data {
        let mut object_1882 = object.key("BooleanColumnStatisticsData").start_object();
        crate::json_ser::serialize_structure_crate_model_boolean_column_statistics_data(
            &mut object_1882,
            var_1881,
        )?;
        object_1882.finish();
    }
    if let Some(var_1883) = &input.date_column_statistics_data {
        let mut object_1884 = object.key("DateColumnStatisticsData").start_object();
        crate::json_ser::serialize_structure_crate_model_date_column_statistics_data(
            &mut object_1884,
            var_1883,
        )?;
        object_1884.finish();
    }
    if let Some(var_1885) = &input.decimal_column_statistics_data {
        let mut object_1886 = object.key("DecimalColumnStatisticsData").start_object();
        crate::json_ser::serialize_structure_crate_model_decimal_column_statistics_data(
            &mut object_1886,
            var_1885,
        )?;
        object_1886.finish();
    }
    if let Some(var_1887) = &input.double_column_statistics_data {
        let mut object_1888 = object.key("DoubleColumnStatisticsData").start_object();
        crate::json_ser::serialize_structure_crate_model_double_column_statistics_data(
            &mut object_1888,
            var_1887,
        )?;
        object_1888.finish();
    }
    if let Some(var_1889) = &input.long_column_statistics_data {
        let mut object_1890 = object.key("LongColumnStatisticsData").start_object();
        crate::json_ser::serialize_structure_crate_model_long_column_statistics_data(
            &mut object_1890,
            var_1889,
        )?;
        object_1890.finish();
    }
    if let Some(var_1891) = &input.string_column_statistics_data {
        let mut object_1892 = object.key("StringColumnStatisticsData").start_object();
        crate::json_ser::serialize_structure_crate_model_string_column_statistics_data(
            &mut object_1892,
            var_1891,
        )?;
        object_1892.finish();
    }
    if let Some(var_1893) = &input.binary_column_statistics_data {
        let mut object_1894 = object.key("BinaryColumnStatisticsData").start_object();
        crate::json_ser::serialize_structure_crate_model_binary_column_statistics_data(
            &mut object_1894,
            var_1893,
        )?;
        object_1894.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_ser_de_info(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SerDeInfo,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1895) = &input.name {
        object.key("Name").string(var_1895.as_str());
    }
    if let Some(var_1896) = &input.serialization_library {
        object.key("SerializationLibrary").string(var_1896.as_str());
    }
    if let Some(var_1897) = &input.parameters {
        let mut object_1898 = object.key("Parameters").start_object();
        for (key_1899, value_1900) in var_1897 {
            {
                object_1898.key(key_1899).string(value_1900.as_str());
            }
        }
        object_1898.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_order(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Order,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1901) = &input.column {
        object.key("Column").string(var_1901.as_str());
    }
    {
        object.key("SortOrder").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.sort_order).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_skewed_info(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SkewedInfo,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1902) = &input.skewed_column_names {
        let mut array_1903 = object.key("SkewedColumnNames").start_array();
        for item_1904 in var_1902 {
            {
                array_1903.value().string(item_1904.as_str());
            }
        }
        array_1903.finish();
    }
    if let Some(var_1905) = &input.skewed_column_values {
        let mut array_1906 = object.key("SkewedColumnValues").start_array();
        for item_1907 in var_1905 {
            {
                array_1906.value().string(item_1907.as_str());
            }
        }
        array_1906.finish();
    }
    if let Some(var_1908) = &input.skewed_column_value_location_maps {
        let mut object_1909 = object.key("SkewedColumnValueLocationMaps").start_object();
        for (key_1910, value_1911) in var_1908 {
            {
                object_1909.key(key_1910).string(value_1911.as_str());
            }
        }
        object_1909.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_schema_reference(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SchemaReference,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1912) = &input.schema_id {
        let mut object_1913 = object.key("SchemaId").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_id(&mut object_1913, var_1912)?;
        object_1913.finish();
    }
    if let Some(var_1914) = &input.schema_version_id {
        object.key("SchemaVersionId").string(var_1914.as_str());
    }
    if let Some(var_1915) = &input.schema_version_number {
        object.key("SchemaVersionNumber").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1915).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_data_lake_principal(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataLakePrincipal,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1916) = &input.data_lake_principal_identifier {
        object
            .key("DataLakePrincipalIdentifier")
            .string(var_1916.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_glue_schema(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::GlueSchema,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1917) = &input.columns {
        let mut array_1918 = object.key("Columns").start_array();
        for item_1919 in var_1917 {
            {
                let mut object_1920 = array_1918.value().start_object();
                crate::json_ser::serialize_structure_crate_model_glue_studio_schema_column(
                    &mut object_1920,
                    item_1919,
                )?;
                object_1920.finish();
            }
        }
        array_1918.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_jdbc_connector_options(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::JdbcConnectorOptions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1921) = &input.filter_predicate {
        object.key("FilterPredicate").string(var_1921.as_str());
    }
    if let Some(var_1922) = &input.partition_column {
        object.key("PartitionColumn").string(var_1922.as_str());
    }
    if let Some(var_1923) = &input.lower_bound {
        object.key("LowerBound").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1923).into()),
        );
    }
    if let Some(var_1924) = &input.upper_bound {
        object.key("UpperBound").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1924).into()),
        );
    }
    if let Some(var_1925) = &input.num_partitions {
        object.key("NumPartitions").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1925).into()),
        );
    }
    if let Some(var_1926) = &input.job_bookmark_keys {
        let mut array_1927 = object.key("JobBookmarkKeys").start_array();
        for item_1928 in var_1926 {
            {
                array_1927.value().string(item_1928.as_str());
            }
        }
        array_1927.finish();
    }
    if let Some(var_1929) = &input.job_bookmark_keys_sort_order {
        object
            .key("JobBookmarkKeysSortOrder")
            .string(var_1929.as_str());
    }
    if let Some(var_1930) = &input.data_type_mapping {
        let mut object_1931 = object.key("DataTypeMapping").start_object();
        for (key_1932, value_1933) in var_1930 {
            {
                object_1931
                    .key(key_1932.as_str())
                    .string(value_1933.as_str());
            }
        }
        object_1931.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_source_additional_options(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3SourceAdditionalOptions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1934) = &input.bounded_size {
        object.key("BoundedSize").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1934).into()),
        );
    }
    if let Some(var_1935) = &input.bounded_files {
        object.key("BoundedFiles").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1935).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_direct_source_additional_options(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3DirectSourceAdditionalOptions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1936) = &input.bounded_size {
        object.key("BoundedSize").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1936).into()),
        );
    }
    if let Some(var_1937) = &input.bounded_files {
        object.key("BoundedFiles").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1937).into()),
        );
    }
    if let Some(var_1938) = &input.enable_sample_path {
        object.key("EnableSamplePath").boolean(*var_1938);
    }
    if let Some(var_1939) = &input.sample_path {
        object.key("SamplePath").string(var_1939.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_upsert_redshift_target_options(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UpsertRedshiftTargetOptions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1940) = &input.table_location {
        object.key("TableLocation").string(var_1940.as_str());
    }
    if let Some(var_1941) = &input.connection_name {
        object.key("ConnectionName").string(var_1941.as_str());
    }
    if let Some(var_1942) = &input.upsert_keys {
        let mut array_1943 = object.key("UpsertKeys").start_array();
        for item_1944 in var_1942 {
            {
                array_1943.value().string(item_1944.as_str());
            }
        }
        array_1943.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_catalog_schema_change_policy(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CatalogSchemaChangePolicy,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1945) = &input.enable_update_catalog {
        object.key("EnableUpdateCatalog").boolean(*var_1945);
    }
    if let Some(var_1946) = &input.update_behavior {
        object.key("UpdateBehavior").string(var_1946.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_direct_schema_change_policy(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DirectSchemaChangePolicy,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1947) = &input.enable_update_catalog {
        object.key("EnableUpdateCatalog").boolean(*var_1947);
    }
    if let Some(var_1948) = &input.update_behavior {
        object.key("UpdateBehavior").string(var_1948.as_str());
    }
    if let Some(var_1949) = &input.table {
        object.key("Table").string(var_1949.as_str());
    }
    if let Some(var_1950) = &input.database {
        object.key("Database").string(var_1950.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_mapping(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Mapping,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1951) = &input.to_key {
        object.key("ToKey").string(var_1951.as_str());
    }
    if let Some(var_1952) = &input.from_path {
        let mut array_1953 = object.key("FromPath").start_array();
        for item_1954 in var_1952 {
            {
                array_1953.value().string(item_1954.as_str());
            }
        }
        array_1953.finish();
    }
    if let Some(var_1955) = &input.from_type {
        object.key("FromType").string(var_1955.as_str());
    }
    if let Some(var_1956) = &input.to_type {
        object.key("ToType").string(var_1956.as_str());
    }
    if let Some(var_1957) = &input.dropped {
        object.key("Dropped").boolean(*var_1957);
    }
    if let Some(var_1958) = &input.children {
        let mut array_1959 = object.key("Children").start_array();
        for item_1960 in var_1958 {
            {
                let mut object_1961 = array_1959.value().start_object();
                crate::json_ser::serialize_structure_crate_model_mapping(
                    &mut object_1961,
                    item_1960,
                )?;
                object_1961.finish();
            }
        }
        array_1959.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_join_column(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::JoinColumn,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1962) = &input.from {
        object.key("From").string(var_1962.as_str());
    }
    if let Some(var_1963) = &input.keys {
        let mut array_1964 = object.key("Keys").start_array();
        for item_1965 in var_1963 {
            {
                let mut array_1966 = array_1964.value().start_array();
                for item_1967 in item_1965 {
                    {
                        array_1966.value().string(item_1967.as_str());
                    }
                }
                array_1966.finish();
            }
        }
        array_1964.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_filter_expression(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FilterExpression,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1968) = &input.operation {
        object.key("Operation").string(var_1968.as_str());
    }
    if let Some(var_1969) = &input.negated {
        object.key("Negated").boolean(*var_1969);
    }
    if let Some(var_1970) = &input.values {
        let mut array_1971 = object.key("Values").start_array();
        for item_1972 in var_1970 {
            {
                let mut object_1973 = array_1971.value().start_object();
                crate::json_ser::serialize_structure_crate_model_filter_value(
                    &mut object_1973,
                    item_1972,
                )?;
                object_1973.finish();
            }
        }
        array_1971.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_sql_alias(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SqlAlias,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1974) = &input.from {
        object.key("From").string(var_1974.as_str());
    }
    if let Some(var_1975) = &input.alias {
        object.key("Alias").string(var_1975.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_kinesis_streaming_source_options(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::KinesisStreamingSourceOptions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1976) = &input.endpoint_url {
        object.key("EndpointUrl").string(var_1976.as_str());
    }
    if let Some(var_1977) = &input.stream_name {
        object.key("StreamName").string(var_1977.as_str());
    }
    if let Some(var_1978) = &input.classification {
        object.key("Classification").string(var_1978.as_str());
    }
    if let Some(var_1979) = &input.delimiter {
        object.key("Delimiter").string(var_1979.as_str());
    }
    if let Some(var_1980) = &input.starting_position {
        object.key("StartingPosition").string(var_1980.as_str());
    }
    if let Some(var_1981) = &input.max_fetch_time_in_ms {
        object.key("MaxFetchTimeInMs").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1981).into()),
        );
    }
    if let Some(var_1982) = &input.max_fetch_records_per_shard {
        object.key("MaxFetchRecordsPerShard").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1982).into()),
        );
    }
    if let Some(var_1983) = &input.max_record_per_read {
        object.key("MaxRecordPerRead").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1983).into()),
        );
    }
    if let Some(var_1984) = &input.add_idle_time_between_reads {
        object.key("AddIdleTimeBetweenReads").boolean(*var_1984);
    }
    if let Some(var_1985) = &input.idle_time_between_reads_in_ms {
        object.key("IdleTimeBetweenReadsInMs").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1985).into()),
        );
    }
    if let Some(var_1986) = &input.describe_shard_interval {
        object.key("DescribeShardInterval").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1986).into()),
        );
    }
    if let Some(var_1987) = &input.num_retries {
        object.key("NumRetries").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1987).into()),
        );
    }
    if let Some(var_1988) = &input.retry_interval_ms {
        object.key("RetryIntervalMs").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1988).into()),
        );
    }
    if let Some(var_1989) = &input.max_retry_interval_ms {
        object.key("MaxRetryIntervalMs").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1989).into()),
        );
    }
    if let Some(var_1990) = &input.avoid_empty_batches {
        object.key("AvoidEmptyBatches").boolean(*var_1990);
    }
    if let Some(var_1991) = &input.stream_arn {
        object.key("StreamArn").string(var_1991.as_str());
    }
    if let Some(var_1992) = &input.role_arn {
        object.key("RoleArn").string(var_1992.as_str());
    }
    if let Some(var_1993) = &input.role_session_name {
        object.key("RoleSessionName").string(var_1993.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_streaming_data_preview_options(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StreamingDataPreviewOptions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1994) = &input.polling_time {
        object.key("PollingTime").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1994).into()),
        );
    }
    if let Some(var_1995) = &input.record_polling_limit {
        object.key("RecordPollingLimit").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1995).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_kafka_streaming_source_options(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::KafkaStreamingSourceOptions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1996) = &input.bootstrap_servers {
        object.key("BootstrapServers").string(var_1996.as_str());
    }
    if let Some(var_1997) = &input.security_protocol {
        object.key("SecurityProtocol").string(var_1997.as_str());
    }
    if let Some(var_1998) = &input.connection_name {
        object.key("ConnectionName").string(var_1998.as_str());
    }
    if let Some(var_1999) = &input.topic_name {
        object.key("TopicName").string(var_1999.as_str());
    }
    if let Some(var_2000) = &input.assign {
        object.key("Assign").string(var_2000.as_str());
    }
    if let Some(var_2001) = &input.subscribe_pattern {
        object.key("SubscribePattern").string(var_2001.as_str());
    }
    if let Some(var_2002) = &input.classification {
        object.key("Classification").string(var_2002.as_str());
    }
    if let Some(var_2003) = &input.delimiter {
        object.key("Delimiter").string(var_2003.as_str());
    }
    if let Some(var_2004) = &input.starting_offsets {
        object.key("StartingOffsets").string(var_2004.as_str());
    }
    if let Some(var_2005) = &input.ending_offsets {
        object.key("EndingOffsets").string(var_2005.as_str());
    }
    if let Some(var_2006) = &input.poll_timeout_ms {
        object.key("PollTimeoutMs").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2006).into()),
        );
    }
    if let Some(var_2007) = &input.num_retries {
        object.key("NumRetries").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2007).into()),
        );
    }
    if let Some(var_2008) = &input.retry_interval_ms {
        object.key("RetryIntervalMs").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2008).into()),
        );
    }
    if let Some(var_2009) = &input.max_offsets_per_trigger {
        object.key("MaxOffsetsPerTrigger").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2009).into()),
        );
    }
    if let Some(var_2010) = &input.min_partitions {
        object.key("MinPartitions").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2010).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_null_check_box_list(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::NullCheckBoxList,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2011) = &input.is_empty {
        object.key("IsEmpty").boolean(*var_2011);
    }
    if let Some(var_2012) = &input.is_null_string {
        object.key("IsNullString").boolean(*var_2012);
    }
    if let Some(var_2013) = &input.is_neg_one {
        object.key("IsNegOne").boolean(*var_2013);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_null_value_field(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::NullValueField,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2014) = &input.value {
        object.key("Value").string(var_2014.as_str());
    }
    if let Some(var_2015) = &input.datatype {
        let mut object_2016 = object.key("Datatype").start_object();
        crate::json_ser::serialize_structure_crate_model_datatype(&mut object_2016, var_2015)?;
        object_2016.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aggregate_operation(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AggregateOperation,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2017) = &input.column {
        let mut array_2018 = object.key("Column").start_array();
        for item_2019 in var_2017 {
            {
                array_2018.value().string(item_2019.as_str());
            }
        }
        array_2018.finish();
    }
    if let Some(var_2020) = &input.agg_func {
        object.key("AggFunc").string(var_2020.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_boolean_column_statistics_data(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BooleanColumnStatisticsData,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object.key("NumberOfTrues").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.number_of_trues).into()),
        );
    }
    {
        object.key("NumberOfFalses").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.number_of_falses).into()),
        );
    }
    {
        object.key("NumberOfNulls").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.number_of_nulls).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_date_column_statistics_data(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DateColumnStatisticsData,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2021) = &input.minimum_value {
        object
            .key("MinimumValue")
            .date_time(var_2021, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_2022) = &input.maximum_value {
        object
            .key("MaximumValue")
            .date_time(var_2022, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    {
        object.key("NumberOfNulls").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.number_of_nulls).into()),
        );
    }
    {
        object.key("NumberOfDistinctValues").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.number_of_distinct_values).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_decimal_column_statistics_data(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DecimalColumnStatisticsData,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2023) = &input.minimum_value {
        let mut object_2024 = object.key("MinimumValue").start_object();
        crate::json_ser::serialize_structure_crate_model_decimal_number(
            &mut object_2024,
            var_2023,
        )?;
        object_2024.finish();
    }
    if let Some(var_2025) = &input.maximum_value {
        let mut object_2026 = object.key("MaximumValue").start_object();
        crate::json_ser::serialize_structure_crate_model_decimal_number(
            &mut object_2026,
            var_2025,
        )?;
        object_2026.finish();
    }
    {
        object.key("NumberOfNulls").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.number_of_nulls).into()),
        );
    }
    {
        object.key("NumberOfDistinctValues").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.number_of_distinct_values).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_double_column_statistics_data(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DoubleColumnStatisticsData,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.minimum_value != 0.0 {
        object.key("MinimumValue").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((input.minimum_value).into()),
        );
    }
    if input.maximum_value != 0.0 {
        object.key("MaximumValue").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((input.maximum_value).into()),
        );
    }
    {
        object.key("NumberOfNulls").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.number_of_nulls).into()),
        );
    }
    {
        object.key("NumberOfDistinctValues").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.number_of_distinct_values).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_long_column_statistics_data(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LongColumnStatisticsData,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.minimum_value != 0 {
        object.key("MinimumValue").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.minimum_value).into()),
        );
    }
    if input.maximum_value != 0 {
        object.key("MaximumValue").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.maximum_value).into()),
        );
    }
    {
        object.key("NumberOfNulls").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.number_of_nulls).into()),
        );
    }
    {
        object.key("NumberOfDistinctValues").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.number_of_distinct_values).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_string_column_statistics_data(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StringColumnStatisticsData,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object.key("MaximumLength").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.maximum_length).into()),
        );
    }
    {
        object.key("AverageLength").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((input.average_length).into()),
        );
    }
    {
        object.key("NumberOfNulls").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.number_of_nulls).into()),
        );
    }
    {
        object.key("NumberOfDistinctValues").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.number_of_distinct_values).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_binary_column_statistics_data(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BinaryColumnStatisticsData,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object.key("MaximumLength").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.maximum_length).into()),
        );
    }
    {
        object.key("AverageLength").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((input.average_length).into()),
        );
    }
    {
        object.key("NumberOfNulls").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.number_of_nulls).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_glue_studio_schema_column(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::GlueStudioSchemaColumn,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2027) = &input.name {
        object.key("Name").string(var_2027.as_str());
    }
    if let Some(var_2028) = &input.r#type {
        object.key("Type").string(var_2028.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_filter_value(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FilterValue,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2029) = &input.r#type {
        object.key("Type").string(var_2029.as_str());
    }
    if let Some(var_2030) = &input.value {
        let mut array_2031 = object.key("Value").start_array();
        for item_2032 in var_2030 {
            {
                array_2031.value().string(item_2032.as_str());
            }
        }
        array_2031.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_datatype(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Datatype,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2033) = &input.id {
        object.key("Id").string(var_2033.as_str());
    }
    if let Some(var_2034) = &input.label {
        object.key("Label").string(var_2034.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_decimal_number(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DecimalNumber,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2035) = &input.unscaled_value {
        object
            .key("UnscaledValue")
            .string_unchecked(&aws_smithy_types::base64::encode(var_2035));
    }
    {
        object.key("Scale").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.scale).into()),
        );
    }
    Ok(())
}
