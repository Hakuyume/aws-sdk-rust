// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_batch_create_partition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchCreatePartitionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1) = &input.catalog_id {
        object.key("CatalogId").string(var_1.as_str());
    }
    if let Some(var_2) = &input.database_name {
        object.key("DatabaseName").string(var_2.as_str());
    }
    if let Some(var_3) = &input.table_name {
        object.key("TableName").string(var_3.as_str());
    }
    if let Some(var_4) = &input.partition_input_list {
        let mut array_5 = object.key("PartitionInputList").start_array();
        for item_6 in var_4 {
            {
                let mut object_7 = array_5.value().start_object();
                crate::json_ser::serialize_structure_crate_model_partition_input(
                    &mut object_7,
                    item_6,
                )?;
                object_7.finish();
            }
        }
        array_5.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_delete_connection_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchDeleteConnectionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_8) = &input.catalog_id {
        object.key("CatalogId").string(var_8.as_str());
    }
    if let Some(var_9) = &input.connection_name_list {
        let mut array_10 = object.key("ConnectionNameList").start_array();
        for item_11 in var_9 {
            {
                array_10.value().string(item_11.as_str());
            }
        }
        array_10.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_delete_partition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchDeletePartitionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_12) = &input.catalog_id {
        object.key("CatalogId").string(var_12.as_str());
    }
    if let Some(var_13) = &input.database_name {
        object.key("DatabaseName").string(var_13.as_str());
    }
    if let Some(var_14) = &input.table_name {
        object.key("TableName").string(var_14.as_str());
    }
    if let Some(var_15) = &input.partitions_to_delete {
        let mut array_16 = object.key("PartitionsToDelete").start_array();
        for item_17 in var_15 {
            {
                let mut object_18 = array_16.value().start_object();
                crate::json_ser::serialize_structure_crate_model_partition_value_list(
                    &mut object_18,
                    item_17,
                )?;
                object_18.finish();
            }
        }
        array_16.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_delete_table_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchDeleteTableInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_19) = &input.catalog_id {
        object.key("CatalogId").string(var_19.as_str());
    }
    if let Some(var_20) = &input.database_name {
        object.key("DatabaseName").string(var_20.as_str());
    }
    if let Some(var_21) = &input.tables_to_delete {
        let mut array_22 = object.key("TablesToDelete").start_array();
        for item_23 in var_21 {
            {
                array_22.value().string(item_23.as_str());
            }
        }
        array_22.finish();
    }
    if let Some(var_24) = &input.transaction_id {
        object.key("TransactionId").string(var_24.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_delete_table_version_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchDeleteTableVersionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_25) = &input.catalog_id {
        object.key("CatalogId").string(var_25.as_str());
    }
    if let Some(var_26) = &input.database_name {
        object.key("DatabaseName").string(var_26.as_str());
    }
    if let Some(var_27) = &input.table_name {
        object.key("TableName").string(var_27.as_str());
    }
    if let Some(var_28) = &input.version_ids {
        let mut array_29 = object.key("VersionIds").start_array();
        for item_30 in var_28 {
            {
                array_29.value().string(item_30.as_str());
            }
        }
        array_29.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_get_blueprints_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchGetBlueprintsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_31) = &input.names {
        let mut array_32 = object.key("Names").start_array();
        for item_33 in var_31 {
            {
                array_32.value().string(item_33.as_str());
            }
        }
        array_32.finish();
    }
    if let Some(var_34) = &input.include_blueprint {
        object.key("IncludeBlueprint").boolean(*var_34);
    }
    if let Some(var_35) = &input.include_parameter_spec {
        object.key("IncludeParameterSpec").boolean(*var_35);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_get_crawlers_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchGetCrawlersInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_36) = &input.crawler_names {
        let mut array_37 = object.key("CrawlerNames").start_array();
        for item_38 in var_36 {
            {
                array_37.value().string(item_38.as_str());
            }
        }
        array_37.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_get_custom_entity_types_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchGetCustomEntityTypesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_39) = &input.names {
        let mut array_40 = object.key("Names").start_array();
        for item_41 in var_39 {
            {
                array_40.value().string(item_41.as_str());
            }
        }
        array_40.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_get_dev_endpoints_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchGetDevEndpointsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_42) = &input.dev_endpoint_names {
        let mut array_43 = object.key("DevEndpointNames").start_array();
        for item_44 in var_42 {
            {
                array_43.value().string(item_44.as_str());
            }
        }
        array_43.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_get_jobs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchGetJobsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_45) = &input.job_names {
        let mut array_46 = object.key("JobNames").start_array();
        for item_47 in var_45 {
            {
                array_46.value().string(item_47.as_str());
            }
        }
        array_46.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_get_partition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchGetPartitionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_48) = &input.catalog_id {
        object.key("CatalogId").string(var_48.as_str());
    }
    if let Some(var_49) = &input.database_name {
        object.key("DatabaseName").string(var_49.as_str());
    }
    if let Some(var_50) = &input.table_name {
        object.key("TableName").string(var_50.as_str());
    }
    if let Some(var_51) = &input.partitions_to_get {
        let mut array_52 = object.key("PartitionsToGet").start_array();
        for item_53 in var_51 {
            {
                let mut object_54 = array_52.value().start_object();
                crate::json_ser::serialize_structure_crate_model_partition_value_list(
                    &mut object_54,
                    item_53,
                )?;
                object_54.finish();
            }
        }
        array_52.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_get_triggers_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchGetTriggersInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_55) = &input.trigger_names {
        let mut array_56 = object.key("TriggerNames").start_array();
        for item_57 in var_55 {
            {
                array_56.value().string(item_57.as_str());
            }
        }
        array_56.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_get_workflows_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchGetWorkflowsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_58) = &input.names {
        let mut array_59 = object.key("Names").start_array();
        for item_60 in var_58 {
            {
                array_59.value().string(item_60.as_str());
            }
        }
        array_59.finish();
    }
    if let Some(var_61) = &input.include_graph {
        object.key("IncludeGraph").boolean(*var_61);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_stop_job_run_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchStopJobRunInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_62) = &input.job_name {
        object.key("JobName").string(var_62.as_str());
    }
    if let Some(var_63) = &input.job_run_ids {
        let mut array_64 = object.key("JobRunIds").start_array();
        for item_65 in var_63 {
            {
                array_64.value().string(item_65.as_str());
            }
        }
        array_64.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_update_partition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchUpdatePartitionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_66) = &input.catalog_id {
        object.key("CatalogId").string(var_66.as_str());
    }
    if let Some(var_67) = &input.database_name {
        object.key("DatabaseName").string(var_67.as_str());
    }
    if let Some(var_68) = &input.table_name {
        object.key("TableName").string(var_68.as_str());
    }
    if let Some(var_69) = &input.entries {
        let mut array_70 = object.key("Entries").start_array();
        for item_71 in var_69 {
            {
                let mut object_72 = array_70.value().start_object();
                crate::json_ser::serialize_structure_crate_model_batch_update_partition_request_entry(&mut object_72, item_71)?;
                object_72.finish();
            }
        }
        array_70.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_cancel_ml_task_run_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CancelMlTaskRunInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_73) = &input.transform_id {
        object.key("TransformId").string(var_73.as_str());
    }
    if let Some(var_74) = &input.task_run_id {
        object.key("TaskRunId").string(var_74.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_cancel_statement_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CancelStatementInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_75) = &input.session_id {
        object.key("SessionId").string(var_75.as_str());
    }
    {
        object.key("Id").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.id).into()),
        );
    }
    if let Some(var_76) = &input.request_origin {
        object.key("RequestOrigin").string(var_76.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_check_schema_version_validity_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CheckSchemaVersionValidityInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_77) = &input.data_format {
        object.key("DataFormat").string(var_77.as_str());
    }
    if let Some(var_78) = &input.schema_definition {
        object.key("SchemaDefinition").string(var_78.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_blueprint_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateBlueprintInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_79) = &input.name {
        object.key("Name").string(var_79.as_str());
    }
    if let Some(var_80) = &input.description {
        object.key("Description").string(var_80.as_str());
    }
    if let Some(var_81) = &input.blueprint_location {
        object.key("BlueprintLocation").string(var_81.as_str());
    }
    if let Some(var_82) = &input.tags {
        let mut object_83 = object.key("Tags").start_object();
        for (key_84, value_85) in var_82 {
            {
                object_83.key(key_84).string(value_85.as_str());
            }
        }
        object_83.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_classifier_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateClassifierInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_86) = &input.grok_classifier {
        let mut object_87 = object.key("GrokClassifier").start_object();
        crate::json_ser::serialize_structure_crate_model_create_grok_classifier_request(
            &mut object_87,
            var_86,
        )?;
        object_87.finish();
    }
    if let Some(var_88) = &input.xml_classifier {
        let mut object_89 = object.key("XMLClassifier").start_object();
        crate::json_ser::serialize_structure_crate_model_create_xml_classifier_request(
            &mut object_89,
            var_88,
        )?;
        object_89.finish();
    }
    if let Some(var_90) = &input.json_classifier {
        let mut object_91 = object.key("JsonClassifier").start_object();
        crate::json_ser::serialize_structure_crate_model_create_json_classifier_request(
            &mut object_91,
            var_90,
        )?;
        object_91.finish();
    }
    if let Some(var_92) = &input.csv_classifier {
        let mut object_93 = object.key("CsvClassifier").start_object();
        crate::json_ser::serialize_structure_crate_model_create_csv_classifier_request(
            &mut object_93,
            var_92,
        )?;
        object_93.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_connection_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateConnectionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_94) = &input.catalog_id {
        object.key("CatalogId").string(var_94.as_str());
    }
    if let Some(var_95) = &input.connection_input {
        let mut object_96 = object.key("ConnectionInput").start_object();
        crate::json_ser::serialize_structure_crate_model_connection_input(&mut object_96, var_95)?;
        object_96.finish();
    }
    if let Some(var_97) = &input.tags {
        let mut object_98 = object.key("Tags").start_object();
        for (key_99, value_100) in var_97 {
            {
                object_98.key(key_99).string(value_100.as_str());
            }
        }
        object_98.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_crawler_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateCrawlerInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_101) = &input.name {
        object.key("Name").string(var_101.as_str());
    }
    if let Some(var_102) = &input.role {
        object.key("Role").string(var_102.as_str());
    }
    if let Some(var_103) = &input.database_name {
        object.key("DatabaseName").string(var_103.as_str());
    }
    if let Some(var_104) = &input.description {
        object.key("Description").string(var_104.as_str());
    }
    if let Some(var_105) = &input.targets {
        let mut object_106 = object.key("Targets").start_object();
        crate::json_ser::serialize_structure_crate_model_crawler_targets(&mut object_106, var_105)?;
        object_106.finish();
    }
    if let Some(var_107) = &input.schedule {
        object.key("Schedule").string(var_107.as_str());
    }
    if let Some(var_108) = &input.classifiers {
        let mut array_109 = object.key("Classifiers").start_array();
        for item_110 in var_108 {
            {
                array_109.value().string(item_110.as_str());
            }
        }
        array_109.finish();
    }
    if let Some(var_111) = &input.table_prefix {
        object.key("TablePrefix").string(var_111.as_str());
    }
    if let Some(var_112) = &input.schema_change_policy {
        let mut object_113 = object.key("SchemaChangePolicy").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_change_policy(
            &mut object_113,
            var_112,
        )?;
        object_113.finish();
    }
    if let Some(var_114) = &input.recrawl_policy {
        let mut object_115 = object.key("RecrawlPolicy").start_object();
        crate::json_ser::serialize_structure_crate_model_recrawl_policy(&mut object_115, var_114)?;
        object_115.finish();
    }
    if let Some(var_116) = &input.lineage_configuration {
        let mut object_117 = object.key("LineageConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_lineage_configuration(
            &mut object_117,
            var_116,
        )?;
        object_117.finish();
    }
    if let Some(var_118) = &input.lake_formation_configuration {
        let mut object_119 = object.key("LakeFormationConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_lake_formation_configuration(
            &mut object_119,
            var_118,
        )?;
        object_119.finish();
    }
    if let Some(var_120) = &input.configuration {
        object.key("Configuration").string(var_120.as_str());
    }
    if let Some(var_121) = &input.crawler_security_configuration {
        object
            .key("CrawlerSecurityConfiguration")
            .string(var_121.as_str());
    }
    if let Some(var_122) = &input.tags {
        let mut object_123 = object.key("Tags").start_object();
        for (key_124, value_125) in var_122 {
            {
                object_123.key(key_124).string(value_125.as_str());
            }
        }
        object_123.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_custom_entity_type_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateCustomEntityTypeInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_126) = &input.name {
        object.key("Name").string(var_126.as_str());
    }
    if let Some(var_127) = &input.regex_string {
        object.key("RegexString").string(var_127.as_str());
    }
    if let Some(var_128) = &input.context_words {
        let mut array_129 = object.key("ContextWords").start_array();
        for item_130 in var_128 {
            {
                array_129.value().string(item_130.as_str());
            }
        }
        array_129.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_database_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDatabaseInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_131) = &input.catalog_id {
        object.key("CatalogId").string(var_131.as_str());
    }
    if let Some(var_132) = &input.database_input {
        let mut object_133 = object.key("DatabaseInput").start_object();
        crate::json_ser::serialize_structure_crate_model_database_input(&mut object_133, var_132)?;
        object_133.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_dev_endpoint_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDevEndpointInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_134) = &input.endpoint_name {
        object.key("EndpointName").string(var_134.as_str());
    }
    if let Some(var_135) = &input.role_arn {
        object.key("RoleArn").string(var_135.as_str());
    }
    if let Some(var_136) = &input.security_group_ids {
        let mut array_137 = object.key("SecurityGroupIds").start_array();
        for item_138 in var_136 {
            {
                array_137.value().string(item_138.as_str());
            }
        }
        array_137.finish();
    }
    if let Some(var_139) = &input.subnet_id {
        object.key("SubnetId").string(var_139.as_str());
    }
    if let Some(var_140) = &input.public_key {
        object.key("PublicKey").string(var_140.as_str());
    }
    if let Some(var_141) = &input.public_keys {
        let mut array_142 = object.key("PublicKeys").start_array();
        for item_143 in var_141 {
            {
                array_142.value().string(item_143.as_str());
            }
        }
        array_142.finish();
    }
    if input.number_of_nodes != 0 {
        object.key("NumberOfNodes").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.number_of_nodes).into()),
        );
    }
    if let Some(var_144) = &input.worker_type {
        object.key("WorkerType").string(var_144.as_str());
    }
    if let Some(var_145) = &input.glue_version {
        object.key("GlueVersion").string(var_145.as_str());
    }
    if let Some(var_146) = &input.number_of_workers {
        object.key("NumberOfWorkers").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_146).into()),
        );
    }
    if let Some(var_147) = &input.extra_python_libs_s3_path {
        object.key("ExtraPythonLibsS3Path").string(var_147.as_str());
    }
    if let Some(var_148) = &input.extra_jars_s3_path {
        object.key("ExtraJarsS3Path").string(var_148.as_str());
    }
    if let Some(var_149) = &input.security_configuration {
        object.key("SecurityConfiguration").string(var_149.as_str());
    }
    if let Some(var_150) = &input.tags {
        let mut object_151 = object.key("Tags").start_object();
        for (key_152, value_153) in var_150 {
            {
                object_151.key(key_152).string(value_153.as_str());
            }
        }
        object_151.finish();
    }
    if let Some(var_154) = &input.arguments {
        let mut object_155 = object.key("Arguments").start_object();
        for (key_156, value_157) in var_154 {
            {
                object_155.key(key_156).string(value_157.as_str());
            }
        }
        object_155.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_158) = &input.name {
        object.key("Name").string(var_158.as_str());
    }
    if let Some(var_159) = &input.description {
        object.key("Description").string(var_159.as_str());
    }
    if let Some(var_160) = &input.log_uri {
        object.key("LogUri").string(var_160.as_str());
    }
    if let Some(var_161) = &input.role {
        object.key("Role").string(var_161.as_str());
    }
    if let Some(var_162) = &input.execution_property {
        let mut object_163 = object.key("ExecutionProperty").start_object();
        crate::json_ser::serialize_structure_crate_model_execution_property(
            &mut object_163,
            var_162,
        )?;
        object_163.finish();
    }
    if let Some(var_164) = &input.command {
        let mut object_165 = object.key("Command").start_object();
        crate::json_ser::serialize_structure_crate_model_job_command(&mut object_165, var_164)?;
        object_165.finish();
    }
    if let Some(var_166) = &input.default_arguments {
        let mut object_167 = object.key("DefaultArguments").start_object();
        for (key_168, value_169) in var_166 {
            {
                object_167.key(key_168).string(value_169.as_str());
            }
        }
        object_167.finish();
    }
    if let Some(var_170) = &input.non_overridable_arguments {
        let mut object_171 = object.key("NonOverridableArguments").start_object();
        for (key_172, value_173) in var_170 {
            {
                object_171.key(key_172).string(value_173.as_str());
            }
        }
        object_171.finish();
    }
    if let Some(var_174) = &input.connections {
        let mut object_175 = object.key("Connections").start_object();
        crate::json_ser::serialize_structure_crate_model_connections_list(
            &mut object_175,
            var_174,
        )?;
        object_175.finish();
    }
    if input.max_retries != 0 {
        object.key("MaxRetries").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_retries).into()),
        );
    }
    if input.allocated_capacity != 0 {
        object.key("AllocatedCapacity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.allocated_capacity).into()),
        );
    }
    if let Some(var_176) = &input.timeout {
        object.key("Timeout").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_176).into()),
        );
    }
    if let Some(var_177) = &input.max_capacity {
        object.key("MaxCapacity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_177).into()),
        );
    }
    if let Some(var_178) = &input.security_configuration {
        object.key("SecurityConfiguration").string(var_178.as_str());
    }
    if let Some(var_179) = &input.tags {
        let mut object_180 = object.key("Tags").start_object();
        for (key_181, value_182) in var_179 {
            {
                object_180.key(key_181).string(value_182.as_str());
            }
        }
        object_180.finish();
    }
    if let Some(var_183) = &input.notification_property {
        let mut object_184 = object.key("NotificationProperty").start_object();
        crate::json_ser::serialize_structure_crate_model_notification_property(
            &mut object_184,
            var_183,
        )?;
        object_184.finish();
    }
    if let Some(var_185) = &input.glue_version {
        object.key("GlueVersion").string(var_185.as_str());
    }
    if let Some(var_186) = &input.number_of_workers {
        object.key("NumberOfWorkers").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_186).into()),
        );
    }
    if let Some(var_187) = &input.worker_type {
        object.key("WorkerType").string(var_187.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_ml_transform_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateMlTransformInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_188) = &input.name {
        object.key("Name").string(var_188.as_str());
    }
    if let Some(var_189) = &input.description {
        object.key("Description").string(var_189.as_str());
    }
    if let Some(var_190) = &input.input_record_tables {
        let mut array_191 = object.key("InputRecordTables").start_array();
        for item_192 in var_190 {
            {
                let mut object_193 = array_191.value().start_object();
                crate::json_ser::serialize_structure_crate_model_glue_table(
                    &mut object_193,
                    item_192,
                )?;
                object_193.finish();
            }
        }
        array_191.finish();
    }
    if let Some(var_194) = &input.parameters {
        let mut object_195 = object.key("Parameters").start_object();
        crate::json_ser::serialize_structure_crate_model_transform_parameters(
            &mut object_195,
            var_194,
        )?;
        object_195.finish();
    }
    if let Some(var_196) = &input.role {
        object.key("Role").string(var_196.as_str());
    }
    if let Some(var_197) = &input.glue_version {
        object.key("GlueVersion").string(var_197.as_str());
    }
    if let Some(var_198) = &input.max_capacity {
        object.key("MaxCapacity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_198).into()),
        );
    }
    if let Some(var_199) = &input.worker_type {
        object.key("WorkerType").string(var_199.as_str());
    }
    if let Some(var_200) = &input.number_of_workers {
        object.key("NumberOfWorkers").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_200).into()),
        );
    }
    if let Some(var_201) = &input.timeout {
        object.key("Timeout").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_201).into()),
        );
    }
    if let Some(var_202) = &input.max_retries {
        object.key("MaxRetries").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_202).into()),
        );
    }
    if let Some(var_203) = &input.tags {
        let mut object_204 = object.key("Tags").start_object();
        for (key_205, value_206) in var_203 {
            {
                object_204.key(key_205).string(value_206.as_str());
            }
        }
        object_204.finish();
    }
    if let Some(var_207) = &input.transform_encryption {
        let mut object_208 = object.key("TransformEncryption").start_object();
        crate::json_ser::serialize_structure_crate_model_transform_encryption(
            &mut object_208,
            var_207,
        )?;
        object_208.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_partition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreatePartitionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_209) = &input.catalog_id {
        object.key("CatalogId").string(var_209.as_str());
    }
    if let Some(var_210) = &input.database_name {
        object.key("DatabaseName").string(var_210.as_str());
    }
    if let Some(var_211) = &input.table_name {
        object.key("TableName").string(var_211.as_str());
    }
    if let Some(var_212) = &input.partition_input {
        let mut object_213 = object.key("PartitionInput").start_object();
        crate::json_ser::serialize_structure_crate_model_partition_input(&mut object_213, var_212)?;
        object_213.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_partition_index_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreatePartitionIndexInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_214) = &input.catalog_id {
        object.key("CatalogId").string(var_214.as_str());
    }
    if let Some(var_215) = &input.database_name {
        object.key("DatabaseName").string(var_215.as_str());
    }
    if let Some(var_216) = &input.table_name {
        object.key("TableName").string(var_216.as_str());
    }
    if let Some(var_217) = &input.partition_index {
        let mut object_218 = object.key("PartitionIndex").start_object();
        crate::json_ser::serialize_structure_crate_model_partition_index(&mut object_218, var_217)?;
        object_218.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_registry_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateRegistryInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_219) = &input.registry_name {
        object.key("RegistryName").string(var_219.as_str());
    }
    if let Some(var_220) = &input.description {
        object.key("Description").string(var_220.as_str());
    }
    if let Some(var_221) = &input.tags {
        let mut object_222 = object.key("Tags").start_object();
        for (key_223, value_224) in var_221 {
            {
                object_222.key(key_223).string(value_224.as_str());
            }
        }
        object_222.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_schema_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateSchemaInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_225) = &input.registry_id {
        let mut object_226 = object.key("RegistryId").start_object();
        crate::json_ser::serialize_structure_crate_model_registry_id(&mut object_226, var_225)?;
        object_226.finish();
    }
    if let Some(var_227) = &input.schema_name {
        object.key("SchemaName").string(var_227.as_str());
    }
    if let Some(var_228) = &input.data_format {
        object.key("DataFormat").string(var_228.as_str());
    }
    if let Some(var_229) = &input.compatibility {
        object.key("Compatibility").string(var_229.as_str());
    }
    if let Some(var_230) = &input.description {
        object.key("Description").string(var_230.as_str());
    }
    if let Some(var_231) = &input.tags {
        let mut object_232 = object.key("Tags").start_object();
        for (key_233, value_234) in var_231 {
            {
                object_232.key(key_233).string(value_234.as_str());
            }
        }
        object_232.finish();
    }
    if let Some(var_235) = &input.schema_definition {
        object.key("SchemaDefinition").string(var_235.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_script_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateScriptInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_236) = &input.dag_nodes {
        let mut array_237 = object.key("DagNodes").start_array();
        for item_238 in var_236 {
            {
                let mut object_239 = array_237.value().start_object();
                crate::json_ser::serialize_structure_crate_model_code_gen_node(
                    &mut object_239,
                    item_238,
                )?;
                object_239.finish();
            }
        }
        array_237.finish();
    }
    if let Some(var_240) = &input.dag_edges {
        let mut array_241 = object.key("DagEdges").start_array();
        for item_242 in var_240 {
            {
                let mut object_243 = array_241.value().start_object();
                crate::json_ser::serialize_structure_crate_model_code_gen_edge(
                    &mut object_243,
                    item_242,
                )?;
                object_243.finish();
            }
        }
        array_241.finish();
    }
    if let Some(var_244) = &input.language {
        object.key("Language").string(var_244.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_security_configuration_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateSecurityConfigurationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_245) = &input.name {
        object.key("Name").string(var_245.as_str());
    }
    if let Some(var_246) = &input.encryption_configuration {
        let mut object_247 = object.key("EncryptionConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_encryption_configuration(
            &mut object_247,
            var_246,
        )?;
        object_247.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_session_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateSessionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_248) = &input.id {
        object.key("Id").string(var_248.as_str());
    }
    if let Some(var_249) = &input.description {
        object.key("Description").string(var_249.as_str());
    }
    if let Some(var_250) = &input.role {
        object.key("Role").string(var_250.as_str());
    }
    if let Some(var_251) = &input.command {
        let mut object_252 = object.key("Command").start_object();
        crate::json_ser::serialize_structure_crate_model_session_command(&mut object_252, var_251)?;
        object_252.finish();
    }
    if let Some(var_253) = &input.timeout {
        object.key("Timeout").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_253).into()),
        );
    }
    if let Some(var_254) = &input.idle_timeout {
        object.key("IdleTimeout").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_254).into()),
        );
    }
    if let Some(var_255) = &input.default_arguments {
        let mut object_256 = object.key("DefaultArguments").start_object();
        for (key_257, value_258) in var_255 {
            {
                object_256.key(key_257).string(value_258.as_str());
            }
        }
        object_256.finish();
    }
    if let Some(var_259) = &input.connections {
        let mut object_260 = object.key("Connections").start_object();
        crate::json_ser::serialize_structure_crate_model_connections_list(
            &mut object_260,
            var_259,
        )?;
        object_260.finish();
    }
    if let Some(var_261) = &input.max_capacity {
        object.key("MaxCapacity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_261).into()),
        );
    }
    if let Some(var_262) = &input.number_of_workers {
        object.key("NumberOfWorkers").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_262).into()),
        );
    }
    if let Some(var_263) = &input.worker_type {
        object.key("WorkerType").string(var_263.as_str());
    }
    if let Some(var_264) = &input.security_configuration {
        object.key("SecurityConfiguration").string(var_264.as_str());
    }
    if let Some(var_265) = &input.glue_version {
        object.key("GlueVersion").string(var_265.as_str());
    }
    if let Some(var_266) = &input.tags {
        let mut object_267 = object.key("Tags").start_object();
        for (key_268, value_269) in var_266 {
            {
                object_267.key(key_268).string(value_269.as_str());
            }
        }
        object_267.finish();
    }
    if let Some(var_270) = &input.request_origin {
        object.key("RequestOrigin").string(var_270.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_table_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateTableInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_271) = &input.catalog_id {
        object.key("CatalogId").string(var_271.as_str());
    }
    if let Some(var_272) = &input.database_name {
        object.key("DatabaseName").string(var_272.as_str());
    }
    if let Some(var_273) = &input.table_input {
        let mut object_274 = object.key("TableInput").start_object();
        crate::json_ser::serialize_structure_crate_model_table_input(&mut object_274, var_273)?;
        object_274.finish();
    }
    if let Some(var_275) = &input.partition_indexes {
        let mut array_276 = object.key("PartitionIndexes").start_array();
        for item_277 in var_275 {
            {
                let mut object_278 = array_276.value().start_object();
                crate::json_ser::serialize_structure_crate_model_partition_index(
                    &mut object_278,
                    item_277,
                )?;
                object_278.finish();
            }
        }
        array_276.finish();
    }
    if let Some(var_279) = &input.transaction_id {
        object.key("TransactionId").string(var_279.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_trigger_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateTriggerInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_280) = &input.name {
        object.key("Name").string(var_280.as_str());
    }
    if let Some(var_281) = &input.workflow_name {
        object.key("WorkflowName").string(var_281.as_str());
    }
    if let Some(var_282) = &input.r#type {
        object.key("Type").string(var_282.as_str());
    }
    if let Some(var_283) = &input.schedule {
        object.key("Schedule").string(var_283.as_str());
    }
    if let Some(var_284) = &input.predicate {
        let mut object_285 = object.key("Predicate").start_object();
        crate::json_ser::serialize_structure_crate_model_predicate(&mut object_285, var_284)?;
        object_285.finish();
    }
    if let Some(var_286) = &input.actions {
        let mut array_287 = object.key("Actions").start_array();
        for item_288 in var_286 {
            {
                let mut object_289 = array_287.value().start_object();
                crate::json_ser::serialize_structure_crate_model_action(&mut object_289, item_288)?;
                object_289.finish();
            }
        }
        array_287.finish();
    }
    if let Some(var_290) = &input.description {
        object.key("Description").string(var_290.as_str());
    }
    if input.start_on_creation {
        object
            .key("StartOnCreation")
            .boolean(input.start_on_creation);
    }
    if let Some(var_291) = &input.tags {
        let mut object_292 = object.key("Tags").start_object();
        for (key_293, value_294) in var_291 {
            {
                object_292.key(key_293).string(value_294.as_str());
            }
        }
        object_292.finish();
    }
    if let Some(var_295) = &input.event_batching_condition {
        let mut object_296 = object.key("EventBatchingCondition").start_object();
        crate::json_ser::serialize_structure_crate_model_event_batching_condition(
            &mut object_296,
            var_295,
        )?;
        object_296.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_user_defined_function_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateUserDefinedFunctionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_297) = &input.catalog_id {
        object.key("CatalogId").string(var_297.as_str());
    }
    if let Some(var_298) = &input.database_name {
        object.key("DatabaseName").string(var_298.as_str());
    }
    if let Some(var_299) = &input.function_input {
        let mut object_300 = object.key("FunctionInput").start_object();
        crate::json_ser::serialize_structure_crate_model_user_defined_function_input(
            &mut object_300,
            var_299,
        )?;
        object_300.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_workflow_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateWorkflowInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_301) = &input.name {
        object.key("Name").string(var_301.as_str());
    }
    if let Some(var_302) = &input.description {
        object.key("Description").string(var_302.as_str());
    }
    if let Some(var_303) = &input.default_run_properties {
        let mut object_304 = object.key("DefaultRunProperties").start_object();
        for (key_305, value_306) in var_303 {
            {
                object_304.key(key_305).string(value_306.as_str());
            }
        }
        object_304.finish();
    }
    if let Some(var_307) = &input.tags {
        let mut object_308 = object.key("Tags").start_object();
        for (key_309, value_310) in var_307 {
            {
                object_308.key(key_309).string(value_310.as_str());
            }
        }
        object_308.finish();
    }
    if let Some(var_311) = &input.max_concurrent_runs {
        object.key("MaxConcurrentRuns").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_311).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_blueprint_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteBlueprintInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_312) = &input.name {
        object.key("Name").string(var_312.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_classifier_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteClassifierInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_313) = &input.name {
        object.key("Name").string(var_313.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_column_statistics_for_partition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteColumnStatisticsForPartitionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_314) = &input.catalog_id {
        object.key("CatalogId").string(var_314.as_str());
    }
    if let Some(var_315) = &input.database_name {
        object.key("DatabaseName").string(var_315.as_str());
    }
    if let Some(var_316) = &input.table_name {
        object.key("TableName").string(var_316.as_str());
    }
    if let Some(var_317) = &input.partition_values {
        let mut array_318 = object.key("PartitionValues").start_array();
        for item_319 in var_317 {
            {
                array_318.value().string(item_319.as_str());
            }
        }
        array_318.finish();
    }
    if let Some(var_320) = &input.column_name {
        object.key("ColumnName").string(var_320.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_column_statistics_for_table_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteColumnStatisticsForTableInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_321) = &input.catalog_id {
        object.key("CatalogId").string(var_321.as_str());
    }
    if let Some(var_322) = &input.database_name {
        object.key("DatabaseName").string(var_322.as_str());
    }
    if let Some(var_323) = &input.table_name {
        object.key("TableName").string(var_323.as_str());
    }
    if let Some(var_324) = &input.column_name {
        object.key("ColumnName").string(var_324.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_connection_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteConnectionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_325) = &input.catalog_id {
        object.key("CatalogId").string(var_325.as_str());
    }
    if let Some(var_326) = &input.connection_name {
        object.key("ConnectionName").string(var_326.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_crawler_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteCrawlerInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_327) = &input.name {
        object.key("Name").string(var_327.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_custom_entity_type_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteCustomEntityTypeInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_328) = &input.name {
        object.key("Name").string(var_328.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_database_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteDatabaseInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_329) = &input.catalog_id {
        object.key("CatalogId").string(var_329.as_str());
    }
    if let Some(var_330) = &input.name {
        object.key("Name").string(var_330.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_dev_endpoint_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteDevEndpointInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_331) = &input.endpoint_name {
        object.key("EndpointName").string(var_331.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_332) = &input.job_name {
        object.key("JobName").string(var_332.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_ml_transform_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteMlTransformInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_333) = &input.transform_id {
        object.key("TransformId").string(var_333.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_partition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeletePartitionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_334) = &input.catalog_id {
        object.key("CatalogId").string(var_334.as_str());
    }
    if let Some(var_335) = &input.database_name {
        object.key("DatabaseName").string(var_335.as_str());
    }
    if let Some(var_336) = &input.table_name {
        object.key("TableName").string(var_336.as_str());
    }
    if let Some(var_337) = &input.partition_values {
        let mut array_338 = object.key("PartitionValues").start_array();
        for item_339 in var_337 {
            {
                array_338.value().string(item_339.as_str());
            }
        }
        array_338.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_partition_index_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeletePartitionIndexInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_340) = &input.catalog_id {
        object.key("CatalogId").string(var_340.as_str());
    }
    if let Some(var_341) = &input.database_name {
        object.key("DatabaseName").string(var_341.as_str());
    }
    if let Some(var_342) = &input.table_name {
        object.key("TableName").string(var_342.as_str());
    }
    if let Some(var_343) = &input.index_name {
        object.key("IndexName").string(var_343.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_registry_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteRegistryInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_344) = &input.registry_id {
        let mut object_345 = object.key("RegistryId").start_object();
        crate::json_ser::serialize_structure_crate_model_registry_id(&mut object_345, var_344)?;
        object_345.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_resource_policy_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteResourcePolicyInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_346) = &input.policy_hash_condition {
        object.key("PolicyHashCondition").string(var_346.as_str());
    }
    if let Some(var_347) = &input.resource_arn {
        object.key("ResourceArn").string(var_347.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_schema_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteSchemaInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_348) = &input.schema_id {
        let mut object_349 = object.key("SchemaId").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_id(&mut object_349, var_348)?;
        object_349.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_schema_versions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteSchemaVersionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_350) = &input.schema_id {
        let mut object_351 = object.key("SchemaId").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_id(&mut object_351, var_350)?;
        object_351.finish();
    }
    if let Some(var_352) = &input.versions {
        object.key("Versions").string(var_352.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_security_configuration_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteSecurityConfigurationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_353) = &input.name {
        object.key("Name").string(var_353.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_session_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteSessionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_354) = &input.id {
        object.key("Id").string(var_354.as_str());
    }
    if let Some(var_355) = &input.request_origin {
        object.key("RequestOrigin").string(var_355.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_table_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteTableInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_356) = &input.catalog_id {
        object.key("CatalogId").string(var_356.as_str());
    }
    if let Some(var_357) = &input.database_name {
        object.key("DatabaseName").string(var_357.as_str());
    }
    if let Some(var_358) = &input.name {
        object.key("Name").string(var_358.as_str());
    }
    if let Some(var_359) = &input.transaction_id {
        object.key("TransactionId").string(var_359.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_table_version_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteTableVersionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_360) = &input.catalog_id {
        object.key("CatalogId").string(var_360.as_str());
    }
    if let Some(var_361) = &input.database_name {
        object.key("DatabaseName").string(var_361.as_str());
    }
    if let Some(var_362) = &input.table_name {
        object.key("TableName").string(var_362.as_str());
    }
    if let Some(var_363) = &input.version_id {
        object.key("VersionId").string(var_363.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_trigger_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteTriggerInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_364) = &input.name {
        object.key("Name").string(var_364.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_user_defined_function_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteUserDefinedFunctionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_365) = &input.catalog_id {
        object.key("CatalogId").string(var_365.as_str());
    }
    if let Some(var_366) = &input.database_name {
        object.key("DatabaseName").string(var_366.as_str());
    }
    if let Some(var_367) = &input.function_name {
        object.key("FunctionName").string(var_367.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_workflow_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteWorkflowInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_368) = &input.name {
        object.key("Name").string(var_368.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_blueprint_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetBlueprintInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_369) = &input.name {
        object.key("Name").string(var_369.as_str());
    }
    if let Some(var_370) = &input.include_blueprint {
        object.key("IncludeBlueprint").boolean(*var_370);
    }
    if let Some(var_371) = &input.include_parameter_spec {
        object.key("IncludeParameterSpec").boolean(*var_371);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_blueprint_run_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetBlueprintRunInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_372) = &input.blueprint_name {
        object.key("BlueprintName").string(var_372.as_str());
    }
    if let Some(var_373) = &input.run_id {
        object.key("RunId").string(var_373.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_blueprint_runs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetBlueprintRunsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_374) = &input.blueprint_name {
        object.key("BlueprintName").string(var_374.as_str());
    }
    if let Some(var_375) = &input.next_token {
        object.key("NextToken").string(var_375.as_str());
    }
    if let Some(var_376) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_376).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_catalog_import_status_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetCatalogImportStatusInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_377) = &input.catalog_id {
        object.key("CatalogId").string(var_377.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_classifier_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetClassifierInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_378) = &input.name {
        object.key("Name").string(var_378.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_classifiers_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetClassifiersInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_379) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_379).into()),
        );
    }
    if let Some(var_380) = &input.next_token {
        object.key("NextToken").string(var_380.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_column_statistics_for_partition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetColumnStatisticsForPartitionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_381) = &input.catalog_id {
        object.key("CatalogId").string(var_381.as_str());
    }
    if let Some(var_382) = &input.database_name {
        object.key("DatabaseName").string(var_382.as_str());
    }
    if let Some(var_383) = &input.table_name {
        object.key("TableName").string(var_383.as_str());
    }
    if let Some(var_384) = &input.partition_values {
        let mut array_385 = object.key("PartitionValues").start_array();
        for item_386 in var_384 {
            {
                array_385.value().string(item_386.as_str());
            }
        }
        array_385.finish();
    }
    if let Some(var_387) = &input.column_names {
        let mut array_388 = object.key("ColumnNames").start_array();
        for item_389 in var_387 {
            {
                array_388.value().string(item_389.as_str());
            }
        }
        array_388.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_column_statistics_for_table_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetColumnStatisticsForTableInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_390) = &input.catalog_id {
        object.key("CatalogId").string(var_390.as_str());
    }
    if let Some(var_391) = &input.database_name {
        object.key("DatabaseName").string(var_391.as_str());
    }
    if let Some(var_392) = &input.table_name {
        object.key("TableName").string(var_392.as_str());
    }
    if let Some(var_393) = &input.column_names {
        let mut array_394 = object.key("ColumnNames").start_array();
        for item_395 in var_393 {
            {
                array_394.value().string(item_395.as_str());
            }
        }
        array_394.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_connection_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetConnectionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_396) = &input.catalog_id {
        object.key("CatalogId").string(var_396.as_str());
    }
    if let Some(var_397) = &input.name {
        object.key("Name").string(var_397.as_str());
    }
    if input.hide_password {
        object.key("HidePassword").boolean(input.hide_password);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_connections_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetConnectionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_398) = &input.catalog_id {
        object.key("CatalogId").string(var_398.as_str());
    }
    if let Some(var_399) = &input.filter {
        let mut object_400 = object.key("Filter").start_object();
        crate::json_ser::serialize_structure_crate_model_get_connections_filter(
            &mut object_400,
            var_399,
        )?;
        object_400.finish();
    }
    if input.hide_password {
        object.key("HidePassword").boolean(input.hide_password);
    }
    if let Some(var_401) = &input.next_token {
        object.key("NextToken").string(var_401.as_str());
    }
    if let Some(var_402) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_402).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_crawler_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetCrawlerInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_403) = &input.name {
        object.key("Name").string(var_403.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_crawler_metrics_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetCrawlerMetricsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_404) = &input.crawler_name_list {
        let mut array_405 = object.key("CrawlerNameList").start_array();
        for item_406 in var_404 {
            {
                array_405.value().string(item_406.as_str());
            }
        }
        array_405.finish();
    }
    if let Some(var_407) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_407).into()),
        );
    }
    if let Some(var_408) = &input.next_token {
        object.key("NextToken").string(var_408.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_crawlers_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetCrawlersInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_409) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_409).into()),
        );
    }
    if let Some(var_410) = &input.next_token {
        object.key("NextToken").string(var_410.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_custom_entity_type_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetCustomEntityTypeInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_411) = &input.name {
        object.key("Name").string(var_411.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_database_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetDatabaseInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_412) = &input.catalog_id {
        object.key("CatalogId").string(var_412.as_str());
    }
    if let Some(var_413) = &input.name {
        object.key("Name").string(var_413.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_databases_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetDatabasesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_414) = &input.catalog_id {
        object.key("CatalogId").string(var_414.as_str());
    }
    if let Some(var_415) = &input.next_token {
        object.key("NextToken").string(var_415.as_str());
    }
    if let Some(var_416) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_416).into()),
        );
    }
    if let Some(var_417) = &input.resource_share_type {
        object.key("ResourceShareType").string(var_417.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_data_catalog_encryption_settings_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetDataCatalogEncryptionSettingsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_418) = &input.catalog_id {
        object.key("CatalogId").string(var_418.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_dataflow_graph_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetDataflowGraphInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_419) = &input.python_script {
        object.key("PythonScript").string(var_419.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_dev_endpoint_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetDevEndpointInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_420) = &input.endpoint_name {
        object.key("EndpointName").string(var_420.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_dev_endpoints_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetDevEndpointsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_421) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_421).into()),
        );
    }
    if let Some(var_422) = &input.next_token {
        object.key("NextToken").string(var_422.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_423) = &input.job_name {
        object.key("JobName").string(var_423.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_job_bookmark_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetJobBookmarkInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_424) = &input.job_name {
        object.key("JobName").string(var_424.as_str());
    }
    if let Some(var_425) = &input.run_id {
        object.key("RunId").string(var_425.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_job_run_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetJobRunInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_426) = &input.job_name {
        object.key("JobName").string(var_426.as_str());
    }
    if let Some(var_427) = &input.run_id {
        object.key("RunId").string(var_427.as_str());
    }
    if input.predecessors_included {
        object
            .key("PredecessorsIncluded")
            .boolean(input.predecessors_included);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_job_runs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetJobRunsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_428) = &input.job_name {
        object.key("JobName").string(var_428.as_str());
    }
    if let Some(var_429) = &input.next_token {
        object.key("NextToken").string(var_429.as_str());
    }
    if let Some(var_430) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_430).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_jobs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetJobsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_431) = &input.next_token {
        object.key("NextToken").string(var_431.as_str());
    }
    if let Some(var_432) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_432).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_mapping_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetMappingInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_433) = &input.source {
        let mut object_434 = object.key("Source").start_object();
        crate::json_ser::serialize_structure_crate_model_catalog_entry(&mut object_434, var_433)?;
        object_434.finish();
    }
    if let Some(var_435) = &input.sinks {
        let mut array_436 = object.key("Sinks").start_array();
        for item_437 in var_435 {
            {
                let mut object_438 = array_436.value().start_object();
                crate::json_ser::serialize_structure_crate_model_catalog_entry(
                    &mut object_438,
                    item_437,
                )?;
                object_438.finish();
            }
        }
        array_436.finish();
    }
    if let Some(var_439) = &input.location {
        let mut object_440 = object.key("Location").start_object();
        crate::json_ser::serialize_structure_crate_model_location(&mut object_440, var_439)?;
        object_440.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_ml_task_run_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetMlTaskRunInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_441) = &input.transform_id {
        object.key("TransformId").string(var_441.as_str());
    }
    if let Some(var_442) = &input.task_run_id {
        object.key("TaskRunId").string(var_442.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_ml_task_runs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetMlTaskRunsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_443) = &input.transform_id {
        object.key("TransformId").string(var_443.as_str());
    }
    if let Some(var_444) = &input.next_token {
        object.key("NextToken").string(var_444.as_str());
    }
    if let Some(var_445) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_445).into()),
        );
    }
    if let Some(var_446) = &input.filter {
        let mut object_447 = object.key("Filter").start_object();
        crate::json_ser::serialize_structure_crate_model_task_run_filter_criteria(
            &mut object_447,
            var_446,
        )?;
        object_447.finish();
    }
    if let Some(var_448) = &input.sort {
        let mut object_449 = object.key("Sort").start_object();
        crate::json_ser::serialize_structure_crate_model_task_run_sort_criteria(
            &mut object_449,
            var_448,
        )?;
        object_449.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_ml_transform_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetMlTransformInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_450) = &input.transform_id {
        object.key("TransformId").string(var_450.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_ml_transforms_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetMlTransformsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_451) = &input.next_token {
        object.key("NextToken").string(var_451.as_str());
    }
    if let Some(var_452) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_452).into()),
        );
    }
    if let Some(var_453) = &input.filter {
        let mut object_454 = object.key("Filter").start_object();
        crate::json_ser::serialize_structure_crate_model_transform_filter_criteria(
            &mut object_454,
            var_453,
        )?;
        object_454.finish();
    }
    if let Some(var_455) = &input.sort {
        let mut object_456 = object.key("Sort").start_object();
        crate::json_ser::serialize_structure_crate_model_transform_sort_criteria(
            &mut object_456,
            var_455,
        )?;
        object_456.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_partition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetPartitionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_457) = &input.catalog_id {
        object.key("CatalogId").string(var_457.as_str());
    }
    if let Some(var_458) = &input.database_name {
        object.key("DatabaseName").string(var_458.as_str());
    }
    if let Some(var_459) = &input.table_name {
        object.key("TableName").string(var_459.as_str());
    }
    if let Some(var_460) = &input.partition_values {
        let mut array_461 = object.key("PartitionValues").start_array();
        for item_462 in var_460 {
            {
                array_461.value().string(item_462.as_str());
            }
        }
        array_461.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_partition_indexes_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetPartitionIndexesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_463) = &input.catalog_id {
        object.key("CatalogId").string(var_463.as_str());
    }
    if let Some(var_464) = &input.database_name {
        object.key("DatabaseName").string(var_464.as_str());
    }
    if let Some(var_465) = &input.table_name {
        object.key("TableName").string(var_465.as_str());
    }
    if let Some(var_466) = &input.next_token {
        object.key("NextToken").string(var_466.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_partitions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetPartitionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_467) = &input.catalog_id {
        object.key("CatalogId").string(var_467.as_str());
    }
    if let Some(var_468) = &input.database_name {
        object.key("DatabaseName").string(var_468.as_str());
    }
    if let Some(var_469) = &input.table_name {
        object.key("TableName").string(var_469.as_str());
    }
    if let Some(var_470) = &input.expression {
        object.key("Expression").string(var_470.as_str());
    }
    if let Some(var_471) = &input.next_token {
        object.key("NextToken").string(var_471.as_str());
    }
    if let Some(var_472) = &input.segment {
        let mut object_473 = object.key("Segment").start_object();
        crate::json_ser::serialize_structure_crate_model_segment(&mut object_473, var_472)?;
        object_473.finish();
    }
    if let Some(var_474) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_474).into()),
        );
    }
    if let Some(var_475) = &input.exclude_column_schema {
        object.key("ExcludeColumnSchema").boolean(*var_475);
    }
    if let Some(var_476) = &input.transaction_id {
        object.key("TransactionId").string(var_476.as_str());
    }
    if let Some(var_477) = &input.query_as_of_time {
        object
            .key("QueryAsOfTime")
            .date_time(var_477, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_plan_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetPlanInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_478) = &input.mapping {
        let mut array_479 = object.key("Mapping").start_array();
        for item_480 in var_478 {
            {
                let mut object_481 = array_479.value().start_object();
                crate::json_ser::serialize_structure_crate_model_mapping_entry(
                    &mut object_481,
                    item_480,
                )?;
                object_481.finish();
            }
        }
        array_479.finish();
    }
    if let Some(var_482) = &input.source {
        let mut object_483 = object.key("Source").start_object();
        crate::json_ser::serialize_structure_crate_model_catalog_entry(&mut object_483, var_482)?;
        object_483.finish();
    }
    if let Some(var_484) = &input.sinks {
        let mut array_485 = object.key("Sinks").start_array();
        for item_486 in var_484 {
            {
                let mut object_487 = array_485.value().start_object();
                crate::json_ser::serialize_structure_crate_model_catalog_entry(
                    &mut object_487,
                    item_486,
                )?;
                object_487.finish();
            }
        }
        array_485.finish();
    }
    if let Some(var_488) = &input.location {
        let mut object_489 = object.key("Location").start_object();
        crate::json_ser::serialize_structure_crate_model_location(&mut object_489, var_488)?;
        object_489.finish();
    }
    if let Some(var_490) = &input.language {
        object.key("Language").string(var_490.as_str());
    }
    if let Some(var_491) = &input.additional_plan_options_map {
        let mut object_492 = object.key("AdditionalPlanOptionsMap").start_object();
        for (key_493, value_494) in var_491 {
            {
                object_492.key(key_493).string(value_494.as_str());
            }
        }
        object_492.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_registry_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetRegistryInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_495) = &input.registry_id {
        let mut object_496 = object.key("RegistryId").start_object();
        crate::json_ser::serialize_structure_crate_model_registry_id(&mut object_496, var_495)?;
        object_496.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_resource_policies_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetResourcePoliciesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_497) = &input.next_token {
        object.key("NextToken").string(var_497.as_str());
    }
    if let Some(var_498) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_498).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_resource_policy_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetResourcePolicyInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_499) = &input.resource_arn {
        object.key("ResourceArn").string(var_499.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_schema_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetSchemaInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_500) = &input.schema_id {
        let mut object_501 = object.key("SchemaId").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_id(&mut object_501, var_500)?;
        object_501.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_schema_by_definition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetSchemaByDefinitionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_502) = &input.schema_id {
        let mut object_503 = object.key("SchemaId").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_id(&mut object_503, var_502)?;
        object_503.finish();
    }
    if let Some(var_504) = &input.schema_definition {
        object.key("SchemaDefinition").string(var_504.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_schema_version_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetSchemaVersionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_505) = &input.schema_id {
        let mut object_506 = object.key("SchemaId").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_id(&mut object_506, var_505)?;
        object_506.finish();
    }
    if let Some(var_507) = &input.schema_version_id {
        object.key("SchemaVersionId").string(var_507.as_str());
    }
    if let Some(var_508) = &input.schema_version_number {
        let mut object_509 = object.key("SchemaVersionNumber").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_version_number(
            &mut object_509,
            var_508,
        )?;
        object_509.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_schema_versions_diff_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetSchemaVersionsDiffInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_510) = &input.schema_id {
        let mut object_511 = object.key("SchemaId").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_id(&mut object_511, var_510)?;
        object_511.finish();
    }
    if let Some(var_512) = &input.first_schema_version_number {
        let mut object_513 = object.key("FirstSchemaVersionNumber").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_version_number(
            &mut object_513,
            var_512,
        )?;
        object_513.finish();
    }
    if let Some(var_514) = &input.second_schema_version_number {
        let mut object_515 = object.key("SecondSchemaVersionNumber").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_version_number(
            &mut object_515,
            var_514,
        )?;
        object_515.finish();
    }
    if let Some(var_516) = &input.schema_diff_type {
        object.key("SchemaDiffType").string(var_516.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_security_configuration_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetSecurityConfigurationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_517) = &input.name {
        object.key("Name").string(var_517.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_security_configurations_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetSecurityConfigurationsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_518) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_518).into()),
        );
    }
    if let Some(var_519) = &input.next_token {
        object.key("NextToken").string(var_519.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_session_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetSessionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_520) = &input.id {
        object.key("Id").string(var_520.as_str());
    }
    if let Some(var_521) = &input.request_origin {
        object.key("RequestOrigin").string(var_521.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_statement_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetStatementInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_522) = &input.session_id {
        object.key("SessionId").string(var_522.as_str());
    }
    {
        object.key("Id").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.id).into()),
        );
    }
    if let Some(var_523) = &input.request_origin {
        object.key("RequestOrigin").string(var_523.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_table_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetTableInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_524) = &input.catalog_id {
        object.key("CatalogId").string(var_524.as_str());
    }
    if let Some(var_525) = &input.database_name {
        object.key("DatabaseName").string(var_525.as_str());
    }
    if let Some(var_526) = &input.name {
        object.key("Name").string(var_526.as_str());
    }
    if let Some(var_527) = &input.transaction_id {
        object.key("TransactionId").string(var_527.as_str());
    }
    if let Some(var_528) = &input.query_as_of_time {
        object
            .key("QueryAsOfTime")
            .date_time(var_528, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_tables_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetTablesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_529) = &input.catalog_id {
        object.key("CatalogId").string(var_529.as_str());
    }
    if let Some(var_530) = &input.database_name {
        object.key("DatabaseName").string(var_530.as_str());
    }
    if let Some(var_531) = &input.expression {
        object.key("Expression").string(var_531.as_str());
    }
    if let Some(var_532) = &input.next_token {
        object.key("NextToken").string(var_532.as_str());
    }
    if let Some(var_533) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_533).into()),
        );
    }
    if let Some(var_534) = &input.transaction_id {
        object.key("TransactionId").string(var_534.as_str());
    }
    if let Some(var_535) = &input.query_as_of_time {
        object
            .key("QueryAsOfTime")
            .date_time(var_535, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_table_version_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetTableVersionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_536) = &input.catalog_id {
        object.key("CatalogId").string(var_536.as_str());
    }
    if let Some(var_537) = &input.database_name {
        object.key("DatabaseName").string(var_537.as_str());
    }
    if let Some(var_538) = &input.table_name {
        object.key("TableName").string(var_538.as_str());
    }
    if let Some(var_539) = &input.version_id {
        object.key("VersionId").string(var_539.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_table_versions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetTableVersionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_540) = &input.catalog_id {
        object.key("CatalogId").string(var_540.as_str());
    }
    if let Some(var_541) = &input.database_name {
        object.key("DatabaseName").string(var_541.as_str());
    }
    if let Some(var_542) = &input.table_name {
        object.key("TableName").string(var_542.as_str());
    }
    if let Some(var_543) = &input.next_token {
        object.key("NextToken").string(var_543.as_str());
    }
    if let Some(var_544) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_544).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_tags_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetTagsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_545) = &input.resource_arn {
        object.key("ResourceArn").string(var_545.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_trigger_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetTriggerInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_546) = &input.name {
        object.key("Name").string(var_546.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_triggers_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetTriggersInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_547) = &input.next_token {
        object.key("NextToken").string(var_547.as_str());
    }
    if let Some(var_548) = &input.dependent_job_name {
        object.key("DependentJobName").string(var_548.as_str());
    }
    if let Some(var_549) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_549).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_unfiltered_partition_metadata_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetUnfilteredPartitionMetadataInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_550) = &input.catalog_id {
        object.key("CatalogId").string(var_550.as_str());
    }
    if let Some(var_551) = &input.database_name {
        object.key("DatabaseName").string(var_551.as_str());
    }
    if let Some(var_552) = &input.table_name {
        object.key("TableName").string(var_552.as_str());
    }
    if let Some(var_553) = &input.partition_values {
        let mut array_554 = object.key("PartitionValues").start_array();
        for item_555 in var_553 {
            {
                array_554.value().string(item_555.as_str());
            }
        }
        array_554.finish();
    }
    if let Some(var_556) = &input.audit_context {
        let mut object_557 = object.key("AuditContext").start_object();
        crate::json_ser::serialize_structure_crate_model_audit_context(&mut object_557, var_556)?;
        object_557.finish();
    }
    if let Some(var_558) = &input.supported_permission_types {
        let mut array_559 = object.key("SupportedPermissionTypes").start_array();
        for item_560 in var_558 {
            {
                array_559.value().string(item_560.as_str());
            }
        }
        array_559.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_unfiltered_partitions_metadata_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetUnfilteredPartitionsMetadataInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_561) = &input.catalog_id {
        object.key("CatalogId").string(var_561.as_str());
    }
    if let Some(var_562) = &input.database_name {
        object.key("DatabaseName").string(var_562.as_str());
    }
    if let Some(var_563) = &input.table_name {
        object.key("TableName").string(var_563.as_str());
    }
    if let Some(var_564) = &input.expression {
        object.key("Expression").string(var_564.as_str());
    }
    if let Some(var_565) = &input.audit_context {
        let mut object_566 = object.key("AuditContext").start_object();
        crate::json_ser::serialize_structure_crate_model_audit_context(&mut object_566, var_565)?;
        object_566.finish();
    }
    if let Some(var_567) = &input.supported_permission_types {
        let mut array_568 = object.key("SupportedPermissionTypes").start_array();
        for item_569 in var_567 {
            {
                array_568.value().string(item_569.as_str());
            }
        }
        array_568.finish();
    }
    if let Some(var_570) = &input.next_token {
        object.key("NextToken").string(var_570.as_str());
    }
    if let Some(var_571) = &input.segment {
        let mut object_572 = object.key("Segment").start_object();
        crate::json_ser::serialize_structure_crate_model_segment(&mut object_572, var_571)?;
        object_572.finish();
    }
    if let Some(var_573) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_573).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_unfiltered_table_metadata_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetUnfilteredTableMetadataInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_574) = &input.catalog_id {
        object.key("CatalogId").string(var_574.as_str());
    }
    if let Some(var_575) = &input.database_name {
        object.key("DatabaseName").string(var_575.as_str());
    }
    if let Some(var_576) = &input.name {
        object.key("Name").string(var_576.as_str());
    }
    if let Some(var_577) = &input.audit_context {
        let mut object_578 = object.key("AuditContext").start_object();
        crate::json_ser::serialize_structure_crate_model_audit_context(&mut object_578, var_577)?;
        object_578.finish();
    }
    if let Some(var_579) = &input.supported_permission_types {
        let mut array_580 = object.key("SupportedPermissionTypes").start_array();
        for item_581 in var_579 {
            {
                array_580.value().string(item_581.as_str());
            }
        }
        array_580.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_user_defined_function_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetUserDefinedFunctionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_582) = &input.catalog_id {
        object.key("CatalogId").string(var_582.as_str());
    }
    if let Some(var_583) = &input.database_name {
        object.key("DatabaseName").string(var_583.as_str());
    }
    if let Some(var_584) = &input.function_name {
        object.key("FunctionName").string(var_584.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_user_defined_functions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetUserDefinedFunctionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_585) = &input.catalog_id {
        object.key("CatalogId").string(var_585.as_str());
    }
    if let Some(var_586) = &input.database_name {
        object.key("DatabaseName").string(var_586.as_str());
    }
    if let Some(var_587) = &input.pattern {
        object.key("Pattern").string(var_587.as_str());
    }
    if let Some(var_588) = &input.next_token {
        object.key("NextToken").string(var_588.as_str());
    }
    if let Some(var_589) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_589).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_workflow_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetWorkflowInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_590) = &input.name {
        object.key("Name").string(var_590.as_str());
    }
    if let Some(var_591) = &input.include_graph {
        object.key("IncludeGraph").boolean(*var_591);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_workflow_run_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetWorkflowRunInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_592) = &input.name {
        object.key("Name").string(var_592.as_str());
    }
    if let Some(var_593) = &input.run_id {
        object.key("RunId").string(var_593.as_str());
    }
    if let Some(var_594) = &input.include_graph {
        object.key("IncludeGraph").boolean(*var_594);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_workflow_run_properties_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetWorkflowRunPropertiesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_595) = &input.name {
        object.key("Name").string(var_595.as_str());
    }
    if let Some(var_596) = &input.run_id {
        object.key("RunId").string(var_596.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_workflow_runs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetWorkflowRunsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_597) = &input.name {
        object.key("Name").string(var_597.as_str());
    }
    if let Some(var_598) = &input.include_graph {
        object.key("IncludeGraph").boolean(*var_598);
    }
    if let Some(var_599) = &input.next_token {
        object.key("NextToken").string(var_599.as_str());
    }
    if let Some(var_600) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_600).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_import_catalog_to_glue_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ImportCatalogToGlueInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_601) = &input.catalog_id {
        object.key("CatalogId").string(var_601.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_blueprints_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListBlueprintsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_602) = &input.next_token {
        object.key("NextToken").string(var_602.as_str());
    }
    if let Some(var_603) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_603).into()),
        );
    }
    if let Some(var_604) = &input.tags {
        let mut object_605 = object.key("Tags").start_object();
        for (key_606, value_607) in var_604 {
            {
                object_605.key(key_606).string(value_607.as_str());
            }
        }
        object_605.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_crawlers_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListCrawlersInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_608) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_608).into()),
        );
    }
    if let Some(var_609) = &input.next_token {
        object.key("NextToken").string(var_609.as_str());
    }
    if let Some(var_610) = &input.tags {
        let mut object_611 = object.key("Tags").start_object();
        for (key_612, value_613) in var_610 {
            {
                object_611.key(key_612).string(value_613.as_str());
            }
        }
        object_611.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_custom_entity_types_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListCustomEntityTypesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_614) = &input.next_token {
        object.key("NextToken").string(var_614.as_str());
    }
    if let Some(var_615) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_615).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_dev_endpoints_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListDevEndpointsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_616) = &input.next_token {
        object.key("NextToken").string(var_616.as_str());
    }
    if let Some(var_617) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_617).into()),
        );
    }
    if let Some(var_618) = &input.tags {
        let mut object_619 = object.key("Tags").start_object();
        for (key_620, value_621) in var_618 {
            {
                object_619.key(key_620).string(value_621.as_str());
            }
        }
        object_619.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_jobs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListJobsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_622) = &input.next_token {
        object.key("NextToken").string(var_622.as_str());
    }
    if let Some(var_623) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_623).into()),
        );
    }
    if let Some(var_624) = &input.tags {
        let mut object_625 = object.key("Tags").start_object();
        for (key_626, value_627) in var_624 {
            {
                object_625.key(key_626).string(value_627.as_str());
            }
        }
        object_625.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_ml_transforms_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListMlTransformsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_628) = &input.next_token {
        object.key("NextToken").string(var_628.as_str());
    }
    if let Some(var_629) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_629).into()),
        );
    }
    if let Some(var_630) = &input.filter {
        let mut object_631 = object.key("Filter").start_object();
        crate::json_ser::serialize_structure_crate_model_transform_filter_criteria(
            &mut object_631,
            var_630,
        )?;
        object_631.finish();
    }
    if let Some(var_632) = &input.sort {
        let mut object_633 = object.key("Sort").start_object();
        crate::json_ser::serialize_structure_crate_model_transform_sort_criteria(
            &mut object_633,
            var_632,
        )?;
        object_633.finish();
    }
    if let Some(var_634) = &input.tags {
        let mut object_635 = object.key("Tags").start_object();
        for (key_636, value_637) in var_634 {
            {
                object_635.key(key_636).string(value_637.as_str());
            }
        }
        object_635.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_registries_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListRegistriesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_638) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_638).into()),
        );
    }
    if let Some(var_639) = &input.next_token {
        object.key("NextToken").string(var_639.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_schemas_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListSchemasInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_640) = &input.registry_id {
        let mut object_641 = object.key("RegistryId").start_object();
        crate::json_ser::serialize_structure_crate_model_registry_id(&mut object_641, var_640)?;
        object_641.finish();
    }
    if let Some(var_642) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_642).into()),
        );
    }
    if let Some(var_643) = &input.next_token {
        object.key("NextToken").string(var_643.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_schema_versions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListSchemaVersionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_644) = &input.schema_id {
        let mut object_645 = object.key("SchemaId").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_id(&mut object_645, var_644)?;
        object_645.finish();
    }
    if let Some(var_646) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_646).into()),
        );
    }
    if let Some(var_647) = &input.next_token {
        object.key("NextToken").string(var_647.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_sessions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListSessionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_648) = &input.next_token {
        object.key("NextToken").string(var_648.as_str());
    }
    if let Some(var_649) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_649).into()),
        );
    }
    if let Some(var_650) = &input.tags {
        let mut object_651 = object.key("Tags").start_object();
        for (key_652, value_653) in var_650 {
            {
                object_651.key(key_652).string(value_653.as_str());
            }
        }
        object_651.finish();
    }
    if let Some(var_654) = &input.request_origin {
        object.key("RequestOrigin").string(var_654.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_statements_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListStatementsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_655) = &input.session_id {
        object.key("SessionId").string(var_655.as_str());
    }
    if let Some(var_656) = &input.request_origin {
        object.key("RequestOrigin").string(var_656.as_str());
    }
    if let Some(var_657) = &input.next_token {
        object.key("NextToken").string(var_657.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_triggers_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTriggersInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_658) = &input.next_token {
        object.key("NextToken").string(var_658.as_str());
    }
    if let Some(var_659) = &input.dependent_job_name {
        object.key("DependentJobName").string(var_659.as_str());
    }
    if let Some(var_660) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_660).into()),
        );
    }
    if let Some(var_661) = &input.tags {
        let mut object_662 = object.key("Tags").start_object();
        for (key_663, value_664) in var_661 {
            {
                object_662.key(key_663).string(value_664.as_str());
            }
        }
        object_662.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_workflows_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListWorkflowsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_665) = &input.next_token {
        object.key("NextToken").string(var_665.as_str());
    }
    if let Some(var_666) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_666).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_data_catalog_encryption_settings_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutDataCatalogEncryptionSettingsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_667) = &input.catalog_id {
        object.key("CatalogId").string(var_667.as_str());
    }
    if let Some(var_668) = &input.data_catalog_encryption_settings {
        let mut object_669 = object.key("DataCatalogEncryptionSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_data_catalog_encryption_settings(
            &mut object_669,
            var_668,
        )?;
        object_669.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_resource_policy_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutResourcePolicyInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_670) = &input.policy_in_json {
        object.key("PolicyInJson").string(var_670.as_str());
    }
    if let Some(var_671) = &input.resource_arn {
        object.key("ResourceArn").string(var_671.as_str());
    }
    if let Some(var_672) = &input.policy_hash_condition {
        object.key("PolicyHashCondition").string(var_672.as_str());
    }
    if let Some(var_673) = &input.policy_exists_condition {
        object.key("PolicyExistsCondition").string(var_673.as_str());
    }
    if let Some(var_674) = &input.enable_hybrid {
        object.key("EnableHybrid").string(var_674.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_schema_version_metadata_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutSchemaVersionMetadataInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_675) = &input.schema_id {
        let mut object_676 = object.key("SchemaId").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_id(&mut object_676, var_675)?;
        object_676.finish();
    }
    if let Some(var_677) = &input.schema_version_number {
        let mut object_678 = object.key("SchemaVersionNumber").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_version_number(
            &mut object_678,
            var_677,
        )?;
        object_678.finish();
    }
    if let Some(var_679) = &input.schema_version_id {
        object.key("SchemaVersionId").string(var_679.as_str());
    }
    if let Some(var_680) = &input.metadata_key_value {
        let mut object_681 = object.key("MetadataKeyValue").start_object();
        crate::json_ser::serialize_structure_crate_model_metadata_key_value_pair(
            &mut object_681,
            var_680,
        )?;
        object_681.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_workflow_run_properties_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutWorkflowRunPropertiesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_682) = &input.name {
        object.key("Name").string(var_682.as_str());
    }
    if let Some(var_683) = &input.run_id {
        object.key("RunId").string(var_683.as_str());
    }
    if let Some(var_684) = &input.run_properties {
        let mut object_685 = object.key("RunProperties").start_object();
        for (key_686, value_687) in var_684 {
            {
                object_685.key(key_686).string(value_687.as_str());
            }
        }
        object_685.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_query_schema_version_metadata_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::QuerySchemaVersionMetadataInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_688) = &input.schema_id {
        let mut object_689 = object.key("SchemaId").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_id(&mut object_689, var_688)?;
        object_689.finish();
    }
    if let Some(var_690) = &input.schema_version_number {
        let mut object_691 = object.key("SchemaVersionNumber").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_version_number(
            &mut object_691,
            var_690,
        )?;
        object_691.finish();
    }
    if let Some(var_692) = &input.schema_version_id {
        object.key("SchemaVersionId").string(var_692.as_str());
    }
    if let Some(var_693) = &input.metadata_list {
        let mut array_694 = object.key("MetadataList").start_array();
        for item_695 in var_693 {
            {
                let mut object_696 = array_694.value().start_object();
                crate::json_ser::serialize_structure_crate_model_metadata_key_value_pair(
                    &mut object_696,
                    item_695,
                )?;
                object_696.finish();
            }
        }
        array_694.finish();
    }
    if input.max_results != 0 {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_results).into()),
        );
    }
    if let Some(var_697) = &input.next_token {
        object.key("NextToken").string(var_697.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_register_schema_version_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RegisterSchemaVersionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_698) = &input.schema_id {
        let mut object_699 = object.key("SchemaId").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_id(&mut object_699, var_698)?;
        object_699.finish();
    }
    if let Some(var_700) = &input.schema_definition {
        object.key("SchemaDefinition").string(var_700.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_remove_schema_version_metadata_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RemoveSchemaVersionMetadataInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_701) = &input.schema_id {
        let mut object_702 = object.key("SchemaId").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_id(&mut object_702, var_701)?;
        object_702.finish();
    }
    if let Some(var_703) = &input.schema_version_number {
        let mut object_704 = object.key("SchemaVersionNumber").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_version_number(
            &mut object_704,
            var_703,
        )?;
        object_704.finish();
    }
    if let Some(var_705) = &input.schema_version_id {
        object.key("SchemaVersionId").string(var_705.as_str());
    }
    if let Some(var_706) = &input.metadata_key_value {
        let mut object_707 = object.key("MetadataKeyValue").start_object();
        crate::json_ser::serialize_structure_crate_model_metadata_key_value_pair(
            &mut object_707,
            var_706,
        )?;
        object_707.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_reset_job_bookmark_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ResetJobBookmarkInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_708) = &input.job_name {
        object.key("JobName").string(var_708.as_str());
    }
    if let Some(var_709) = &input.run_id {
        object.key("RunId").string(var_709.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_resume_workflow_run_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ResumeWorkflowRunInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_710) = &input.name {
        object.key("Name").string(var_710.as_str());
    }
    if let Some(var_711) = &input.run_id {
        object.key("RunId").string(var_711.as_str());
    }
    if let Some(var_712) = &input.node_ids {
        let mut array_713 = object.key("NodeIds").start_array();
        for item_714 in var_712 {
            {
                array_713.value().string(item_714.as_str());
            }
        }
        array_713.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_run_statement_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RunStatementInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_715) = &input.session_id {
        object.key("SessionId").string(var_715.as_str());
    }
    if let Some(var_716) = &input.code {
        object.key("Code").string(var_716.as_str());
    }
    if let Some(var_717) = &input.request_origin {
        object.key("RequestOrigin").string(var_717.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_search_tables_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SearchTablesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_718) = &input.catalog_id {
        object.key("CatalogId").string(var_718.as_str());
    }
    if let Some(var_719) = &input.next_token {
        object.key("NextToken").string(var_719.as_str());
    }
    if let Some(var_720) = &input.filters {
        let mut array_721 = object.key("Filters").start_array();
        for item_722 in var_720 {
            {
                let mut object_723 = array_721.value().start_object();
                crate::json_ser::serialize_structure_crate_model_property_predicate(
                    &mut object_723,
                    item_722,
                )?;
                object_723.finish();
            }
        }
        array_721.finish();
    }
    if let Some(var_724) = &input.search_text {
        object.key("SearchText").string(var_724.as_str());
    }
    if let Some(var_725) = &input.sort_criteria {
        let mut array_726 = object.key("SortCriteria").start_array();
        for item_727 in var_725 {
            {
                let mut object_728 = array_726.value().start_object();
                crate::json_ser::serialize_structure_crate_model_sort_criterion(
                    &mut object_728,
                    item_727,
                )?;
                object_728.finish();
            }
        }
        array_726.finish();
    }
    if let Some(var_729) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_729).into()),
        );
    }
    if let Some(var_730) = &input.resource_share_type {
        object.key("ResourceShareType").string(var_730.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_blueprint_run_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartBlueprintRunInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_731) = &input.blueprint_name {
        object.key("BlueprintName").string(var_731.as_str());
    }
    if let Some(var_732) = &input.parameters {
        object.key("Parameters").string(var_732.as_str());
    }
    if let Some(var_733) = &input.role_arn {
        object.key("RoleArn").string(var_733.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_crawler_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartCrawlerInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_734) = &input.name {
        object.key("Name").string(var_734.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_crawler_schedule_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartCrawlerScheduleInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_735) = &input.crawler_name {
        object.key("CrawlerName").string(var_735.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_export_labels_task_run_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartExportLabelsTaskRunInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_736) = &input.transform_id {
        object.key("TransformId").string(var_736.as_str());
    }
    if let Some(var_737) = &input.output_s3_path {
        object.key("OutputS3Path").string(var_737.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_import_labels_task_run_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartImportLabelsTaskRunInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_738) = &input.transform_id {
        object.key("TransformId").string(var_738.as_str());
    }
    if let Some(var_739) = &input.input_s3_path {
        object.key("InputS3Path").string(var_739.as_str());
    }
    if input.replace_all_labels {
        object
            .key("ReplaceAllLabels")
            .boolean(input.replace_all_labels);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_job_run_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartJobRunInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_740) = &input.job_name {
        object.key("JobName").string(var_740.as_str());
    }
    if let Some(var_741) = &input.job_run_id {
        object.key("JobRunId").string(var_741.as_str());
    }
    if let Some(var_742) = &input.arguments {
        let mut object_743 = object.key("Arguments").start_object();
        for (key_744, value_745) in var_742 {
            {
                object_743.key(key_744).string(value_745.as_str());
            }
        }
        object_743.finish();
    }
    if input.allocated_capacity != 0 {
        object.key("AllocatedCapacity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.allocated_capacity).into()),
        );
    }
    if let Some(var_746) = &input.timeout {
        object.key("Timeout").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_746).into()),
        );
    }
    if let Some(var_747) = &input.max_capacity {
        object.key("MaxCapacity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_747).into()),
        );
    }
    if let Some(var_748) = &input.security_configuration {
        object.key("SecurityConfiguration").string(var_748.as_str());
    }
    if let Some(var_749) = &input.notification_property {
        let mut object_750 = object.key("NotificationProperty").start_object();
        crate::json_ser::serialize_structure_crate_model_notification_property(
            &mut object_750,
            var_749,
        )?;
        object_750.finish();
    }
    if let Some(var_751) = &input.worker_type {
        object.key("WorkerType").string(var_751.as_str());
    }
    if let Some(var_752) = &input.number_of_workers {
        object.key("NumberOfWorkers").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_752).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_ml_evaluation_task_run_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartMlEvaluationTaskRunInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_753) = &input.transform_id {
        object.key("TransformId").string(var_753.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_ml_labeling_set_generation_task_run_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartMlLabelingSetGenerationTaskRunInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_754) = &input.transform_id {
        object.key("TransformId").string(var_754.as_str());
    }
    if let Some(var_755) = &input.output_s3_path {
        object.key("OutputS3Path").string(var_755.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_trigger_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartTriggerInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_756) = &input.name {
        object.key("Name").string(var_756.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_workflow_run_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartWorkflowRunInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_757) = &input.name {
        object.key("Name").string(var_757.as_str());
    }
    if let Some(var_758) = &input.run_properties {
        let mut object_759 = object.key("RunProperties").start_object();
        for (key_760, value_761) in var_758 {
            {
                object_759.key(key_760).string(value_761.as_str());
            }
        }
        object_759.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_crawler_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopCrawlerInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_762) = &input.name {
        object.key("Name").string(var_762.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_crawler_schedule_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopCrawlerScheduleInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_763) = &input.crawler_name {
        object.key("CrawlerName").string(var_763.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_session_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopSessionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_764) = &input.id {
        object.key("Id").string(var_764.as_str());
    }
    if let Some(var_765) = &input.request_origin {
        object.key("RequestOrigin").string(var_765.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_trigger_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopTriggerInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_766) = &input.name {
        object.key("Name").string(var_766.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_workflow_run_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopWorkflowRunInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_767) = &input.name {
        object.key("Name").string(var_767.as_str());
    }
    if let Some(var_768) = &input.run_id {
        object.key("RunId").string(var_768.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_tag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_769) = &input.resource_arn {
        object.key("ResourceArn").string(var_769.as_str());
    }
    if let Some(var_770) = &input.tags_to_add {
        let mut object_771 = object.key("TagsToAdd").start_object();
        for (key_772, value_773) in var_770 {
            {
                object_771.key(key_772).string(value_773.as_str());
            }
        }
        object_771.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_untag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UntagResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_774) = &input.resource_arn {
        object.key("ResourceArn").string(var_774.as_str());
    }
    if let Some(var_775) = &input.tags_to_remove {
        let mut array_776 = object.key("TagsToRemove").start_array();
        for item_777 in var_775 {
            {
                array_776.value().string(item_777.as_str());
            }
        }
        array_776.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_blueprint_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateBlueprintInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_778) = &input.name {
        object.key("Name").string(var_778.as_str());
    }
    if let Some(var_779) = &input.description {
        object.key("Description").string(var_779.as_str());
    }
    if let Some(var_780) = &input.blueprint_location {
        object.key("BlueprintLocation").string(var_780.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_classifier_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateClassifierInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_781) = &input.grok_classifier {
        let mut object_782 = object.key("GrokClassifier").start_object();
        crate::json_ser::serialize_structure_crate_model_update_grok_classifier_request(
            &mut object_782,
            var_781,
        )?;
        object_782.finish();
    }
    if let Some(var_783) = &input.xml_classifier {
        let mut object_784 = object.key("XMLClassifier").start_object();
        crate::json_ser::serialize_structure_crate_model_update_xml_classifier_request(
            &mut object_784,
            var_783,
        )?;
        object_784.finish();
    }
    if let Some(var_785) = &input.json_classifier {
        let mut object_786 = object.key("JsonClassifier").start_object();
        crate::json_ser::serialize_structure_crate_model_update_json_classifier_request(
            &mut object_786,
            var_785,
        )?;
        object_786.finish();
    }
    if let Some(var_787) = &input.csv_classifier {
        let mut object_788 = object.key("CsvClassifier").start_object();
        crate::json_ser::serialize_structure_crate_model_update_csv_classifier_request(
            &mut object_788,
            var_787,
        )?;
        object_788.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_column_statistics_for_partition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateColumnStatisticsForPartitionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_789) = &input.catalog_id {
        object.key("CatalogId").string(var_789.as_str());
    }
    if let Some(var_790) = &input.database_name {
        object.key("DatabaseName").string(var_790.as_str());
    }
    if let Some(var_791) = &input.table_name {
        object.key("TableName").string(var_791.as_str());
    }
    if let Some(var_792) = &input.partition_values {
        let mut array_793 = object.key("PartitionValues").start_array();
        for item_794 in var_792 {
            {
                array_793.value().string(item_794.as_str());
            }
        }
        array_793.finish();
    }
    if let Some(var_795) = &input.column_statistics_list {
        let mut array_796 = object.key("ColumnStatisticsList").start_array();
        for item_797 in var_795 {
            {
                let mut object_798 = array_796.value().start_object();
                crate::json_ser::serialize_structure_crate_model_column_statistics(
                    &mut object_798,
                    item_797,
                )?;
                object_798.finish();
            }
        }
        array_796.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_column_statistics_for_table_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateColumnStatisticsForTableInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_799) = &input.catalog_id {
        object.key("CatalogId").string(var_799.as_str());
    }
    if let Some(var_800) = &input.database_name {
        object.key("DatabaseName").string(var_800.as_str());
    }
    if let Some(var_801) = &input.table_name {
        object.key("TableName").string(var_801.as_str());
    }
    if let Some(var_802) = &input.column_statistics_list {
        let mut array_803 = object.key("ColumnStatisticsList").start_array();
        for item_804 in var_802 {
            {
                let mut object_805 = array_803.value().start_object();
                crate::json_ser::serialize_structure_crate_model_column_statistics(
                    &mut object_805,
                    item_804,
                )?;
                object_805.finish();
            }
        }
        array_803.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_connection_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateConnectionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_806) = &input.catalog_id {
        object.key("CatalogId").string(var_806.as_str());
    }
    if let Some(var_807) = &input.name {
        object.key("Name").string(var_807.as_str());
    }
    if let Some(var_808) = &input.connection_input {
        let mut object_809 = object.key("ConnectionInput").start_object();
        crate::json_ser::serialize_structure_crate_model_connection_input(
            &mut object_809,
            var_808,
        )?;
        object_809.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_crawler_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateCrawlerInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_810) = &input.name {
        object.key("Name").string(var_810.as_str());
    }
    if let Some(var_811) = &input.role {
        object.key("Role").string(var_811.as_str());
    }
    if let Some(var_812) = &input.database_name {
        object.key("DatabaseName").string(var_812.as_str());
    }
    if let Some(var_813) = &input.description {
        object.key("Description").string(var_813.as_str());
    }
    if let Some(var_814) = &input.targets {
        let mut object_815 = object.key("Targets").start_object();
        crate::json_ser::serialize_structure_crate_model_crawler_targets(&mut object_815, var_814)?;
        object_815.finish();
    }
    if let Some(var_816) = &input.schedule {
        object.key("Schedule").string(var_816.as_str());
    }
    if let Some(var_817) = &input.classifiers {
        let mut array_818 = object.key("Classifiers").start_array();
        for item_819 in var_817 {
            {
                array_818.value().string(item_819.as_str());
            }
        }
        array_818.finish();
    }
    if let Some(var_820) = &input.table_prefix {
        object.key("TablePrefix").string(var_820.as_str());
    }
    if let Some(var_821) = &input.schema_change_policy {
        let mut object_822 = object.key("SchemaChangePolicy").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_change_policy(
            &mut object_822,
            var_821,
        )?;
        object_822.finish();
    }
    if let Some(var_823) = &input.recrawl_policy {
        let mut object_824 = object.key("RecrawlPolicy").start_object();
        crate::json_ser::serialize_structure_crate_model_recrawl_policy(&mut object_824, var_823)?;
        object_824.finish();
    }
    if let Some(var_825) = &input.lineage_configuration {
        let mut object_826 = object.key("LineageConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_lineage_configuration(
            &mut object_826,
            var_825,
        )?;
        object_826.finish();
    }
    if let Some(var_827) = &input.lake_formation_configuration {
        let mut object_828 = object.key("LakeFormationConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_lake_formation_configuration(
            &mut object_828,
            var_827,
        )?;
        object_828.finish();
    }
    if let Some(var_829) = &input.configuration {
        object.key("Configuration").string(var_829.as_str());
    }
    if let Some(var_830) = &input.crawler_security_configuration {
        object
            .key("CrawlerSecurityConfiguration")
            .string(var_830.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_crawler_schedule_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateCrawlerScheduleInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_831) = &input.crawler_name {
        object.key("CrawlerName").string(var_831.as_str());
    }
    if let Some(var_832) = &input.schedule {
        object.key("Schedule").string(var_832.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_database_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDatabaseInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_833) = &input.catalog_id {
        object.key("CatalogId").string(var_833.as_str());
    }
    if let Some(var_834) = &input.name {
        object.key("Name").string(var_834.as_str());
    }
    if let Some(var_835) = &input.database_input {
        let mut object_836 = object.key("DatabaseInput").start_object();
        crate::json_ser::serialize_structure_crate_model_database_input(&mut object_836, var_835)?;
        object_836.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_dev_endpoint_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDevEndpointInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_837) = &input.endpoint_name {
        object.key("EndpointName").string(var_837.as_str());
    }
    if let Some(var_838) = &input.public_key {
        object.key("PublicKey").string(var_838.as_str());
    }
    if let Some(var_839) = &input.add_public_keys {
        let mut array_840 = object.key("AddPublicKeys").start_array();
        for item_841 in var_839 {
            {
                array_840.value().string(item_841.as_str());
            }
        }
        array_840.finish();
    }
    if let Some(var_842) = &input.delete_public_keys {
        let mut array_843 = object.key("DeletePublicKeys").start_array();
        for item_844 in var_842 {
            {
                array_843.value().string(item_844.as_str());
            }
        }
        array_843.finish();
    }
    if let Some(var_845) = &input.custom_libraries {
        let mut object_846 = object.key("CustomLibraries").start_object();
        crate::json_ser::serialize_structure_crate_model_dev_endpoint_custom_libraries(
            &mut object_846,
            var_845,
        )?;
        object_846.finish();
    }
    if input.update_etl_libraries {
        object
            .key("UpdateEtlLibraries")
            .boolean(input.update_etl_libraries);
    }
    if let Some(var_847) = &input.delete_arguments {
        let mut array_848 = object.key("DeleteArguments").start_array();
        for item_849 in var_847 {
            {
                array_848.value().string(item_849.as_str());
            }
        }
        array_848.finish();
    }
    if let Some(var_850) = &input.add_arguments {
        let mut object_851 = object.key("AddArguments").start_object();
        for (key_852, value_853) in var_850 {
            {
                object_851.key(key_852).string(value_853.as_str());
            }
        }
        object_851.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_854) = &input.job_name {
        object.key("JobName").string(var_854.as_str());
    }
    if let Some(var_855) = &input.job_update {
        let mut object_856 = object.key("JobUpdate").start_object();
        crate::json_ser::serialize_structure_crate_model_job_update(&mut object_856, var_855)?;
        object_856.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_ml_transform_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateMlTransformInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_857) = &input.transform_id {
        object.key("TransformId").string(var_857.as_str());
    }
    if let Some(var_858) = &input.name {
        object.key("Name").string(var_858.as_str());
    }
    if let Some(var_859) = &input.description {
        object.key("Description").string(var_859.as_str());
    }
    if let Some(var_860) = &input.parameters {
        let mut object_861 = object.key("Parameters").start_object();
        crate::json_ser::serialize_structure_crate_model_transform_parameters(
            &mut object_861,
            var_860,
        )?;
        object_861.finish();
    }
    if let Some(var_862) = &input.role {
        object.key("Role").string(var_862.as_str());
    }
    if let Some(var_863) = &input.glue_version {
        object.key("GlueVersion").string(var_863.as_str());
    }
    if let Some(var_864) = &input.max_capacity {
        object.key("MaxCapacity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_864).into()),
        );
    }
    if let Some(var_865) = &input.worker_type {
        object.key("WorkerType").string(var_865.as_str());
    }
    if let Some(var_866) = &input.number_of_workers {
        object.key("NumberOfWorkers").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_866).into()),
        );
    }
    if let Some(var_867) = &input.timeout {
        object.key("Timeout").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_867).into()),
        );
    }
    if let Some(var_868) = &input.max_retries {
        object.key("MaxRetries").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_868).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_partition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdatePartitionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_869) = &input.catalog_id {
        object.key("CatalogId").string(var_869.as_str());
    }
    if let Some(var_870) = &input.database_name {
        object.key("DatabaseName").string(var_870.as_str());
    }
    if let Some(var_871) = &input.table_name {
        object.key("TableName").string(var_871.as_str());
    }
    if let Some(var_872) = &input.partition_value_list {
        let mut array_873 = object.key("PartitionValueList").start_array();
        for item_874 in var_872 {
            {
                array_873.value().string(item_874.as_str());
            }
        }
        array_873.finish();
    }
    if let Some(var_875) = &input.partition_input {
        let mut object_876 = object.key("PartitionInput").start_object();
        crate::json_ser::serialize_structure_crate_model_partition_input(&mut object_876, var_875)?;
        object_876.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_registry_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateRegistryInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_877) = &input.registry_id {
        let mut object_878 = object.key("RegistryId").start_object();
        crate::json_ser::serialize_structure_crate_model_registry_id(&mut object_878, var_877)?;
        object_878.finish();
    }
    if let Some(var_879) = &input.description {
        object.key("Description").string(var_879.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_schema_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateSchemaInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_880) = &input.schema_id {
        let mut object_881 = object.key("SchemaId").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_id(&mut object_881, var_880)?;
        object_881.finish();
    }
    if let Some(var_882) = &input.schema_version_number {
        let mut object_883 = object.key("SchemaVersionNumber").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_version_number(
            &mut object_883,
            var_882,
        )?;
        object_883.finish();
    }
    if let Some(var_884) = &input.compatibility {
        object.key("Compatibility").string(var_884.as_str());
    }
    if let Some(var_885) = &input.description {
        object.key("Description").string(var_885.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_table_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateTableInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_886) = &input.catalog_id {
        object.key("CatalogId").string(var_886.as_str());
    }
    if let Some(var_887) = &input.database_name {
        object.key("DatabaseName").string(var_887.as_str());
    }
    if let Some(var_888) = &input.table_input {
        let mut object_889 = object.key("TableInput").start_object();
        crate::json_ser::serialize_structure_crate_model_table_input(&mut object_889, var_888)?;
        object_889.finish();
    }
    if let Some(var_890) = &input.skip_archive {
        object.key("SkipArchive").boolean(*var_890);
    }
    if let Some(var_891) = &input.transaction_id {
        object.key("TransactionId").string(var_891.as_str());
    }
    if let Some(var_892) = &input.version_id {
        object.key("VersionId").string(var_892.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_trigger_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateTriggerInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_893) = &input.name {
        object.key("Name").string(var_893.as_str());
    }
    if let Some(var_894) = &input.trigger_update {
        let mut object_895 = object.key("TriggerUpdate").start_object();
        crate::json_ser::serialize_structure_crate_model_trigger_update(&mut object_895, var_894)?;
        object_895.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_user_defined_function_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateUserDefinedFunctionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_896) = &input.catalog_id {
        object.key("CatalogId").string(var_896.as_str());
    }
    if let Some(var_897) = &input.database_name {
        object.key("DatabaseName").string(var_897.as_str());
    }
    if let Some(var_898) = &input.function_name {
        object.key("FunctionName").string(var_898.as_str());
    }
    if let Some(var_899) = &input.function_input {
        let mut object_900 = object.key("FunctionInput").start_object();
        crate::json_ser::serialize_structure_crate_model_user_defined_function_input(
            &mut object_900,
            var_899,
        )?;
        object_900.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_workflow_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateWorkflowInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_901) = &input.name {
        object.key("Name").string(var_901.as_str());
    }
    if let Some(var_902) = &input.description {
        object.key("Description").string(var_902.as_str());
    }
    if let Some(var_903) = &input.default_run_properties {
        let mut object_904 = object.key("DefaultRunProperties").start_object();
        for (key_905, value_906) in var_903 {
            {
                object_904.key(key_905).string(value_906.as_str());
            }
        }
        object_904.finish();
    }
    if let Some(var_907) = &input.max_concurrent_runs {
        object.key("MaxConcurrentRuns").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_907).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_partition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PartitionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_908) = &input.values {
        let mut array_909 = object.key("Values").start_array();
        for item_910 in var_908 {
            {
                array_909.value().string(item_910.as_str());
            }
        }
        array_909.finish();
    }
    if let Some(var_911) = &input.last_access_time {
        object
            .key("LastAccessTime")
            .date_time(var_911, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_912) = &input.storage_descriptor {
        let mut object_913 = object.key("StorageDescriptor").start_object();
        crate::json_ser::serialize_structure_crate_model_storage_descriptor(
            &mut object_913,
            var_912,
        )?;
        object_913.finish();
    }
    if let Some(var_914) = &input.parameters {
        let mut object_915 = object.key("Parameters").start_object();
        for (key_916, value_917) in var_914 {
            {
                object_915.key(key_916).string(value_917.as_str());
            }
        }
        object_915.finish();
    }
    if let Some(var_918) = &input.last_analyzed_time {
        object
            .key("LastAnalyzedTime")
            .date_time(var_918, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_model_partition_value_list(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PartitionValueList,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_919) = &input.values {
        let mut array_920 = object.key("Values").start_array();
        for item_921 in var_919 {
            {
                array_920.value().string(item_921.as_str());
            }
        }
        array_920.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_batch_update_partition_request_entry(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BatchUpdatePartitionRequestEntry,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_922) = &input.partition_value_list {
        let mut array_923 = object.key("PartitionValueList").start_array();
        for item_924 in var_922 {
            {
                array_923.value().string(item_924.as_str());
            }
        }
        array_923.finish();
    }
    if let Some(var_925) = &input.partition_input {
        let mut object_926 = object.key("PartitionInput").start_object();
        crate::json_ser::serialize_structure_crate_model_partition_input(&mut object_926, var_925)?;
        object_926.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_create_grok_classifier_request(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CreateGrokClassifierRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_927) = &input.classification {
        object.key("Classification").string(var_927.as_str());
    }
    if let Some(var_928) = &input.name {
        object.key("Name").string(var_928.as_str());
    }
    if let Some(var_929) = &input.grok_pattern {
        object.key("GrokPattern").string(var_929.as_str());
    }
    if let Some(var_930) = &input.custom_patterns {
        object.key("CustomPatterns").string(var_930.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_create_xml_classifier_request(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CreateXmlClassifierRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_931) = &input.classification {
        object.key("Classification").string(var_931.as_str());
    }
    if let Some(var_932) = &input.name {
        object.key("Name").string(var_932.as_str());
    }
    if let Some(var_933) = &input.row_tag {
        object.key("RowTag").string(var_933.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_create_json_classifier_request(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CreateJsonClassifierRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_934) = &input.name {
        object.key("Name").string(var_934.as_str());
    }
    if let Some(var_935) = &input.json_path {
        object.key("JsonPath").string(var_935.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_create_csv_classifier_request(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CreateCsvClassifierRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_936) = &input.name {
        object.key("Name").string(var_936.as_str());
    }
    if let Some(var_937) = &input.delimiter {
        object.key("Delimiter").string(var_937.as_str());
    }
    if let Some(var_938) = &input.quote_symbol {
        object.key("QuoteSymbol").string(var_938.as_str());
    }
    if let Some(var_939) = &input.contains_header {
        object.key("ContainsHeader").string(var_939.as_str());
    }
    if let Some(var_940) = &input.header {
        let mut array_941 = object.key("Header").start_array();
        for item_942 in var_940 {
            {
                array_941.value().string(item_942.as_str());
            }
        }
        array_941.finish();
    }
    if let Some(var_943) = &input.disable_value_trimming {
        object.key("DisableValueTrimming").boolean(*var_943);
    }
    if let Some(var_944) = &input.allow_single_column {
        object.key("AllowSingleColumn").boolean(*var_944);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_connection_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConnectionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_945) = &input.name {
        object.key("Name").string(var_945.as_str());
    }
    if let Some(var_946) = &input.description {
        object.key("Description").string(var_946.as_str());
    }
    if let Some(var_947) = &input.connection_type {
        object.key("ConnectionType").string(var_947.as_str());
    }
    if let Some(var_948) = &input.match_criteria {
        let mut array_949 = object.key("MatchCriteria").start_array();
        for item_950 in var_948 {
            {
                array_949.value().string(item_950.as_str());
            }
        }
        array_949.finish();
    }
    if let Some(var_951) = &input.connection_properties {
        let mut object_952 = object.key("ConnectionProperties").start_object();
        for (key_953, value_954) in var_951 {
            {
                object_952.key(key_953.as_str()).string(value_954.as_str());
            }
        }
        object_952.finish();
    }
    if let Some(var_955) = &input.physical_connection_requirements {
        let mut object_956 = object.key("PhysicalConnectionRequirements").start_object();
        crate::json_ser::serialize_structure_crate_model_physical_connection_requirements(
            &mut object_956,
            var_955,
        )?;
        object_956.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_crawler_targets(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CrawlerTargets,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_957) = &input.s3_targets {
        let mut array_958 = object.key("S3Targets").start_array();
        for item_959 in var_957 {
            {
                let mut object_960 = array_958.value().start_object();
                crate::json_ser::serialize_structure_crate_model_s3_target(
                    &mut object_960,
                    item_959,
                )?;
                object_960.finish();
            }
        }
        array_958.finish();
    }
    if let Some(var_961) = &input.jdbc_targets {
        let mut array_962 = object.key("JdbcTargets").start_array();
        for item_963 in var_961 {
            {
                let mut object_964 = array_962.value().start_object();
                crate::json_ser::serialize_structure_crate_model_jdbc_target(
                    &mut object_964,
                    item_963,
                )?;
                object_964.finish();
            }
        }
        array_962.finish();
    }
    if let Some(var_965) = &input.mongo_db_targets {
        let mut array_966 = object.key("MongoDBTargets").start_array();
        for item_967 in var_965 {
            {
                let mut object_968 = array_966.value().start_object();
                crate::json_ser::serialize_structure_crate_model_mongo_db_target(
                    &mut object_968,
                    item_967,
                )?;
                object_968.finish();
            }
        }
        array_966.finish();
    }
    if let Some(var_969) = &input.dynamo_db_targets {
        let mut array_970 = object.key("DynamoDBTargets").start_array();
        for item_971 in var_969 {
            {
                let mut object_972 = array_970.value().start_object();
                crate::json_ser::serialize_structure_crate_model_dynamo_db_target(
                    &mut object_972,
                    item_971,
                )?;
                object_972.finish();
            }
        }
        array_970.finish();
    }
    if let Some(var_973) = &input.catalog_targets {
        let mut array_974 = object.key("CatalogTargets").start_array();
        for item_975 in var_973 {
            {
                let mut object_976 = array_974.value().start_object();
                crate::json_ser::serialize_structure_crate_model_catalog_target(
                    &mut object_976,
                    item_975,
                )?;
                object_976.finish();
            }
        }
        array_974.finish();
    }
    if let Some(var_977) = &input.delta_targets {
        let mut array_978 = object.key("DeltaTargets").start_array();
        for item_979 in var_977 {
            {
                let mut object_980 = array_978.value().start_object();
                crate::json_ser::serialize_structure_crate_model_delta_target(
                    &mut object_980,
                    item_979,
                )?;
                object_980.finish();
            }
        }
        array_978.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_schema_change_policy(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SchemaChangePolicy,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_981) = &input.update_behavior {
        object.key("UpdateBehavior").string(var_981.as_str());
    }
    if let Some(var_982) = &input.delete_behavior {
        object.key("DeleteBehavior").string(var_982.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_recrawl_policy(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RecrawlPolicy,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_983) = &input.recrawl_behavior {
        object.key("RecrawlBehavior").string(var_983.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_lineage_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LineageConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_984) = &input.crawler_lineage_settings {
        object
            .key("CrawlerLineageSettings")
            .string(var_984.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_lake_formation_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LakeFormationConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_985) = &input.use_lake_formation_credentials {
        object.key("UseLakeFormationCredentials").boolean(*var_985);
    }
    if let Some(var_986) = &input.account_id {
        object.key("AccountId").string(var_986.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_database_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DatabaseInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_987) = &input.name {
        object.key("Name").string(var_987.as_str());
    }
    if let Some(var_988) = &input.description {
        object.key("Description").string(var_988.as_str());
    }
    if let Some(var_989) = &input.location_uri {
        object.key("LocationUri").string(var_989.as_str());
    }
    if let Some(var_990) = &input.parameters {
        let mut object_991 = object.key("Parameters").start_object();
        for (key_992, value_993) in var_990 {
            {
                object_991.key(key_992).string(value_993.as_str());
            }
        }
        object_991.finish();
    }
    if let Some(var_994) = &input.create_table_default_permissions {
        let mut array_995 = object.key("CreateTableDefaultPermissions").start_array();
        for item_996 in var_994 {
            {
                let mut object_997 = array_995.value().start_object();
                crate::json_ser::serialize_structure_crate_model_principal_permissions(
                    &mut object_997,
                    item_996,
                )?;
                object_997.finish();
            }
        }
        array_995.finish();
    }
    if let Some(var_998) = &input.target_database {
        let mut object_999 = object.key("TargetDatabase").start_object();
        crate::json_ser::serialize_structure_crate_model_database_identifier(
            &mut object_999,
            var_998,
        )?;
        object_999.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_execution_property(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ExecutionProperty,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.max_concurrent_runs != 0 {
        object.key("MaxConcurrentRuns").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_concurrent_runs).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_job_command(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::JobCommand,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1000) = &input.name {
        object.key("Name").string(var_1000.as_str());
    }
    if let Some(var_1001) = &input.script_location {
        object.key("ScriptLocation").string(var_1001.as_str());
    }
    if let Some(var_1002) = &input.python_version {
        object.key("PythonVersion").string(var_1002.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_connections_list(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConnectionsList,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1003) = &input.connections {
        let mut array_1004 = object.key("Connections").start_array();
        for item_1005 in var_1003 {
            {
                array_1004.value().string(item_1005.as_str());
            }
        }
        array_1004.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_notification_property(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::NotificationProperty,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1006) = &input.notify_delay_after {
        object.key("NotifyDelayAfter").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1006).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_glue_table(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::GlueTable,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1007) = &input.database_name {
        object.key("DatabaseName").string(var_1007.as_str());
    }
    if let Some(var_1008) = &input.table_name {
        object.key("TableName").string(var_1008.as_str());
    }
    if let Some(var_1009) = &input.catalog_id {
        object.key("CatalogId").string(var_1009.as_str());
    }
    if let Some(var_1010) = &input.connection_name {
        object.key("ConnectionName").string(var_1010.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_transform_parameters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TransformParameters,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1011) = &input.transform_type {
        object.key("TransformType").string(var_1011.as_str());
    }
    if let Some(var_1012) = &input.find_matches_parameters {
        let mut object_1013 = object.key("FindMatchesParameters").start_object();
        crate::json_ser::serialize_structure_crate_model_find_matches_parameters(
            &mut object_1013,
            var_1012,
        )?;
        object_1013.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_transform_encryption(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TransformEncryption,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1014) = &input.ml_user_data_encryption {
        let mut object_1015 = object.key("MlUserDataEncryption").start_object();
        crate::json_ser::serialize_structure_crate_model_ml_user_data_encryption(
            &mut object_1015,
            var_1014,
        )?;
        object_1015.finish();
    }
    if let Some(var_1016) = &input.task_run_security_configuration_name {
        object
            .key("TaskRunSecurityConfigurationName")
            .string(var_1016.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_partition_index(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PartitionIndex,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1017) = &input.keys {
        let mut array_1018 = object.key("Keys").start_array();
        for item_1019 in var_1017 {
            {
                array_1018.value().string(item_1019.as_str());
            }
        }
        array_1018.finish();
    }
    if let Some(var_1020) = &input.index_name {
        object.key("IndexName").string(var_1020.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_registry_id(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RegistryId,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1021) = &input.registry_name {
        object.key("RegistryName").string(var_1021.as_str());
    }
    if let Some(var_1022) = &input.registry_arn {
        object.key("RegistryArn").string(var_1022.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_code_gen_node(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CodeGenNode,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1023) = &input.id {
        object.key("Id").string(var_1023.as_str());
    }
    if let Some(var_1024) = &input.node_type {
        object.key("NodeType").string(var_1024.as_str());
    }
    if let Some(var_1025) = &input.args {
        let mut array_1026 = object.key("Args").start_array();
        for item_1027 in var_1025 {
            {
                let mut object_1028 = array_1026.value().start_object();
                crate::json_ser::serialize_structure_crate_model_code_gen_node_arg(
                    &mut object_1028,
                    item_1027,
                )?;
                object_1028.finish();
            }
        }
        array_1026.finish();
    }
    if input.line_number != 0 {
        object.key("LineNumber").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.line_number).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_code_gen_edge(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CodeGenEdge,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1029) = &input.source {
        object.key("Source").string(var_1029.as_str());
    }
    if let Some(var_1030) = &input.target {
        object.key("Target").string(var_1030.as_str());
    }
    if let Some(var_1031) = &input.target_parameter {
        object.key("TargetParameter").string(var_1031.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_encryption_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EncryptionConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1032) = &input.s3_encryption {
        let mut array_1033 = object.key("S3Encryption").start_array();
        for item_1034 in var_1032 {
            {
                let mut object_1035 = array_1033.value().start_object();
                crate::json_ser::serialize_structure_crate_model_s3_encryption(
                    &mut object_1035,
                    item_1034,
                )?;
                object_1035.finish();
            }
        }
        array_1033.finish();
    }
    if let Some(var_1036) = &input.cloud_watch_encryption {
        let mut object_1037 = object.key("CloudWatchEncryption").start_object();
        crate::json_ser::serialize_structure_crate_model_cloud_watch_encryption(
            &mut object_1037,
            var_1036,
        )?;
        object_1037.finish();
    }
    if let Some(var_1038) = &input.job_bookmarks_encryption {
        let mut object_1039 = object.key("JobBookmarksEncryption").start_object();
        crate::json_ser::serialize_structure_crate_model_job_bookmarks_encryption(
            &mut object_1039,
            var_1038,
        )?;
        object_1039.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_session_command(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SessionCommand,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1040) = &input.name {
        object.key("Name").string(var_1040.as_str());
    }
    if let Some(var_1041) = &input.python_version {
        object.key("PythonVersion").string(var_1041.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_table_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TableInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1042) = &input.name {
        object.key("Name").string(var_1042.as_str());
    }
    if let Some(var_1043) = &input.description {
        object.key("Description").string(var_1043.as_str());
    }
    if let Some(var_1044) = &input.owner {
        object.key("Owner").string(var_1044.as_str());
    }
    if let Some(var_1045) = &input.last_access_time {
        object
            .key("LastAccessTime")
            .date_time(var_1045, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1046) = &input.last_analyzed_time {
        object
            .key("LastAnalyzedTime")
            .date_time(var_1046, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if input.retention != 0 {
        object.key("Retention").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.retention).into()),
        );
    }
    if let Some(var_1047) = &input.storage_descriptor {
        let mut object_1048 = object.key("StorageDescriptor").start_object();
        crate::json_ser::serialize_structure_crate_model_storage_descriptor(
            &mut object_1048,
            var_1047,
        )?;
        object_1048.finish();
    }
    if let Some(var_1049) = &input.partition_keys {
        let mut array_1050 = object.key("PartitionKeys").start_array();
        for item_1051 in var_1049 {
            {
                let mut object_1052 = array_1050.value().start_object();
                crate::json_ser::serialize_structure_crate_model_column(
                    &mut object_1052,
                    item_1051,
                )?;
                object_1052.finish();
            }
        }
        array_1050.finish();
    }
    if let Some(var_1053) = &input.view_original_text {
        object.key("ViewOriginalText").string(var_1053.as_str());
    }
    if let Some(var_1054) = &input.view_expanded_text {
        object.key("ViewExpandedText").string(var_1054.as_str());
    }
    if let Some(var_1055) = &input.table_type {
        object.key("TableType").string(var_1055.as_str());
    }
    if let Some(var_1056) = &input.parameters {
        let mut object_1057 = object.key("Parameters").start_object();
        for (key_1058, value_1059) in var_1056 {
            {
                object_1057.key(key_1058).string(value_1059.as_str());
            }
        }
        object_1057.finish();
    }
    if let Some(var_1060) = &input.target_table {
        let mut object_1061 = object.key("TargetTable").start_object();
        crate::json_ser::serialize_structure_crate_model_table_identifier(
            &mut object_1061,
            var_1060,
        )?;
        object_1061.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_predicate(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Predicate,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1062) = &input.logical {
        object.key("Logical").string(var_1062.as_str());
    }
    if let Some(var_1063) = &input.conditions {
        let mut array_1064 = object.key("Conditions").start_array();
        for item_1065 in var_1063 {
            {
                let mut object_1066 = array_1064.value().start_object();
                crate::json_ser::serialize_structure_crate_model_condition(
                    &mut object_1066,
                    item_1065,
                )?;
                object_1066.finish();
            }
        }
        array_1064.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_action(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Action,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1067) = &input.job_name {
        object.key("JobName").string(var_1067.as_str());
    }
    if let Some(var_1068) = &input.arguments {
        let mut object_1069 = object.key("Arguments").start_object();
        for (key_1070, value_1071) in var_1068 {
            {
                object_1069.key(key_1070).string(value_1071.as_str());
            }
        }
        object_1069.finish();
    }
    if let Some(var_1072) = &input.timeout {
        object.key("Timeout").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1072).into()),
        );
    }
    if let Some(var_1073) = &input.security_configuration {
        object
            .key("SecurityConfiguration")
            .string(var_1073.as_str());
    }
    if let Some(var_1074) = &input.notification_property {
        let mut object_1075 = object.key("NotificationProperty").start_object();
        crate::json_ser::serialize_structure_crate_model_notification_property(
            &mut object_1075,
            var_1074,
        )?;
        object_1075.finish();
    }
    if let Some(var_1076) = &input.crawler_name {
        object.key("CrawlerName").string(var_1076.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_event_batching_condition(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EventBatchingCondition,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object.key("BatchSize").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.batch_size).into()),
        );
    }
    if let Some(var_1077) = &input.batch_window {
        object.key("BatchWindow").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1077).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_user_defined_function_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UserDefinedFunctionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1078) = &input.function_name {
        object.key("FunctionName").string(var_1078.as_str());
    }
    if let Some(var_1079) = &input.class_name {
        object.key("ClassName").string(var_1079.as_str());
    }
    if let Some(var_1080) = &input.owner_name {
        object.key("OwnerName").string(var_1080.as_str());
    }
    if let Some(var_1081) = &input.owner_type {
        object.key("OwnerType").string(var_1081.as_str());
    }
    if let Some(var_1082) = &input.resource_uris {
        let mut array_1083 = object.key("ResourceUris").start_array();
        for item_1084 in var_1082 {
            {
                let mut object_1085 = array_1083.value().start_object();
                crate::json_ser::serialize_structure_crate_model_resource_uri(
                    &mut object_1085,
                    item_1084,
                )?;
                object_1085.finish();
            }
        }
        array_1083.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_schema_id(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SchemaId,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1086) = &input.schema_arn {
        object.key("SchemaArn").string(var_1086.as_str());
    }
    if let Some(var_1087) = &input.schema_name {
        object.key("SchemaName").string(var_1087.as_str());
    }
    if let Some(var_1088) = &input.registry_name {
        object.key("RegistryName").string(var_1088.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_get_connections_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::GetConnectionsFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1089) = &input.match_criteria {
        let mut array_1090 = object.key("MatchCriteria").start_array();
        for item_1091 in var_1089 {
            {
                array_1090.value().string(item_1091.as_str());
            }
        }
        array_1090.finish();
    }
    if let Some(var_1092) = &input.connection_type {
        object.key("ConnectionType").string(var_1092.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_catalog_entry(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CatalogEntry,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1093) = &input.database_name {
        object.key("DatabaseName").string(var_1093.as_str());
    }
    if let Some(var_1094) = &input.table_name {
        object.key("TableName").string(var_1094.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_location(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Location,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1095) = &input.jdbc {
        let mut array_1096 = object.key("Jdbc").start_array();
        for item_1097 in var_1095 {
            {
                let mut object_1098 = array_1096.value().start_object();
                crate::json_ser::serialize_structure_crate_model_code_gen_node_arg(
                    &mut object_1098,
                    item_1097,
                )?;
                object_1098.finish();
            }
        }
        array_1096.finish();
    }
    if let Some(var_1099) = &input.s3 {
        let mut array_1100 = object.key("S3").start_array();
        for item_1101 in var_1099 {
            {
                let mut object_1102 = array_1100.value().start_object();
                crate::json_ser::serialize_structure_crate_model_code_gen_node_arg(
                    &mut object_1102,
                    item_1101,
                )?;
                object_1102.finish();
            }
        }
        array_1100.finish();
    }
    if let Some(var_1103) = &input.dynamo_db {
        let mut array_1104 = object.key("DynamoDB").start_array();
        for item_1105 in var_1103 {
            {
                let mut object_1106 = array_1104.value().start_object();
                crate::json_ser::serialize_structure_crate_model_code_gen_node_arg(
                    &mut object_1106,
                    item_1105,
                )?;
                object_1106.finish();
            }
        }
        array_1104.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_task_run_filter_criteria(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TaskRunFilterCriteria,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1107) = &input.task_run_type {
        object.key("TaskRunType").string(var_1107.as_str());
    }
    if let Some(var_1108) = &input.status {
        object.key("Status").string(var_1108.as_str());
    }
    if let Some(var_1109) = &input.started_before {
        object
            .key("StartedBefore")
            .date_time(var_1109, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1110) = &input.started_after {
        object
            .key("StartedAfter")
            .date_time(var_1110, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_model_task_run_sort_criteria(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TaskRunSortCriteria,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1111) = &input.column {
        object.key("Column").string(var_1111.as_str());
    }
    if let Some(var_1112) = &input.sort_direction {
        object.key("SortDirection").string(var_1112.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_transform_filter_criteria(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TransformFilterCriteria,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1113) = &input.name {
        object.key("Name").string(var_1113.as_str());
    }
    if let Some(var_1114) = &input.transform_type {
        object.key("TransformType").string(var_1114.as_str());
    }
    if let Some(var_1115) = &input.status {
        object.key("Status").string(var_1115.as_str());
    }
    if let Some(var_1116) = &input.glue_version {
        object.key("GlueVersion").string(var_1116.as_str());
    }
    if let Some(var_1117) = &input.created_before {
        object
            .key("CreatedBefore")
            .date_time(var_1117, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1118) = &input.created_after {
        object
            .key("CreatedAfter")
            .date_time(var_1118, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1119) = &input.last_modified_before {
        object
            .key("LastModifiedBefore")
            .date_time(var_1119, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1120) = &input.last_modified_after {
        object
            .key("LastModifiedAfter")
            .date_time(var_1120, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1121) = &input.schema {
        let mut array_1122 = object.key("Schema").start_array();
        for item_1123 in var_1121 {
            {
                let mut object_1124 = array_1122.value().start_object();
                crate::json_ser::serialize_structure_crate_model_schema_column(
                    &mut object_1124,
                    item_1123,
                )?;
                object_1124.finish();
            }
        }
        array_1122.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_transform_sort_criteria(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TransformSortCriteria,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1125) = &input.column {
        object.key("Column").string(var_1125.as_str());
    }
    if let Some(var_1126) = &input.sort_direction {
        object.key("SortDirection").string(var_1126.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_segment(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Segment,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object.key("SegmentNumber").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.segment_number).into()),
        );
    }
    {
        object.key("TotalSegments").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.total_segments).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_mapping_entry(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MappingEntry,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1127) = &input.source_table {
        object.key("SourceTable").string(var_1127.as_str());
    }
    if let Some(var_1128) = &input.source_path {
        object.key("SourcePath").string(var_1128.as_str());
    }
    if let Some(var_1129) = &input.source_type {
        object.key("SourceType").string(var_1129.as_str());
    }
    if let Some(var_1130) = &input.target_table {
        object.key("TargetTable").string(var_1130.as_str());
    }
    if let Some(var_1131) = &input.target_path {
        object.key("TargetPath").string(var_1131.as_str());
    }
    if let Some(var_1132) = &input.target_type {
        object.key("TargetType").string(var_1132.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_schema_version_number(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SchemaVersionNumber,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.latest_version {
        object.key("LatestVersion").boolean(input.latest_version);
    }
    if input.version_number != 0 {
        object.key("VersionNumber").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.version_number).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_audit_context(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AuditContext,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1133) = &input.additional_audit_context {
        object
            .key("AdditionalAuditContext")
            .string(var_1133.as_str());
    }
    if let Some(var_1134) = &input.requested_columns {
        let mut array_1135 = object.key("RequestedColumns").start_array();
        for item_1136 in var_1134 {
            {
                array_1135.value().string(item_1136.as_str());
            }
        }
        array_1135.finish();
    }
    if let Some(var_1137) = &input.all_columns_requested {
        object.key("AllColumnsRequested").boolean(*var_1137);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_data_catalog_encryption_settings(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataCatalogEncryptionSettings,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1138) = &input.encryption_at_rest {
        let mut object_1139 = object.key("EncryptionAtRest").start_object();
        crate::json_ser::serialize_structure_crate_model_encryption_at_rest(
            &mut object_1139,
            var_1138,
        )?;
        object_1139.finish();
    }
    if let Some(var_1140) = &input.connection_password_encryption {
        let mut object_1141 = object.key("ConnectionPasswordEncryption").start_object();
        crate::json_ser::serialize_structure_crate_model_connection_password_encryption(
            &mut object_1141,
            var_1140,
        )?;
        object_1141.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_metadata_key_value_pair(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MetadataKeyValuePair,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1142) = &input.metadata_key {
        object.key("MetadataKey").string(var_1142.as_str());
    }
    if let Some(var_1143) = &input.metadata_value {
        object.key("MetadataValue").string(var_1143.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_property_predicate(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PropertyPredicate,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1144) = &input.key {
        object.key("Key").string(var_1144.as_str());
    }
    if let Some(var_1145) = &input.value {
        object.key("Value").string(var_1145.as_str());
    }
    if let Some(var_1146) = &input.comparator {
        object.key("Comparator").string(var_1146.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_sort_criterion(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SortCriterion,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1147) = &input.field_name {
        object.key("FieldName").string(var_1147.as_str());
    }
    if let Some(var_1148) = &input.sort {
        object.key("Sort").string(var_1148.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_update_grok_classifier_request(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UpdateGrokClassifierRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1149) = &input.name {
        object.key("Name").string(var_1149.as_str());
    }
    if let Some(var_1150) = &input.classification {
        object.key("Classification").string(var_1150.as_str());
    }
    if let Some(var_1151) = &input.grok_pattern {
        object.key("GrokPattern").string(var_1151.as_str());
    }
    if let Some(var_1152) = &input.custom_patterns {
        object.key("CustomPatterns").string(var_1152.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_update_xml_classifier_request(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UpdateXmlClassifierRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1153) = &input.name {
        object.key("Name").string(var_1153.as_str());
    }
    if let Some(var_1154) = &input.classification {
        object.key("Classification").string(var_1154.as_str());
    }
    if let Some(var_1155) = &input.row_tag {
        object.key("RowTag").string(var_1155.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_update_json_classifier_request(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UpdateJsonClassifierRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1156) = &input.name {
        object.key("Name").string(var_1156.as_str());
    }
    if let Some(var_1157) = &input.json_path {
        object.key("JsonPath").string(var_1157.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_update_csv_classifier_request(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UpdateCsvClassifierRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1158) = &input.name {
        object.key("Name").string(var_1158.as_str());
    }
    if let Some(var_1159) = &input.delimiter {
        object.key("Delimiter").string(var_1159.as_str());
    }
    if let Some(var_1160) = &input.quote_symbol {
        object.key("QuoteSymbol").string(var_1160.as_str());
    }
    if let Some(var_1161) = &input.contains_header {
        object.key("ContainsHeader").string(var_1161.as_str());
    }
    if let Some(var_1162) = &input.header {
        let mut array_1163 = object.key("Header").start_array();
        for item_1164 in var_1162 {
            {
                array_1163.value().string(item_1164.as_str());
            }
        }
        array_1163.finish();
    }
    if let Some(var_1165) = &input.disable_value_trimming {
        object.key("DisableValueTrimming").boolean(*var_1165);
    }
    if let Some(var_1166) = &input.allow_single_column {
        object.key("AllowSingleColumn").boolean(*var_1166);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_column_statistics(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ColumnStatistics,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1167) = &input.column_name {
        object.key("ColumnName").string(var_1167.as_str());
    }
    if let Some(var_1168) = &input.column_type {
        object.key("ColumnType").string(var_1168.as_str());
    }
    if let Some(var_1169) = &input.analyzed_time {
        object
            .key("AnalyzedTime")
            .date_time(var_1169, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1170) = &input.statistics_data {
        let mut object_1171 = object.key("StatisticsData").start_object();
        crate::json_ser::serialize_structure_crate_model_column_statistics_data(
            &mut object_1171,
            var_1170,
        )?;
        object_1171.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_dev_endpoint_custom_libraries(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DevEndpointCustomLibraries,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1172) = &input.extra_python_libs_s3_path {
        object
            .key("ExtraPythonLibsS3Path")
            .string(var_1172.as_str());
    }
    if let Some(var_1173) = &input.extra_jars_s3_path {
        object.key("ExtraJarsS3Path").string(var_1173.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_job_update(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::JobUpdate,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1174) = &input.description {
        object.key("Description").string(var_1174.as_str());
    }
    if let Some(var_1175) = &input.log_uri {
        object.key("LogUri").string(var_1175.as_str());
    }
    if let Some(var_1176) = &input.role {
        object.key("Role").string(var_1176.as_str());
    }
    if let Some(var_1177) = &input.execution_property {
        let mut object_1178 = object.key("ExecutionProperty").start_object();
        crate::json_ser::serialize_structure_crate_model_execution_property(
            &mut object_1178,
            var_1177,
        )?;
        object_1178.finish();
    }
    if let Some(var_1179) = &input.command {
        let mut object_1180 = object.key("Command").start_object();
        crate::json_ser::serialize_structure_crate_model_job_command(&mut object_1180, var_1179)?;
        object_1180.finish();
    }
    if let Some(var_1181) = &input.default_arguments {
        let mut object_1182 = object.key("DefaultArguments").start_object();
        for (key_1183, value_1184) in var_1181 {
            {
                object_1182.key(key_1183).string(value_1184.as_str());
            }
        }
        object_1182.finish();
    }
    if let Some(var_1185) = &input.non_overridable_arguments {
        let mut object_1186 = object.key("NonOverridableArguments").start_object();
        for (key_1187, value_1188) in var_1185 {
            {
                object_1186.key(key_1187).string(value_1188.as_str());
            }
        }
        object_1186.finish();
    }
    if let Some(var_1189) = &input.connections {
        let mut object_1190 = object.key("Connections").start_object();
        crate::json_ser::serialize_structure_crate_model_connections_list(
            &mut object_1190,
            var_1189,
        )?;
        object_1190.finish();
    }
    if input.max_retries != 0 {
        object.key("MaxRetries").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_retries).into()),
        );
    }
    if input.allocated_capacity != 0 {
        object.key("AllocatedCapacity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.allocated_capacity).into()),
        );
    }
    if let Some(var_1191) = &input.timeout {
        object.key("Timeout").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1191).into()),
        );
    }
    if let Some(var_1192) = &input.max_capacity {
        object.key("MaxCapacity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_1192).into()),
        );
    }
    if let Some(var_1193) = &input.worker_type {
        object.key("WorkerType").string(var_1193.as_str());
    }
    if let Some(var_1194) = &input.number_of_workers {
        object.key("NumberOfWorkers").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1194).into()),
        );
    }
    if let Some(var_1195) = &input.security_configuration {
        object
            .key("SecurityConfiguration")
            .string(var_1195.as_str());
    }
    if let Some(var_1196) = &input.notification_property {
        let mut object_1197 = object.key("NotificationProperty").start_object();
        crate::json_ser::serialize_structure_crate_model_notification_property(
            &mut object_1197,
            var_1196,
        )?;
        object_1197.finish();
    }
    if let Some(var_1198) = &input.glue_version {
        object.key("GlueVersion").string(var_1198.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_trigger_update(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TriggerUpdate,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1199) = &input.name {
        object.key("Name").string(var_1199.as_str());
    }
    if let Some(var_1200) = &input.description {
        object.key("Description").string(var_1200.as_str());
    }
    if let Some(var_1201) = &input.schedule {
        object.key("Schedule").string(var_1201.as_str());
    }
    if let Some(var_1202) = &input.actions {
        let mut array_1203 = object.key("Actions").start_array();
        for item_1204 in var_1202 {
            {
                let mut object_1205 = array_1203.value().start_object();
                crate::json_ser::serialize_structure_crate_model_action(
                    &mut object_1205,
                    item_1204,
                )?;
                object_1205.finish();
            }
        }
        array_1203.finish();
    }
    if let Some(var_1206) = &input.predicate {
        let mut object_1207 = object.key("Predicate").start_object();
        crate::json_ser::serialize_structure_crate_model_predicate(&mut object_1207, var_1206)?;
        object_1207.finish();
    }
    if let Some(var_1208) = &input.event_batching_condition {
        let mut object_1209 = object.key("EventBatchingCondition").start_object();
        crate::json_ser::serialize_structure_crate_model_event_batching_condition(
            &mut object_1209,
            var_1208,
        )?;
        object_1209.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_storage_descriptor(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StorageDescriptor,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1210) = &input.columns {
        let mut array_1211 = object.key("Columns").start_array();
        for item_1212 in var_1210 {
            {
                let mut object_1213 = array_1211.value().start_object();
                crate::json_ser::serialize_structure_crate_model_column(
                    &mut object_1213,
                    item_1212,
                )?;
                object_1213.finish();
            }
        }
        array_1211.finish();
    }
    if let Some(var_1214) = &input.location {
        object.key("Location").string(var_1214.as_str());
    }
    if let Some(var_1215) = &input.additional_locations {
        let mut array_1216 = object.key("AdditionalLocations").start_array();
        for item_1217 in var_1215 {
            {
                array_1216.value().string(item_1217.as_str());
            }
        }
        array_1216.finish();
    }
    if let Some(var_1218) = &input.input_format {
        object.key("InputFormat").string(var_1218.as_str());
    }
    if let Some(var_1219) = &input.output_format {
        object.key("OutputFormat").string(var_1219.as_str());
    }
    if input.compressed {
        object.key("Compressed").boolean(input.compressed);
    }
    if input.number_of_buckets != 0 {
        object.key("NumberOfBuckets").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.number_of_buckets).into()),
        );
    }
    if let Some(var_1220) = &input.serde_info {
        let mut object_1221 = object.key("SerdeInfo").start_object();
        crate::json_ser::serialize_structure_crate_model_ser_de_info(&mut object_1221, var_1220)?;
        object_1221.finish();
    }
    if let Some(var_1222) = &input.bucket_columns {
        let mut array_1223 = object.key("BucketColumns").start_array();
        for item_1224 in var_1222 {
            {
                array_1223.value().string(item_1224.as_str());
            }
        }
        array_1223.finish();
    }
    if let Some(var_1225) = &input.sort_columns {
        let mut array_1226 = object.key("SortColumns").start_array();
        for item_1227 in var_1225 {
            {
                let mut object_1228 = array_1226.value().start_object();
                crate::json_ser::serialize_structure_crate_model_order(
                    &mut object_1228,
                    item_1227,
                )?;
                object_1228.finish();
            }
        }
        array_1226.finish();
    }
    if let Some(var_1229) = &input.parameters {
        let mut object_1230 = object.key("Parameters").start_object();
        for (key_1231, value_1232) in var_1229 {
            {
                object_1230.key(key_1231).string(value_1232.as_str());
            }
        }
        object_1230.finish();
    }
    if let Some(var_1233) = &input.skewed_info {
        let mut object_1234 = object.key("SkewedInfo").start_object();
        crate::json_ser::serialize_structure_crate_model_skewed_info(&mut object_1234, var_1233)?;
        object_1234.finish();
    }
    if input.stored_as_sub_directories {
        object
            .key("StoredAsSubDirectories")
            .boolean(input.stored_as_sub_directories);
    }
    if let Some(var_1235) = &input.schema_reference {
        let mut object_1236 = object.key("SchemaReference").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_reference(
            &mut object_1236,
            var_1235,
        )?;
        object_1236.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_physical_connection_requirements(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PhysicalConnectionRequirements,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1237) = &input.subnet_id {
        object.key("SubnetId").string(var_1237.as_str());
    }
    if let Some(var_1238) = &input.security_group_id_list {
        let mut array_1239 = object.key("SecurityGroupIdList").start_array();
        for item_1240 in var_1238 {
            {
                array_1239.value().string(item_1240.as_str());
            }
        }
        array_1239.finish();
    }
    if let Some(var_1241) = &input.availability_zone {
        object.key("AvailabilityZone").string(var_1241.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_target(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3Target,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1242) = &input.path {
        object.key("Path").string(var_1242.as_str());
    }
    if let Some(var_1243) = &input.exclusions {
        let mut array_1244 = object.key("Exclusions").start_array();
        for item_1245 in var_1243 {
            {
                array_1244.value().string(item_1245.as_str());
            }
        }
        array_1244.finish();
    }
    if let Some(var_1246) = &input.connection_name {
        object.key("ConnectionName").string(var_1246.as_str());
    }
    if let Some(var_1247) = &input.sample_size {
        object.key("SampleSize").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1247).into()),
        );
    }
    if let Some(var_1248) = &input.event_queue_arn {
        object.key("EventQueueArn").string(var_1248.as_str());
    }
    if let Some(var_1249) = &input.dlq_event_queue_arn {
        object.key("DlqEventQueueArn").string(var_1249.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_jdbc_target(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::JdbcTarget,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1250) = &input.connection_name {
        object.key("ConnectionName").string(var_1250.as_str());
    }
    if let Some(var_1251) = &input.path {
        object.key("Path").string(var_1251.as_str());
    }
    if let Some(var_1252) = &input.exclusions {
        let mut array_1253 = object.key("Exclusions").start_array();
        for item_1254 in var_1252 {
            {
                array_1253.value().string(item_1254.as_str());
            }
        }
        array_1253.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_mongo_db_target(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MongoDbTarget,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1255) = &input.connection_name {
        object.key("ConnectionName").string(var_1255.as_str());
    }
    if let Some(var_1256) = &input.path {
        object.key("Path").string(var_1256.as_str());
    }
    if let Some(var_1257) = &input.scan_all {
        object.key("ScanAll").boolean(*var_1257);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_dynamo_db_target(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DynamoDbTarget,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1258) = &input.path {
        object.key("Path").string(var_1258.as_str());
    }
    if let Some(var_1259) = &input.scan_all {
        object.key("scanAll").boolean(*var_1259);
    }
    if let Some(var_1260) = &input.scan_rate {
        object.key("scanRate").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_1260).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_catalog_target(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CatalogTarget,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1261) = &input.database_name {
        object.key("DatabaseName").string(var_1261.as_str());
    }
    if let Some(var_1262) = &input.tables {
        let mut array_1263 = object.key("Tables").start_array();
        for item_1264 in var_1262 {
            {
                array_1263.value().string(item_1264.as_str());
            }
        }
        array_1263.finish();
    }
    if let Some(var_1265) = &input.connection_name {
        object.key("ConnectionName").string(var_1265.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_delta_target(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DeltaTarget,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1266) = &input.delta_tables {
        let mut array_1267 = object.key("DeltaTables").start_array();
        for item_1268 in var_1266 {
            {
                array_1267.value().string(item_1268.as_str());
            }
        }
        array_1267.finish();
    }
    if let Some(var_1269) = &input.connection_name {
        object.key("ConnectionName").string(var_1269.as_str());
    }
    if let Some(var_1270) = &input.write_manifest {
        object.key("WriteManifest").boolean(*var_1270);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_principal_permissions(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PrincipalPermissions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1271) = &input.principal {
        let mut object_1272 = object.key("Principal").start_object();
        crate::json_ser::serialize_structure_crate_model_data_lake_principal(
            &mut object_1272,
            var_1271,
        )?;
        object_1272.finish();
    }
    if let Some(var_1273) = &input.permissions {
        let mut array_1274 = object.key("Permissions").start_array();
        for item_1275 in var_1273 {
            {
                array_1274.value().string(item_1275.as_str());
            }
        }
        array_1274.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_database_identifier(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DatabaseIdentifier,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1276) = &input.catalog_id {
        object.key("CatalogId").string(var_1276.as_str());
    }
    if let Some(var_1277) = &input.database_name {
        object.key("DatabaseName").string(var_1277.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_find_matches_parameters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FindMatchesParameters,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1278) = &input.primary_key_column_name {
        object.key("PrimaryKeyColumnName").string(var_1278.as_str());
    }
    if let Some(var_1279) = &input.precision_recall_tradeoff {
        object.key("PrecisionRecallTradeoff").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_1279).into()),
        );
    }
    if let Some(var_1280) = &input.accuracy_cost_tradeoff {
        object.key("AccuracyCostTradeoff").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_1280).into()),
        );
    }
    if let Some(var_1281) = &input.enforce_provided_labels {
        object.key("EnforceProvidedLabels").boolean(*var_1281);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_ml_user_data_encryption(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MlUserDataEncryption,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1282) = &input.ml_user_data_encryption_mode {
        object
            .key("MlUserDataEncryptionMode")
            .string(var_1282.as_str());
    }
    if let Some(var_1283) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1283.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_code_gen_node_arg(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CodeGenNodeArg,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1284) = &input.name {
        object.key("Name").string(var_1284.as_str());
    }
    if let Some(var_1285) = &input.value {
        object.key("Value").string(var_1285.as_str());
    }
    if input.param {
        object.key("Param").boolean(input.param);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_encryption(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3Encryption,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1286) = &input.s3_encryption_mode {
        object.key("S3EncryptionMode").string(var_1286.as_str());
    }
    if let Some(var_1287) = &input.kms_key_arn {
        object.key("KmsKeyArn").string(var_1287.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_cloud_watch_encryption(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CloudWatchEncryption,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1288) = &input.cloud_watch_encryption_mode {
        object
            .key("CloudWatchEncryptionMode")
            .string(var_1288.as_str());
    }
    if let Some(var_1289) = &input.kms_key_arn {
        object.key("KmsKeyArn").string(var_1289.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_job_bookmarks_encryption(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::JobBookmarksEncryption,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1290) = &input.job_bookmarks_encryption_mode {
        object
            .key("JobBookmarksEncryptionMode")
            .string(var_1290.as_str());
    }
    if let Some(var_1291) = &input.kms_key_arn {
        object.key("KmsKeyArn").string(var_1291.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_column(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Column,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1292) = &input.name {
        object.key("Name").string(var_1292.as_str());
    }
    if let Some(var_1293) = &input.r#type {
        object.key("Type").string(var_1293.as_str());
    }
    if let Some(var_1294) = &input.comment {
        object.key("Comment").string(var_1294.as_str());
    }
    if let Some(var_1295) = &input.parameters {
        let mut object_1296 = object.key("Parameters").start_object();
        for (key_1297, value_1298) in var_1295 {
            {
                object_1296.key(key_1297).string(value_1298.as_str());
            }
        }
        object_1296.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_table_identifier(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TableIdentifier,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1299) = &input.catalog_id {
        object.key("CatalogId").string(var_1299.as_str());
    }
    if let Some(var_1300) = &input.database_name {
        object.key("DatabaseName").string(var_1300.as_str());
    }
    if let Some(var_1301) = &input.name {
        object.key("Name").string(var_1301.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_condition(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Condition,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1302) = &input.logical_operator {
        object.key("LogicalOperator").string(var_1302.as_str());
    }
    if let Some(var_1303) = &input.job_name {
        object.key("JobName").string(var_1303.as_str());
    }
    if let Some(var_1304) = &input.state {
        object.key("State").string(var_1304.as_str());
    }
    if let Some(var_1305) = &input.crawler_name {
        object.key("CrawlerName").string(var_1305.as_str());
    }
    if let Some(var_1306) = &input.crawl_state {
        object.key("CrawlState").string(var_1306.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_resource_uri(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ResourceUri,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1307) = &input.resource_type {
        object.key("ResourceType").string(var_1307.as_str());
    }
    if let Some(var_1308) = &input.uri {
        object.key("Uri").string(var_1308.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_schema_column(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SchemaColumn,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1309) = &input.name {
        object.key("Name").string(var_1309.as_str());
    }
    if let Some(var_1310) = &input.data_type {
        object.key("DataType").string(var_1310.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_encryption_at_rest(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EncryptionAtRest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1311) = &input.catalog_encryption_mode {
        object
            .key("CatalogEncryptionMode")
            .string(var_1311.as_str());
    }
    if let Some(var_1312) = &input.sse_aws_kms_key_id {
        object.key("SseAwsKmsKeyId").string(var_1312.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_connection_password_encryption(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConnectionPasswordEncryption,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object
            .key("ReturnConnectionPasswordEncrypted")
            .boolean(input.return_connection_password_encrypted);
    }
    if let Some(var_1313) = &input.aws_kms_key_id {
        object.key("AwsKmsKeyId").string(var_1313.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_column_statistics_data(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ColumnStatisticsData,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1314) = &input.r#type {
        object.key("Type").string(var_1314.as_str());
    }
    if let Some(var_1315) = &input.boolean_column_statistics_data {
        let mut object_1316 = object.key("BooleanColumnStatisticsData").start_object();
        crate::json_ser::serialize_structure_crate_model_boolean_column_statistics_data(
            &mut object_1316,
            var_1315,
        )?;
        object_1316.finish();
    }
    if let Some(var_1317) = &input.date_column_statistics_data {
        let mut object_1318 = object.key("DateColumnStatisticsData").start_object();
        crate::json_ser::serialize_structure_crate_model_date_column_statistics_data(
            &mut object_1318,
            var_1317,
        )?;
        object_1318.finish();
    }
    if let Some(var_1319) = &input.decimal_column_statistics_data {
        let mut object_1320 = object.key("DecimalColumnStatisticsData").start_object();
        crate::json_ser::serialize_structure_crate_model_decimal_column_statistics_data(
            &mut object_1320,
            var_1319,
        )?;
        object_1320.finish();
    }
    if let Some(var_1321) = &input.double_column_statistics_data {
        let mut object_1322 = object.key("DoubleColumnStatisticsData").start_object();
        crate::json_ser::serialize_structure_crate_model_double_column_statistics_data(
            &mut object_1322,
            var_1321,
        )?;
        object_1322.finish();
    }
    if let Some(var_1323) = &input.long_column_statistics_data {
        let mut object_1324 = object.key("LongColumnStatisticsData").start_object();
        crate::json_ser::serialize_structure_crate_model_long_column_statistics_data(
            &mut object_1324,
            var_1323,
        )?;
        object_1324.finish();
    }
    if let Some(var_1325) = &input.string_column_statistics_data {
        let mut object_1326 = object.key("StringColumnStatisticsData").start_object();
        crate::json_ser::serialize_structure_crate_model_string_column_statistics_data(
            &mut object_1326,
            var_1325,
        )?;
        object_1326.finish();
    }
    if let Some(var_1327) = &input.binary_column_statistics_data {
        let mut object_1328 = object.key("BinaryColumnStatisticsData").start_object();
        crate::json_ser::serialize_structure_crate_model_binary_column_statistics_data(
            &mut object_1328,
            var_1327,
        )?;
        object_1328.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_ser_de_info(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SerDeInfo,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1329) = &input.name {
        object.key("Name").string(var_1329.as_str());
    }
    if let Some(var_1330) = &input.serialization_library {
        object.key("SerializationLibrary").string(var_1330.as_str());
    }
    if let Some(var_1331) = &input.parameters {
        let mut object_1332 = object.key("Parameters").start_object();
        for (key_1333, value_1334) in var_1331 {
            {
                object_1332.key(key_1333).string(value_1334.as_str());
            }
        }
        object_1332.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_order(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Order,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1335) = &input.column {
        object.key("Column").string(var_1335.as_str());
    }
    {
        object.key("SortOrder").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.sort_order).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_skewed_info(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SkewedInfo,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1336) = &input.skewed_column_names {
        let mut array_1337 = object.key("SkewedColumnNames").start_array();
        for item_1338 in var_1336 {
            {
                array_1337.value().string(item_1338.as_str());
            }
        }
        array_1337.finish();
    }
    if let Some(var_1339) = &input.skewed_column_values {
        let mut array_1340 = object.key("SkewedColumnValues").start_array();
        for item_1341 in var_1339 {
            {
                array_1340.value().string(item_1341.as_str());
            }
        }
        array_1340.finish();
    }
    if let Some(var_1342) = &input.skewed_column_value_location_maps {
        let mut object_1343 = object.key("SkewedColumnValueLocationMaps").start_object();
        for (key_1344, value_1345) in var_1342 {
            {
                object_1343.key(key_1344).string(value_1345.as_str());
            }
        }
        object_1343.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_schema_reference(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SchemaReference,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1346) = &input.schema_id {
        let mut object_1347 = object.key("SchemaId").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_id(&mut object_1347, var_1346)?;
        object_1347.finish();
    }
    if let Some(var_1348) = &input.schema_version_id {
        object.key("SchemaVersionId").string(var_1348.as_str());
    }
    if let Some(var_1349) = &input.schema_version_number {
        object.key("SchemaVersionNumber").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1349).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_data_lake_principal(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataLakePrincipal,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1350) = &input.data_lake_principal_identifier {
        object
            .key("DataLakePrincipalIdentifier")
            .string(var_1350.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_boolean_column_statistics_data(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BooleanColumnStatisticsData,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object.key("NumberOfTrues").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.number_of_trues).into()),
        );
    }
    {
        object.key("NumberOfFalses").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.number_of_falses).into()),
        );
    }
    {
        object.key("NumberOfNulls").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.number_of_nulls).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_date_column_statistics_data(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DateColumnStatisticsData,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1351) = &input.minimum_value {
        object
            .key("MinimumValue")
            .date_time(var_1351, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1352) = &input.maximum_value {
        object
            .key("MaximumValue")
            .date_time(var_1352, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    {
        object.key("NumberOfNulls").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.number_of_nulls).into()),
        );
    }
    {
        object.key("NumberOfDistinctValues").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.number_of_distinct_values).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_decimal_column_statistics_data(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DecimalColumnStatisticsData,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1353) = &input.minimum_value {
        let mut object_1354 = object.key("MinimumValue").start_object();
        crate::json_ser::serialize_structure_crate_model_decimal_number(
            &mut object_1354,
            var_1353,
        )?;
        object_1354.finish();
    }
    if let Some(var_1355) = &input.maximum_value {
        let mut object_1356 = object.key("MaximumValue").start_object();
        crate::json_ser::serialize_structure_crate_model_decimal_number(
            &mut object_1356,
            var_1355,
        )?;
        object_1356.finish();
    }
    {
        object.key("NumberOfNulls").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.number_of_nulls).into()),
        );
    }
    {
        object.key("NumberOfDistinctValues").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.number_of_distinct_values).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_double_column_statistics_data(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DoubleColumnStatisticsData,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.minimum_value != 0.0 {
        object.key("MinimumValue").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((input.minimum_value).into()),
        );
    }
    if input.maximum_value != 0.0 {
        object.key("MaximumValue").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((input.maximum_value).into()),
        );
    }
    {
        object.key("NumberOfNulls").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.number_of_nulls).into()),
        );
    }
    {
        object.key("NumberOfDistinctValues").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.number_of_distinct_values).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_long_column_statistics_data(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LongColumnStatisticsData,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.minimum_value != 0 {
        object.key("MinimumValue").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.minimum_value).into()),
        );
    }
    if input.maximum_value != 0 {
        object.key("MaximumValue").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.maximum_value).into()),
        );
    }
    {
        object.key("NumberOfNulls").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.number_of_nulls).into()),
        );
    }
    {
        object.key("NumberOfDistinctValues").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.number_of_distinct_values).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_string_column_statistics_data(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StringColumnStatisticsData,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object.key("MaximumLength").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.maximum_length).into()),
        );
    }
    {
        object.key("AverageLength").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((input.average_length).into()),
        );
    }
    {
        object.key("NumberOfNulls").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.number_of_nulls).into()),
        );
    }
    {
        object.key("NumberOfDistinctValues").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.number_of_distinct_values).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_binary_column_statistics_data(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BinaryColumnStatisticsData,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object.key("MaximumLength").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.maximum_length).into()),
        );
    }
    {
        object.key("AverageLength").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((input.average_length).into()),
        );
    }
    {
        object.key("NumberOfNulls").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.number_of_nulls).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_decimal_number(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DecimalNumber,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1357) = &input.unscaled_value {
        object
            .key("UnscaledValue")
            .string_unchecked(&aws_smithy_types::base64::encode(var_1357));
    }
    {
        object.key("Scale").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.scale).into()),
        );
    }
    Ok(())
}
