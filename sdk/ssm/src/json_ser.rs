// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_add_tags_to_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AddTagsToResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1) = &input.resource_type {
        object.key("ResourceType").string(var_1.as_str());
    }
    if let Some(var_2) = &input.resource_id {
        object.key("ResourceId").string(var_2.as_str());
    }
    if let Some(var_3) = &input.tags {
        let mut array_4 = object.key("Tags").start_array();
        for item_5 in var_3 {
            {
                let mut object_6 = array_4.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_6, item_5)?;
                object_6.finish();
            }
        }
        array_4.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_associate_ops_item_related_item_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociateOpsItemRelatedItemInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_7) = &input.ops_item_id {
        object.key("OpsItemId").string(var_7.as_str());
    }
    if let Some(var_8) = &input.association_type {
        object.key("AssociationType").string(var_8.as_str());
    }
    if let Some(var_9) = &input.resource_type {
        object.key("ResourceType").string(var_9.as_str());
    }
    if let Some(var_10) = &input.resource_uri {
        object.key("ResourceUri").string(var_10.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_cancel_command_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CancelCommandInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_11) = &input.command_id {
        object.key("CommandId").string(var_11.as_str());
    }
    if let Some(var_12) = &input.instance_ids {
        let mut array_13 = object.key("InstanceIds").start_array();
        for item_14 in var_12 {
            {
                array_13.value().string(item_14.as_str());
            }
        }
        array_13.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_cancel_maintenance_window_execution_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CancelMaintenanceWindowExecutionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_15) = &input.window_execution_id {
        object.key("WindowExecutionId").string(var_15.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_activation_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateActivationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_16) = &input.description {
        object.key("Description").string(var_16.as_str());
    }
    if let Some(var_17) = &input.default_instance_name {
        object.key("DefaultInstanceName").string(var_17.as_str());
    }
    if let Some(var_18) = &input.iam_role {
        object.key("IamRole").string(var_18.as_str());
    }
    if let Some(var_19) = &input.registration_limit {
        object.key("RegistrationLimit").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_19).into()),
        );
    }
    if let Some(var_20) = &input.expiration_date {
        object
            .key("ExpirationDate")
            .date_time(var_20, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_21) = &input.tags {
        let mut array_22 = object.key("Tags").start_array();
        for item_23 in var_21 {
            {
                let mut object_24 = array_22.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_24, item_23)?;
                object_24.finish();
            }
        }
        array_22.finish();
    }
    if let Some(var_25) = &input.registration_metadata {
        let mut array_26 = object.key("RegistrationMetadata").start_array();
        for item_27 in var_25 {
            {
                let mut object_28 = array_26.value().start_object();
                crate::json_ser::serialize_structure_crate_model_registration_metadata_item(
                    &mut object_28,
                    item_27,
                )?;
                object_28.finish();
            }
        }
        array_26.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_association_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateAssociationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_29) = &input.name {
        object.key("Name").string(var_29.as_str());
    }
    if let Some(var_30) = &input.document_version {
        object.key("DocumentVersion").string(var_30.as_str());
    }
    if let Some(var_31) = &input.instance_id {
        object.key("InstanceId").string(var_31.as_str());
    }
    if let Some(var_32) = &input.parameters {
        let mut object_33 = object.key("Parameters").start_object();
        for (key_34, value_35) in var_32 {
            {
                let mut array_36 = object_33.key(key_34).start_array();
                for item_37 in value_35 {
                    {
                        array_36.value().string(item_37.as_str());
                    }
                }
                array_36.finish();
            }
        }
        object_33.finish();
    }
    if let Some(var_38) = &input.targets {
        let mut array_39 = object.key("Targets").start_array();
        for item_40 in var_38 {
            {
                let mut object_41 = array_39.value().start_object();
                crate::json_ser::serialize_structure_crate_model_target(&mut object_41, item_40)?;
                object_41.finish();
            }
        }
        array_39.finish();
    }
    if let Some(var_42) = &input.schedule_expression {
        object.key("ScheduleExpression").string(var_42.as_str());
    }
    if let Some(var_43) = &input.output_location {
        let mut object_44 = object.key("OutputLocation").start_object();
        crate::json_ser::serialize_structure_crate_model_instance_association_output_location(
            &mut object_44,
            var_43,
        )?;
        object_44.finish();
    }
    if let Some(var_45) = &input.association_name {
        object.key("AssociationName").string(var_45.as_str());
    }
    if let Some(var_46) = &input.automation_target_parameter_name {
        object
            .key("AutomationTargetParameterName")
            .string(var_46.as_str());
    }
    if let Some(var_47) = &input.max_errors {
        object.key("MaxErrors").string(var_47.as_str());
    }
    if let Some(var_48) = &input.max_concurrency {
        object.key("MaxConcurrency").string(var_48.as_str());
    }
    if let Some(var_49) = &input.compliance_severity {
        object.key("ComplianceSeverity").string(var_49.as_str());
    }
    if let Some(var_50) = &input.sync_compliance {
        object.key("SyncCompliance").string(var_50.as_str());
    }
    if input.apply_only_at_cron_interval {
        object
            .key("ApplyOnlyAtCronInterval")
            .boolean(input.apply_only_at_cron_interval);
    }
    if let Some(var_51) = &input.calendar_names {
        let mut array_52 = object.key("CalendarNames").start_array();
        for item_53 in var_51 {
            {
                array_52.value().string(item_53.as_str());
            }
        }
        array_52.finish();
    }
    if let Some(var_54) = &input.target_locations {
        let mut array_55 = object.key("TargetLocations").start_array();
        for item_56 in var_54 {
            {
                let mut object_57 = array_55.value().start_object();
                crate::json_ser::serialize_structure_crate_model_target_location(
                    &mut object_57,
                    item_56,
                )?;
                object_57.finish();
            }
        }
        array_55.finish();
    }
    if let Some(var_58) = &input.schedule_offset {
        object.key("ScheduleOffset").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_58).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_association_batch_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateAssociationBatchInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_59) = &input.entries {
        let mut array_60 = object.key("Entries").start_array();
        for item_61 in var_59 {
            {
                let mut object_62 = array_60.value().start_object();
                crate::json_ser::serialize_structure_crate_model_create_association_batch_request_entry(&mut object_62, item_61)?;
                object_62.finish();
            }
        }
        array_60.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_document_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDocumentInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_63) = &input.content {
        object.key("Content").string(var_63.as_str());
    }
    if let Some(var_64) = &input.requires {
        let mut array_65 = object.key("Requires").start_array();
        for item_66 in var_64 {
            {
                let mut object_67 = array_65.value().start_object();
                crate::json_ser::serialize_structure_crate_model_document_requires(
                    &mut object_67,
                    item_66,
                )?;
                object_67.finish();
            }
        }
        array_65.finish();
    }
    if let Some(var_68) = &input.attachments {
        let mut array_69 = object.key("Attachments").start_array();
        for item_70 in var_68 {
            {
                let mut object_71 = array_69.value().start_object();
                crate::json_ser::serialize_structure_crate_model_attachments_source(
                    &mut object_71,
                    item_70,
                )?;
                object_71.finish();
            }
        }
        array_69.finish();
    }
    if let Some(var_72) = &input.name {
        object.key("Name").string(var_72.as_str());
    }
    if let Some(var_73) = &input.display_name {
        object.key("DisplayName").string(var_73.as_str());
    }
    if let Some(var_74) = &input.version_name {
        object.key("VersionName").string(var_74.as_str());
    }
    if let Some(var_75) = &input.document_type {
        object.key("DocumentType").string(var_75.as_str());
    }
    if let Some(var_76) = &input.document_format {
        object.key("DocumentFormat").string(var_76.as_str());
    }
    if let Some(var_77) = &input.target_type {
        object.key("TargetType").string(var_77.as_str());
    }
    if let Some(var_78) = &input.tags {
        let mut array_79 = object.key("Tags").start_array();
        for item_80 in var_78 {
            {
                let mut object_81 = array_79.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_81, item_80)?;
                object_81.finish();
            }
        }
        array_79.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_maintenance_window_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateMaintenanceWindowInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_82) = &input.name {
        object.key("Name").string(var_82.as_str());
    }
    if let Some(var_83) = &input.description {
        object.key("Description").string(var_83.as_str());
    }
    if let Some(var_84) = &input.start_date {
        object.key("StartDate").string(var_84.as_str());
    }
    if let Some(var_85) = &input.end_date {
        object.key("EndDate").string(var_85.as_str());
    }
    if let Some(var_86) = &input.schedule {
        object.key("Schedule").string(var_86.as_str());
    }
    if let Some(var_87) = &input.schedule_timezone {
        object.key("ScheduleTimezone").string(var_87.as_str());
    }
    if let Some(var_88) = &input.schedule_offset {
        object.key("ScheduleOffset").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_88).into()),
        );
    }
    {
        object.key("Duration").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.duration).into()),
        );
    }
    {
        object.key("Cutoff").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.cutoff).into()),
        );
    }
    {
        object
            .key("AllowUnassociatedTargets")
            .boolean(input.allow_unassociated_targets);
    }
    if let Some(var_89) = &input.client_token {
        object.key("ClientToken").string(var_89.as_str());
    }
    if let Some(var_90) = &input.tags {
        let mut array_91 = object.key("Tags").start_array();
        for item_92 in var_90 {
            {
                let mut object_93 = array_91.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_93, item_92)?;
                object_93.finish();
            }
        }
        array_91.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_ops_item_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateOpsItemInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_94) = &input.description {
        object.key("Description").string(var_94.as_str());
    }
    if let Some(var_95) = &input.ops_item_type {
        object.key("OpsItemType").string(var_95.as_str());
    }
    if let Some(var_96) = &input.operational_data {
        let mut object_97 = object.key("OperationalData").start_object();
        for (key_98, value_99) in var_96 {
            {
                let mut object_100 = object_97.key(key_98).start_object();
                crate::json_ser::serialize_structure_crate_model_ops_item_data_value(
                    &mut object_100,
                    value_99,
                )?;
                object_100.finish();
            }
        }
        object_97.finish();
    }
    if let Some(var_101) = &input.notifications {
        let mut array_102 = object.key("Notifications").start_array();
        for item_103 in var_101 {
            {
                let mut object_104 = array_102.value().start_object();
                crate::json_ser::serialize_structure_crate_model_ops_item_notification(
                    &mut object_104,
                    item_103,
                )?;
                object_104.finish();
            }
        }
        array_102.finish();
    }
    if let Some(var_105) = &input.priority {
        object.key("Priority").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_105).into()),
        );
    }
    if let Some(var_106) = &input.related_ops_items {
        let mut array_107 = object.key("RelatedOpsItems").start_array();
        for item_108 in var_106 {
            {
                let mut object_109 = array_107.value().start_object();
                crate::json_ser::serialize_structure_crate_model_related_ops_item(
                    &mut object_109,
                    item_108,
                )?;
                object_109.finish();
            }
        }
        array_107.finish();
    }
    if let Some(var_110) = &input.source {
        object.key("Source").string(var_110.as_str());
    }
    if let Some(var_111) = &input.title {
        object.key("Title").string(var_111.as_str());
    }
    if let Some(var_112) = &input.tags {
        let mut array_113 = object.key("Tags").start_array();
        for item_114 in var_112 {
            {
                let mut object_115 = array_113.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_115, item_114)?;
                object_115.finish();
            }
        }
        array_113.finish();
    }
    if let Some(var_116) = &input.category {
        object.key("Category").string(var_116.as_str());
    }
    if let Some(var_117) = &input.severity {
        object.key("Severity").string(var_117.as_str());
    }
    if let Some(var_118) = &input.actual_start_time {
        object
            .key("ActualStartTime")
            .date_time(var_118, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_119) = &input.actual_end_time {
        object
            .key("ActualEndTime")
            .date_time(var_119, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_120) = &input.planned_start_time {
        object
            .key("PlannedStartTime")
            .date_time(var_120, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_121) = &input.planned_end_time {
        object
            .key("PlannedEndTime")
            .date_time(var_121, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_ops_metadata_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateOpsMetadataInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_122) = &input.resource_id {
        object.key("ResourceId").string(var_122.as_str());
    }
    if let Some(var_123) = &input.metadata {
        let mut object_124 = object.key("Metadata").start_object();
        for (key_125, value_126) in var_123 {
            {
                let mut object_127 = object_124.key(key_125).start_object();
                crate::json_ser::serialize_structure_crate_model_metadata_value(
                    &mut object_127,
                    value_126,
                )?;
                object_127.finish();
            }
        }
        object_124.finish();
    }
    if let Some(var_128) = &input.tags {
        let mut array_129 = object.key("Tags").start_array();
        for item_130 in var_128 {
            {
                let mut object_131 = array_129.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_131, item_130)?;
                object_131.finish();
            }
        }
        array_129.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_patch_baseline_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreatePatchBaselineInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_132) = &input.operating_system {
        object.key("OperatingSystem").string(var_132.as_str());
    }
    if let Some(var_133) = &input.name {
        object.key("Name").string(var_133.as_str());
    }
    if let Some(var_134) = &input.global_filters {
        let mut object_135 = object.key("GlobalFilters").start_object();
        crate::json_ser::serialize_structure_crate_model_patch_filter_group(
            &mut object_135,
            var_134,
        )?;
        object_135.finish();
    }
    if let Some(var_136) = &input.approval_rules {
        let mut object_137 = object.key("ApprovalRules").start_object();
        crate::json_ser::serialize_structure_crate_model_patch_rule_group(
            &mut object_137,
            var_136,
        )?;
        object_137.finish();
    }
    if let Some(var_138) = &input.approved_patches {
        let mut array_139 = object.key("ApprovedPatches").start_array();
        for item_140 in var_138 {
            {
                array_139.value().string(item_140.as_str());
            }
        }
        array_139.finish();
    }
    if let Some(var_141) = &input.approved_patches_compliance_level {
        object
            .key("ApprovedPatchesComplianceLevel")
            .string(var_141.as_str());
    }
    if let Some(var_142) = &input.approved_patches_enable_non_security {
        object
            .key("ApprovedPatchesEnableNonSecurity")
            .boolean(*var_142);
    }
    if let Some(var_143) = &input.rejected_patches {
        let mut array_144 = object.key("RejectedPatches").start_array();
        for item_145 in var_143 {
            {
                array_144.value().string(item_145.as_str());
            }
        }
        array_144.finish();
    }
    if let Some(var_146) = &input.rejected_patches_action {
        object.key("RejectedPatchesAction").string(var_146.as_str());
    }
    if let Some(var_147) = &input.description {
        object.key("Description").string(var_147.as_str());
    }
    if let Some(var_148) = &input.sources {
        let mut array_149 = object.key("Sources").start_array();
        for item_150 in var_148 {
            {
                let mut object_151 = array_149.value().start_object();
                crate::json_ser::serialize_structure_crate_model_patch_source(
                    &mut object_151,
                    item_150,
                )?;
                object_151.finish();
            }
        }
        array_149.finish();
    }
    if let Some(var_152) = &input.client_token {
        object.key("ClientToken").string(var_152.as_str());
    }
    if let Some(var_153) = &input.tags {
        let mut array_154 = object.key("Tags").start_array();
        for item_155 in var_153 {
            {
                let mut object_156 = array_154.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_156, item_155)?;
                object_156.finish();
            }
        }
        array_154.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_resource_data_sync_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateResourceDataSyncInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_157) = &input.sync_name {
        object.key("SyncName").string(var_157.as_str());
    }
    if let Some(var_158) = &input.s3_destination {
        let mut object_159 = object.key("S3Destination").start_object();
        crate::json_ser::serialize_structure_crate_model_resource_data_sync_s3_destination(
            &mut object_159,
            var_158,
        )?;
        object_159.finish();
    }
    if let Some(var_160) = &input.sync_type {
        object.key("SyncType").string(var_160.as_str());
    }
    if let Some(var_161) = &input.sync_source {
        let mut object_162 = object.key("SyncSource").start_object();
        crate::json_ser::serialize_structure_crate_model_resource_data_sync_source(
            &mut object_162,
            var_161,
        )?;
        object_162.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_activation_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteActivationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_163) = &input.activation_id {
        object.key("ActivationId").string(var_163.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_association_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteAssociationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_164) = &input.name {
        object.key("Name").string(var_164.as_str());
    }
    if let Some(var_165) = &input.instance_id {
        object.key("InstanceId").string(var_165.as_str());
    }
    if let Some(var_166) = &input.association_id {
        object.key("AssociationId").string(var_166.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_document_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteDocumentInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_167) = &input.name {
        object.key("Name").string(var_167.as_str());
    }
    if let Some(var_168) = &input.document_version {
        object.key("DocumentVersion").string(var_168.as_str());
    }
    if let Some(var_169) = &input.version_name {
        object.key("VersionName").string(var_169.as_str());
    }
    if input.force {
        object.key("Force").boolean(input.force);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_inventory_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteInventoryInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_170) = &input.type_name {
        object.key("TypeName").string(var_170.as_str());
    }
    if let Some(var_171) = &input.schema_delete_option {
        object.key("SchemaDeleteOption").string(var_171.as_str());
    }
    if input.dry_run {
        object.key("DryRun").boolean(input.dry_run);
    }
    if let Some(var_172) = &input.client_token {
        object.key("ClientToken").string(var_172.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_maintenance_window_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteMaintenanceWindowInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_173) = &input.window_id {
        object.key("WindowId").string(var_173.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_ops_metadata_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteOpsMetadataInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_174) = &input.ops_metadata_arn {
        object.key("OpsMetadataArn").string(var_174.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_parameter_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteParameterInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_175) = &input.name {
        object.key("Name").string(var_175.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_parameters_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteParametersInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_176) = &input.names {
        let mut array_177 = object.key("Names").start_array();
        for item_178 in var_176 {
            {
                array_177.value().string(item_178.as_str());
            }
        }
        array_177.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_patch_baseline_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeletePatchBaselineInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_179) = &input.baseline_id {
        object.key("BaselineId").string(var_179.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_resource_data_sync_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteResourceDataSyncInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_180) = &input.sync_name {
        object.key("SyncName").string(var_180.as_str());
    }
    if let Some(var_181) = &input.sync_type {
        object.key("SyncType").string(var_181.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_deregister_managed_instance_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeregisterManagedInstanceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_182) = &input.instance_id {
        object.key("InstanceId").string(var_182.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_deregister_patch_baseline_for_patch_group_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeregisterPatchBaselineForPatchGroupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_183) = &input.baseline_id {
        object.key("BaselineId").string(var_183.as_str());
    }
    if let Some(var_184) = &input.patch_group {
        object.key("PatchGroup").string(var_184.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_deregister_target_from_maintenance_window_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeregisterTargetFromMaintenanceWindowInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_185) = &input.window_id {
        object.key("WindowId").string(var_185.as_str());
    }
    if let Some(var_186) = &input.window_target_id {
        object.key("WindowTargetId").string(var_186.as_str());
    }
    if let Some(var_187) = &input.safe {
        object.key("Safe").boolean(*var_187);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_deregister_task_from_maintenance_window_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeregisterTaskFromMaintenanceWindowInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_188) = &input.window_id {
        object.key("WindowId").string(var_188.as_str());
    }
    if let Some(var_189) = &input.window_task_id {
        object.key("WindowTaskId").string(var_189.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_activations_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeActivationsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_190) = &input.filters {
        let mut array_191 = object.key("Filters").start_array();
        for item_192 in var_190 {
            {
                let mut object_193 = array_191.value().start_object();
                crate::json_ser::serialize_structure_crate_model_describe_activations_filter(
                    &mut object_193,
                    item_192,
                )?;
                object_193.finish();
            }
        }
        array_191.finish();
    }
    if let Some(var_194) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_194).into()),
        );
    }
    if let Some(var_195) = &input.next_token {
        object.key("NextToken").string(var_195.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_association_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeAssociationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_196) = &input.name {
        object.key("Name").string(var_196.as_str());
    }
    if let Some(var_197) = &input.instance_id {
        object.key("InstanceId").string(var_197.as_str());
    }
    if let Some(var_198) = &input.association_id {
        object.key("AssociationId").string(var_198.as_str());
    }
    if let Some(var_199) = &input.association_version {
        object.key("AssociationVersion").string(var_199.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_association_executions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeAssociationExecutionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_200) = &input.association_id {
        object.key("AssociationId").string(var_200.as_str());
    }
    if let Some(var_201) = &input.filters {
        let mut array_202 = object.key("Filters").start_array();
        for item_203 in var_201 {
            {
                let mut object_204 = array_202.value().start_object();
                crate::json_ser::serialize_structure_crate_model_association_execution_filter(
                    &mut object_204,
                    item_203,
                )?;
                object_204.finish();
            }
        }
        array_202.finish();
    }
    if let Some(var_205) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_205).into()),
        );
    }
    if let Some(var_206) = &input.next_token {
        object.key("NextToken").string(var_206.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_association_execution_targets_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeAssociationExecutionTargetsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_207) = &input.association_id {
        object.key("AssociationId").string(var_207.as_str());
    }
    if let Some(var_208) = &input.execution_id {
        object.key("ExecutionId").string(var_208.as_str());
    }
    if let Some(var_209) = &input.filters {
        let mut array_210 = object.key("Filters").start_array();
        for item_211 in var_209 {
            {
                let mut object_212 = array_210.value().start_object();
                crate::json_ser::serialize_structure_crate_model_association_execution_targets_filter(&mut object_212, item_211)?;
                object_212.finish();
            }
        }
        array_210.finish();
    }
    if let Some(var_213) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_213).into()),
        );
    }
    if let Some(var_214) = &input.next_token {
        object.key("NextToken").string(var_214.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_automation_executions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeAutomationExecutionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_215) = &input.filters {
        let mut array_216 = object.key("Filters").start_array();
        for item_217 in var_215 {
            {
                let mut object_218 = array_216.value().start_object();
                crate::json_ser::serialize_structure_crate_model_automation_execution_filter(
                    &mut object_218,
                    item_217,
                )?;
                object_218.finish();
            }
        }
        array_216.finish();
    }
    if let Some(var_219) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_219).into()),
        );
    }
    if let Some(var_220) = &input.next_token {
        object.key("NextToken").string(var_220.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_automation_step_executions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeAutomationStepExecutionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_221) = &input.automation_execution_id {
        object.key("AutomationExecutionId").string(var_221.as_str());
    }
    if let Some(var_222) = &input.filters {
        let mut array_223 = object.key("Filters").start_array();
        for item_224 in var_222 {
            {
                let mut object_225 = array_223.value().start_object();
                crate::json_ser::serialize_structure_crate_model_step_execution_filter(
                    &mut object_225,
                    item_224,
                )?;
                object_225.finish();
            }
        }
        array_223.finish();
    }
    if let Some(var_226) = &input.next_token {
        object.key("NextToken").string(var_226.as_str());
    }
    if let Some(var_227) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_227).into()),
        );
    }
    if let Some(var_228) = &input.reverse_order {
        object.key("ReverseOrder").boolean(*var_228);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_available_patches_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeAvailablePatchesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_229) = &input.filters {
        let mut array_230 = object.key("Filters").start_array();
        for item_231 in var_229 {
            {
                let mut object_232 = array_230.value().start_object();
                crate::json_ser::serialize_structure_crate_model_patch_orchestrator_filter(
                    &mut object_232,
                    item_231,
                )?;
                object_232.finish();
            }
        }
        array_230.finish();
    }
    if let Some(var_233) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_233).into()),
        );
    }
    if let Some(var_234) = &input.next_token {
        object.key("NextToken").string(var_234.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_document_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeDocumentInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_235) = &input.name {
        object.key("Name").string(var_235.as_str());
    }
    if let Some(var_236) = &input.document_version {
        object.key("DocumentVersion").string(var_236.as_str());
    }
    if let Some(var_237) = &input.version_name {
        object.key("VersionName").string(var_237.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_document_permission_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeDocumentPermissionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_238) = &input.name {
        object.key("Name").string(var_238.as_str());
    }
    if let Some(var_239) = &input.permission_type {
        object.key("PermissionType").string(var_239.as_str());
    }
    if let Some(var_240) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_240).into()),
        );
    }
    if let Some(var_241) = &input.next_token {
        object.key("NextToken").string(var_241.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_effective_instance_associations_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeEffectiveInstanceAssociationsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_242) = &input.instance_id {
        object.key("InstanceId").string(var_242.as_str());
    }
    if let Some(var_243) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_243).into()),
        );
    }
    if let Some(var_244) = &input.next_token {
        object.key("NextToken").string(var_244.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_effective_patches_for_patch_baseline_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeEffectivePatchesForPatchBaselineInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_245) = &input.baseline_id {
        object.key("BaselineId").string(var_245.as_str());
    }
    if let Some(var_246) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_246).into()),
        );
    }
    if let Some(var_247) = &input.next_token {
        object.key("NextToken").string(var_247.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_instance_associations_status_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeInstanceAssociationsStatusInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_248) = &input.instance_id {
        object.key("InstanceId").string(var_248.as_str());
    }
    if let Some(var_249) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_249).into()),
        );
    }
    if let Some(var_250) = &input.next_token {
        object.key("NextToken").string(var_250.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_instance_information_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeInstanceInformationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_251) = &input.instance_information_filter_list {
        let mut array_252 = object.key("InstanceInformationFilterList").start_array();
        for item_253 in var_251 {
            {
                let mut object_254 = array_252.value().start_object();
                crate::json_ser::serialize_structure_crate_model_instance_information_filter(
                    &mut object_254,
                    item_253,
                )?;
                object_254.finish();
            }
        }
        array_252.finish();
    }
    if let Some(var_255) = &input.filters {
        let mut array_256 = object.key("Filters").start_array();
        for item_257 in var_255 {
            {
                let mut object_258 = array_256.value().start_object();
                crate::json_ser::serialize_structure_crate_model_instance_information_string_filter(&mut object_258, item_257)?;
                object_258.finish();
            }
        }
        array_256.finish();
    }
    if let Some(var_259) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_259).into()),
        );
    }
    if let Some(var_260) = &input.next_token {
        object.key("NextToken").string(var_260.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_instance_patches_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeInstancePatchesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_261) = &input.instance_id {
        object.key("InstanceId").string(var_261.as_str());
    }
    if let Some(var_262) = &input.filters {
        let mut array_263 = object.key("Filters").start_array();
        for item_264 in var_262 {
            {
                let mut object_265 = array_263.value().start_object();
                crate::json_ser::serialize_structure_crate_model_patch_orchestrator_filter(
                    &mut object_265,
                    item_264,
                )?;
                object_265.finish();
            }
        }
        array_263.finish();
    }
    if let Some(var_266) = &input.next_token {
        object.key("NextToken").string(var_266.as_str());
    }
    if let Some(var_267) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_267).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_instance_patch_states_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeInstancePatchStatesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_268) = &input.instance_ids {
        let mut array_269 = object.key("InstanceIds").start_array();
        for item_270 in var_268 {
            {
                array_269.value().string(item_270.as_str());
            }
        }
        array_269.finish();
    }
    if let Some(var_271) = &input.next_token {
        object.key("NextToken").string(var_271.as_str());
    }
    if let Some(var_272) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_272).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_instance_patch_states_for_patch_group_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeInstancePatchStatesForPatchGroupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_273) = &input.patch_group {
        object.key("PatchGroup").string(var_273.as_str());
    }
    if let Some(var_274) = &input.filters {
        let mut array_275 = object.key("Filters").start_array();
        for item_276 in var_274 {
            {
                let mut object_277 = array_275.value().start_object();
                crate::json_ser::serialize_structure_crate_model_instance_patch_state_filter(
                    &mut object_277,
                    item_276,
                )?;
                object_277.finish();
            }
        }
        array_275.finish();
    }
    if let Some(var_278) = &input.next_token {
        object.key("NextToken").string(var_278.as_str());
    }
    if let Some(var_279) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_279).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_inventory_deletions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeInventoryDeletionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_280) = &input.deletion_id {
        object.key("DeletionId").string(var_280.as_str());
    }
    if let Some(var_281) = &input.next_token {
        object.key("NextToken").string(var_281.as_str());
    }
    if let Some(var_282) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_282).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_maintenance_window_executions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeMaintenanceWindowExecutionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_283) = &input.window_id {
        object.key("WindowId").string(var_283.as_str());
    }
    if let Some(var_284) = &input.filters {
        let mut array_285 = object.key("Filters").start_array();
        for item_286 in var_284 {
            {
                let mut object_287 = array_285.value().start_object();
                crate::json_ser::serialize_structure_crate_model_maintenance_window_filter(
                    &mut object_287,
                    item_286,
                )?;
                object_287.finish();
            }
        }
        array_285.finish();
    }
    if let Some(var_288) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_288).into()),
        );
    }
    if let Some(var_289) = &input.next_token {
        object.key("NextToken").string(var_289.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_maintenance_window_execution_task_invocations_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeMaintenanceWindowExecutionTaskInvocationsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_290) = &input.window_execution_id {
        object.key("WindowExecutionId").string(var_290.as_str());
    }
    if let Some(var_291) = &input.task_id {
        object.key("TaskId").string(var_291.as_str());
    }
    if let Some(var_292) = &input.filters {
        let mut array_293 = object.key("Filters").start_array();
        for item_294 in var_292 {
            {
                let mut object_295 = array_293.value().start_object();
                crate::json_ser::serialize_structure_crate_model_maintenance_window_filter(
                    &mut object_295,
                    item_294,
                )?;
                object_295.finish();
            }
        }
        array_293.finish();
    }
    if let Some(var_296) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_296).into()),
        );
    }
    if let Some(var_297) = &input.next_token {
        object.key("NextToken").string(var_297.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_maintenance_window_execution_tasks_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeMaintenanceWindowExecutionTasksInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_298) = &input.window_execution_id {
        object.key("WindowExecutionId").string(var_298.as_str());
    }
    if let Some(var_299) = &input.filters {
        let mut array_300 = object.key("Filters").start_array();
        for item_301 in var_299 {
            {
                let mut object_302 = array_300.value().start_object();
                crate::json_ser::serialize_structure_crate_model_maintenance_window_filter(
                    &mut object_302,
                    item_301,
                )?;
                object_302.finish();
            }
        }
        array_300.finish();
    }
    if let Some(var_303) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_303).into()),
        );
    }
    if let Some(var_304) = &input.next_token {
        object.key("NextToken").string(var_304.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_maintenance_windows_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeMaintenanceWindowsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_305) = &input.filters {
        let mut array_306 = object.key("Filters").start_array();
        for item_307 in var_305 {
            {
                let mut object_308 = array_306.value().start_object();
                crate::json_ser::serialize_structure_crate_model_maintenance_window_filter(
                    &mut object_308,
                    item_307,
                )?;
                object_308.finish();
            }
        }
        array_306.finish();
    }
    if let Some(var_309) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_309).into()),
        );
    }
    if let Some(var_310) = &input.next_token {
        object.key("NextToken").string(var_310.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_maintenance_window_schedule_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeMaintenanceWindowScheduleInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_311) = &input.window_id {
        object.key("WindowId").string(var_311.as_str());
    }
    if let Some(var_312) = &input.targets {
        let mut array_313 = object.key("Targets").start_array();
        for item_314 in var_312 {
            {
                let mut object_315 = array_313.value().start_object();
                crate::json_ser::serialize_structure_crate_model_target(&mut object_315, item_314)?;
                object_315.finish();
            }
        }
        array_313.finish();
    }
    if let Some(var_316) = &input.resource_type {
        object.key("ResourceType").string(var_316.as_str());
    }
    if let Some(var_317) = &input.filters {
        let mut array_318 = object.key("Filters").start_array();
        for item_319 in var_317 {
            {
                let mut object_320 = array_318.value().start_object();
                crate::json_ser::serialize_structure_crate_model_patch_orchestrator_filter(
                    &mut object_320,
                    item_319,
                )?;
                object_320.finish();
            }
        }
        array_318.finish();
    }
    if let Some(var_321) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_321).into()),
        );
    }
    if let Some(var_322) = &input.next_token {
        object.key("NextToken").string(var_322.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_maintenance_windows_for_target_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeMaintenanceWindowsForTargetInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_323) = &input.targets {
        let mut array_324 = object.key("Targets").start_array();
        for item_325 in var_323 {
            {
                let mut object_326 = array_324.value().start_object();
                crate::json_ser::serialize_structure_crate_model_target(&mut object_326, item_325)?;
                object_326.finish();
            }
        }
        array_324.finish();
    }
    if let Some(var_327) = &input.resource_type {
        object.key("ResourceType").string(var_327.as_str());
    }
    if let Some(var_328) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_328).into()),
        );
    }
    if let Some(var_329) = &input.next_token {
        object.key("NextToken").string(var_329.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_maintenance_window_targets_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeMaintenanceWindowTargetsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_330) = &input.window_id {
        object.key("WindowId").string(var_330.as_str());
    }
    if let Some(var_331) = &input.filters {
        let mut array_332 = object.key("Filters").start_array();
        for item_333 in var_331 {
            {
                let mut object_334 = array_332.value().start_object();
                crate::json_ser::serialize_structure_crate_model_maintenance_window_filter(
                    &mut object_334,
                    item_333,
                )?;
                object_334.finish();
            }
        }
        array_332.finish();
    }
    if let Some(var_335) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_335).into()),
        );
    }
    if let Some(var_336) = &input.next_token {
        object.key("NextToken").string(var_336.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_maintenance_window_tasks_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeMaintenanceWindowTasksInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_337) = &input.window_id {
        object.key("WindowId").string(var_337.as_str());
    }
    if let Some(var_338) = &input.filters {
        let mut array_339 = object.key("Filters").start_array();
        for item_340 in var_338 {
            {
                let mut object_341 = array_339.value().start_object();
                crate::json_ser::serialize_structure_crate_model_maintenance_window_filter(
                    &mut object_341,
                    item_340,
                )?;
                object_341.finish();
            }
        }
        array_339.finish();
    }
    if let Some(var_342) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_342).into()),
        );
    }
    if let Some(var_343) = &input.next_token {
        object.key("NextToken").string(var_343.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_ops_items_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeOpsItemsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_344) = &input.ops_item_filters {
        let mut array_345 = object.key("OpsItemFilters").start_array();
        for item_346 in var_344 {
            {
                let mut object_347 = array_345.value().start_object();
                crate::json_ser::serialize_structure_crate_model_ops_item_filter(
                    &mut object_347,
                    item_346,
                )?;
                object_347.finish();
            }
        }
        array_345.finish();
    }
    if let Some(var_348) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_348).into()),
        );
    }
    if let Some(var_349) = &input.next_token {
        object.key("NextToken").string(var_349.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_parameters_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeParametersInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_350) = &input.filters {
        let mut array_351 = object.key("Filters").start_array();
        for item_352 in var_350 {
            {
                let mut object_353 = array_351.value().start_object();
                crate::json_ser::serialize_structure_crate_model_parameters_filter(
                    &mut object_353,
                    item_352,
                )?;
                object_353.finish();
            }
        }
        array_351.finish();
    }
    if let Some(var_354) = &input.parameter_filters {
        let mut array_355 = object.key("ParameterFilters").start_array();
        for item_356 in var_354 {
            {
                let mut object_357 = array_355.value().start_object();
                crate::json_ser::serialize_structure_crate_model_parameter_string_filter(
                    &mut object_357,
                    item_356,
                )?;
                object_357.finish();
            }
        }
        array_355.finish();
    }
    if let Some(var_358) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_358).into()),
        );
    }
    if let Some(var_359) = &input.next_token {
        object.key("NextToken").string(var_359.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_patch_baselines_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribePatchBaselinesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_360) = &input.filters {
        let mut array_361 = object.key("Filters").start_array();
        for item_362 in var_360 {
            {
                let mut object_363 = array_361.value().start_object();
                crate::json_ser::serialize_structure_crate_model_patch_orchestrator_filter(
                    &mut object_363,
                    item_362,
                )?;
                object_363.finish();
            }
        }
        array_361.finish();
    }
    if let Some(var_364) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_364).into()),
        );
    }
    if let Some(var_365) = &input.next_token {
        object.key("NextToken").string(var_365.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_patch_groups_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribePatchGroupsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_366) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_366).into()),
        );
    }
    if let Some(var_367) = &input.filters {
        let mut array_368 = object.key("Filters").start_array();
        for item_369 in var_367 {
            {
                let mut object_370 = array_368.value().start_object();
                crate::json_ser::serialize_structure_crate_model_patch_orchestrator_filter(
                    &mut object_370,
                    item_369,
                )?;
                object_370.finish();
            }
        }
        array_368.finish();
    }
    if let Some(var_371) = &input.next_token {
        object.key("NextToken").string(var_371.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_patch_group_state_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribePatchGroupStateInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_372) = &input.patch_group {
        object.key("PatchGroup").string(var_372.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_patch_properties_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribePatchPropertiesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_373) = &input.operating_system {
        object.key("OperatingSystem").string(var_373.as_str());
    }
    if let Some(var_374) = &input.property {
        object.key("Property").string(var_374.as_str());
    }
    if let Some(var_375) = &input.patch_set {
        object.key("PatchSet").string(var_375.as_str());
    }
    if let Some(var_376) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_376).into()),
        );
    }
    if let Some(var_377) = &input.next_token {
        object.key("NextToken").string(var_377.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_sessions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeSessionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_378) = &input.state {
        object.key("State").string(var_378.as_str());
    }
    if let Some(var_379) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_379).into()),
        );
    }
    if let Some(var_380) = &input.next_token {
        object.key("NextToken").string(var_380.as_str());
    }
    if let Some(var_381) = &input.filters {
        let mut array_382 = object.key("Filters").start_array();
        for item_383 in var_381 {
            {
                let mut object_384 = array_382.value().start_object();
                crate::json_ser::serialize_structure_crate_model_session_filter(
                    &mut object_384,
                    item_383,
                )?;
                object_384.finish();
            }
        }
        array_382.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_disassociate_ops_item_related_item_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DisassociateOpsItemRelatedItemInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_385) = &input.ops_item_id {
        object.key("OpsItemId").string(var_385.as_str());
    }
    if let Some(var_386) = &input.association_id {
        object.key("AssociationId").string(var_386.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_automation_execution_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetAutomationExecutionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_387) = &input.automation_execution_id {
        object.key("AutomationExecutionId").string(var_387.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_calendar_state_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetCalendarStateInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_388) = &input.calendar_names {
        let mut array_389 = object.key("CalendarNames").start_array();
        for item_390 in var_388 {
            {
                array_389.value().string(item_390.as_str());
            }
        }
        array_389.finish();
    }
    if let Some(var_391) = &input.at_time {
        object.key("AtTime").string(var_391.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_command_invocation_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetCommandInvocationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_392) = &input.command_id {
        object.key("CommandId").string(var_392.as_str());
    }
    if let Some(var_393) = &input.instance_id {
        object.key("InstanceId").string(var_393.as_str());
    }
    if let Some(var_394) = &input.plugin_name {
        object.key("PluginName").string(var_394.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_connection_status_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetConnectionStatusInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_395) = &input.target {
        object.key("Target").string(var_395.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_default_patch_baseline_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetDefaultPatchBaselineInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_396) = &input.operating_system {
        object.key("OperatingSystem").string(var_396.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_deployable_patch_snapshot_for_instance_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetDeployablePatchSnapshotForInstanceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_397) = &input.instance_id {
        object.key("InstanceId").string(var_397.as_str());
    }
    if let Some(var_398) = &input.snapshot_id {
        object.key("SnapshotId").string(var_398.as_str());
    }
    if let Some(var_399) = &input.baseline_override {
        let mut object_400 = object.key("BaselineOverride").start_object();
        crate::json_ser::serialize_structure_crate_model_baseline_override(
            &mut object_400,
            var_399,
        )?;
        object_400.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_document_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetDocumentInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_401) = &input.name {
        object.key("Name").string(var_401.as_str());
    }
    if let Some(var_402) = &input.version_name {
        object.key("VersionName").string(var_402.as_str());
    }
    if let Some(var_403) = &input.document_version {
        object.key("DocumentVersion").string(var_403.as_str());
    }
    if let Some(var_404) = &input.document_format {
        object.key("DocumentFormat").string(var_404.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_inventory_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetInventoryInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_405) = &input.filters {
        let mut array_406 = object.key("Filters").start_array();
        for item_407 in var_405 {
            {
                let mut object_408 = array_406.value().start_object();
                crate::json_ser::serialize_structure_crate_model_inventory_filter(
                    &mut object_408,
                    item_407,
                )?;
                object_408.finish();
            }
        }
        array_406.finish();
    }
    if let Some(var_409) = &input.aggregators {
        let mut array_410 = object.key("Aggregators").start_array();
        for item_411 in var_409 {
            {
                let mut object_412 = array_410.value().start_object();
                crate::json_ser::serialize_structure_crate_model_inventory_aggregator(
                    &mut object_412,
                    item_411,
                )?;
                object_412.finish();
            }
        }
        array_410.finish();
    }
    if let Some(var_413) = &input.result_attributes {
        let mut array_414 = object.key("ResultAttributes").start_array();
        for item_415 in var_413 {
            {
                let mut object_416 = array_414.value().start_object();
                crate::json_ser::serialize_structure_crate_model_result_attribute(
                    &mut object_416,
                    item_415,
                )?;
                object_416.finish();
            }
        }
        array_414.finish();
    }
    if let Some(var_417) = &input.next_token {
        object.key("NextToken").string(var_417.as_str());
    }
    if let Some(var_418) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_418).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_inventory_schema_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetInventorySchemaInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_419) = &input.type_name {
        object.key("TypeName").string(var_419.as_str());
    }
    if let Some(var_420) = &input.next_token {
        object.key("NextToken").string(var_420.as_str());
    }
    if let Some(var_421) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_421).into()),
        );
    }
    if input.aggregator {
        object.key("Aggregator").boolean(input.aggregator);
    }
    if let Some(var_422) = &input.sub_type {
        object.key("SubType").boolean(*var_422);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_maintenance_window_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetMaintenanceWindowInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_423) = &input.window_id {
        object.key("WindowId").string(var_423.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_maintenance_window_execution_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetMaintenanceWindowExecutionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_424) = &input.window_execution_id {
        object.key("WindowExecutionId").string(var_424.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_maintenance_window_execution_task_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetMaintenanceWindowExecutionTaskInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_425) = &input.window_execution_id {
        object.key("WindowExecutionId").string(var_425.as_str());
    }
    if let Some(var_426) = &input.task_id {
        object.key("TaskId").string(var_426.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_maintenance_window_execution_task_invocation_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetMaintenanceWindowExecutionTaskInvocationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_427) = &input.window_execution_id {
        object.key("WindowExecutionId").string(var_427.as_str());
    }
    if let Some(var_428) = &input.task_id {
        object.key("TaskId").string(var_428.as_str());
    }
    if let Some(var_429) = &input.invocation_id {
        object.key("InvocationId").string(var_429.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_maintenance_window_task_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetMaintenanceWindowTaskInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_430) = &input.window_id {
        object.key("WindowId").string(var_430.as_str());
    }
    if let Some(var_431) = &input.window_task_id {
        object.key("WindowTaskId").string(var_431.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_ops_item_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetOpsItemInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_432) = &input.ops_item_id {
        object.key("OpsItemId").string(var_432.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_ops_metadata_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetOpsMetadataInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_433) = &input.ops_metadata_arn {
        object.key("OpsMetadataArn").string(var_433.as_str());
    }
    if let Some(var_434) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_434).into()),
        );
    }
    if let Some(var_435) = &input.next_token {
        object.key("NextToken").string(var_435.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_ops_summary_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetOpsSummaryInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_436) = &input.sync_name {
        object.key("SyncName").string(var_436.as_str());
    }
    if let Some(var_437) = &input.filters {
        let mut array_438 = object.key("Filters").start_array();
        for item_439 in var_437 {
            {
                let mut object_440 = array_438.value().start_object();
                crate::json_ser::serialize_structure_crate_model_ops_filter(
                    &mut object_440,
                    item_439,
                )?;
                object_440.finish();
            }
        }
        array_438.finish();
    }
    if let Some(var_441) = &input.aggregators {
        let mut array_442 = object.key("Aggregators").start_array();
        for item_443 in var_441 {
            {
                let mut object_444 = array_442.value().start_object();
                crate::json_ser::serialize_structure_crate_model_ops_aggregator(
                    &mut object_444,
                    item_443,
                )?;
                object_444.finish();
            }
        }
        array_442.finish();
    }
    if let Some(var_445) = &input.result_attributes {
        let mut array_446 = object.key("ResultAttributes").start_array();
        for item_447 in var_445 {
            {
                let mut object_448 = array_446.value().start_object();
                crate::json_ser::serialize_structure_crate_model_ops_result_attribute(
                    &mut object_448,
                    item_447,
                )?;
                object_448.finish();
            }
        }
        array_446.finish();
    }
    if let Some(var_449) = &input.next_token {
        object.key("NextToken").string(var_449.as_str());
    }
    if let Some(var_450) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_450).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_parameter_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetParameterInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_451) = &input.name {
        object.key("Name").string(var_451.as_str());
    }
    if let Some(var_452) = &input.with_decryption {
        object.key("WithDecryption").boolean(*var_452);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_parameter_history_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetParameterHistoryInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_453) = &input.name {
        object.key("Name").string(var_453.as_str());
    }
    if let Some(var_454) = &input.with_decryption {
        object.key("WithDecryption").boolean(*var_454);
    }
    if let Some(var_455) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_455).into()),
        );
    }
    if let Some(var_456) = &input.next_token {
        object.key("NextToken").string(var_456.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_parameters_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetParametersInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_457) = &input.names {
        let mut array_458 = object.key("Names").start_array();
        for item_459 in var_457 {
            {
                array_458.value().string(item_459.as_str());
            }
        }
        array_458.finish();
    }
    if let Some(var_460) = &input.with_decryption {
        object.key("WithDecryption").boolean(*var_460);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_parameters_by_path_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetParametersByPathInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_461) = &input.path {
        object.key("Path").string(var_461.as_str());
    }
    if let Some(var_462) = &input.recursive {
        object.key("Recursive").boolean(*var_462);
    }
    if let Some(var_463) = &input.parameter_filters {
        let mut array_464 = object.key("ParameterFilters").start_array();
        for item_465 in var_463 {
            {
                let mut object_466 = array_464.value().start_object();
                crate::json_ser::serialize_structure_crate_model_parameter_string_filter(
                    &mut object_466,
                    item_465,
                )?;
                object_466.finish();
            }
        }
        array_464.finish();
    }
    if let Some(var_467) = &input.with_decryption {
        object.key("WithDecryption").boolean(*var_467);
    }
    if let Some(var_468) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_468).into()),
        );
    }
    if let Some(var_469) = &input.next_token {
        object.key("NextToken").string(var_469.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_patch_baseline_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetPatchBaselineInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_470) = &input.baseline_id {
        object.key("BaselineId").string(var_470.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_patch_baseline_for_patch_group_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetPatchBaselineForPatchGroupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_471) = &input.patch_group {
        object.key("PatchGroup").string(var_471.as_str());
    }
    if let Some(var_472) = &input.operating_system {
        object.key("OperatingSystem").string(var_472.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_service_setting_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetServiceSettingInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_473) = &input.setting_id {
        object.key("SettingId").string(var_473.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_label_parameter_version_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::LabelParameterVersionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_474) = &input.name {
        object.key("Name").string(var_474.as_str());
    }
    if let Some(var_475) = &input.parameter_version {
        object.key("ParameterVersion").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_475).into()),
        );
    }
    if let Some(var_476) = &input.labels {
        let mut array_477 = object.key("Labels").start_array();
        for item_478 in var_476 {
            {
                array_477.value().string(item_478.as_str());
            }
        }
        array_477.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_associations_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListAssociationsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_479) = &input.association_filter_list {
        let mut array_480 = object.key("AssociationFilterList").start_array();
        for item_481 in var_479 {
            {
                let mut object_482 = array_480.value().start_object();
                crate::json_ser::serialize_structure_crate_model_association_filter(
                    &mut object_482,
                    item_481,
                )?;
                object_482.finish();
            }
        }
        array_480.finish();
    }
    if let Some(var_483) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_483).into()),
        );
    }
    if let Some(var_484) = &input.next_token {
        object.key("NextToken").string(var_484.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_association_versions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListAssociationVersionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_485) = &input.association_id {
        object.key("AssociationId").string(var_485.as_str());
    }
    if let Some(var_486) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_486).into()),
        );
    }
    if let Some(var_487) = &input.next_token {
        object.key("NextToken").string(var_487.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_command_invocations_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListCommandInvocationsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_488) = &input.command_id {
        object.key("CommandId").string(var_488.as_str());
    }
    if let Some(var_489) = &input.instance_id {
        object.key("InstanceId").string(var_489.as_str());
    }
    if let Some(var_490) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_490).into()),
        );
    }
    if let Some(var_491) = &input.next_token {
        object.key("NextToken").string(var_491.as_str());
    }
    if let Some(var_492) = &input.filters {
        let mut array_493 = object.key("Filters").start_array();
        for item_494 in var_492 {
            {
                let mut object_495 = array_493.value().start_object();
                crate::json_ser::serialize_structure_crate_model_command_filter(
                    &mut object_495,
                    item_494,
                )?;
                object_495.finish();
            }
        }
        array_493.finish();
    }
    if input.details {
        object.key("Details").boolean(input.details);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_commands_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListCommandsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_496) = &input.command_id {
        object.key("CommandId").string(var_496.as_str());
    }
    if let Some(var_497) = &input.instance_id {
        object.key("InstanceId").string(var_497.as_str());
    }
    if let Some(var_498) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_498).into()),
        );
    }
    if let Some(var_499) = &input.next_token {
        object.key("NextToken").string(var_499.as_str());
    }
    if let Some(var_500) = &input.filters {
        let mut array_501 = object.key("Filters").start_array();
        for item_502 in var_500 {
            {
                let mut object_503 = array_501.value().start_object();
                crate::json_ser::serialize_structure_crate_model_command_filter(
                    &mut object_503,
                    item_502,
                )?;
                object_503.finish();
            }
        }
        array_501.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_compliance_items_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListComplianceItemsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_504) = &input.filters {
        let mut array_505 = object.key("Filters").start_array();
        for item_506 in var_504 {
            {
                let mut object_507 = array_505.value().start_object();
                crate::json_ser::serialize_structure_crate_model_compliance_string_filter(
                    &mut object_507,
                    item_506,
                )?;
                object_507.finish();
            }
        }
        array_505.finish();
    }
    if let Some(var_508) = &input.resource_ids {
        let mut array_509 = object.key("ResourceIds").start_array();
        for item_510 in var_508 {
            {
                array_509.value().string(item_510.as_str());
            }
        }
        array_509.finish();
    }
    if let Some(var_511) = &input.resource_types {
        let mut array_512 = object.key("ResourceTypes").start_array();
        for item_513 in var_511 {
            {
                array_512.value().string(item_513.as_str());
            }
        }
        array_512.finish();
    }
    if let Some(var_514) = &input.next_token {
        object.key("NextToken").string(var_514.as_str());
    }
    if let Some(var_515) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_515).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_compliance_summaries_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListComplianceSummariesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_516) = &input.filters {
        let mut array_517 = object.key("Filters").start_array();
        for item_518 in var_516 {
            {
                let mut object_519 = array_517.value().start_object();
                crate::json_ser::serialize_structure_crate_model_compliance_string_filter(
                    &mut object_519,
                    item_518,
                )?;
                object_519.finish();
            }
        }
        array_517.finish();
    }
    if let Some(var_520) = &input.next_token {
        object.key("NextToken").string(var_520.as_str());
    }
    if let Some(var_521) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_521).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_document_metadata_history_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListDocumentMetadataHistoryInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_522) = &input.name {
        object.key("Name").string(var_522.as_str());
    }
    if let Some(var_523) = &input.document_version {
        object.key("DocumentVersion").string(var_523.as_str());
    }
    if let Some(var_524) = &input.metadata {
        object.key("Metadata").string(var_524.as_str());
    }
    if let Some(var_525) = &input.next_token {
        object.key("NextToken").string(var_525.as_str());
    }
    if let Some(var_526) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_526).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_documents_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListDocumentsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_527) = &input.document_filter_list {
        let mut array_528 = object.key("DocumentFilterList").start_array();
        for item_529 in var_527 {
            {
                let mut object_530 = array_528.value().start_object();
                crate::json_ser::serialize_structure_crate_model_document_filter(
                    &mut object_530,
                    item_529,
                )?;
                object_530.finish();
            }
        }
        array_528.finish();
    }
    if let Some(var_531) = &input.filters {
        let mut array_532 = object.key("Filters").start_array();
        for item_533 in var_531 {
            {
                let mut object_534 = array_532.value().start_object();
                crate::json_ser::serialize_structure_crate_model_document_key_values_filter(
                    &mut object_534,
                    item_533,
                )?;
                object_534.finish();
            }
        }
        array_532.finish();
    }
    if let Some(var_535) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_535).into()),
        );
    }
    if let Some(var_536) = &input.next_token {
        object.key("NextToken").string(var_536.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_document_versions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListDocumentVersionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_537) = &input.name {
        object.key("Name").string(var_537.as_str());
    }
    if let Some(var_538) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_538).into()),
        );
    }
    if let Some(var_539) = &input.next_token {
        object.key("NextToken").string(var_539.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_inventory_entries_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListInventoryEntriesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_540) = &input.instance_id {
        object.key("InstanceId").string(var_540.as_str());
    }
    if let Some(var_541) = &input.type_name {
        object.key("TypeName").string(var_541.as_str());
    }
    if let Some(var_542) = &input.filters {
        let mut array_543 = object.key("Filters").start_array();
        for item_544 in var_542 {
            {
                let mut object_545 = array_543.value().start_object();
                crate::json_ser::serialize_structure_crate_model_inventory_filter(
                    &mut object_545,
                    item_544,
                )?;
                object_545.finish();
            }
        }
        array_543.finish();
    }
    if let Some(var_546) = &input.next_token {
        object.key("NextToken").string(var_546.as_str());
    }
    if let Some(var_547) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_547).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_ops_item_events_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListOpsItemEventsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_548) = &input.filters {
        let mut array_549 = object.key("Filters").start_array();
        for item_550 in var_548 {
            {
                let mut object_551 = array_549.value().start_object();
                crate::json_ser::serialize_structure_crate_model_ops_item_event_filter(
                    &mut object_551,
                    item_550,
                )?;
                object_551.finish();
            }
        }
        array_549.finish();
    }
    if let Some(var_552) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_552).into()),
        );
    }
    if let Some(var_553) = &input.next_token {
        object.key("NextToken").string(var_553.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_ops_item_related_items_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListOpsItemRelatedItemsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_554) = &input.ops_item_id {
        object.key("OpsItemId").string(var_554.as_str());
    }
    if let Some(var_555) = &input.filters {
        let mut array_556 = object.key("Filters").start_array();
        for item_557 in var_555 {
            {
                let mut object_558 = array_556.value().start_object();
                crate::json_ser::serialize_structure_crate_model_ops_item_related_items_filter(
                    &mut object_558,
                    item_557,
                )?;
                object_558.finish();
            }
        }
        array_556.finish();
    }
    if let Some(var_559) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_559).into()),
        );
    }
    if let Some(var_560) = &input.next_token {
        object.key("NextToken").string(var_560.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_ops_metadata_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListOpsMetadataInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_561) = &input.filters {
        let mut array_562 = object.key("Filters").start_array();
        for item_563 in var_561 {
            {
                let mut object_564 = array_562.value().start_object();
                crate::json_ser::serialize_structure_crate_model_ops_metadata_filter(
                    &mut object_564,
                    item_563,
                )?;
                object_564.finish();
            }
        }
        array_562.finish();
    }
    if let Some(var_565) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_565).into()),
        );
    }
    if let Some(var_566) = &input.next_token {
        object.key("NextToken").string(var_566.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_resource_compliance_summaries_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListResourceComplianceSummariesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_567) = &input.filters {
        let mut array_568 = object.key("Filters").start_array();
        for item_569 in var_567 {
            {
                let mut object_570 = array_568.value().start_object();
                crate::json_ser::serialize_structure_crate_model_compliance_string_filter(
                    &mut object_570,
                    item_569,
                )?;
                object_570.finish();
            }
        }
        array_568.finish();
    }
    if let Some(var_571) = &input.next_token {
        object.key("NextToken").string(var_571.as_str());
    }
    if let Some(var_572) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_572).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_resource_data_sync_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListResourceDataSyncInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_573) = &input.sync_type {
        object.key("SyncType").string(var_573.as_str());
    }
    if let Some(var_574) = &input.next_token {
        object.key("NextToken").string(var_574.as_str());
    }
    if let Some(var_575) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_575).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_tags_for_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTagsForResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_576) = &input.resource_type {
        object.key("ResourceType").string(var_576.as_str());
    }
    if let Some(var_577) = &input.resource_id {
        object.key("ResourceId").string(var_577.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_modify_document_permission_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ModifyDocumentPermissionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_578) = &input.name {
        object.key("Name").string(var_578.as_str());
    }
    if let Some(var_579) = &input.permission_type {
        object.key("PermissionType").string(var_579.as_str());
    }
    if let Some(var_580) = &input.account_ids_to_add {
        let mut array_581 = object.key("AccountIdsToAdd").start_array();
        for item_582 in var_580 {
            {
                array_581.value().string(item_582.as_str());
            }
        }
        array_581.finish();
    }
    if let Some(var_583) = &input.account_ids_to_remove {
        let mut array_584 = object.key("AccountIdsToRemove").start_array();
        for item_585 in var_583 {
            {
                array_584.value().string(item_585.as_str());
            }
        }
        array_584.finish();
    }
    if let Some(var_586) = &input.shared_document_version {
        object.key("SharedDocumentVersion").string(var_586.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_compliance_items_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutComplianceItemsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_587) = &input.resource_id {
        object.key("ResourceId").string(var_587.as_str());
    }
    if let Some(var_588) = &input.resource_type {
        object.key("ResourceType").string(var_588.as_str());
    }
    if let Some(var_589) = &input.compliance_type {
        object.key("ComplianceType").string(var_589.as_str());
    }
    if let Some(var_590) = &input.execution_summary {
        let mut object_591 = object.key("ExecutionSummary").start_object();
        crate::json_ser::serialize_structure_crate_model_compliance_execution_summary(
            &mut object_591,
            var_590,
        )?;
        object_591.finish();
    }
    if let Some(var_592) = &input.items {
        let mut array_593 = object.key("Items").start_array();
        for item_594 in var_592 {
            {
                let mut object_595 = array_593.value().start_object();
                crate::json_ser::serialize_structure_crate_model_compliance_item_entry(
                    &mut object_595,
                    item_594,
                )?;
                object_595.finish();
            }
        }
        array_593.finish();
    }
    if let Some(var_596) = &input.item_content_hash {
        object.key("ItemContentHash").string(var_596.as_str());
    }
    if let Some(var_597) = &input.upload_type {
        object.key("UploadType").string(var_597.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_inventory_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutInventoryInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_598) = &input.instance_id {
        object.key("InstanceId").string(var_598.as_str());
    }
    if let Some(var_599) = &input.items {
        let mut array_600 = object.key("Items").start_array();
        for item_601 in var_599 {
            {
                let mut object_602 = array_600.value().start_object();
                crate::json_ser::serialize_structure_crate_model_inventory_item(
                    &mut object_602,
                    item_601,
                )?;
                object_602.finish();
            }
        }
        array_600.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_parameter_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutParameterInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_603) = &input.name {
        object.key("Name").string(var_603.as_str());
    }
    if let Some(var_604) = &input.description {
        object.key("Description").string(var_604.as_str());
    }
    if let Some(var_605) = &input.value {
        object.key("Value").string(var_605.as_str());
    }
    if let Some(var_606) = &input.r#type {
        object.key("Type").string(var_606.as_str());
    }
    if let Some(var_607) = &input.key_id {
        object.key("KeyId").string(var_607.as_str());
    }
    if let Some(var_608) = &input.overwrite {
        object.key("Overwrite").boolean(*var_608);
    }
    if let Some(var_609) = &input.allowed_pattern {
        object.key("AllowedPattern").string(var_609.as_str());
    }
    if let Some(var_610) = &input.tags {
        let mut array_611 = object.key("Tags").start_array();
        for item_612 in var_610 {
            {
                let mut object_613 = array_611.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_613, item_612)?;
                object_613.finish();
            }
        }
        array_611.finish();
    }
    if let Some(var_614) = &input.tier {
        object.key("Tier").string(var_614.as_str());
    }
    if let Some(var_615) = &input.policies {
        object.key("Policies").string(var_615.as_str());
    }
    if let Some(var_616) = &input.data_type {
        object.key("DataType").string(var_616.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_register_default_patch_baseline_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RegisterDefaultPatchBaselineInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_617) = &input.baseline_id {
        object.key("BaselineId").string(var_617.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_register_patch_baseline_for_patch_group_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RegisterPatchBaselineForPatchGroupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_618) = &input.baseline_id {
        object.key("BaselineId").string(var_618.as_str());
    }
    if let Some(var_619) = &input.patch_group {
        object.key("PatchGroup").string(var_619.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_register_target_with_maintenance_window_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RegisterTargetWithMaintenanceWindowInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_620) = &input.window_id {
        object.key("WindowId").string(var_620.as_str());
    }
    if let Some(var_621) = &input.resource_type {
        object.key("ResourceType").string(var_621.as_str());
    }
    if let Some(var_622) = &input.targets {
        let mut array_623 = object.key("Targets").start_array();
        for item_624 in var_622 {
            {
                let mut object_625 = array_623.value().start_object();
                crate::json_ser::serialize_structure_crate_model_target(&mut object_625, item_624)?;
                object_625.finish();
            }
        }
        array_623.finish();
    }
    if let Some(var_626) = &input.owner_information {
        object.key("OwnerInformation").string(var_626.as_str());
    }
    if let Some(var_627) = &input.name {
        object.key("Name").string(var_627.as_str());
    }
    if let Some(var_628) = &input.description {
        object.key("Description").string(var_628.as_str());
    }
    if let Some(var_629) = &input.client_token {
        object.key("ClientToken").string(var_629.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_register_task_with_maintenance_window_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RegisterTaskWithMaintenanceWindowInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_630) = &input.window_id {
        object.key("WindowId").string(var_630.as_str());
    }
    if let Some(var_631) = &input.targets {
        let mut array_632 = object.key("Targets").start_array();
        for item_633 in var_631 {
            {
                let mut object_634 = array_632.value().start_object();
                crate::json_ser::serialize_structure_crate_model_target(&mut object_634, item_633)?;
                object_634.finish();
            }
        }
        array_632.finish();
    }
    if let Some(var_635) = &input.task_arn {
        object.key("TaskArn").string(var_635.as_str());
    }
    if let Some(var_636) = &input.service_role_arn {
        object.key("ServiceRoleArn").string(var_636.as_str());
    }
    if let Some(var_637) = &input.task_type {
        object.key("TaskType").string(var_637.as_str());
    }
    if let Some(var_638) = &input.task_parameters {
        let mut object_639 = object.key("TaskParameters").start_object();
        for (key_640, value_641) in var_638 {
            {
                let mut object_642 = object_639.key(key_640).start_object();
                crate::json_ser::serialize_structure_crate_model_maintenance_window_task_parameter_value_expression(&mut object_642, value_641)?;
                object_642.finish();
            }
        }
        object_639.finish();
    }
    if let Some(var_643) = &input.task_invocation_parameters {
        let mut object_644 = object.key("TaskInvocationParameters").start_object();
        crate::json_ser::serialize_structure_crate_model_maintenance_window_task_invocation_parameters(&mut object_644, var_643)?;
        object_644.finish();
    }
    if let Some(var_645) = &input.priority {
        object.key("Priority").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_645).into()),
        );
    }
    if let Some(var_646) = &input.max_concurrency {
        object.key("MaxConcurrency").string(var_646.as_str());
    }
    if let Some(var_647) = &input.max_errors {
        object.key("MaxErrors").string(var_647.as_str());
    }
    if let Some(var_648) = &input.logging_info {
        let mut object_649 = object.key("LoggingInfo").start_object();
        crate::json_ser::serialize_structure_crate_model_logging_info(&mut object_649, var_648)?;
        object_649.finish();
    }
    if let Some(var_650) = &input.name {
        object.key("Name").string(var_650.as_str());
    }
    if let Some(var_651) = &input.description {
        object.key("Description").string(var_651.as_str());
    }
    if let Some(var_652) = &input.client_token {
        object.key("ClientToken").string(var_652.as_str());
    }
    if let Some(var_653) = &input.cutoff_behavior {
        object.key("CutoffBehavior").string(var_653.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_remove_tags_from_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RemoveTagsFromResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_654) = &input.resource_type {
        object.key("ResourceType").string(var_654.as_str());
    }
    if let Some(var_655) = &input.resource_id {
        object.key("ResourceId").string(var_655.as_str());
    }
    if let Some(var_656) = &input.tag_keys {
        let mut array_657 = object.key("TagKeys").start_array();
        for item_658 in var_656 {
            {
                array_657.value().string(item_658.as_str());
            }
        }
        array_657.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_reset_service_setting_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ResetServiceSettingInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_659) = &input.setting_id {
        object.key("SettingId").string(var_659.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_resume_session_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ResumeSessionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_660) = &input.session_id {
        object.key("SessionId").string(var_660.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_send_automation_signal_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SendAutomationSignalInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_661) = &input.automation_execution_id {
        object.key("AutomationExecutionId").string(var_661.as_str());
    }
    if let Some(var_662) = &input.signal_type {
        object.key("SignalType").string(var_662.as_str());
    }
    if let Some(var_663) = &input.payload {
        let mut object_664 = object.key("Payload").start_object();
        for (key_665, value_666) in var_663 {
            {
                let mut array_667 = object_664.key(key_665).start_array();
                for item_668 in value_666 {
                    {
                        array_667.value().string(item_668.as_str());
                    }
                }
                array_667.finish();
            }
        }
        object_664.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_send_command_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SendCommandInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_669) = &input.instance_ids {
        let mut array_670 = object.key("InstanceIds").start_array();
        for item_671 in var_669 {
            {
                array_670.value().string(item_671.as_str());
            }
        }
        array_670.finish();
    }
    if let Some(var_672) = &input.targets {
        let mut array_673 = object.key("Targets").start_array();
        for item_674 in var_672 {
            {
                let mut object_675 = array_673.value().start_object();
                crate::json_ser::serialize_structure_crate_model_target(&mut object_675, item_674)?;
                object_675.finish();
            }
        }
        array_673.finish();
    }
    if let Some(var_676) = &input.document_name {
        object.key("DocumentName").string(var_676.as_str());
    }
    if let Some(var_677) = &input.document_version {
        object.key("DocumentVersion").string(var_677.as_str());
    }
    if let Some(var_678) = &input.document_hash {
        object.key("DocumentHash").string(var_678.as_str());
    }
    if let Some(var_679) = &input.document_hash_type {
        object.key("DocumentHashType").string(var_679.as_str());
    }
    if let Some(var_680) = &input.timeout_seconds {
        object.key("TimeoutSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_680).into()),
        );
    }
    if let Some(var_681) = &input.comment {
        object.key("Comment").string(var_681.as_str());
    }
    if let Some(var_682) = &input.parameters {
        let mut object_683 = object.key("Parameters").start_object();
        for (key_684, value_685) in var_682 {
            {
                let mut array_686 = object_683.key(key_684).start_array();
                for item_687 in value_685 {
                    {
                        array_686.value().string(item_687.as_str());
                    }
                }
                array_686.finish();
            }
        }
        object_683.finish();
    }
    if let Some(var_688) = &input.output_s3_region {
        object.key("OutputS3Region").string(var_688.as_str());
    }
    if let Some(var_689) = &input.output_s3_bucket_name {
        object.key("OutputS3BucketName").string(var_689.as_str());
    }
    if let Some(var_690) = &input.output_s3_key_prefix {
        object.key("OutputS3KeyPrefix").string(var_690.as_str());
    }
    if let Some(var_691) = &input.max_concurrency {
        object.key("MaxConcurrency").string(var_691.as_str());
    }
    if let Some(var_692) = &input.max_errors {
        object.key("MaxErrors").string(var_692.as_str());
    }
    if let Some(var_693) = &input.service_role_arn {
        object.key("ServiceRoleArn").string(var_693.as_str());
    }
    if let Some(var_694) = &input.notification_config {
        let mut object_695 = object.key("NotificationConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_notification_config(
            &mut object_695,
            var_694,
        )?;
        object_695.finish();
    }
    if let Some(var_696) = &input.cloud_watch_output_config {
        let mut object_697 = object.key("CloudWatchOutputConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_cloud_watch_output_config(
            &mut object_697,
            var_696,
        )?;
        object_697.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_associations_once_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartAssociationsOnceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_698) = &input.association_ids {
        let mut array_699 = object.key("AssociationIds").start_array();
        for item_700 in var_698 {
            {
                array_699.value().string(item_700.as_str());
            }
        }
        array_699.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_automation_execution_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartAutomationExecutionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_701) = &input.document_name {
        object.key("DocumentName").string(var_701.as_str());
    }
    if let Some(var_702) = &input.document_version {
        object.key("DocumentVersion").string(var_702.as_str());
    }
    if let Some(var_703) = &input.parameters {
        let mut object_704 = object.key("Parameters").start_object();
        for (key_705, value_706) in var_703 {
            {
                let mut array_707 = object_704.key(key_705).start_array();
                for item_708 in value_706 {
                    {
                        array_707.value().string(item_708.as_str());
                    }
                }
                array_707.finish();
            }
        }
        object_704.finish();
    }
    if let Some(var_709) = &input.client_token {
        object.key("ClientToken").string(var_709.as_str());
    }
    if let Some(var_710) = &input.mode {
        object.key("Mode").string(var_710.as_str());
    }
    if let Some(var_711) = &input.target_parameter_name {
        object.key("TargetParameterName").string(var_711.as_str());
    }
    if let Some(var_712) = &input.targets {
        let mut array_713 = object.key("Targets").start_array();
        for item_714 in var_712 {
            {
                let mut object_715 = array_713.value().start_object();
                crate::json_ser::serialize_structure_crate_model_target(&mut object_715, item_714)?;
                object_715.finish();
            }
        }
        array_713.finish();
    }
    if let Some(var_716) = &input.target_maps {
        let mut array_717 = object.key("TargetMaps").start_array();
        for item_718 in var_716 {
            {
                let mut object_719 = array_717.value().start_object();
                for (key_720, value_721) in item_718 {
                    {
                        let mut array_722 = object_719.key(key_720).start_array();
                        for item_723 in value_721 {
                            {
                                array_722.value().string(item_723.as_str());
                            }
                        }
                        array_722.finish();
                    }
                }
                object_719.finish();
            }
        }
        array_717.finish();
    }
    if let Some(var_724) = &input.max_concurrency {
        object.key("MaxConcurrency").string(var_724.as_str());
    }
    if let Some(var_725) = &input.max_errors {
        object.key("MaxErrors").string(var_725.as_str());
    }
    if let Some(var_726) = &input.target_locations {
        let mut array_727 = object.key("TargetLocations").start_array();
        for item_728 in var_726 {
            {
                let mut object_729 = array_727.value().start_object();
                crate::json_ser::serialize_structure_crate_model_target_location(
                    &mut object_729,
                    item_728,
                )?;
                object_729.finish();
            }
        }
        array_727.finish();
    }
    if let Some(var_730) = &input.tags {
        let mut array_731 = object.key("Tags").start_array();
        for item_732 in var_730 {
            {
                let mut object_733 = array_731.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_733, item_732)?;
                object_733.finish();
            }
        }
        array_731.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_change_request_execution_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartChangeRequestExecutionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_734) = &input.scheduled_time {
        object
            .key("ScheduledTime")
            .date_time(var_734, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_735) = &input.document_name {
        object.key("DocumentName").string(var_735.as_str());
    }
    if let Some(var_736) = &input.document_version {
        object.key("DocumentVersion").string(var_736.as_str());
    }
    if let Some(var_737) = &input.parameters {
        let mut object_738 = object.key("Parameters").start_object();
        for (key_739, value_740) in var_737 {
            {
                let mut array_741 = object_738.key(key_739).start_array();
                for item_742 in value_740 {
                    {
                        array_741.value().string(item_742.as_str());
                    }
                }
                array_741.finish();
            }
        }
        object_738.finish();
    }
    if let Some(var_743) = &input.change_request_name {
        object.key("ChangeRequestName").string(var_743.as_str());
    }
    if let Some(var_744) = &input.client_token {
        object.key("ClientToken").string(var_744.as_str());
    }
    if input.auto_approve {
        object.key("AutoApprove").boolean(input.auto_approve);
    }
    if let Some(var_745) = &input.runbooks {
        let mut array_746 = object.key("Runbooks").start_array();
        for item_747 in var_745 {
            {
                let mut object_748 = array_746.value().start_object();
                crate::json_ser::serialize_structure_crate_model_runbook(
                    &mut object_748,
                    item_747,
                )?;
                object_748.finish();
            }
        }
        array_746.finish();
    }
    if let Some(var_749) = &input.tags {
        let mut array_750 = object.key("Tags").start_array();
        for item_751 in var_749 {
            {
                let mut object_752 = array_750.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_752, item_751)?;
                object_752.finish();
            }
        }
        array_750.finish();
    }
    if let Some(var_753) = &input.scheduled_end_time {
        object
            .key("ScheduledEndTime")
            .date_time(var_753, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_754) = &input.change_details {
        object.key("ChangeDetails").string(var_754.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_session_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartSessionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_755) = &input.target {
        object.key("Target").string(var_755.as_str());
    }
    if let Some(var_756) = &input.document_name {
        object.key("DocumentName").string(var_756.as_str());
    }
    if let Some(var_757) = &input.reason {
        object.key("Reason").string(var_757.as_str());
    }
    if let Some(var_758) = &input.parameters {
        let mut object_759 = object.key("Parameters").start_object();
        for (key_760, value_761) in var_758 {
            {
                let mut array_762 = object_759.key(key_760).start_array();
                for item_763 in value_761 {
                    {
                        array_762.value().string(item_763.as_str());
                    }
                }
                array_762.finish();
            }
        }
        object_759.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_automation_execution_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopAutomationExecutionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_764) = &input.automation_execution_id {
        object.key("AutomationExecutionId").string(var_764.as_str());
    }
    if let Some(var_765) = &input.r#type {
        object.key("Type").string(var_765.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_terminate_session_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TerminateSessionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_766) = &input.session_id {
        object.key("SessionId").string(var_766.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_unlabel_parameter_version_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UnlabelParameterVersionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_767) = &input.name {
        object.key("Name").string(var_767.as_str());
    }
    if let Some(var_768) = &input.parameter_version {
        object.key("ParameterVersion").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_768).into()),
        );
    }
    if let Some(var_769) = &input.labels {
        let mut array_770 = object.key("Labels").start_array();
        for item_771 in var_769 {
            {
                array_770.value().string(item_771.as_str());
            }
        }
        array_770.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_association_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateAssociationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_772) = &input.association_id {
        object.key("AssociationId").string(var_772.as_str());
    }
    if let Some(var_773) = &input.parameters {
        let mut object_774 = object.key("Parameters").start_object();
        for (key_775, value_776) in var_773 {
            {
                let mut array_777 = object_774.key(key_775).start_array();
                for item_778 in value_776 {
                    {
                        array_777.value().string(item_778.as_str());
                    }
                }
                array_777.finish();
            }
        }
        object_774.finish();
    }
    if let Some(var_779) = &input.document_version {
        object.key("DocumentVersion").string(var_779.as_str());
    }
    if let Some(var_780) = &input.schedule_expression {
        object.key("ScheduleExpression").string(var_780.as_str());
    }
    if let Some(var_781) = &input.output_location {
        let mut object_782 = object.key("OutputLocation").start_object();
        crate::json_ser::serialize_structure_crate_model_instance_association_output_location(
            &mut object_782,
            var_781,
        )?;
        object_782.finish();
    }
    if let Some(var_783) = &input.name {
        object.key("Name").string(var_783.as_str());
    }
    if let Some(var_784) = &input.targets {
        let mut array_785 = object.key("Targets").start_array();
        for item_786 in var_784 {
            {
                let mut object_787 = array_785.value().start_object();
                crate::json_ser::serialize_structure_crate_model_target(&mut object_787, item_786)?;
                object_787.finish();
            }
        }
        array_785.finish();
    }
    if let Some(var_788) = &input.association_name {
        object.key("AssociationName").string(var_788.as_str());
    }
    if let Some(var_789) = &input.association_version {
        object.key("AssociationVersion").string(var_789.as_str());
    }
    if let Some(var_790) = &input.automation_target_parameter_name {
        object
            .key("AutomationTargetParameterName")
            .string(var_790.as_str());
    }
    if let Some(var_791) = &input.max_errors {
        object.key("MaxErrors").string(var_791.as_str());
    }
    if let Some(var_792) = &input.max_concurrency {
        object.key("MaxConcurrency").string(var_792.as_str());
    }
    if let Some(var_793) = &input.compliance_severity {
        object.key("ComplianceSeverity").string(var_793.as_str());
    }
    if let Some(var_794) = &input.sync_compliance {
        object.key("SyncCompliance").string(var_794.as_str());
    }
    if input.apply_only_at_cron_interval {
        object
            .key("ApplyOnlyAtCronInterval")
            .boolean(input.apply_only_at_cron_interval);
    }
    if let Some(var_795) = &input.calendar_names {
        let mut array_796 = object.key("CalendarNames").start_array();
        for item_797 in var_795 {
            {
                array_796.value().string(item_797.as_str());
            }
        }
        array_796.finish();
    }
    if let Some(var_798) = &input.target_locations {
        let mut array_799 = object.key("TargetLocations").start_array();
        for item_800 in var_798 {
            {
                let mut object_801 = array_799.value().start_object();
                crate::json_ser::serialize_structure_crate_model_target_location(
                    &mut object_801,
                    item_800,
                )?;
                object_801.finish();
            }
        }
        array_799.finish();
    }
    if let Some(var_802) = &input.schedule_offset {
        object.key("ScheduleOffset").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_802).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_association_status_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateAssociationStatusInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_803) = &input.name {
        object.key("Name").string(var_803.as_str());
    }
    if let Some(var_804) = &input.instance_id {
        object.key("InstanceId").string(var_804.as_str());
    }
    if let Some(var_805) = &input.association_status {
        let mut object_806 = object.key("AssociationStatus").start_object();
        crate::json_ser::serialize_structure_crate_model_association_status(
            &mut object_806,
            var_805,
        )?;
        object_806.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_document_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDocumentInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_807) = &input.content {
        object.key("Content").string(var_807.as_str());
    }
    if let Some(var_808) = &input.attachments {
        let mut array_809 = object.key("Attachments").start_array();
        for item_810 in var_808 {
            {
                let mut object_811 = array_809.value().start_object();
                crate::json_ser::serialize_structure_crate_model_attachments_source(
                    &mut object_811,
                    item_810,
                )?;
                object_811.finish();
            }
        }
        array_809.finish();
    }
    if let Some(var_812) = &input.name {
        object.key("Name").string(var_812.as_str());
    }
    if let Some(var_813) = &input.display_name {
        object.key("DisplayName").string(var_813.as_str());
    }
    if let Some(var_814) = &input.version_name {
        object.key("VersionName").string(var_814.as_str());
    }
    if let Some(var_815) = &input.document_version {
        object.key("DocumentVersion").string(var_815.as_str());
    }
    if let Some(var_816) = &input.document_format {
        object.key("DocumentFormat").string(var_816.as_str());
    }
    if let Some(var_817) = &input.target_type {
        object.key("TargetType").string(var_817.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_document_default_version_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDocumentDefaultVersionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_818) = &input.name {
        object.key("Name").string(var_818.as_str());
    }
    if let Some(var_819) = &input.document_version {
        object.key("DocumentVersion").string(var_819.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_document_metadata_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDocumentMetadataInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_820) = &input.name {
        object.key("Name").string(var_820.as_str());
    }
    if let Some(var_821) = &input.document_version {
        object.key("DocumentVersion").string(var_821.as_str());
    }
    if let Some(var_822) = &input.document_reviews {
        let mut object_823 = object.key("DocumentReviews").start_object();
        crate::json_ser::serialize_structure_crate_model_document_reviews(
            &mut object_823,
            var_822,
        )?;
        object_823.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_maintenance_window_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateMaintenanceWindowInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_824) = &input.window_id {
        object.key("WindowId").string(var_824.as_str());
    }
    if let Some(var_825) = &input.name {
        object.key("Name").string(var_825.as_str());
    }
    if let Some(var_826) = &input.description {
        object.key("Description").string(var_826.as_str());
    }
    if let Some(var_827) = &input.start_date {
        object.key("StartDate").string(var_827.as_str());
    }
    if let Some(var_828) = &input.end_date {
        object.key("EndDate").string(var_828.as_str());
    }
    if let Some(var_829) = &input.schedule {
        object.key("Schedule").string(var_829.as_str());
    }
    if let Some(var_830) = &input.schedule_timezone {
        object.key("ScheduleTimezone").string(var_830.as_str());
    }
    if let Some(var_831) = &input.schedule_offset {
        object.key("ScheduleOffset").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_831).into()),
        );
    }
    if let Some(var_832) = &input.duration {
        object.key("Duration").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_832).into()),
        );
    }
    if let Some(var_833) = &input.cutoff {
        object.key("Cutoff").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_833).into()),
        );
    }
    if let Some(var_834) = &input.allow_unassociated_targets {
        object.key("AllowUnassociatedTargets").boolean(*var_834);
    }
    if let Some(var_835) = &input.enabled {
        object.key("Enabled").boolean(*var_835);
    }
    if let Some(var_836) = &input.replace {
        object.key("Replace").boolean(*var_836);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_maintenance_window_target_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateMaintenanceWindowTargetInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_837) = &input.window_id {
        object.key("WindowId").string(var_837.as_str());
    }
    if let Some(var_838) = &input.window_target_id {
        object.key("WindowTargetId").string(var_838.as_str());
    }
    if let Some(var_839) = &input.targets {
        let mut array_840 = object.key("Targets").start_array();
        for item_841 in var_839 {
            {
                let mut object_842 = array_840.value().start_object();
                crate::json_ser::serialize_structure_crate_model_target(&mut object_842, item_841)?;
                object_842.finish();
            }
        }
        array_840.finish();
    }
    if let Some(var_843) = &input.owner_information {
        object.key("OwnerInformation").string(var_843.as_str());
    }
    if let Some(var_844) = &input.name {
        object.key("Name").string(var_844.as_str());
    }
    if let Some(var_845) = &input.description {
        object.key("Description").string(var_845.as_str());
    }
    if let Some(var_846) = &input.replace {
        object.key("Replace").boolean(*var_846);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_maintenance_window_task_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateMaintenanceWindowTaskInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_847) = &input.window_id {
        object.key("WindowId").string(var_847.as_str());
    }
    if let Some(var_848) = &input.window_task_id {
        object.key("WindowTaskId").string(var_848.as_str());
    }
    if let Some(var_849) = &input.targets {
        let mut array_850 = object.key("Targets").start_array();
        for item_851 in var_849 {
            {
                let mut object_852 = array_850.value().start_object();
                crate::json_ser::serialize_structure_crate_model_target(&mut object_852, item_851)?;
                object_852.finish();
            }
        }
        array_850.finish();
    }
    if let Some(var_853) = &input.task_arn {
        object.key("TaskArn").string(var_853.as_str());
    }
    if let Some(var_854) = &input.service_role_arn {
        object.key("ServiceRoleArn").string(var_854.as_str());
    }
    if let Some(var_855) = &input.task_parameters {
        let mut object_856 = object.key("TaskParameters").start_object();
        for (key_857, value_858) in var_855 {
            {
                let mut object_859 = object_856.key(key_857).start_object();
                crate::json_ser::serialize_structure_crate_model_maintenance_window_task_parameter_value_expression(&mut object_859, value_858)?;
                object_859.finish();
            }
        }
        object_856.finish();
    }
    if let Some(var_860) = &input.task_invocation_parameters {
        let mut object_861 = object.key("TaskInvocationParameters").start_object();
        crate::json_ser::serialize_structure_crate_model_maintenance_window_task_invocation_parameters(&mut object_861, var_860)?;
        object_861.finish();
    }
    if let Some(var_862) = &input.priority {
        object.key("Priority").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_862).into()),
        );
    }
    if let Some(var_863) = &input.max_concurrency {
        object.key("MaxConcurrency").string(var_863.as_str());
    }
    if let Some(var_864) = &input.max_errors {
        object.key("MaxErrors").string(var_864.as_str());
    }
    if let Some(var_865) = &input.logging_info {
        let mut object_866 = object.key("LoggingInfo").start_object();
        crate::json_ser::serialize_structure_crate_model_logging_info(&mut object_866, var_865)?;
        object_866.finish();
    }
    if let Some(var_867) = &input.name {
        object.key("Name").string(var_867.as_str());
    }
    if let Some(var_868) = &input.description {
        object.key("Description").string(var_868.as_str());
    }
    if let Some(var_869) = &input.replace {
        object.key("Replace").boolean(*var_869);
    }
    if let Some(var_870) = &input.cutoff_behavior {
        object.key("CutoffBehavior").string(var_870.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_managed_instance_role_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateManagedInstanceRoleInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_871) = &input.instance_id {
        object.key("InstanceId").string(var_871.as_str());
    }
    if let Some(var_872) = &input.iam_role {
        object.key("IamRole").string(var_872.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_ops_item_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateOpsItemInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_873) = &input.description {
        object.key("Description").string(var_873.as_str());
    }
    if let Some(var_874) = &input.operational_data {
        let mut object_875 = object.key("OperationalData").start_object();
        for (key_876, value_877) in var_874 {
            {
                let mut object_878 = object_875.key(key_876).start_object();
                crate::json_ser::serialize_structure_crate_model_ops_item_data_value(
                    &mut object_878,
                    value_877,
                )?;
                object_878.finish();
            }
        }
        object_875.finish();
    }
    if let Some(var_879) = &input.operational_data_to_delete {
        let mut array_880 = object.key("OperationalDataToDelete").start_array();
        for item_881 in var_879 {
            {
                array_880.value().string(item_881.as_str());
            }
        }
        array_880.finish();
    }
    if let Some(var_882) = &input.notifications {
        let mut array_883 = object.key("Notifications").start_array();
        for item_884 in var_882 {
            {
                let mut object_885 = array_883.value().start_object();
                crate::json_ser::serialize_structure_crate_model_ops_item_notification(
                    &mut object_885,
                    item_884,
                )?;
                object_885.finish();
            }
        }
        array_883.finish();
    }
    if let Some(var_886) = &input.priority {
        object.key("Priority").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_886).into()),
        );
    }
    if let Some(var_887) = &input.related_ops_items {
        let mut array_888 = object.key("RelatedOpsItems").start_array();
        for item_889 in var_887 {
            {
                let mut object_890 = array_888.value().start_object();
                crate::json_ser::serialize_structure_crate_model_related_ops_item(
                    &mut object_890,
                    item_889,
                )?;
                object_890.finish();
            }
        }
        array_888.finish();
    }
    if let Some(var_891) = &input.status {
        object.key("Status").string(var_891.as_str());
    }
    if let Some(var_892) = &input.ops_item_id {
        object.key("OpsItemId").string(var_892.as_str());
    }
    if let Some(var_893) = &input.title {
        object.key("Title").string(var_893.as_str());
    }
    if let Some(var_894) = &input.category {
        object.key("Category").string(var_894.as_str());
    }
    if let Some(var_895) = &input.severity {
        object.key("Severity").string(var_895.as_str());
    }
    if let Some(var_896) = &input.actual_start_time {
        object
            .key("ActualStartTime")
            .date_time(var_896, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_897) = &input.actual_end_time {
        object
            .key("ActualEndTime")
            .date_time(var_897, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_898) = &input.planned_start_time {
        object
            .key("PlannedStartTime")
            .date_time(var_898, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_899) = &input.planned_end_time {
        object
            .key("PlannedEndTime")
            .date_time(var_899, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_ops_metadata_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateOpsMetadataInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_900) = &input.ops_metadata_arn {
        object.key("OpsMetadataArn").string(var_900.as_str());
    }
    if let Some(var_901) = &input.metadata_to_update {
        let mut object_902 = object.key("MetadataToUpdate").start_object();
        for (key_903, value_904) in var_901 {
            {
                let mut object_905 = object_902.key(key_903).start_object();
                crate::json_ser::serialize_structure_crate_model_metadata_value(
                    &mut object_905,
                    value_904,
                )?;
                object_905.finish();
            }
        }
        object_902.finish();
    }
    if let Some(var_906) = &input.keys_to_delete {
        let mut array_907 = object.key("KeysToDelete").start_array();
        for item_908 in var_906 {
            {
                array_907.value().string(item_908.as_str());
            }
        }
        array_907.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_patch_baseline_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdatePatchBaselineInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_909) = &input.baseline_id {
        object.key("BaselineId").string(var_909.as_str());
    }
    if let Some(var_910) = &input.name {
        object.key("Name").string(var_910.as_str());
    }
    if let Some(var_911) = &input.global_filters {
        let mut object_912 = object.key("GlobalFilters").start_object();
        crate::json_ser::serialize_structure_crate_model_patch_filter_group(
            &mut object_912,
            var_911,
        )?;
        object_912.finish();
    }
    if let Some(var_913) = &input.approval_rules {
        let mut object_914 = object.key("ApprovalRules").start_object();
        crate::json_ser::serialize_structure_crate_model_patch_rule_group(
            &mut object_914,
            var_913,
        )?;
        object_914.finish();
    }
    if let Some(var_915) = &input.approved_patches {
        let mut array_916 = object.key("ApprovedPatches").start_array();
        for item_917 in var_915 {
            {
                array_916.value().string(item_917.as_str());
            }
        }
        array_916.finish();
    }
    if let Some(var_918) = &input.approved_patches_compliance_level {
        object
            .key("ApprovedPatchesComplianceLevel")
            .string(var_918.as_str());
    }
    if let Some(var_919) = &input.approved_patches_enable_non_security {
        object
            .key("ApprovedPatchesEnableNonSecurity")
            .boolean(*var_919);
    }
    if let Some(var_920) = &input.rejected_patches {
        let mut array_921 = object.key("RejectedPatches").start_array();
        for item_922 in var_920 {
            {
                array_921.value().string(item_922.as_str());
            }
        }
        array_921.finish();
    }
    if let Some(var_923) = &input.rejected_patches_action {
        object.key("RejectedPatchesAction").string(var_923.as_str());
    }
    if let Some(var_924) = &input.description {
        object.key("Description").string(var_924.as_str());
    }
    if let Some(var_925) = &input.sources {
        let mut array_926 = object.key("Sources").start_array();
        for item_927 in var_925 {
            {
                let mut object_928 = array_926.value().start_object();
                crate::json_ser::serialize_structure_crate_model_patch_source(
                    &mut object_928,
                    item_927,
                )?;
                object_928.finish();
            }
        }
        array_926.finish();
    }
    if let Some(var_929) = &input.replace {
        object.key("Replace").boolean(*var_929);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_resource_data_sync_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateResourceDataSyncInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_930) = &input.sync_name {
        object.key("SyncName").string(var_930.as_str());
    }
    if let Some(var_931) = &input.sync_type {
        object.key("SyncType").string(var_931.as_str());
    }
    if let Some(var_932) = &input.sync_source {
        let mut object_933 = object.key("SyncSource").start_object();
        crate::json_ser::serialize_structure_crate_model_resource_data_sync_source(
            &mut object_933,
            var_932,
        )?;
        object_933.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_service_setting_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateServiceSettingInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_934) = &input.setting_id {
        object.key("SettingId").string(var_934.as_str());
    }
    if let Some(var_935) = &input.setting_value {
        object.key("SettingValue").string(var_935.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_tag(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Tag,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_936) = &input.key {
        object.key("Key").string(var_936.as_str());
    }
    if let Some(var_937) = &input.value {
        object.key("Value").string(var_937.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_registration_metadata_item(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RegistrationMetadataItem,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_938) = &input.key {
        object.key("Key").string(var_938.as_str());
    }
    if let Some(var_939) = &input.value {
        object.key("Value").string(var_939.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_target(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Target,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_940) = &input.key {
        object.key("Key").string(var_940.as_str());
    }
    if let Some(var_941) = &input.values {
        let mut array_942 = object.key("Values").start_array();
        for item_943 in var_941 {
            {
                array_942.value().string(item_943.as_str());
            }
        }
        array_942.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_instance_association_output_location(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InstanceAssociationOutputLocation,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_944) = &input.s3_location {
        let mut object_945 = object.key("S3Location").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_output_location(
            &mut object_945,
            var_944,
        )?;
        object_945.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_target_location(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TargetLocation,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_946) = &input.accounts {
        let mut array_947 = object.key("Accounts").start_array();
        for item_948 in var_946 {
            {
                array_947.value().string(item_948.as_str());
            }
        }
        array_947.finish();
    }
    if let Some(var_949) = &input.regions {
        let mut array_950 = object.key("Regions").start_array();
        for item_951 in var_949 {
            {
                array_950.value().string(item_951.as_str());
            }
        }
        array_950.finish();
    }
    if let Some(var_952) = &input.target_location_max_concurrency {
        object
            .key("TargetLocationMaxConcurrency")
            .string(var_952.as_str());
    }
    if let Some(var_953) = &input.target_location_max_errors {
        object
            .key("TargetLocationMaxErrors")
            .string(var_953.as_str());
    }
    if let Some(var_954) = &input.execution_role_name {
        object.key("ExecutionRoleName").string(var_954.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_create_association_batch_request_entry(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CreateAssociationBatchRequestEntry,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_955) = &input.name {
        object.key("Name").string(var_955.as_str());
    }
    if let Some(var_956) = &input.instance_id {
        object.key("InstanceId").string(var_956.as_str());
    }
    if let Some(var_957) = &input.parameters {
        let mut object_958 = object.key("Parameters").start_object();
        for (key_959, value_960) in var_957 {
            {
                let mut array_961 = object_958.key(key_959).start_array();
                for item_962 in value_960 {
                    {
                        array_961.value().string(item_962.as_str());
                    }
                }
                array_961.finish();
            }
        }
        object_958.finish();
    }
    if let Some(var_963) = &input.automation_target_parameter_name {
        object
            .key("AutomationTargetParameterName")
            .string(var_963.as_str());
    }
    if let Some(var_964) = &input.document_version {
        object.key("DocumentVersion").string(var_964.as_str());
    }
    if let Some(var_965) = &input.targets {
        let mut array_966 = object.key("Targets").start_array();
        for item_967 in var_965 {
            {
                let mut object_968 = array_966.value().start_object();
                crate::json_ser::serialize_structure_crate_model_target(&mut object_968, item_967)?;
                object_968.finish();
            }
        }
        array_966.finish();
    }
    if let Some(var_969) = &input.schedule_expression {
        object.key("ScheduleExpression").string(var_969.as_str());
    }
    if let Some(var_970) = &input.output_location {
        let mut object_971 = object.key("OutputLocation").start_object();
        crate::json_ser::serialize_structure_crate_model_instance_association_output_location(
            &mut object_971,
            var_970,
        )?;
        object_971.finish();
    }
    if let Some(var_972) = &input.association_name {
        object.key("AssociationName").string(var_972.as_str());
    }
    if let Some(var_973) = &input.max_errors {
        object.key("MaxErrors").string(var_973.as_str());
    }
    if let Some(var_974) = &input.max_concurrency {
        object.key("MaxConcurrency").string(var_974.as_str());
    }
    if let Some(var_975) = &input.compliance_severity {
        object.key("ComplianceSeverity").string(var_975.as_str());
    }
    if let Some(var_976) = &input.sync_compliance {
        object.key("SyncCompliance").string(var_976.as_str());
    }
    if input.apply_only_at_cron_interval {
        object
            .key("ApplyOnlyAtCronInterval")
            .boolean(input.apply_only_at_cron_interval);
    }
    if let Some(var_977) = &input.calendar_names {
        let mut array_978 = object.key("CalendarNames").start_array();
        for item_979 in var_977 {
            {
                array_978.value().string(item_979.as_str());
            }
        }
        array_978.finish();
    }
    if let Some(var_980) = &input.target_locations {
        let mut array_981 = object.key("TargetLocations").start_array();
        for item_982 in var_980 {
            {
                let mut object_983 = array_981.value().start_object();
                crate::json_ser::serialize_structure_crate_model_target_location(
                    &mut object_983,
                    item_982,
                )?;
                object_983.finish();
            }
        }
        array_981.finish();
    }
    if let Some(var_984) = &input.schedule_offset {
        object.key("ScheduleOffset").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_984).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_document_requires(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DocumentRequires,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_985) = &input.name {
        object.key("Name").string(var_985.as_str());
    }
    if let Some(var_986) = &input.version {
        object.key("Version").string(var_986.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_attachments_source(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AttachmentsSource,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_987) = &input.key {
        object.key("Key").string(var_987.as_str());
    }
    if let Some(var_988) = &input.values {
        let mut array_989 = object.key("Values").start_array();
        for item_990 in var_988 {
            {
                array_989.value().string(item_990.as_str());
            }
        }
        array_989.finish();
    }
    if let Some(var_991) = &input.name {
        object.key("Name").string(var_991.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_ops_item_data_value(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OpsItemDataValue,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_992) = &input.value {
        object.key("Value").string(var_992.as_str());
    }
    if let Some(var_993) = &input.r#type {
        object.key("Type").string(var_993.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_ops_item_notification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OpsItemNotification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_994) = &input.arn {
        object.key("Arn").string(var_994.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_related_ops_item(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RelatedOpsItem,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_995) = &input.ops_item_id {
        object.key("OpsItemId").string(var_995.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_metadata_value(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MetadataValue,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_996) = &input.value {
        object.key("Value").string(var_996.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_patch_filter_group(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PatchFilterGroup,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_997) = &input.patch_filters {
        let mut array_998 = object.key("PatchFilters").start_array();
        for item_999 in var_997 {
            {
                let mut object_1000 = array_998.value().start_object();
                crate::json_ser::serialize_structure_crate_model_patch_filter(
                    &mut object_1000,
                    item_999,
                )?;
                object_1000.finish();
            }
        }
        array_998.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_patch_rule_group(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PatchRuleGroup,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1001) = &input.patch_rules {
        let mut array_1002 = object.key("PatchRules").start_array();
        for item_1003 in var_1001 {
            {
                let mut object_1004 = array_1002.value().start_object();
                crate::json_ser::serialize_structure_crate_model_patch_rule(
                    &mut object_1004,
                    item_1003,
                )?;
                object_1004.finish();
            }
        }
        array_1002.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_patch_source(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PatchSource,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1005) = &input.name {
        object.key("Name").string(var_1005.as_str());
    }
    if let Some(var_1006) = &input.products {
        let mut array_1007 = object.key("Products").start_array();
        for item_1008 in var_1006 {
            {
                array_1007.value().string(item_1008.as_str());
            }
        }
        array_1007.finish();
    }
    if let Some(var_1009) = &input.configuration {
        object.key("Configuration").string(var_1009.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_resource_data_sync_s3_destination(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ResourceDataSyncS3Destination,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1010) = &input.bucket_name {
        object.key("BucketName").string(var_1010.as_str());
    }
    if let Some(var_1011) = &input.prefix {
        object.key("Prefix").string(var_1011.as_str());
    }
    if let Some(var_1012) = &input.sync_format {
        object.key("SyncFormat").string(var_1012.as_str());
    }
    if let Some(var_1013) = &input.region {
        object.key("Region").string(var_1013.as_str());
    }
    if let Some(var_1014) = &input.awskms_key_arn {
        object.key("AWSKMSKeyARN").string(var_1014.as_str());
    }
    if let Some(var_1015) = &input.destination_data_sharing {
        let mut object_1016 = object.key("DestinationDataSharing").start_object();
        crate::json_ser::serialize_structure_crate_model_resource_data_sync_destination_data_sharing(&mut object_1016, var_1015)?;
        object_1016.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_resource_data_sync_source(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ResourceDataSyncSource,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1017) = &input.source_type {
        object.key("SourceType").string(var_1017.as_str());
    }
    if let Some(var_1018) = &input.aws_organizations_source {
        let mut object_1019 = object.key("AwsOrganizationsSource").start_object();
        crate::json_ser::serialize_structure_crate_model_resource_data_sync_aws_organizations_source(&mut object_1019, var_1018)?;
        object_1019.finish();
    }
    if let Some(var_1020) = &input.source_regions {
        let mut array_1021 = object.key("SourceRegions").start_array();
        for item_1022 in var_1020 {
            {
                array_1021.value().string(item_1022.as_str());
            }
        }
        array_1021.finish();
    }
    if input.include_future_regions {
        object
            .key("IncludeFutureRegions")
            .boolean(input.include_future_regions);
    }
    if input.enable_all_ops_data_sources {
        object
            .key("EnableAllOpsDataSources")
            .boolean(input.enable_all_ops_data_sources);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_describe_activations_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DescribeActivationsFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1023) = &input.filter_key {
        object.key("FilterKey").string(var_1023.as_str());
    }
    if let Some(var_1024) = &input.filter_values {
        let mut array_1025 = object.key("FilterValues").start_array();
        for item_1026 in var_1024 {
            {
                array_1025.value().string(item_1026.as_str());
            }
        }
        array_1025.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_association_execution_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AssociationExecutionFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1027) = &input.key {
        object.key("Key").string(var_1027.as_str());
    }
    if let Some(var_1028) = &input.value {
        object.key("Value").string(var_1028.as_str());
    }
    if let Some(var_1029) = &input.r#type {
        object.key("Type").string(var_1029.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_association_execution_targets_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AssociationExecutionTargetsFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1030) = &input.key {
        object.key("Key").string(var_1030.as_str());
    }
    if let Some(var_1031) = &input.value {
        object.key("Value").string(var_1031.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_automation_execution_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AutomationExecutionFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1032) = &input.key {
        object.key("Key").string(var_1032.as_str());
    }
    if let Some(var_1033) = &input.values {
        let mut array_1034 = object.key("Values").start_array();
        for item_1035 in var_1033 {
            {
                array_1034.value().string(item_1035.as_str());
            }
        }
        array_1034.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_step_execution_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StepExecutionFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1036) = &input.key {
        object.key("Key").string(var_1036.as_str());
    }
    if let Some(var_1037) = &input.values {
        let mut array_1038 = object.key("Values").start_array();
        for item_1039 in var_1037 {
            {
                array_1038.value().string(item_1039.as_str());
            }
        }
        array_1038.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_patch_orchestrator_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PatchOrchestratorFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1040) = &input.key {
        object.key("Key").string(var_1040.as_str());
    }
    if let Some(var_1041) = &input.values {
        let mut array_1042 = object.key("Values").start_array();
        for item_1043 in var_1041 {
            {
                array_1042.value().string(item_1043.as_str());
            }
        }
        array_1042.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_instance_information_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InstanceInformationFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1044) = &input.key {
        object.key("key").string(var_1044.as_str());
    }
    if let Some(var_1045) = &input.value_set {
        let mut array_1046 = object.key("valueSet").start_array();
        for item_1047 in var_1045 {
            {
                array_1046.value().string(item_1047.as_str());
            }
        }
        array_1046.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_instance_information_string_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InstanceInformationStringFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1048) = &input.key {
        object.key("Key").string(var_1048.as_str());
    }
    if let Some(var_1049) = &input.values {
        let mut array_1050 = object.key("Values").start_array();
        for item_1051 in var_1049 {
            {
                array_1050.value().string(item_1051.as_str());
            }
        }
        array_1050.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_instance_patch_state_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InstancePatchStateFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1052) = &input.key {
        object.key("Key").string(var_1052.as_str());
    }
    if let Some(var_1053) = &input.values {
        let mut array_1054 = object.key("Values").start_array();
        for item_1055 in var_1053 {
            {
                array_1054.value().string(item_1055.as_str());
            }
        }
        array_1054.finish();
    }
    if let Some(var_1056) = &input.r#type {
        object.key("Type").string(var_1056.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_maintenance_window_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MaintenanceWindowFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1057) = &input.key {
        object.key("Key").string(var_1057.as_str());
    }
    if let Some(var_1058) = &input.values {
        let mut array_1059 = object.key("Values").start_array();
        for item_1060 in var_1058 {
            {
                array_1059.value().string(item_1060.as_str());
            }
        }
        array_1059.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_ops_item_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OpsItemFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1061) = &input.key {
        object.key("Key").string(var_1061.as_str());
    }
    if let Some(var_1062) = &input.values {
        let mut array_1063 = object.key("Values").start_array();
        for item_1064 in var_1062 {
            {
                array_1063.value().string(item_1064.as_str());
            }
        }
        array_1063.finish();
    }
    if let Some(var_1065) = &input.operator {
        object.key("Operator").string(var_1065.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_parameters_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ParametersFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1066) = &input.key {
        object.key("Key").string(var_1066.as_str());
    }
    if let Some(var_1067) = &input.values {
        let mut array_1068 = object.key("Values").start_array();
        for item_1069 in var_1067 {
            {
                array_1068.value().string(item_1069.as_str());
            }
        }
        array_1068.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_parameter_string_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ParameterStringFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1070) = &input.key {
        object.key("Key").string(var_1070.as_str());
    }
    if let Some(var_1071) = &input.option {
        object.key("Option").string(var_1071.as_str());
    }
    if let Some(var_1072) = &input.values {
        let mut array_1073 = object.key("Values").start_array();
        for item_1074 in var_1072 {
            {
                array_1073.value().string(item_1074.as_str());
            }
        }
        array_1073.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_session_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SessionFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1075) = &input.key {
        object.key("key").string(var_1075.as_str());
    }
    if let Some(var_1076) = &input.value {
        object.key("value").string(var_1076.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_baseline_override(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BaselineOverride,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1077) = &input.operating_system {
        object.key("OperatingSystem").string(var_1077.as_str());
    }
    if let Some(var_1078) = &input.global_filters {
        let mut object_1079 = object.key("GlobalFilters").start_object();
        crate::json_ser::serialize_structure_crate_model_patch_filter_group(
            &mut object_1079,
            var_1078,
        )?;
        object_1079.finish();
    }
    if let Some(var_1080) = &input.approval_rules {
        let mut object_1081 = object.key("ApprovalRules").start_object();
        crate::json_ser::serialize_structure_crate_model_patch_rule_group(
            &mut object_1081,
            var_1080,
        )?;
        object_1081.finish();
    }
    if let Some(var_1082) = &input.approved_patches {
        let mut array_1083 = object.key("ApprovedPatches").start_array();
        for item_1084 in var_1082 {
            {
                array_1083.value().string(item_1084.as_str());
            }
        }
        array_1083.finish();
    }
    if let Some(var_1085) = &input.approved_patches_compliance_level {
        object
            .key("ApprovedPatchesComplianceLevel")
            .string(var_1085.as_str());
    }
    if let Some(var_1086) = &input.rejected_patches {
        let mut array_1087 = object.key("RejectedPatches").start_array();
        for item_1088 in var_1086 {
            {
                array_1087.value().string(item_1088.as_str());
            }
        }
        array_1087.finish();
    }
    if let Some(var_1089) = &input.rejected_patches_action {
        object
            .key("RejectedPatchesAction")
            .string(var_1089.as_str());
    }
    if input.approved_patches_enable_non_security {
        object
            .key("ApprovedPatchesEnableNonSecurity")
            .boolean(input.approved_patches_enable_non_security);
    }
    if let Some(var_1090) = &input.sources {
        let mut array_1091 = object.key("Sources").start_array();
        for item_1092 in var_1090 {
            {
                let mut object_1093 = array_1091.value().start_object();
                crate::json_ser::serialize_structure_crate_model_patch_source(
                    &mut object_1093,
                    item_1092,
                )?;
                object_1093.finish();
            }
        }
        array_1091.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_inventory_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InventoryFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1094) = &input.key {
        object.key("Key").string(var_1094.as_str());
    }
    if let Some(var_1095) = &input.values {
        let mut array_1096 = object.key("Values").start_array();
        for item_1097 in var_1095 {
            {
                array_1096.value().string(item_1097.as_str());
            }
        }
        array_1096.finish();
    }
    if let Some(var_1098) = &input.r#type {
        object.key("Type").string(var_1098.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_inventory_aggregator(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InventoryAggregator,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1099) = &input.expression {
        object.key("Expression").string(var_1099.as_str());
    }
    if let Some(var_1100) = &input.aggregators {
        let mut array_1101 = object.key("Aggregators").start_array();
        for item_1102 in var_1100 {
            {
                let mut object_1103 = array_1101.value().start_object();
                crate::json_ser::serialize_structure_crate_model_inventory_aggregator(
                    &mut object_1103,
                    item_1102,
                )?;
                object_1103.finish();
            }
        }
        array_1101.finish();
    }
    if let Some(var_1104) = &input.groups {
        let mut array_1105 = object.key("Groups").start_array();
        for item_1106 in var_1104 {
            {
                let mut object_1107 = array_1105.value().start_object();
                crate::json_ser::serialize_structure_crate_model_inventory_group(
                    &mut object_1107,
                    item_1106,
                )?;
                object_1107.finish();
            }
        }
        array_1105.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_result_attribute(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ResultAttribute,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1108) = &input.type_name {
        object.key("TypeName").string(var_1108.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_ops_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OpsFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1109) = &input.key {
        object.key("Key").string(var_1109.as_str());
    }
    if let Some(var_1110) = &input.values {
        let mut array_1111 = object.key("Values").start_array();
        for item_1112 in var_1110 {
            {
                array_1111.value().string(item_1112.as_str());
            }
        }
        array_1111.finish();
    }
    if let Some(var_1113) = &input.r#type {
        object.key("Type").string(var_1113.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_ops_aggregator(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OpsAggregator,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1114) = &input.aggregator_type {
        object.key("AggregatorType").string(var_1114.as_str());
    }
    if let Some(var_1115) = &input.type_name {
        object.key("TypeName").string(var_1115.as_str());
    }
    if let Some(var_1116) = &input.attribute_name {
        object.key("AttributeName").string(var_1116.as_str());
    }
    if let Some(var_1117) = &input.values {
        let mut object_1118 = object.key("Values").start_object();
        for (key_1119, value_1120) in var_1117 {
            {
                object_1118.key(key_1119).string(value_1120.as_str());
            }
        }
        object_1118.finish();
    }
    if let Some(var_1121) = &input.filters {
        let mut array_1122 = object.key("Filters").start_array();
        for item_1123 in var_1121 {
            {
                let mut object_1124 = array_1122.value().start_object();
                crate::json_ser::serialize_structure_crate_model_ops_filter(
                    &mut object_1124,
                    item_1123,
                )?;
                object_1124.finish();
            }
        }
        array_1122.finish();
    }
    if let Some(var_1125) = &input.aggregators {
        let mut array_1126 = object.key("Aggregators").start_array();
        for item_1127 in var_1125 {
            {
                let mut object_1128 = array_1126.value().start_object();
                crate::json_ser::serialize_structure_crate_model_ops_aggregator(
                    &mut object_1128,
                    item_1127,
                )?;
                object_1128.finish();
            }
        }
        array_1126.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_ops_result_attribute(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OpsResultAttribute,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1129) = &input.type_name {
        object.key("TypeName").string(var_1129.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_association_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AssociationFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1130) = &input.key {
        object.key("key").string(var_1130.as_str());
    }
    if let Some(var_1131) = &input.value {
        object.key("value").string(var_1131.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_command_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CommandFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1132) = &input.key {
        object.key("key").string(var_1132.as_str());
    }
    if let Some(var_1133) = &input.value {
        object.key("value").string(var_1133.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_compliance_string_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ComplianceStringFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1134) = &input.key {
        object.key("Key").string(var_1134.as_str());
    }
    if let Some(var_1135) = &input.values {
        let mut array_1136 = object.key("Values").start_array();
        for item_1137 in var_1135 {
            {
                array_1136.value().string(item_1137.as_str());
            }
        }
        array_1136.finish();
    }
    if let Some(var_1138) = &input.r#type {
        object.key("Type").string(var_1138.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_document_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DocumentFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1139) = &input.key {
        object.key("key").string(var_1139.as_str());
    }
    if let Some(var_1140) = &input.value {
        object.key("value").string(var_1140.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_document_key_values_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DocumentKeyValuesFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1141) = &input.key {
        object.key("Key").string(var_1141.as_str());
    }
    if let Some(var_1142) = &input.values {
        let mut array_1143 = object.key("Values").start_array();
        for item_1144 in var_1142 {
            {
                array_1143.value().string(item_1144.as_str());
            }
        }
        array_1143.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_ops_item_event_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OpsItemEventFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1145) = &input.key {
        object.key("Key").string(var_1145.as_str());
    }
    if let Some(var_1146) = &input.values {
        let mut array_1147 = object.key("Values").start_array();
        for item_1148 in var_1146 {
            {
                array_1147.value().string(item_1148.as_str());
            }
        }
        array_1147.finish();
    }
    if let Some(var_1149) = &input.operator {
        object.key("Operator").string(var_1149.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_ops_item_related_items_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OpsItemRelatedItemsFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1150) = &input.key {
        object.key("Key").string(var_1150.as_str());
    }
    if let Some(var_1151) = &input.values {
        let mut array_1152 = object.key("Values").start_array();
        for item_1153 in var_1151 {
            {
                array_1152.value().string(item_1153.as_str());
            }
        }
        array_1152.finish();
    }
    if let Some(var_1154) = &input.operator {
        object.key("Operator").string(var_1154.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_ops_metadata_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OpsMetadataFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1155) = &input.key {
        object.key("Key").string(var_1155.as_str());
    }
    if let Some(var_1156) = &input.values {
        let mut array_1157 = object.key("Values").start_array();
        for item_1158 in var_1156 {
            {
                array_1157.value().string(item_1158.as_str());
            }
        }
        array_1157.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_compliance_execution_summary(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ComplianceExecutionSummary,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1159) = &input.execution_time {
        object
            .key("ExecutionTime")
            .date_time(var_1159, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1160) = &input.execution_id {
        object.key("ExecutionId").string(var_1160.as_str());
    }
    if let Some(var_1161) = &input.execution_type {
        object.key("ExecutionType").string(var_1161.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_compliance_item_entry(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ComplianceItemEntry,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1162) = &input.id {
        object.key("Id").string(var_1162.as_str());
    }
    if let Some(var_1163) = &input.title {
        object.key("Title").string(var_1163.as_str());
    }
    if let Some(var_1164) = &input.severity {
        object.key("Severity").string(var_1164.as_str());
    }
    if let Some(var_1165) = &input.status {
        object.key("Status").string(var_1165.as_str());
    }
    if let Some(var_1166) = &input.details {
        let mut object_1167 = object.key("Details").start_object();
        for (key_1168, value_1169) in var_1166 {
            {
                object_1167.key(key_1168).string(value_1169.as_str());
            }
        }
        object_1167.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_inventory_item(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InventoryItem,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1170) = &input.type_name {
        object.key("TypeName").string(var_1170.as_str());
    }
    if let Some(var_1171) = &input.schema_version {
        object.key("SchemaVersion").string(var_1171.as_str());
    }
    if let Some(var_1172) = &input.capture_time {
        object.key("CaptureTime").string(var_1172.as_str());
    }
    if let Some(var_1173) = &input.content_hash {
        object.key("ContentHash").string(var_1173.as_str());
    }
    if let Some(var_1174) = &input.content {
        let mut array_1175 = object.key("Content").start_array();
        for item_1176 in var_1174 {
            {
                let mut object_1177 = array_1175.value().start_object();
                for (key_1178, value_1179) in item_1176 {
                    {
                        object_1177.key(key_1178).string(value_1179.as_str());
                    }
                }
                object_1177.finish();
            }
        }
        array_1175.finish();
    }
    if let Some(var_1180) = &input.context {
        let mut object_1181 = object.key("Context").start_object();
        for (key_1182, value_1183) in var_1180 {
            {
                object_1181.key(key_1182).string(value_1183.as_str());
            }
        }
        object_1181.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_maintenance_window_task_parameter_value_expression(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MaintenanceWindowTaskParameterValueExpression,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1184) = &input.values {
        let mut array_1185 = object.key("Values").start_array();
        for item_1186 in var_1184 {
            {
                array_1185.value().string(item_1186.as_str());
            }
        }
        array_1185.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_maintenance_window_task_invocation_parameters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MaintenanceWindowTaskInvocationParameters,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1187) = &input.run_command {
        let mut object_1188 = object.key("RunCommand").start_object();
        crate::json_ser::serialize_structure_crate_model_maintenance_window_run_command_parameters(
            &mut object_1188,
            var_1187,
        )?;
        object_1188.finish();
    }
    if let Some(var_1189) = &input.automation {
        let mut object_1190 = object.key("Automation").start_object();
        crate::json_ser::serialize_structure_crate_model_maintenance_window_automation_parameters(
            &mut object_1190,
            var_1189,
        )?;
        object_1190.finish();
    }
    if let Some(var_1191) = &input.step_functions {
        let mut object_1192 = object.key("StepFunctions").start_object();
        crate::json_ser::serialize_structure_crate_model_maintenance_window_step_functions_parameters(&mut object_1192, var_1191)?;
        object_1192.finish();
    }
    if let Some(var_1193) = &input.lambda {
        let mut object_1194 = object.key("Lambda").start_object();
        crate::json_ser::serialize_structure_crate_model_maintenance_window_lambda_parameters(
            &mut object_1194,
            var_1193,
        )?;
        object_1194.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_logging_info(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LoggingInfo,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1195) = &input.s3_bucket_name {
        object.key("S3BucketName").string(var_1195.as_str());
    }
    if let Some(var_1196) = &input.s3_key_prefix {
        object.key("S3KeyPrefix").string(var_1196.as_str());
    }
    if let Some(var_1197) = &input.s3_region {
        object.key("S3Region").string(var_1197.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_notification_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::NotificationConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1198) = &input.notification_arn {
        object.key("NotificationArn").string(var_1198.as_str());
    }
    if let Some(var_1199) = &input.notification_events {
        let mut array_1200 = object.key("NotificationEvents").start_array();
        for item_1201 in var_1199 {
            {
                array_1200.value().string(item_1201.as_str());
            }
        }
        array_1200.finish();
    }
    if let Some(var_1202) = &input.notification_type {
        object.key("NotificationType").string(var_1202.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_cloud_watch_output_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CloudWatchOutputConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1203) = &input.cloud_watch_log_group_name {
        object
            .key("CloudWatchLogGroupName")
            .string(var_1203.as_str());
    }
    if input.cloud_watch_output_enabled {
        object
            .key("CloudWatchOutputEnabled")
            .boolean(input.cloud_watch_output_enabled);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_runbook(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Runbook,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1204) = &input.document_name {
        object.key("DocumentName").string(var_1204.as_str());
    }
    if let Some(var_1205) = &input.document_version {
        object.key("DocumentVersion").string(var_1205.as_str());
    }
    if let Some(var_1206) = &input.parameters {
        let mut object_1207 = object.key("Parameters").start_object();
        for (key_1208, value_1209) in var_1206 {
            {
                let mut array_1210 = object_1207.key(key_1208).start_array();
                for item_1211 in value_1209 {
                    {
                        array_1210.value().string(item_1211.as_str());
                    }
                }
                array_1210.finish();
            }
        }
        object_1207.finish();
    }
    if let Some(var_1212) = &input.target_parameter_name {
        object.key("TargetParameterName").string(var_1212.as_str());
    }
    if let Some(var_1213) = &input.targets {
        let mut array_1214 = object.key("Targets").start_array();
        for item_1215 in var_1213 {
            {
                let mut object_1216 = array_1214.value().start_object();
                crate::json_ser::serialize_structure_crate_model_target(
                    &mut object_1216,
                    item_1215,
                )?;
                object_1216.finish();
            }
        }
        array_1214.finish();
    }
    if let Some(var_1217) = &input.max_concurrency {
        object.key("MaxConcurrency").string(var_1217.as_str());
    }
    if let Some(var_1218) = &input.max_errors {
        object.key("MaxErrors").string(var_1218.as_str());
    }
    if let Some(var_1219) = &input.target_locations {
        let mut array_1220 = object.key("TargetLocations").start_array();
        for item_1221 in var_1219 {
            {
                let mut object_1222 = array_1220.value().start_object();
                crate::json_ser::serialize_structure_crate_model_target_location(
                    &mut object_1222,
                    item_1221,
                )?;
                object_1222.finish();
            }
        }
        array_1220.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_association_status(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AssociationStatus,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1223) = &input.date {
        object
            .key("Date")
            .date_time(var_1223, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1224) = &input.name {
        object.key("Name").string(var_1224.as_str());
    }
    if let Some(var_1225) = &input.message {
        object.key("Message").string(var_1225.as_str());
    }
    if let Some(var_1226) = &input.additional_info {
        object.key("AdditionalInfo").string(var_1226.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_document_reviews(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DocumentReviews,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1227) = &input.action {
        object.key("Action").string(var_1227.as_str());
    }
    if let Some(var_1228) = &input.comment {
        let mut array_1229 = object.key("Comment").start_array();
        for item_1230 in var_1228 {
            {
                let mut object_1231 = array_1229.value().start_object();
                crate::json_ser::serialize_structure_crate_model_document_review_comment_source(
                    &mut object_1231,
                    item_1230,
                )?;
                object_1231.finish();
            }
        }
        array_1229.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_output_location(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3OutputLocation,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1232) = &input.output_s3_region {
        object.key("OutputS3Region").string(var_1232.as_str());
    }
    if let Some(var_1233) = &input.output_s3_bucket_name {
        object.key("OutputS3BucketName").string(var_1233.as_str());
    }
    if let Some(var_1234) = &input.output_s3_key_prefix {
        object.key("OutputS3KeyPrefix").string(var_1234.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_patch_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PatchFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1235) = &input.key {
        object.key("Key").string(var_1235.as_str());
    }
    if let Some(var_1236) = &input.values {
        let mut array_1237 = object.key("Values").start_array();
        for item_1238 in var_1236 {
            {
                array_1237.value().string(item_1238.as_str());
            }
        }
        array_1237.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_patch_rule(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PatchRule,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1239) = &input.patch_filter_group {
        let mut object_1240 = object.key("PatchFilterGroup").start_object();
        crate::json_ser::serialize_structure_crate_model_patch_filter_group(
            &mut object_1240,
            var_1239,
        )?;
        object_1240.finish();
    }
    if let Some(var_1241) = &input.compliance_level {
        object.key("ComplianceLevel").string(var_1241.as_str());
    }
    if let Some(var_1242) = &input.approve_after_days {
        object.key("ApproveAfterDays").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1242).into()),
        );
    }
    if let Some(var_1243) = &input.approve_until_date {
        object.key("ApproveUntilDate").string(var_1243.as_str());
    }
    if let Some(var_1244) = &input.enable_non_security {
        object.key("EnableNonSecurity").boolean(*var_1244);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_resource_data_sync_destination_data_sharing(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ResourceDataSyncDestinationDataSharing,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1245) = &input.destination_data_sharing_type {
        object
            .key("DestinationDataSharingType")
            .string(var_1245.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_resource_data_sync_aws_organizations_source(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ResourceDataSyncAwsOrganizationsSource,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1246) = &input.organization_source_type {
        object
            .key("OrganizationSourceType")
            .string(var_1246.as_str());
    }
    if let Some(var_1247) = &input.organizational_units {
        let mut array_1248 = object.key("OrganizationalUnits").start_array();
        for item_1249 in var_1247 {
            {
                let mut object_1250 = array_1248.value().start_object();
                crate::json_ser::serialize_structure_crate_model_resource_data_sync_organizational_unit(&mut object_1250, item_1249)?;
                object_1250.finish();
            }
        }
        array_1248.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_inventory_group(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InventoryGroup,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1251) = &input.name {
        object.key("Name").string(var_1251.as_str());
    }
    if let Some(var_1252) = &input.filters {
        let mut array_1253 = object.key("Filters").start_array();
        for item_1254 in var_1252 {
            {
                let mut object_1255 = array_1253.value().start_object();
                crate::json_ser::serialize_structure_crate_model_inventory_filter(
                    &mut object_1255,
                    item_1254,
                )?;
                object_1255.finish();
            }
        }
        array_1253.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_maintenance_window_run_command_parameters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MaintenanceWindowRunCommandParameters,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1256) = &input.comment {
        object.key("Comment").string(var_1256.as_str());
    }
    if let Some(var_1257) = &input.cloud_watch_output_config {
        let mut object_1258 = object.key("CloudWatchOutputConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_cloud_watch_output_config(
            &mut object_1258,
            var_1257,
        )?;
        object_1258.finish();
    }
    if let Some(var_1259) = &input.document_hash {
        object.key("DocumentHash").string(var_1259.as_str());
    }
    if let Some(var_1260) = &input.document_hash_type {
        object.key("DocumentHashType").string(var_1260.as_str());
    }
    if let Some(var_1261) = &input.document_version {
        object.key("DocumentVersion").string(var_1261.as_str());
    }
    if let Some(var_1262) = &input.notification_config {
        let mut object_1263 = object.key("NotificationConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_notification_config(
            &mut object_1263,
            var_1262,
        )?;
        object_1263.finish();
    }
    if let Some(var_1264) = &input.output_s3_bucket_name {
        object.key("OutputS3BucketName").string(var_1264.as_str());
    }
    if let Some(var_1265) = &input.output_s3_key_prefix {
        object.key("OutputS3KeyPrefix").string(var_1265.as_str());
    }
    if let Some(var_1266) = &input.parameters {
        let mut object_1267 = object.key("Parameters").start_object();
        for (key_1268, value_1269) in var_1266 {
            {
                let mut array_1270 = object_1267.key(key_1268).start_array();
                for item_1271 in value_1269 {
                    {
                        array_1270.value().string(item_1271.as_str());
                    }
                }
                array_1270.finish();
            }
        }
        object_1267.finish();
    }
    if let Some(var_1272) = &input.service_role_arn {
        object.key("ServiceRoleArn").string(var_1272.as_str());
    }
    if let Some(var_1273) = &input.timeout_seconds {
        object.key("TimeoutSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1273).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_maintenance_window_automation_parameters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MaintenanceWindowAutomationParameters,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1274) = &input.document_version {
        object.key("DocumentVersion").string(var_1274.as_str());
    }
    if let Some(var_1275) = &input.parameters {
        let mut object_1276 = object.key("Parameters").start_object();
        for (key_1277, value_1278) in var_1275 {
            {
                let mut array_1279 = object_1276.key(key_1277).start_array();
                for item_1280 in value_1278 {
                    {
                        array_1279.value().string(item_1280.as_str());
                    }
                }
                array_1279.finish();
            }
        }
        object_1276.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_maintenance_window_step_functions_parameters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MaintenanceWindowStepFunctionsParameters,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1281) = &input.input {
        object.key("Input").string(var_1281.as_str());
    }
    if let Some(var_1282) = &input.name {
        object.key("Name").string(var_1282.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_maintenance_window_lambda_parameters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MaintenanceWindowLambdaParameters,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1283) = &input.client_context {
        object.key("ClientContext").string(var_1283.as_str());
    }
    if let Some(var_1284) = &input.qualifier {
        object.key("Qualifier").string(var_1284.as_str());
    }
    if let Some(var_1285) = &input.payload {
        object
            .key("Payload")
            .string_unchecked(&aws_smithy_types::base64::encode(var_1285));
    }
    Ok(())
}

pub fn serialize_structure_crate_model_document_review_comment_source(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DocumentReviewCommentSource,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1286) = &input.r#type {
        object.key("Type").string(var_1286.as_str());
    }
    if let Some(var_1287) = &input.content {
        object.key("Content").string(var_1287.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_resource_data_sync_organizational_unit(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ResourceDataSyncOrganizationalUnit,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1288) = &input.organizational_unit_id {
        object.key("OrganizationalUnitId").string(var_1288.as_str());
    }
    Ok(())
}
