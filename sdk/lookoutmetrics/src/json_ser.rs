// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_activate_anomaly_detector_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ActivateAnomalyDetectorInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1) = &input.anomaly_detector_arn {
        object.key("AnomalyDetectorArn").string(var_1.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_back_test_anomaly_detector_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BackTestAnomalyDetectorInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2) = &input.anomaly_detector_arn {
        object.key("AnomalyDetectorArn").string(var_2.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_alert_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateAlertInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3) = &input.action {
        let mut object_4 = object.key("Action").start_object();
        crate::json_ser::serialize_structure_crate_model_action(&mut object_4, var_3)?;
        object_4.finish();
    }
    if let Some(var_5) = &input.alert_description {
        object.key("AlertDescription").string(var_5.as_str());
    }
    if let Some(var_6) = &input.alert_name {
        object.key("AlertName").string(var_6.as_str());
    }
    {
        object.key("AlertSensitivityThreshold").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.alert_sensitivity_threshold).into()),
        );
    }
    if let Some(var_7) = &input.anomaly_detector_arn {
        object.key("AnomalyDetectorArn").string(var_7.as_str());
    }
    if let Some(var_8) = &input.tags {
        let mut object_9 = object.key("Tags").start_object();
        for (key_10, value_11) in var_8 {
            {
                object_9.key(key_10).string(value_11.as_str());
            }
        }
        object_9.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_anomaly_detector_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateAnomalyDetectorInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_12) = &input.anomaly_detector_config {
        let mut object_13 = object.key("AnomalyDetectorConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_anomaly_detector_config(
            &mut object_13,
            var_12,
        )?;
        object_13.finish();
    }
    if let Some(var_14) = &input.anomaly_detector_description {
        object
            .key("AnomalyDetectorDescription")
            .string(var_14.as_str());
    }
    if let Some(var_15) = &input.anomaly_detector_name {
        object.key("AnomalyDetectorName").string(var_15.as_str());
    }
    if let Some(var_16) = &input.kms_key_arn {
        object.key("KmsKeyArn").string(var_16.as_str());
    }
    if let Some(var_17) = &input.tags {
        let mut object_18 = object.key("Tags").start_object();
        for (key_19, value_20) in var_17 {
            {
                object_18.key(key_19).string(value_20.as_str());
            }
        }
        object_18.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_metric_set_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateMetricSetInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_21) = &input.anomaly_detector_arn {
        object.key("AnomalyDetectorArn").string(var_21.as_str());
    }
    if let Some(var_22) = &input.dimension_list {
        let mut array_23 = object.key("DimensionList").start_array();
        for item_24 in var_22 {
            {
                array_23.value().string(item_24.as_str());
            }
        }
        array_23.finish();
    }
    if let Some(var_25) = &input.metric_list {
        let mut array_26 = object.key("MetricList").start_array();
        for item_27 in var_25 {
            {
                let mut object_28 = array_26.value().start_object();
                crate::json_ser::serialize_structure_crate_model_metric(&mut object_28, item_27)?;
                object_28.finish();
            }
        }
        array_26.finish();
    }
    if let Some(var_29) = &input.metric_set_description {
        object.key("MetricSetDescription").string(var_29.as_str());
    }
    if let Some(var_30) = &input.metric_set_frequency {
        object.key("MetricSetFrequency").string(var_30.as_str());
    }
    if let Some(var_31) = &input.metric_set_name {
        object.key("MetricSetName").string(var_31.as_str());
    }
    if let Some(var_32) = &input.metric_source {
        let mut object_33 = object.key("MetricSource").start_object();
        crate::json_ser::serialize_structure_crate_model_metric_source(&mut object_33, var_32)?;
        object_33.finish();
    }
    if let Some(var_34) = &input.offset {
        object.key("Offset").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_34).into()),
        );
    }
    if let Some(var_35) = &input.tags {
        let mut object_36 = object.key("Tags").start_object();
        for (key_37, value_38) in var_35 {
            {
                object_36.key(key_37).string(value_38.as_str());
            }
        }
        object_36.finish();
    }
    if let Some(var_39) = &input.timestamp_column {
        let mut object_40 = object.key("TimestampColumn").start_object();
        crate::json_ser::serialize_structure_crate_model_timestamp_column(&mut object_40, var_39)?;
        object_40.finish();
    }
    if let Some(var_41) = &input.timezone {
        object.key("Timezone").string(var_41.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_deactivate_anomaly_detector_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeactivateAnomalyDetectorInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_42) = &input.anomaly_detector_arn {
        object.key("AnomalyDetectorArn").string(var_42.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_alert_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteAlertInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_43) = &input.alert_arn {
        object.key("AlertArn").string(var_43.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_anomaly_detector_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteAnomalyDetectorInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_44) = &input.anomaly_detector_arn {
        object.key("AnomalyDetectorArn").string(var_44.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_alert_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeAlertInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_45) = &input.alert_arn {
        object.key("AlertArn").string(var_45.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_anomaly_detection_executions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeAnomalyDetectionExecutionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_46) = &input.anomaly_detector_arn {
        object.key("AnomalyDetectorArn").string(var_46.as_str());
    }
    if let Some(var_47) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_47).into()),
        );
    }
    if let Some(var_48) = &input.next_token {
        object.key("NextToken").string(var_48.as_str());
    }
    if let Some(var_49) = &input.timestamp {
        object.key("Timestamp").string(var_49.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_anomaly_detector_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeAnomalyDetectorInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_50) = &input.anomaly_detector_arn {
        object.key("AnomalyDetectorArn").string(var_50.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_metric_set_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeMetricSetInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_51) = &input.metric_set_arn {
        object.key("MetricSetArn").string(var_51.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_detect_metric_set_config_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DetectMetricSetConfigInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_52) = &input.anomaly_detector_arn {
        object.key("AnomalyDetectorArn").string(var_52.as_str());
    }
    if let Some(var_53) = &input.auto_detection_metric_source {
        let mut object_54 = object.key("AutoDetectionMetricSource").start_object();
        crate::json_ser::serialize_structure_crate_model_auto_detection_metric_source(
            &mut object_54,
            var_53,
        )?;
        object_54.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_anomaly_group_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetAnomalyGroupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_55) = &input.anomaly_detector_arn {
        object.key("AnomalyDetectorArn").string(var_55.as_str());
    }
    if let Some(var_56) = &input.anomaly_group_id {
        object.key("AnomalyGroupId").string(var_56.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_feedback_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetFeedbackInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_57) = &input.anomaly_detector_arn {
        object.key("AnomalyDetectorArn").string(var_57.as_str());
    }
    if let Some(var_58) = &input.anomaly_group_time_series_feedback {
        let mut object_59 = object.key("AnomalyGroupTimeSeriesFeedback").start_object();
        crate::json_ser::serialize_structure_crate_model_anomaly_group_time_series(
            &mut object_59,
            var_58,
        )?;
        object_59.finish();
    }
    if let Some(var_60) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_60).into()),
        );
    }
    if let Some(var_61) = &input.next_token {
        object.key("NextToken").string(var_61.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_sample_data_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetSampleDataInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_62) = &input.s3_source_config {
        let mut object_63 = object.key("S3SourceConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_sample_data_s3_source_config(
            &mut object_63,
            var_62,
        )?;
        object_63.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_alerts_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListAlertsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_64) = &input.anomaly_detector_arn {
        object.key("AnomalyDetectorArn").string(var_64.as_str());
    }
    if let Some(var_65) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_65).into()),
        );
    }
    if let Some(var_66) = &input.next_token {
        object.key("NextToken").string(var_66.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_anomaly_detectors_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListAnomalyDetectorsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_67) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_67).into()),
        );
    }
    if let Some(var_68) = &input.next_token {
        object.key("NextToken").string(var_68.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_anomaly_group_related_metrics_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListAnomalyGroupRelatedMetricsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_69) = &input.anomaly_detector_arn {
        object.key("AnomalyDetectorArn").string(var_69.as_str());
    }
    if let Some(var_70) = &input.anomaly_group_id {
        object.key("AnomalyGroupId").string(var_70.as_str());
    }
    if let Some(var_71) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_71).into()),
        );
    }
    if let Some(var_72) = &input.next_token {
        object.key("NextToken").string(var_72.as_str());
    }
    if let Some(var_73) = &input.relationship_type_filter {
        object.key("RelationshipTypeFilter").string(var_73.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_anomaly_group_summaries_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListAnomalyGroupSummariesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_74) = &input.anomaly_detector_arn {
        object.key("AnomalyDetectorArn").string(var_74.as_str());
    }
    if let Some(var_75) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_75).into()),
        );
    }
    if let Some(var_76) = &input.next_token {
        object.key("NextToken").string(var_76.as_str());
    }
    {
        object.key("SensitivityThreshold").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.sensitivity_threshold).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_anomaly_group_time_series_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListAnomalyGroupTimeSeriesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_77) = &input.anomaly_detector_arn {
        object.key("AnomalyDetectorArn").string(var_77.as_str());
    }
    if let Some(var_78) = &input.anomaly_group_id {
        object.key("AnomalyGroupId").string(var_78.as_str());
    }
    if let Some(var_79) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_79).into()),
        );
    }
    if let Some(var_80) = &input.metric_name {
        object.key("MetricName").string(var_80.as_str());
    }
    if let Some(var_81) = &input.next_token {
        object.key("NextToken").string(var_81.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_metric_sets_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListMetricSetsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_82) = &input.anomaly_detector_arn {
        object.key("AnomalyDetectorArn").string(var_82.as_str());
    }
    if let Some(var_83) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_83).into()),
        );
    }
    if let Some(var_84) = &input.next_token {
        object.key("NextToken").string(var_84.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_feedback_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutFeedbackInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_85) = &input.anomaly_detector_arn {
        object.key("AnomalyDetectorArn").string(var_85.as_str());
    }
    if let Some(var_86) = &input.anomaly_group_time_series_feedback {
        let mut object_87 = object.key("AnomalyGroupTimeSeriesFeedback").start_object();
        crate::json_ser::serialize_structure_crate_model_anomaly_group_time_series_feedback(
            &mut object_87,
            var_86,
        )?;
        object_87.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_tag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_88) = &input.tags {
        let mut object_89 = object.key("tags").start_object();
        for (key_90, value_91) in var_88 {
            {
                object_89.key(key_90).string(value_91.as_str());
            }
        }
        object_89.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_anomaly_detector_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateAnomalyDetectorInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_92) = &input.anomaly_detector_arn {
        object.key("AnomalyDetectorArn").string(var_92.as_str());
    }
    if let Some(var_93) = &input.anomaly_detector_config {
        let mut object_94 = object.key("AnomalyDetectorConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_anomaly_detector_config(
            &mut object_94,
            var_93,
        )?;
        object_94.finish();
    }
    if let Some(var_95) = &input.anomaly_detector_description {
        object
            .key("AnomalyDetectorDescription")
            .string(var_95.as_str());
    }
    if let Some(var_96) = &input.kms_key_arn {
        object.key("KmsKeyArn").string(var_96.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_metric_set_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateMetricSetInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_97) = &input.dimension_list {
        let mut array_98 = object.key("DimensionList").start_array();
        for item_99 in var_97 {
            {
                array_98.value().string(item_99.as_str());
            }
        }
        array_98.finish();
    }
    if let Some(var_100) = &input.metric_list {
        let mut array_101 = object.key("MetricList").start_array();
        for item_102 in var_100 {
            {
                let mut object_103 = array_101.value().start_object();
                crate::json_ser::serialize_structure_crate_model_metric(&mut object_103, item_102)?;
                object_103.finish();
            }
        }
        array_101.finish();
    }
    if let Some(var_104) = &input.metric_set_arn {
        object.key("MetricSetArn").string(var_104.as_str());
    }
    if let Some(var_105) = &input.metric_set_description {
        object.key("MetricSetDescription").string(var_105.as_str());
    }
    if let Some(var_106) = &input.metric_set_frequency {
        object.key("MetricSetFrequency").string(var_106.as_str());
    }
    if let Some(var_107) = &input.metric_source {
        let mut object_108 = object.key("MetricSource").start_object();
        crate::json_ser::serialize_structure_crate_model_metric_source(&mut object_108, var_107)?;
        object_108.finish();
    }
    if let Some(var_109) = &input.offset {
        object.key("Offset").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_109).into()),
        );
    }
    if let Some(var_110) = &input.timestamp_column {
        let mut object_111 = object.key("TimestampColumn").start_object();
        crate::json_ser::serialize_structure_crate_model_timestamp_column(
            &mut object_111,
            var_110,
        )?;
        object_111.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_action(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Action,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_112) = &input.sns_configuration {
        let mut object_113 = object.key("SNSConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_sns_configuration(
            &mut object_113,
            var_112,
        )?;
        object_113.finish();
    }
    if let Some(var_114) = &input.lambda_configuration {
        let mut object_115 = object.key("LambdaConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_lambda_configuration(
            &mut object_115,
            var_114,
        )?;
        object_115.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_anomaly_detector_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AnomalyDetectorConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_116) = &input.anomaly_detector_frequency {
        object
            .key("AnomalyDetectorFrequency")
            .string(var_116.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_metric(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Metric,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_117) = &input.metric_name {
        object.key("MetricName").string(var_117.as_str());
    }
    if let Some(var_118) = &input.aggregation_function {
        object.key("AggregationFunction").string(var_118.as_str());
    }
    if let Some(var_119) = &input.namespace {
        object.key("Namespace").string(var_119.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_metric_source(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MetricSource,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_120) = &input.s3_source_config {
        let mut object_121 = object.key("S3SourceConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_source_config(
            &mut object_121,
            var_120,
        )?;
        object_121.finish();
    }
    if let Some(var_122) = &input.app_flow_config {
        let mut object_123 = object.key("AppFlowConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_app_flow_config(&mut object_123, var_122)?;
        object_123.finish();
    }
    if let Some(var_124) = &input.cloud_watch_config {
        let mut object_125 = object.key("CloudWatchConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_cloud_watch_config(
            &mut object_125,
            var_124,
        )?;
        object_125.finish();
    }
    if let Some(var_126) = &input.rds_source_config {
        let mut object_127 = object.key("RDSSourceConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_rds_source_config(
            &mut object_127,
            var_126,
        )?;
        object_127.finish();
    }
    if let Some(var_128) = &input.redshift_source_config {
        let mut object_129 = object.key("RedshiftSourceConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_redshift_source_config(
            &mut object_129,
            var_128,
        )?;
        object_129.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_timestamp_column(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TimestampColumn,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_130) = &input.column_name {
        object.key("ColumnName").string(var_130.as_str());
    }
    if let Some(var_131) = &input.column_format {
        object.key("ColumnFormat").string(var_131.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_auto_detection_metric_source(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AutoDetectionMetricSource,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_132) = &input.s3_source_config {
        let mut object_133 = object.key("S3SourceConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_auto_detection_s3_source_config(
            &mut object_133,
            var_132,
        )?;
        object_133.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_anomaly_group_time_series(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AnomalyGroupTimeSeries,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_134) = &input.anomaly_group_id {
        object.key("AnomalyGroupId").string(var_134.as_str());
    }
    if let Some(var_135) = &input.time_series_id {
        object.key("TimeSeriesId").string(var_135.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_sample_data_s3_source_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SampleDataS3SourceConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_136) = &input.role_arn {
        object.key("RoleArn").string(var_136.as_str());
    }
    if let Some(var_137) = &input.templated_path_list {
        let mut array_138 = object.key("TemplatedPathList").start_array();
        for item_139 in var_137 {
            {
                array_138.value().string(item_139.as_str());
            }
        }
        array_138.finish();
    }
    if let Some(var_140) = &input.historical_data_path_list {
        let mut array_141 = object.key("HistoricalDataPathList").start_array();
        for item_142 in var_140 {
            {
                array_141.value().string(item_142.as_str());
            }
        }
        array_141.finish();
    }
    if let Some(var_143) = &input.file_format_descriptor {
        let mut object_144 = object.key("FileFormatDescriptor").start_object();
        crate::json_ser::serialize_structure_crate_model_file_format_descriptor(
            &mut object_144,
            var_143,
        )?;
        object_144.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_anomaly_group_time_series_feedback(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AnomalyGroupTimeSeriesFeedback,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_145) = &input.anomaly_group_id {
        object.key("AnomalyGroupId").string(var_145.as_str());
    }
    if let Some(var_146) = &input.time_series_id {
        object.key("TimeSeriesId").string(var_146.as_str());
    }
    if let Some(var_147) = &input.is_anomaly {
        object.key("IsAnomaly").boolean(*var_147);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_sns_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SnsConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_148) = &input.role_arn {
        object.key("RoleArn").string(var_148.as_str());
    }
    if let Some(var_149) = &input.sns_topic_arn {
        object.key("SnsTopicArn").string(var_149.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_lambda_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LambdaConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_150) = &input.role_arn {
        object.key("RoleArn").string(var_150.as_str());
    }
    if let Some(var_151) = &input.lambda_arn {
        object.key("LambdaArn").string(var_151.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_source_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3SourceConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_152) = &input.role_arn {
        object.key("RoleArn").string(var_152.as_str());
    }
    if let Some(var_153) = &input.templated_path_list {
        let mut array_154 = object.key("TemplatedPathList").start_array();
        for item_155 in var_153 {
            {
                array_154.value().string(item_155.as_str());
            }
        }
        array_154.finish();
    }
    if let Some(var_156) = &input.historical_data_path_list {
        let mut array_157 = object.key("HistoricalDataPathList").start_array();
        for item_158 in var_156 {
            {
                array_157.value().string(item_158.as_str());
            }
        }
        array_157.finish();
    }
    if let Some(var_159) = &input.file_format_descriptor {
        let mut object_160 = object.key("FileFormatDescriptor").start_object();
        crate::json_ser::serialize_structure_crate_model_file_format_descriptor(
            &mut object_160,
            var_159,
        )?;
        object_160.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_app_flow_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AppFlowConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_161) = &input.role_arn {
        object.key("RoleArn").string(var_161.as_str());
    }
    if let Some(var_162) = &input.flow_name {
        object.key("FlowName").string(var_162.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_cloud_watch_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CloudWatchConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_163) = &input.role_arn {
        object.key("RoleArn").string(var_163.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_rds_source_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RdsSourceConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_164) = &input.db_instance_identifier {
        object.key("DBInstanceIdentifier").string(var_164.as_str());
    }
    if let Some(var_165) = &input.database_host {
        object.key("DatabaseHost").string(var_165.as_str());
    }
    if let Some(var_166) = &input.database_port {
        object.key("DatabasePort").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_166).into()),
        );
    }
    if let Some(var_167) = &input.secret_manager_arn {
        object.key("SecretManagerArn").string(var_167.as_str());
    }
    if let Some(var_168) = &input.database_name {
        object.key("DatabaseName").string(var_168.as_str());
    }
    if let Some(var_169) = &input.table_name {
        object.key("TableName").string(var_169.as_str());
    }
    if let Some(var_170) = &input.role_arn {
        object.key("RoleArn").string(var_170.as_str());
    }
    if let Some(var_171) = &input.vpc_configuration {
        let mut object_172 = object.key("VpcConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_vpc_configuration(
            &mut object_172,
            var_171,
        )?;
        object_172.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_redshift_source_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RedshiftSourceConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_173) = &input.cluster_identifier {
        object.key("ClusterIdentifier").string(var_173.as_str());
    }
    if let Some(var_174) = &input.database_host {
        object.key("DatabaseHost").string(var_174.as_str());
    }
    if let Some(var_175) = &input.database_port {
        object.key("DatabasePort").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_175).into()),
        );
    }
    if let Some(var_176) = &input.secret_manager_arn {
        object.key("SecretManagerArn").string(var_176.as_str());
    }
    if let Some(var_177) = &input.database_name {
        object.key("DatabaseName").string(var_177.as_str());
    }
    if let Some(var_178) = &input.table_name {
        object.key("TableName").string(var_178.as_str());
    }
    if let Some(var_179) = &input.role_arn {
        object.key("RoleArn").string(var_179.as_str());
    }
    if let Some(var_180) = &input.vpc_configuration {
        let mut object_181 = object.key("VpcConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_vpc_configuration(
            &mut object_181,
            var_180,
        )?;
        object_181.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_auto_detection_s3_source_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AutoDetectionS3SourceConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_182) = &input.templated_path_list {
        let mut array_183 = object.key("TemplatedPathList").start_array();
        for item_184 in var_182 {
            {
                array_183.value().string(item_184.as_str());
            }
        }
        array_183.finish();
    }
    if let Some(var_185) = &input.historical_data_path_list {
        let mut array_186 = object.key("HistoricalDataPathList").start_array();
        for item_187 in var_185 {
            {
                array_186.value().string(item_187.as_str());
            }
        }
        array_186.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_file_format_descriptor(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FileFormatDescriptor,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_188) = &input.csv_format_descriptor {
        let mut object_189 = object.key("CsvFormatDescriptor").start_object();
        crate::json_ser::serialize_structure_crate_model_csv_format_descriptor(
            &mut object_189,
            var_188,
        )?;
        object_189.finish();
    }
    if let Some(var_190) = &input.json_format_descriptor {
        let mut object_191 = object.key("JsonFormatDescriptor").start_object();
        crate::json_ser::serialize_structure_crate_model_json_format_descriptor(
            &mut object_191,
            var_190,
        )?;
        object_191.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_vpc_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VpcConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_192) = &input.subnet_id_list {
        let mut array_193 = object.key("SubnetIdList").start_array();
        for item_194 in var_192 {
            {
                array_193.value().string(item_194.as_str());
            }
        }
        array_193.finish();
    }
    if let Some(var_195) = &input.security_group_id_list {
        let mut array_196 = object.key("SecurityGroupIdList").start_array();
        for item_197 in var_195 {
            {
                array_196.value().string(item_197.as_str());
            }
        }
        array_196.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_csv_format_descriptor(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CsvFormatDescriptor,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_198) = &input.file_compression {
        object.key("FileCompression").string(var_198.as_str());
    }
    if let Some(var_199) = &input.charset {
        object.key("Charset").string(var_199.as_str());
    }
    if let Some(var_200) = &input.contains_header {
        object.key("ContainsHeader").boolean(*var_200);
    }
    if let Some(var_201) = &input.delimiter {
        object.key("Delimiter").string(var_201.as_str());
    }
    if let Some(var_202) = &input.header_list {
        let mut array_203 = object.key("HeaderList").start_array();
        for item_204 in var_202 {
            {
                array_203.value().string(item_204.as_str());
            }
        }
        array_203.finish();
    }
    if let Some(var_205) = &input.quote_symbol {
        object.key("QuoteSymbol").string(var_205.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_json_format_descriptor(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::JsonFormatDescriptor,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_206) = &input.file_compression {
        object.key("FileCompression").string(var_206.as_str());
    }
    if let Some(var_207) = &input.charset {
        object.key("Charset").string(var_207.as_str());
    }
    Ok(())
}
