// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_operation_crate_operation_accept_reserved_instances_exchange_quote(
    input: &crate::input::AcceptReservedInstancesExchangeQuoteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "AcceptReservedInstancesExchangeQuote",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("DryRun");
    if let Some(var_2) = &input.dry_run {
        scope_1.boolean(*var_2);
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("ReservedInstanceId");
    if let Some(var_4) = &input.reserved_instance_ids {
        let mut list_6 = scope_3.start_list(true, Some("ReservedInstanceId"));
        for item_5 in var_4 {
            #[allow(unused_mut)]
            let mut entry_7 = list_6.entry();
            entry_7.string(item_5);
        }
        list_6.finish();
    }
    #[allow(unused_mut)]
    let mut scope_8 = writer.prefix("TargetConfiguration");
    if let Some(var_9) = &input.target_configurations {
        let mut list_11 = scope_8.start_list(true, Some("TargetConfigurationRequest"));
        for item_10 in var_9 {
            #[allow(unused_mut)]
            let mut entry_12 = list_11.entry();
            crate::query_ser::serialize_structure_crate_model_target_configuration_request(
                entry_12, item_10,
            )?;
        }
        list_11.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_accept_transit_gateway_multicast_domain_associations(
    input: &crate::input::AcceptTransitGatewayMulticastDomainAssociationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "AcceptTransitGatewayMulticastDomainAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_13 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_14) = &input.transit_gateway_multicast_domain_id {
        scope_13.string(var_14);
    }
    #[allow(unused_mut)]
    let mut scope_15 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_16) = &input.transit_gateway_attachment_id {
        scope_15.string(var_16);
    }
    #[allow(unused_mut)]
    let mut scope_17 = writer.prefix("SubnetIds");
    if let Some(var_18) = &input.subnet_ids {
        let mut list_20 = scope_17.start_list(true, Some("item"));
        for item_19 in var_18 {
            #[allow(unused_mut)]
            let mut entry_21 = list_20.entry();
            entry_21.string(item_19);
        }
        list_20.finish();
    }
    #[allow(unused_mut)]
    let mut scope_22 = writer.prefix("DryRun");
    if let Some(var_23) = &input.dry_run {
        scope_22.boolean(*var_23);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_accept_transit_gateway_peering_attachment(
    input: &crate::input::AcceptTransitGatewayPeeringAttachmentInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "AcceptTransitGatewayPeeringAttachment",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_24 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_25) = &input.transit_gateway_attachment_id {
        scope_24.string(var_25);
    }
    #[allow(unused_mut)]
    let mut scope_26 = writer.prefix("DryRun");
    if let Some(var_27) = &input.dry_run {
        scope_26.boolean(*var_27);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_accept_transit_gateway_vpc_attachment(
    input: &crate::input::AcceptTransitGatewayVpcAttachmentInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "AcceptTransitGatewayVpcAttachment",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_28 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_29) = &input.transit_gateway_attachment_id {
        scope_28.string(var_29);
    }
    #[allow(unused_mut)]
    let mut scope_30 = writer.prefix("DryRun");
    if let Some(var_31) = &input.dry_run {
        scope_30.boolean(*var_31);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_accept_vpc_endpoint_connections(
    input: &crate::input::AcceptVpcEndpointConnectionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AcceptVpcEndpointConnections", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_32 = writer.prefix("DryRun");
    if let Some(var_33) = &input.dry_run {
        scope_32.boolean(*var_33);
    }
    #[allow(unused_mut)]
    let mut scope_34 = writer.prefix("ServiceId");
    if let Some(var_35) = &input.service_id {
        scope_34.string(var_35);
    }
    #[allow(unused_mut)]
    let mut scope_36 = writer.prefix("VpcEndpointId");
    if let Some(var_37) = &input.vpc_endpoint_ids {
        let mut list_39 = scope_36.start_list(true, Some("item"));
        for item_38 in var_37 {
            #[allow(unused_mut)]
            let mut entry_40 = list_39.entry();
            entry_40.string(item_38);
        }
        list_39.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_accept_vpc_peering_connection(
    input: &crate::input::AcceptVpcPeeringConnectionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AcceptVpcPeeringConnection", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_41 = writer.prefix("DryRun");
    if let Some(var_42) = &input.dry_run {
        scope_41.boolean(*var_42);
    }
    #[allow(unused_mut)]
    let mut scope_43 = writer.prefix("VpcPeeringConnectionId");
    if let Some(var_44) = &input.vpc_peering_connection_id {
        scope_43.string(var_44);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_advertise_byoip_cidr(
    input: &crate::input::AdvertiseByoipCidrInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AdvertiseByoipCidr", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_45 = writer.prefix("Cidr");
    if let Some(var_46) = &input.cidr {
        scope_45.string(var_46);
    }
    #[allow(unused_mut)]
    let mut scope_47 = writer.prefix("DryRun");
    if let Some(var_48) = &input.dry_run {
        scope_47.boolean(*var_48);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_allocate_address(
    input: &crate::input::AllocateAddressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AllocateAddress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_49 = writer.prefix("Domain");
    if let Some(var_50) = &input.domain {
        scope_49.string(var_50.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_51 = writer.prefix("Address");
    if let Some(var_52) = &input.address {
        scope_51.string(var_52);
    }
    #[allow(unused_mut)]
    let mut scope_53 = writer.prefix("PublicIpv4Pool");
    if let Some(var_54) = &input.public_ipv4_pool {
        scope_53.string(var_54);
    }
    #[allow(unused_mut)]
    let mut scope_55 = writer.prefix("NetworkBorderGroup");
    if let Some(var_56) = &input.network_border_group {
        scope_55.string(var_56);
    }
    #[allow(unused_mut)]
    let mut scope_57 = writer.prefix("CustomerOwnedIpv4Pool");
    if let Some(var_58) = &input.customer_owned_ipv4_pool {
        scope_57.string(var_58);
    }
    #[allow(unused_mut)]
    let mut scope_59 = writer.prefix("DryRun");
    if let Some(var_60) = &input.dry_run {
        scope_59.boolean(*var_60);
    }
    #[allow(unused_mut)]
    let mut scope_61 = writer.prefix("TagSpecification");
    if let Some(var_62) = &input.tag_specifications {
        let mut list_64 = scope_61.start_list(true, Some("item"));
        for item_63 in var_62 {
            #[allow(unused_mut)]
            let mut entry_65 = list_64.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_65, item_63)?;
        }
        list_64.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_allocate_hosts(
    input: &crate::input::AllocateHostsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AllocateHosts", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_66 = writer.prefix("AutoPlacement");
    if let Some(var_67) = &input.auto_placement {
        scope_66.string(var_67.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_68 = writer.prefix("AvailabilityZone");
    if let Some(var_69) = &input.availability_zone {
        scope_68.string(var_69);
    }
    #[allow(unused_mut)]
    let mut scope_70 = writer.prefix("ClientToken");
    if let Some(var_71) = &input.client_token {
        scope_70.string(var_71);
    }
    #[allow(unused_mut)]
    let mut scope_72 = writer.prefix("InstanceType");
    if let Some(var_73) = &input.instance_type {
        scope_72.string(var_73);
    }
    #[allow(unused_mut)]
    let mut scope_74 = writer.prefix("InstanceFamily");
    if let Some(var_75) = &input.instance_family {
        scope_74.string(var_75);
    }
    #[allow(unused_mut)]
    let mut scope_76 = writer.prefix("Quantity");
    if let Some(var_77) = &input.quantity {
        scope_76.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_77).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_78 = writer.prefix("TagSpecification");
    if let Some(var_79) = &input.tag_specifications {
        let mut list_81 = scope_78.start_list(true, Some("item"));
        for item_80 in var_79 {
            #[allow(unused_mut)]
            let mut entry_82 = list_81.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_82, item_80)?;
        }
        list_81.finish();
    }
    #[allow(unused_mut)]
    let mut scope_83 = writer.prefix("HostRecovery");
    if let Some(var_84) = &input.host_recovery {
        scope_83.string(var_84.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_allocate_ipam_pool_cidr(
    input: &crate::input::AllocateIpamPoolCidrInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AllocateIpamPoolCidr", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_85 = writer.prefix("DryRun");
    if let Some(var_86) = &input.dry_run {
        scope_85.boolean(*var_86);
    }
    #[allow(unused_mut)]
    let mut scope_87 = writer.prefix("IpamPoolId");
    if let Some(var_88) = &input.ipam_pool_id {
        scope_87.string(var_88);
    }
    #[allow(unused_mut)]
    let mut scope_89 = writer.prefix("Cidr");
    if let Some(var_90) = &input.cidr {
        scope_89.string(var_90);
    }
    #[allow(unused_mut)]
    let mut scope_91 = writer.prefix("NetmaskLength");
    if let Some(var_92) = &input.netmask_length {
        scope_91.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_92).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_93 = writer.prefix("ClientToken");
    if let Some(var_94) = &input.client_token {
        scope_93.string(var_94);
    }
    #[allow(unused_mut)]
    let mut scope_95 = writer.prefix("Description");
    if let Some(var_96) = &input.description {
        scope_95.string(var_96);
    }
    #[allow(unused_mut)]
    let mut scope_97 = writer.prefix("PreviewNextCidr");
    if let Some(var_98) = &input.preview_next_cidr {
        scope_97.boolean(*var_98);
    }
    #[allow(unused_mut)]
    let mut scope_99 = writer.prefix("DisallowedCidr");
    if let Some(var_100) = &input.disallowed_cidrs {
        let mut list_102 = scope_99.start_list(true, Some("item"));
        for item_101 in var_100 {
            #[allow(unused_mut)]
            let mut entry_103 = list_102.entry();
            entry_103.string(item_101);
        }
        list_102.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_apply_security_groups_to_client_vpn_target_network(
    input: &crate::input::ApplySecurityGroupsToClientVpnTargetNetworkInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ApplySecurityGroupsToClientVpnTargetNetwork",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_104 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_105) = &input.client_vpn_endpoint_id {
        scope_104.string(var_105);
    }
    #[allow(unused_mut)]
    let mut scope_106 = writer.prefix("VpcId");
    if let Some(var_107) = &input.vpc_id {
        scope_106.string(var_107);
    }
    #[allow(unused_mut)]
    let mut scope_108 = writer.prefix("SecurityGroupId");
    if let Some(var_109) = &input.security_group_ids {
        let mut list_111 = scope_108.start_list(true, Some("item"));
        for item_110 in var_109 {
            #[allow(unused_mut)]
            let mut entry_112 = list_111.entry();
            entry_112.string(item_110);
        }
        list_111.finish();
    }
    #[allow(unused_mut)]
    let mut scope_113 = writer.prefix("DryRun");
    if let Some(var_114) = &input.dry_run {
        scope_113.boolean(*var_114);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_assign_ipv6_addresses(
    input: &crate::input::AssignIpv6AddressesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AssignIpv6Addresses", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_115 = writer.prefix("Ipv6AddressCount");
    if let Some(var_116) = &input.ipv6_address_count {
        scope_115.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_116).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_117 = writer.prefix("Ipv6Addresses");
    if let Some(var_118) = &input.ipv6_addresses {
        let mut list_120 = scope_117.start_list(true, Some("item"));
        for item_119 in var_118 {
            #[allow(unused_mut)]
            let mut entry_121 = list_120.entry();
            entry_121.string(item_119);
        }
        list_120.finish();
    }
    #[allow(unused_mut)]
    let mut scope_122 = writer.prefix("Ipv6PrefixCount");
    if let Some(var_123) = &input.ipv6_prefix_count {
        scope_122.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_123).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_124 = writer.prefix("Ipv6Prefix");
    if let Some(var_125) = &input.ipv6_prefixes {
        let mut list_127 = scope_124.start_list(true, Some("item"));
        for item_126 in var_125 {
            #[allow(unused_mut)]
            let mut entry_128 = list_127.entry();
            entry_128.string(item_126);
        }
        list_127.finish();
    }
    #[allow(unused_mut)]
    let mut scope_129 = writer.prefix("NetworkInterfaceId");
    if let Some(var_130) = &input.network_interface_id {
        scope_129.string(var_130);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_assign_private_ip_addresses(
    input: &crate::input::AssignPrivateIpAddressesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AssignPrivateIpAddresses", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_131 = writer.prefix("AllowReassignment");
    if let Some(var_132) = &input.allow_reassignment {
        scope_131.boolean(*var_132);
    }
    #[allow(unused_mut)]
    let mut scope_133 = writer.prefix("NetworkInterfaceId");
    if let Some(var_134) = &input.network_interface_id {
        scope_133.string(var_134);
    }
    #[allow(unused_mut)]
    let mut scope_135 = writer.prefix("PrivateIpAddress");
    if let Some(var_136) = &input.private_ip_addresses {
        let mut list_138 = scope_135.start_list(true, Some("PrivateIpAddress"));
        for item_137 in var_136 {
            #[allow(unused_mut)]
            let mut entry_139 = list_138.entry();
            entry_139.string(item_137);
        }
        list_138.finish();
    }
    #[allow(unused_mut)]
    let mut scope_140 = writer.prefix("SecondaryPrivateIpAddressCount");
    if let Some(var_141) = &input.secondary_private_ip_address_count {
        scope_140.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_141).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_142 = writer.prefix("Ipv4Prefix");
    if let Some(var_143) = &input.ipv4_prefixes {
        let mut list_145 = scope_142.start_list(true, Some("item"));
        for item_144 in var_143 {
            #[allow(unused_mut)]
            let mut entry_146 = list_145.entry();
            entry_146.string(item_144);
        }
        list_145.finish();
    }
    #[allow(unused_mut)]
    let mut scope_147 = writer.prefix("Ipv4PrefixCount");
    if let Some(var_148) = &input.ipv4_prefix_count {
        scope_147.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_148).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_address(
    input: &crate::input::AssociateAddressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AssociateAddress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_149 = writer.prefix("AllocationId");
    if let Some(var_150) = &input.allocation_id {
        scope_149.string(var_150);
    }
    #[allow(unused_mut)]
    let mut scope_151 = writer.prefix("InstanceId");
    if let Some(var_152) = &input.instance_id {
        scope_151.string(var_152);
    }
    #[allow(unused_mut)]
    let mut scope_153 = writer.prefix("PublicIp");
    if let Some(var_154) = &input.public_ip {
        scope_153.string(var_154);
    }
    #[allow(unused_mut)]
    let mut scope_155 = writer.prefix("AllowReassociation");
    if let Some(var_156) = &input.allow_reassociation {
        scope_155.boolean(*var_156);
    }
    #[allow(unused_mut)]
    let mut scope_157 = writer.prefix("DryRun");
    if let Some(var_158) = &input.dry_run {
        scope_157.boolean(*var_158);
    }
    #[allow(unused_mut)]
    let mut scope_159 = writer.prefix("NetworkInterfaceId");
    if let Some(var_160) = &input.network_interface_id {
        scope_159.string(var_160);
    }
    #[allow(unused_mut)]
    let mut scope_161 = writer.prefix("PrivateIpAddress");
    if let Some(var_162) = &input.private_ip_address {
        scope_161.string(var_162);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_client_vpn_target_network(
    input: &crate::input::AssociateClientVpnTargetNetworkInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "AssociateClientVpnTargetNetwork",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_163 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_164) = &input.client_vpn_endpoint_id {
        scope_163.string(var_164);
    }
    #[allow(unused_mut)]
    let mut scope_165 = writer.prefix("SubnetId");
    if let Some(var_166) = &input.subnet_id {
        scope_165.string(var_166);
    }
    #[allow(unused_mut)]
    let mut scope_167 = writer.prefix("ClientToken");
    if let Some(var_168) = &input.client_token {
        scope_167.string(var_168);
    }
    #[allow(unused_mut)]
    let mut scope_169 = writer.prefix("DryRun");
    if let Some(var_170) = &input.dry_run {
        scope_169.boolean(*var_170);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_dhcp_options(
    input: &crate::input::AssociateDhcpOptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AssociateDhcpOptions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_171 = writer.prefix("DhcpOptionsId");
    if let Some(var_172) = &input.dhcp_options_id {
        scope_171.string(var_172);
    }
    #[allow(unused_mut)]
    let mut scope_173 = writer.prefix("VpcId");
    if let Some(var_174) = &input.vpc_id {
        scope_173.string(var_174);
    }
    #[allow(unused_mut)]
    let mut scope_175 = writer.prefix("DryRun");
    if let Some(var_176) = &input.dry_run {
        scope_175.boolean(*var_176);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_enclave_certificate_iam_role(
    input: &crate::input::AssociateEnclaveCertificateIamRoleInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "AssociateEnclaveCertificateIamRole",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_177 = writer.prefix("CertificateArn");
    if let Some(var_178) = &input.certificate_arn {
        scope_177.string(var_178);
    }
    #[allow(unused_mut)]
    let mut scope_179 = writer.prefix("RoleArn");
    if let Some(var_180) = &input.role_arn {
        scope_179.string(var_180);
    }
    #[allow(unused_mut)]
    let mut scope_181 = writer.prefix("DryRun");
    if let Some(var_182) = &input.dry_run {
        scope_181.boolean(*var_182);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_iam_instance_profile(
    input: &crate::input::AssociateIamInstanceProfileInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AssociateIamInstanceProfile", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_183 = writer.prefix("IamInstanceProfile");
    if let Some(var_184) = &input.iam_instance_profile {
        crate::query_ser::serialize_structure_crate_model_iam_instance_profile_specification(
            scope_183, var_184,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_185 = writer.prefix("InstanceId");
    if let Some(var_186) = &input.instance_id {
        scope_185.string(var_186);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_instance_event_window(
    input: &crate::input::AssociateInstanceEventWindowInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AssociateInstanceEventWindow", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_187 = writer.prefix("DryRun");
    if let Some(var_188) = &input.dry_run {
        scope_187.boolean(*var_188);
    }
    #[allow(unused_mut)]
    let mut scope_189 = writer.prefix("InstanceEventWindowId");
    if let Some(var_190) = &input.instance_event_window_id {
        scope_189.string(var_190);
    }
    #[allow(unused_mut)]
    let mut scope_191 = writer.prefix("AssociationTarget");
    if let Some(var_192) = &input.association_target {
        crate::query_ser::serialize_structure_crate_model_instance_event_window_association_request(scope_191, var_192)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_route_table(
    input: &crate::input::AssociateRouteTableInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AssociateRouteTable", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_193 = writer.prefix("DryRun");
    if let Some(var_194) = &input.dry_run {
        scope_193.boolean(*var_194);
    }
    #[allow(unused_mut)]
    let mut scope_195 = writer.prefix("RouteTableId");
    if let Some(var_196) = &input.route_table_id {
        scope_195.string(var_196);
    }
    #[allow(unused_mut)]
    let mut scope_197 = writer.prefix("SubnetId");
    if let Some(var_198) = &input.subnet_id {
        scope_197.string(var_198);
    }
    #[allow(unused_mut)]
    let mut scope_199 = writer.prefix("GatewayId");
    if let Some(var_200) = &input.gateway_id {
        scope_199.string(var_200);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_subnet_cidr_block(
    input: &crate::input::AssociateSubnetCidrBlockInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AssociateSubnetCidrBlock", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_201 = writer.prefix("Ipv6CidrBlock");
    if let Some(var_202) = &input.ipv6_cidr_block {
        scope_201.string(var_202);
    }
    #[allow(unused_mut)]
    let mut scope_203 = writer.prefix("SubnetId");
    if let Some(var_204) = &input.subnet_id {
        scope_203.string(var_204);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_transit_gateway_multicast_domain(
    input: &crate::input::AssociateTransitGatewayMulticastDomainInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "AssociateTransitGatewayMulticastDomain",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_205 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_206) = &input.transit_gateway_multicast_domain_id {
        scope_205.string(var_206);
    }
    #[allow(unused_mut)]
    let mut scope_207 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_208) = &input.transit_gateway_attachment_id {
        scope_207.string(var_208);
    }
    #[allow(unused_mut)]
    let mut scope_209 = writer.prefix("SubnetIds");
    if let Some(var_210) = &input.subnet_ids {
        let mut list_212 = scope_209.start_list(true, Some("item"));
        for item_211 in var_210 {
            #[allow(unused_mut)]
            let mut entry_213 = list_212.entry();
            entry_213.string(item_211);
        }
        list_212.finish();
    }
    #[allow(unused_mut)]
    let mut scope_214 = writer.prefix("DryRun");
    if let Some(var_215) = &input.dry_run {
        scope_214.boolean(*var_215);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_transit_gateway_route_table(
    input: &crate::input::AssociateTransitGatewayRouteTableInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "AssociateTransitGatewayRouteTable",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_216 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_217) = &input.transit_gateway_route_table_id {
        scope_216.string(var_217);
    }
    #[allow(unused_mut)]
    let mut scope_218 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_219) = &input.transit_gateway_attachment_id {
        scope_218.string(var_219);
    }
    #[allow(unused_mut)]
    let mut scope_220 = writer.prefix("DryRun");
    if let Some(var_221) = &input.dry_run {
        scope_220.boolean(*var_221);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_trunk_interface(
    input: &crate::input::AssociateTrunkInterfaceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AssociateTrunkInterface", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_222 = writer.prefix("BranchInterfaceId");
    if let Some(var_223) = &input.branch_interface_id {
        scope_222.string(var_223);
    }
    #[allow(unused_mut)]
    let mut scope_224 = writer.prefix("TrunkInterfaceId");
    if let Some(var_225) = &input.trunk_interface_id {
        scope_224.string(var_225);
    }
    #[allow(unused_mut)]
    let mut scope_226 = writer.prefix("VlanId");
    if let Some(var_227) = &input.vlan_id {
        scope_226.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_227).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_228 = writer.prefix("GreKey");
    if let Some(var_229) = &input.gre_key {
        scope_228.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_229).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_230 = writer.prefix("ClientToken");
    if let Some(var_231) = &input.client_token {
        scope_230.string(var_231);
    }
    #[allow(unused_mut)]
    let mut scope_232 = writer.prefix("DryRun");
    if let Some(var_233) = &input.dry_run {
        scope_232.boolean(*var_233);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_vpc_cidr_block(
    input: &crate::input::AssociateVpcCidrBlockInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AssociateVpcCidrBlock", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_234 = writer.prefix("AmazonProvidedIpv6CidrBlock");
    if let Some(var_235) = &input.amazon_provided_ipv6_cidr_block {
        scope_234.boolean(*var_235);
    }
    #[allow(unused_mut)]
    let mut scope_236 = writer.prefix("CidrBlock");
    if let Some(var_237) = &input.cidr_block {
        scope_236.string(var_237);
    }
    #[allow(unused_mut)]
    let mut scope_238 = writer.prefix("VpcId");
    if let Some(var_239) = &input.vpc_id {
        scope_238.string(var_239);
    }
    #[allow(unused_mut)]
    let mut scope_240 = writer.prefix("Ipv6CidrBlockNetworkBorderGroup");
    if let Some(var_241) = &input.ipv6_cidr_block_network_border_group {
        scope_240.string(var_241);
    }
    #[allow(unused_mut)]
    let mut scope_242 = writer.prefix("Ipv6Pool");
    if let Some(var_243) = &input.ipv6_pool {
        scope_242.string(var_243);
    }
    #[allow(unused_mut)]
    let mut scope_244 = writer.prefix("Ipv6CidrBlock");
    if let Some(var_245) = &input.ipv6_cidr_block {
        scope_244.string(var_245);
    }
    #[allow(unused_mut)]
    let mut scope_246 = writer.prefix("Ipv4IpamPoolId");
    if let Some(var_247) = &input.ipv4_ipam_pool_id {
        scope_246.string(var_247);
    }
    #[allow(unused_mut)]
    let mut scope_248 = writer.prefix("Ipv4NetmaskLength");
    if let Some(var_249) = &input.ipv4_netmask_length {
        scope_248.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_249).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_250 = writer.prefix("Ipv6IpamPoolId");
    if let Some(var_251) = &input.ipv6_ipam_pool_id {
        scope_250.string(var_251);
    }
    #[allow(unused_mut)]
    let mut scope_252 = writer.prefix("Ipv6NetmaskLength");
    if let Some(var_253) = &input.ipv6_netmask_length {
        scope_252.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_253).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_attach_classic_link_vpc(
    input: &crate::input::AttachClassicLinkVpcInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AttachClassicLinkVpc", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_254 = writer.prefix("DryRun");
    if let Some(var_255) = &input.dry_run {
        scope_254.boolean(*var_255);
    }
    #[allow(unused_mut)]
    let mut scope_256 = writer.prefix("SecurityGroupId");
    if let Some(var_257) = &input.groups {
        let mut list_259 = scope_256.start_list(true, Some("groupId"));
        for item_258 in var_257 {
            #[allow(unused_mut)]
            let mut entry_260 = list_259.entry();
            entry_260.string(item_258);
        }
        list_259.finish();
    }
    #[allow(unused_mut)]
    let mut scope_261 = writer.prefix("InstanceId");
    if let Some(var_262) = &input.instance_id {
        scope_261.string(var_262);
    }
    #[allow(unused_mut)]
    let mut scope_263 = writer.prefix("VpcId");
    if let Some(var_264) = &input.vpc_id {
        scope_263.string(var_264);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_attach_internet_gateway(
    input: &crate::input::AttachInternetGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AttachInternetGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_265 = writer.prefix("DryRun");
    if let Some(var_266) = &input.dry_run {
        scope_265.boolean(*var_266);
    }
    #[allow(unused_mut)]
    let mut scope_267 = writer.prefix("InternetGatewayId");
    if let Some(var_268) = &input.internet_gateway_id {
        scope_267.string(var_268);
    }
    #[allow(unused_mut)]
    let mut scope_269 = writer.prefix("VpcId");
    if let Some(var_270) = &input.vpc_id {
        scope_269.string(var_270);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_attach_network_interface(
    input: &crate::input::AttachNetworkInterfaceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AttachNetworkInterface", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_271 = writer.prefix("DeviceIndex");
    if let Some(var_272) = &input.device_index {
        scope_271.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_272).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_273 = writer.prefix("DryRun");
    if let Some(var_274) = &input.dry_run {
        scope_273.boolean(*var_274);
    }
    #[allow(unused_mut)]
    let mut scope_275 = writer.prefix("InstanceId");
    if let Some(var_276) = &input.instance_id {
        scope_275.string(var_276);
    }
    #[allow(unused_mut)]
    let mut scope_277 = writer.prefix("NetworkInterfaceId");
    if let Some(var_278) = &input.network_interface_id {
        scope_277.string(var_278);
    }
    #[allow(unused_mut)]
    let mut scope_279 = writer.prefix("NetworkCardIndex");
    if let Some(var_280) = &input.network_card_index {
        scope_279.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_280).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_attach_volume(
    input: &crate::input::AttachVolumeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AttachVolume", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_281 = writer.prefix("Device");
    if let Some(var_282) = &input.device {
        scope_281.string(var_282);
    }
    #[allow(unused_mut)]
    let mut scope_283 = writer.prefix("InstanceId");
    if let Some(var_284) = &input.instance_id {
        scope_283.string(var_284);
    }
    #[allow(unused_mut)]
    let mut scope_285 = writer.prefix("VolumeId");
    if let Some(var_286) = &input.volume_id {
        scope_285.string(var_286);
    }
    #[allow(unused_mut)]
    let mut scope_287 = writer.prefix("DryRun");
    if let Some(var_288) = &input.dry_run {
        scope_287.boolean(*var_288);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_attach_vpn_gateway(
    input: &crate::input::AttachVpnGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AttachVpnGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_289 = writer.prefix("VpcId");
    if let Some(var_290) = &input.vpc_id {
        scope_289.string(var_290);
    }
    #[allow(unused_mut)]
    let mut scope_291 = writer.prefix("VpnGatewayId");
    if let Some(var_292) = &input.vpn_gateway_id {
        scope_291.string(var_292);
    }
    #[allow(unused_mut)]
    let mut scope_293 = writer.prefix("DryRun");
    if let Some(var_294) = &input.dry_run {
        scope_293.boolean(*var_294);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_authorize_client_vpn_ingress(
    input: &crate::input::AuthorizeClientVpnIngressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AuthorizeClientVpnIngress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_295 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_296) = &input.client_vpn_endpoint_id {
        scope_295.string(var_296);
    }
    #[allow(unused_mut)]
    let mut scope_297 = writer.prefix("TargetNetworkCidr");
    if let Some(var_298) = &input.target_network_cidr {
        scope_297.string(var_298);
    }
    #[allow(unused_mut)]
    let mut scope_299 = writer.prefix("AccessGroupId");
    if let Some(var_300) = &input.access_group_id {
        scope_299.string(var_300);
    }
    #[allow(unused_mut)]
    let mut scope_301 = writer.prefix("AuthorizeAllGroups");
    if let Some(var_302) = &input.authorize_all_groups {
        scope_301.boolean(*var_302);
    }
    #[allow(unused_mut)]
    let mut scope_303 = writer.prefix("Description");
    if let Some(var_304) = &input.description {
        scope_303.string(var_304);
    }
    #[allow(unused_mut)]
    let mut scope_305 = writer.prefix("ClientToken");
    if let Some(var_306) = &input.client_token {
        scope_305.string(var_306);
    }
    #[allow(unused_mut)]
    let mut scope_307 = writer.prefix("DryRun");
    if let Some(var_308) = &input.dry_run {
        scope_307.boolean(*var_308);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_authorize_security_group_egress(
    input: &crate::input::AuthorizeSecurityGroupEgressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AuthorizeSecurityGroupEgress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_309 = writer.prefix("DryRun");
    if let Some(var_310) = &input.dry_run {
        scope_309.boolean(*var_310);
    }
    #[allow(unused_mut)]
    let mut scope_311 = writer.prefix("GroupId");
    if let Some(var_312) = &input.group_id {
        scope_311.string(var_312);
    }
    #[allow(unused_mut)]
    let mut scope_313 = writer.prefix("IpPermissions");
    if let Some(var_314) = &input.ip_permissions {
        let mut list_316 = scope_313.start_list(true, Some("item"));
        for item_315 in var_314 {
            #[allow(unused_mut)]
            let mut entry_317 = list_316.entry();
            crate::query_ser::serialize_structure_crate_model_ip_permission(entry_317, item_315)?;
        }
        list_316.finish();
    }
    #[allow(unused_mut)]
    let mut scope_318 = writer.prefix("TagSpecification");
    if let Some(var_319) = &input.tag_specifications {
        let mut list_321 = scope_318.start_list(true, Some("item"));
        for item_320 in var_319 {
            #[allow(unused_mut)]
            let mut entry_322 = list_321.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_322, item_320,
            )?;
        }
        list_321.finish();
    }
    #[allow(unused_mut)]
    let mut scope_323 = writer.prefix("CidrIp");
    if let Some(var_324) = &input.cidr_ip {
        scope_323.string(var_324);
    }
    #[allow(unused_mut)]
    let mut scope_325 = writer.prefix("FromPort");
    if let Some(var_326) = &input.from_port {
        scope_325.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_326).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_327 = writer.prefix("IpProtocol");
    if let Some(var_328) = &input.ip_protocol {
        scope_327.string(var_328);
    }
    #[allow(unused_mut)]
    let mut scope_329 = writer.prefix("ToPort");
    if let Some(var_330) = &input.to_port {
        scope_329.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_330).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_331 = writer.prefix("SourceSecurityGroupName");
    if let Some(var_332) = &input.source_security_group_name {
        scope_331.string(var_332);
    }
    #[allow(unused_mut)]
    let mut scope_333 = writer.prefix("SourceSecurityGroupOwnerId");
    if let Some(var_334) = &input.source_security_group_owner_id {
        scope_333.string(var_334);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_authorize_security_group_ingress(
    input: &crate::input::AuthorizeSecurityGroupIngressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AuthorizeSecurityGroupIngress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_335 = writer.prefix("CidrIp");
    if let Some(var_336) = &input.cidr_ip {
        scope_335.string(var_336);
    }
    #[allow(unused_mut)]
    let mut scope_337 = writer.prefix("FromPort");
    if let Some(var_338) = &input.from_port {
        scope_337.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_338).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_339 = writer.prefix("GroupId");
    if let Some(var_340) = &input.group_id {
        scope_339.string(var_340);
    }
    #[allow(unused_mut)]
    let mut scope_341 = writer.prefix("GroupName");
    if let Some(var_342) = &input.group_name {
        scope_341.string(var_342);
    }
    #[allow(unused_mut)]
    let mut scope_343 = writer.prefix("IpPermissions");
    if let Some(var_344) = &input.ip_permissions {
        let mut list_346 = scope_343.start_list(true, Some("item"));
        for item_345 in var_344 {
            #[allow(unused_mut)]
            let mut entry_347 = list_346.entry();
            crate::query_ser::serialize_structure_crate_model_ip_permission(entry_347, item_345)?;
        }
        list_346.finish();
    }
    #[allow(unused_mut)]
    let mut scope_348 = writer.prefix("IpProtocol");
    if let Some(var_349) = &input.ip_protocol {
        scope_348.string(var_349);
    }
    #[allow(unused_mut)]
    let mut scope_350 = writer.prefix("SourceSecurityGroupName");
    if let Some(var_351) = &input.source_security_group_name {
        scope_350.string(var_351);
    }
    #[allow(unused_mut)]
    let mut scope_352 = writer.prefix("SourceSecurityGroupOwnerId");
    if let Some(var_353) = &input.source_security_group_owner_id {
        scope_352.string(var_353);
    }
    #[allow(unused_mut)]
    let mut scope_354 = writer.prefix("ToPort");
    if let Some(var_355) = &input.to_port {
        scope_354.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_355).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_356 = writer.prefix("DryRun");
    if let Some(var_357) = &input.dry_run {
        scope_356.boolean(*var_357);
    }
    #[allow(unused_mut)]
    let mut scope_358 = writer.prefix("TagSpecification");
    if let Some(var_359) = &input.tag_specifications {
        let mut list_361 = scope_358.start_list(true, Some("item"));
        for item_360 in var_359 {
            #[allow(unused_mut)]
            let mut entry_362 = list_361.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_362, item_360,
            )?;
        }
        list_361.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_bundle_instance(
    input: &crate::input::BundleInstanceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "BundleInstance", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_363 = writer.prefix("InstanceId");
    if let Some(var_364) = &input.instance_id {
        scope_363.string(var_364);
    }
    #[allow(unused_mut)]
    let mut scope_365 = writer.prefix("Storage");
    if let Some(var_366) = &input.storage {
        crate::query_ser::serialize_structure_crate_model_storage(scope_365, var_366)?;
    }
    #[allow(unused_mut)]
    let mut scope_367 = writer.prefix("DryRun");
    if let Some(var_368) = &input.dry_run {
        scope_367.boolean(*var_368);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_bundle_task(
    input: &crate::input::CancelBundleTaskInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CancelBundleTask", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_369 = writer.prefix("BundleId");
    if let Some(var_370) = &input.bundle_id {
        scope_369.string(var_370);
    }
    #[allow(unused_mut)]
    let mut scope_371 = writer.prefix("DryRun");
    if let Some(var_372) = &input.dry_run {
        scope_371.boolean(*var_372);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_capacity_reservation(
    input: &crate::input::CancelCapacityReservationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CancelCapacityReservation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_373 = writer.prefix("CapacityReservationId");
    if let Some(var_374) = &input.capacity_reservation_id {
        scope_373.string(var_374);
    }
    #[allow(unused_mut)]
    let mut scope_375 = writer.prefix("DryRun");
    if let Some(var_376) = &input.dry_run {
        scope_375.boolean(*var_376);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_capacity_reservation_fleets(
    input: &crate::input::CancelCapacityReservationFleetsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CancelCapacityReservationFleets",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_377 = writer.prefix("DryRun");
    if let Some(var_378) = &input.dry_run {
        scope_377.boolean(*var_378);
    }
    #[allow(unused_mut)]
    let mut scope_379 = writer.prefix("CapacityReservationFleetId");
    if let Some(var_380) = &input.capacity_reservation_fleet_ids {
        let mut list_382 = scope_379.start_list(true, Some("item"));
        for item_381 in var_380 {
            #[allow(unused_mut)]
            let mut entry_383 = list_382.entry();
            entry_383.string(item_381);
        }
        list_382.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_conversion_task(
    input: &crate::input::CancelConversionTaskInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CancelConversionTask", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_384 = writer.prefix("ConversionTaskId");
    if let Some(var_385) = &input.conversion_task_id {
        scope_384.string(var_385);
    }
    #[allow(unused_mut)]
    let mut scope_386 = writer.prefix("DryRun");
    if let Some(var_387) = &input.dry_run {
        scope_386.boolean(*var_387);
    }
    #[allow(unused_mut)]
    let mut scope_388 = writer.prefix("ReasonMessage");
    if let Some(var_389) = &input.reason_message {
        scope_388.string(var_389);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_export_task(
    input: &crate::input::CancelExportTaskInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CancelExportTask", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_390 = writer.prefix("ExportTaskId");
    if let Some(var_391) = &input.export_task_id {
        scope_390.string(var_391);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_import_task(
    input: &crate::input::CancelImportTaskInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CancelImportTask", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_392 = writer.prefix("CancelReason");
    if let Some(var_393) = &input.cancel_reason {
        scope_392.string(var_393);
    }
    #[allow(unused_mut)]
    let mut scope_394 = writer.prefix("DryRun");
    if let Some(var_395) = &input.dry_run {
        scope_394.boolean(*var_395);
    }
    #[allow(unused_mut)]
    let mut scope_396 = writer.prefix("ImportTaskId");
    if let Some(var_397) = &input.import_task_id {
        scope_396.string(var_397);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_reserved_instances_listing(
    input: &crate::input::CancelReservedInstancesListingInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CancelReservedInstancesListing",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_398 = writer.prefix("ReservedInstancesListingId");
    if let Some(var_399) = &input.reserved_instances_listing_id {
        scope_398.string(var_399);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_spot_fleet_requests(
    input: &crate::input::CancelSpotFleetRequestsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CancelSpotFleetRequests", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_400 = writer.prefix("DryRun");
    if let Some(var_401) = &input.dry_run {
        scope_400.boolean(*var_401);
    }
    #[allow(unused_mut)]
    let mut scope_402 = writer.prefix("SpotFleetRequestId");
    if let Some(var_403) = &input.spot_fleet_request_ids {
        let mut list_405 = scope_402.start_list(true, Some("item"));
        for item_404 in var_403 {
            #[allow(unused_mut)]
            let mut entry_406 = list_405.entry();
            entry_406.string(item_404);
        }
        list_405.finish();
    }
    #[allow(unused_mut)]
    let mut scope_407 = writer.prefix("TerminateInstances");
    if let Some(var_408) = &input.terminate_instances {
        scope_407.boolean(*var_408);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_spot_instance_requests(
    input: &crate::input::CancelSpotInstanceRequestsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CancelSpotInstanceRequests", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_409 = writer.prefix("DryRun");
    if let Some(var_410) = &input.dry_run {
        scope_409.boolean(*var_410);
    }
    #[allow(unused_mut)]
    let mut scope_411 = writer.prefix("SpotInstanceRequestId");
    if let Some(var_412) = &input.spot_instance_request_ids {
        let mut list_414 = scope_411.start_list(true, Some("SpotInstanceRequestId"));
        for item_413 in var_412 {
            #[allow(unused_mut)]
            let mut entry_415 = list_414.entry();
            entry_415.string(item_413);
        }
        list_414.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_confirm_product_instance(
    input: &crate::input::ConfirmProductInstanceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ConfirmProductInstance", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_416 = writer.prefix("InstanceId");
    if let Some(var_417) = &input.instance_id {
        scope_416.string(var_417);
    }
    #[allow(unused_mut)]
    let mut scope_418 = writer.prefix("ProductCode");
    if let Some(var_419) = &input.product_code {
        scope_418.string(var_419);
    }
    #[allow(unused_mut)]
    let mut scope_420 = writer.prefix("DryRun");
    if let Some(var_421) = &input.dry_run {
        scope_420.boolean(*var_421);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_copy_fpga_image(
    input: &crate::input::CopyFpgaImageInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CopyFpgaImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_422 = writer.prefix("DryRun");
    if let Some(var_423) = &input.dry_run {
        scope_422.boolean(*var_423);
    }
    #[allow(unused_mut)]
    let mut scope_424 = writer.prefix("SourceFpgaImageId");
    if let Some(var_425) = &input.source_fpga_image_id {
        scope_424.string(var_425);
    }
    #[allow(unused_mut)]
    let mut scope_426 = writer.prefix("Description");
    if let Some(var_427) = &input.description {
        scope_426.string(var_427);
    }
    #[allow(unused_mut)]
    let mut scope_428 = writer.prefix("Name");
    if let Some(var_429) = &input.name {
        scope_428.string(var_429);
    }
    #[allow(unused_mut)]
    let mut scope_430 = writer.prefix("SourceRegion");
    if let Some(var_431) = &input.source_region {
        scope_430.string(var_431);
    }
    #[allow(unused_mut)]
    let mut scope_432 = writer.prefix("ClientToken");
    if let Some(var_433) = &input.client_token {
        scope_432.string(var_433);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_copy_image(
    input: &crate::input::CopyImageInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CopyImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_434 = writer.prefix("ClientToken");
    if let Some(var_435) = &input.client_token {
        scope_434.string(var_435);
    }
    #[allow(unused_mut)]
    let mut scope_436 = writer.prefix("Description");
    if let Some(var_437) = &input.description {
        scope_436.string(var_437);
    }
    #[allow(unused_mut)]
    let mut scope_438 = writer.prefix("Encrypted");
    if let Some(var_439) = &input.encrypted {
        scope_438.boolean(*var_439);
    }
    #[allow(unused_mut)]
    let mut scope_440 = writer.prefix("KmsKeyId");
    if let Some(var_441) = &input.kms_key_id {
        scope_440.string(var_441);
    }
    #[allow(unused_mut)]
    let mut scope_442 = writer.prefix("Name");
    if let Some(var_443) = &input.name {
        scope_442.string(var_443);
    }
    #[allow(unused_mut)]
    let mut scope_444 = writer.prefix("SourceImageId");
    if let Some(var_445) = &input.source_image_id {
        scope_444.string(var_445);
    }
    #[allow(unused_mut)]
    let mut scope_446 = writer.prefix("SourceRegion");
    if let Some(var_447) = &input.source_region {
        scope_446.string(var_447);
    }
    #[allow(unused_mut)]
    let mut scope_448 = writer.prefix("DestinationOutpostArn");
    if let Some(var_449) = &input.destination_outpost_arn {
        scope_448.string(var_449);
    }
    #[allow(unused_mut)]
    let mut scope_450 = writer.prefix("DryRun");
    if let Some(var_451) = &input.dry_run {
        scope_450.boolean(*var_451);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_copy_snapshot(
    input: &crate::input::CopySnapshotInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CopySnapshot", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_452 = writer.prefix("Description");
    if let Some(var_453) = &input.description {
        scope_452.string(var_453);
    }
    #[allow(unused_mut)]
    let mut scope_454 = writer.prefix("DestinationOutpostArn");
    if let Some(var_455) = &input.destination_outpost_arn {
        scope_454.string(var_455);
    }
    #[allow(unused_mut)]
    let mut scope_456 = writer.prefix("DestinationRegion");
    if let Some(var_457) = &input.destination_region {
        scope_456.string(var_457);
    }
    #[allow(unused_mut)]
    let mut scope_458 = writer.prefix("Encrypted");
    if let Some(var_459) = &input.encrypted {
        scope_458.boolean(*var_459);
    }
    #[allow(unused_mut)]
    let mut scope_460 = writer.prefix("KmsKeyId");
    if let Some(var_461) = &input.kms_key_id {
        scope_460.string(var_461);
    }
    #[allow(unused_mut)]
    let mut scope_462 = writer.prefix("PresignedUrl");
    if let Some(var_463) = &input.presigned_url {
        scope_462.string(var_463);
    }
    #[allow(unused_mut)]
    let mut scope_464 = writer.prefix("SourceRegion");
    if let Some(var_465) = &input.source_region {
        scope_464.string(var_465);
    }
    #[allow(unused_mut)]
    let mut scope_466 = writer.prefix("SourceSnapshotId");
    if let Some(var_467) = &input.source_snapshot_id {
        scope_466.string(var_467);
    }
    #[allow(unused_mut)]
    let mut scope_468 = writer.prefix("TagSpecification");
    if let Some(var_469) = &input.tag_specifications {
        let mut list_471 = scope_468.start_list(true, Some("item"));
        for item_470 in var_469 {
            #[allow(unused_mut)]
            let mut entry_472 = list_471.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_472, item_470,
            )?;
        }
        list_471.finish();
    }
    #[allow(unused_mut)]
    let mut scope_473 = writer.prefix("DryRun");
    if let Some(var_474) = &input.dry_run {
        scope_473.boolean(*var_474);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_capacity_reservation(
    input: &crate::input::CreateCapacityReservationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateCapacityReservation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_475 = writer.prefix("ClientToken");
    if let Some(var_476) = &input.client_token {
        scope_475.string(var_476);
    }
    #[allow(unused_mut)]
    let mut scope_477 = writer.prefix("InstanceType");
    if let Some(var_478) = &input.instance_type {
        scope_477.string(var_478);
    }
    #[allow(unused_mut)]
    let mut scope_479 = writer.prefix("InstancePlatform");
    if let Some(var_480) = &input.instance_platform {
        scope_479.string(var_480.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_481 = writer.prefix("AvailabilityZone");
    if let Some(var_482) = &input.availability_zone {
        scope_481.string(var_482);
    }
    #[allow(unused_mut)]
    let mut scope_483 = writer.prefix("AvailabilityZoneId");
    if let Some(var_484) = &input.availability_zone_id {
        scope_483.string(var_484);
    }
    #[allow(unused_mut)]
    let mut scope_485 = writer.prefix("Tenancy");
    if let Some(var_486) = &input.tenancy {
        scope_485.string(var_486.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_487 = writer.prefix("InstanceCount");
    if let Some(var_488) = &input.instance_count {
        scope_487.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_488).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_489 = writer.prefix("EbsOptimized");
    if let Some(var_490) = &input.ebs_optimized {
        scope_489.boolean(*var_490);
    }
    #[allow(unused_mut)]
    let mut scope_491 = writer.prefix("EphemeralStorage");
    if let Some(var_492) = &input.ephemeral_storage {
        scope_491.boolean(*var_492);
    }
    #[allow(unused_mut)]
    let mut scope_493 = writer.prefix("EndDate");
    if let Some(var_494) = &input.end_date {
        scope_493.date_time(var_494, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_495 = writer.prefix("EndDateType");
    if let Some(var_496) = &input.end_date_type {
        scope_495.string(var_496.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_497 = writer.prefix("InstanceMatchCriteria");
    if let Some(var_498) = &input.instance_match_criteria {
        scope_497.string(var_498.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_499 = writer.prefix("TagSpecifications");
    if let Some(var_500) = &input.tag_specifications {
        let mut list_502 = scope_499.start_list(true, Some("item"));
        for item_501 in var_500 {
            #[allow(unused_mut)]
            let mut entry_503 = list_502.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_503, item_501,
            )?;
        }
        list_502.finish();
    }
    #[allow(unused_mut)]
    let mut scope_504 = writer.prefix("DryRun");
    if let Some(var_505) = &input.dry_run {
        scope_504.boolean(*var_505);
    }
    #[allow(unused_mut)]
    let mut scope_506 = writer.prefix("OutpostArn");
    if let Some(var_507) = &input.outpost_arn {
        scope_506.string(var_507);
    }
    #[allow(unused_mut)]
    let mut scope_508 = writer.prefix("PlacementGroupArn");
    if let Some(var_509) = &input.placement_group_arn {
        scope_508.string(var_509);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_capacity_reservation_fleet(
    input: &crate::input::CreateCapacityReservationFleetInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateCapacityReservationFleet",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_510 = writer.prefix("AllocationStrategy");
    if let Some(var_511) = &input.allocation_strategy {
        scope_510.string(var_511);
    }
    #[allow(unused_mut)]
    let mut scope_512 = writer.prefix("ClientToken");
    if let Some(var_513) = &input.client_token {
        scope_512.string(var_513);
    }
    #[allow(unused_mut)]
    let mut scope_514 = writer.prefix("InstanceTypeSpecification");
    if let Some(var_515) = &input.instance_type_specifications {
        let mut list_517 = scope_514.start_list(true, None);
        for item_516 in var_515 {
            #[allow(unused_mut)]
            let mut entry_518 = list_517.entry();
            crate::query_ser::serialize_structure_crate_model_reservation_fleet_instance_specification(entry_518, item_516)?;
        }
        list_517.finish();
    }
    #[allow(unused_mut)]
    let mut scope_519 = writer.prefix("Tenancy");
    if let Some(var_520) = &input.tenancy {
        scope_519.string(var_520.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_521 = writer.prefix("TotalTargetCapacity");
    if let Some(var_522) = &input.total_target_capacity {
        scope_521.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_522).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_523 = writer.prefix("EndDate");
    if let Some(var_524) = &input.end_date {
        scope_523.date_time(var_524, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_525 = writer.prefix("InstanceMatchCriteria");
    if let Some(var_526) = &input.instance_match_criteria {
        scope_525.string(var_526.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_527 = writer.prefix("TagSpecification");
    if let Some(var_528) = &input.tag_specifications {
        let mut list_530 = scope_527.start_list(true, Some("item"));
        for item_529 in var_528 {
            #[allow(unused_mut)]
            let mut entry_531 = list_530.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_531, item_529,
            )?;
        }
        list_530.finish();
    }
    #[allow(unused_mut)]
    let mut scope_532 = writer.prefix("DryRun");
    if let Some(var_533) = &input.dry_run {
        scope_532.boolean(*var_533);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_carrier_gateway(
    input: &crate::input::CreateCarrierGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateCarrierGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_534 = writer.prefix("VpcId");
    if let Some(var_535) = &input.vpc_id {
        scope_534.string(var_535);
    }
    #[allow(unused_mut)]
    let mut scope_536 = writer.prefix("TagSpecification");
    if let Some(var_537) = &input.tag_specifications {
        let mut list_539 = scope_536.start_list(true, Some("item"));
        for item_538 in var_537 {
            #[allow(unused_mut)]
            let mut entry_540 = list_539.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_540, item_538,
            )?;
        }
        list_539.finish();
    }
    #[allow(unused_mut)]
    let mut scope_541 = writer.prefix("DryRun");
    if let Some(var_542) = &input.dry_run {
        scope_541.boolean(*var_542);
    }
    #[allow(unused_mut)]
    let mut scope_543 = writer.prefix("ClientToken");
    if let Some(var_544) = &input.client_token {
        scope_543.string(var_544);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_client_vpn_endpoint(
    input: &crate::input::CreateClientVpnEndpointInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateClientVpnEndpoint", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_545 = writer.prefix("ClientCidrBlock");
    if let Some(var_546) = &input.client_cidr_block {
        scope_545.string(var_546);
    }
    #[allow(unused_mut)]
    let mut scope_547 = writer.prefix("ServerCertificateArn");
    if let Some(var_548) = &input.server_certificate_arn {
        scope_547.string(var_548);
    }
    #[allow(unused_mut)]
    let mut scope_549 = writer.prefix("Authentication");
    if let Some(var_550) = &input.authentication_options {
        let mut list_552 = scope_549.start_list(true, None);
        for item_551 in var_550 {
            #[allow(unused_mut)]
            let mut entry_553 = list_552.entry();
            crate::query_ser::serialize_structure_crate_model_client_vpn_authentication_request(
                entry_553, item_551,
            )?;
        }
        list_552.finish();
    }
    #[allow(unused_mut)]
    let mut scope_554 = writer.prefix("ConnectionLogOptions");
    if let Some(var_555) = &input.connection_log_options {
        crate::query_ser::serialize_structure_crate_model_connection_log_options(
            scope_554, var_555,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_556 = writer.prefix("DnsServers");
    if let Some(var_557) = &input.dns_servers {
        let mut list_559 = scope_556.start_list(true, Some("item"));
        for item_558 in var_557 {
            #[allow(unused_mut)]
            let mut entry_560 = list_559.entry();
            entry_560.string(item_558);
        }
        list_559.finish();
    }
    #[allow(unused_mut)]
    let mut scope_561 = writer.prefix("TransportProtocol");
    if let Some(var_562) = &input.transport_protocol {
        scope_561.string(var_562.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_563 = writer.prefix("VpnPort");
    if let Some(var_564) = &input.vpn_port {
        scope_563.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_564).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_565 = writer.prefix("Description");
    if let Some(var_566) = &input.description {
        scope_565.string(var_566);
    }
    #[allow(unused_mut)]
    let mut scope_567 = writer.prefix("SplitTunnel");
    if let Some(var_568) = &input.split_tunnel {
        scope_567.boolean(*var_568);
    }
    #[allow(unused_mut)]
    let mut scope_569 = writer.prefix("DryRun");
    if let Some(var_570) = &input.dry_run {
        scope_569.boolean(*var_570);
    }
    #[allow(unused_mut)]
    let mut scope_571 = writer.prefix("ClientToken");
    if let Some(var_572) = &input.client_token {
        scope_571.string(var_572);
    }
    #[allow(unused_mut)]
    let mut scope_573 = writer.prefix("TagSpecification");
    if let Some(var_574) = &input.tag_specifications {
        let mut list_576 = scope_573.start_list(true, Some("item"));
        for item_575 in var_574 {
            #[allow(unused_mut)]
            let mut entry_577 = list_576.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_577, item_575,
            )?;
        }
        list_576.finish();
    }
    #[allow(unused_mut)]
    let mut scope_578 = writer.prefix("SecurityGroupId");
    if let Some(var_579) = &input.security_group_ids {
        let mut list_581 = scope_578.start_list(true, Some("item"));
        for item_580 in var_579 {
            #[allow(unused_mut)]
            let mut entry_582 = list_581.entry();
            entry_582.string(item_580);
        }
        list_581.finish();
    }
    #[allow(unused_mut)]
    let mut scope_583 = writer.prefix("VpcId");
    if let Some(var_584) = &input.vpc_id {
        scope_583.string(var_584);
    }
    #[allow(unused_mut)]
    let mut scope_585 = writer.prefix("SelfServicePortal");
    if let Some(var_586) = &input.self_service_portal {
        scope_585.string(var_586.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_587 = writer.prefix("ClientConnectOptions");
    if let Some(var_588) = &input.client_connect_options {
        crate::query_ser::serialize_structure_crate_model_client_connect_options(
            scope_587, var_588,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_589 = writer.prefix("SessionTimeoutHours");
    if let Some(var_590) = &input.session_timeout_hours {
        scope_589.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_590).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_591 = writer.prefix("ClientLoginBannerOptions");
    if let Some(var_592) = &input.client_login_banner_options {
        crate::query_ser::serialize_structure_crate_model_client_login_banner_options(
            scope_591, var_592,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_client_vpn_route(
    input: &crate::input::CreateClientVpnRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateClientVpnRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_593 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_594) = &input.client_vpn_endpoint_id {
        scope_593.string(var_594);
    }
    #[allow(unused_mut)]
    let mut scope_595 = writer.prefix("DestinationCidrBlock");
    if let Some(var_596) = &input.destination_cidr_block {
        scope_595.string(var_596);
    }
    #[allow(unused_mut)]
    let mut scope_597 = writer.prefix("TargetVpcSubnetId");
    if let Some(var_598) = &input.target_vpc_subnet_id {
        scope_597.string(var_598);
    }
    #[allow(unused_mut)]
    let mut scope_599 = writer.prefix("Description");
    if let Some(var_600) = &input.description {
        scope_599.string(var_600);
    }
    #[allow(unused_mut)]
    let mut scope_601 = writer.prefix("ClientToken");
    if let Some(var_602) = &input.client_token {
        scope_601.string(var_602);
    }
    #[allow(unused_mut)]
    let mut scope_603 = writer.prefix("DryRun");
    if let Some(var_604) = &input.dry_run {
        scope_603.boolean(*var_604);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_customer_gateway(
    input: &crate::input::CreateCustomerGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateCustomerGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_605 = writer.prefix("BgpAsn");
    if let Some(var_606) = &input.bgp_asn {
        scope_605.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_606).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_607 = writer.prefix("IpAddress");
    if let Some(var_608) = &input.public_ip {
        scope_607.string(var_608);
    }
    #[allow(unused_mut)]
    let mut scope_609 = writer.prefix("CertificateArn");
    if let Some(var_610) = &input.certificate_arn {
        scope_609.string(var_610);
    }
    #[allow(unused_mut)]
    let mut scope_611 = writer.prefix("Type");
    if let Some(var_612) = &input.r#type {
        scope_611.string(var_612.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_613 = writer.prefix("TagSpecification");
    if let Some(var_614) = &input.tag_specifications {
        let mut list_616 = scope_613.start_list(true, Some("item"));
        for item_615 in var_614 {
            #[allow(unused_mut)]
            let mut entry_617 = list_616.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_617, item_615,
            )?;
        }
        list_616.finish();
    }
    #[allow(unused_mut)]
    let mut scope_618 = writer.prefix("DeviceName");
    if let Some(var_619) = &input.device_name {
        scope_618.string(var_619);
    }
    #[allow(unused_mut)]
    let mut scope_620 = writer.prefix("DryRun");
    if let Some(var_621) = &input.dry_run {
        scope_620.boolean(*var_621);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_default_subnet(
    input: &crate::input::CreateDefaultSubnetInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateDefaultSubnet", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_622 = writer.prefix("AvailabilityZone");
    if let Some(var_623) = &input.availability_zone {
        scope_622.string(var_623);
    }
    #[allow(unused_mut)]
    let mut scope_624 = writer.prefix("DryRun");
    if let Some(var_625) = &input.dry_run {
        scope_624.boolean(*var_625);
    }
    #[allow(unused_mut)]
    let mut scope_626 = writer.prefix("Ipv6Native");
    if let Some(var_627) = &input.ipv6_native {
        scope_626.boolean(*var_627);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_default_vpc(
    input: &crate::input::CreateDefaultVpcInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateDefaultVpc", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_628 = writer.prefix("DryRun");
    if let Some(var_629) = &input.dry_run {
        scope_628.boolean(*var_629);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_dhcp_options(
    input: &crate::input::CreateDhcpOptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateDhcpOptions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_630 = writer.prefix("DhcpConfiguration");
    if let Some(var_631) = &input.dhcp_configurations {
        let mut list_633 = scope_630.start_list(true, Some("item"));
        for item_632 in var_631 {
            #[allow(unused_mut)]
            let mut entry_634 = list_633.entry();
            crate::query_ser::serialize_structure_crate_model_new_dhcp_configuration(
                entry_634, item_632,
            )?;
        }
        list_633.finish();
    }
    #[allow(unused_mut)]
    let mut scope_635 = writer.prefix("TagSpecification");
    if let Some(var_636) = &input.tag_specifications {
        let mut list_638 = scope_635.start_list(true, Some("item"));
        for item_637 in var_636 {
            #[allow(unused_mut)]
            let mut entry_639 = list_638.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_639, item_637,
            )?;
        }
        list_638.finish();
    }
    #[allow(unused_mut)]
    let mut scope_640 = writer.prefix("DryRun");
    if let Some(var_641) = &input.dry_run {
        scope_640.boolean(*var_641);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_egress_only_internet_gateway(
    input: &crate::input::CreateEgressOnlyInternetGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateEgressOnlyInternetGateway",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_642 = writer.prefix("ClientToken");
    if let Some(var_643) = &input.client_token {
        scope_642.string(var_643);
    }
    #[allow(unused_mut)]
    let mut scope_644 = writer.prefix("DryRun");
    if let Some(var_645) = &input.dry_run {
        scope_644.boolean(*var_645);
    }
    #[allow(unused_mut)]
    let mut scope_646 = writer.prefix("VpcId");
    if let Some(var_647) = &input.vpc_id {
        scope_646.string(var_647);
    }
    #[allow(unused_mut)]
    let mut scope_648 = writer.prefix("TagSpecification");
    if let Some(var_649) = &input.tag_specifications {
        let mut list_651 = scope_648.start_list(true, Some("item"));
        for item_650 in var_649 {
            #[allow(unused_mut)]
            let mut entry_652 = list_651.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_652, item_650,
            )?;
        }
        list_651.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_fleet(
    input: &crate::input::CreateFleetInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateFleet", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_653 = writer.prefix("DryRun");
    if let Some(var_654) = &input.dry_run {
        scope_653.boolean(*var_654);
    }
    #[allow(unused_mut)]
    let mut scope_655 = writer.prefix("ClientToken");
    if let Some(var_656) = &input.client_token {
        scope_655.string(var_656);
    }
    #[allow(unused_mut)]
    let mut scope_657 = writer.prefix("SpotOptions");
    if let Some(var_658) = &input.spot_options {
        crate::query_ser::serialize_structure_crate_model_spot_options_request(scope_657, var_658)?;
    }
    #[allow(unused_mut)]
    let mut scope_659 = writer.prefix("OnDemandOptions");
    if let Some(var_660) = &input.on_demand_options {
        crate::query_ser::serialize_structure_crate_model_on_demand_options_request(
            scope_659, var_660,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_661 = writer.prefix("ExcessCapacityTerminationPolicy");
    if let Some(var_662) = &input.excess_capacity_termination_policy {
        scope_661.string(var_662.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_663 = writer.prefix("LaunchTemplateConfigs");
    if let Some(var_664) = &input.launch_template_configs {
        let mut list_666 = scope_663.start_list(true, Some("item"));
        for item_665 in var_664 {
            #[allow(unused_mut)]
            let mut entry_667 = list_666.entry();
            crate::query_ser::serialize_structure_crate_model_fleet_launch_template_config_request(
                entry_667, item_665,
            )?;
        }
        list_666.finish();
    }
    #[allow(unused_mut)]
    let mut scope_668 = writer.prefix("TargetCapacitySpecification");
    if let Some(var_669) = &input.target_capacity_specification {
        crate::query_ser::serialize_structure_crate_model_target_capacity_specification_request(
            scope_668, var_669,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_670 = writer.prefix("TerminateInstancesWithExpiration");
    if let Some(var_671) = &input.terminate_instances_with_expiration {
        scope_670.boolean(*var_671);
    }
    #[allow(unused_mut)]
    let mut scope_672 = writer.prefix("Type");
    if let Some(var_673) = &input.r#type {
        scope_672.string(var_673.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_674 = writer.prefix("ValidFrom");
    if let Some(var_675) = &input.valid_from {
        scope_674.date_time(var_675, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_676 = writer.prefix("ValidUntil");
    if let Some(var_677) = &input.valid_until {
        scope_676.date_time(var_677, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_678 = writer.prefix("ReplaceUnhealthyInstances");
    if let Some(var_679) = &input.replace_unhealthy_instances {
        scope_678.boolean(*var_679);
    }
    #[allow(unused_mut)]
    let mut scope_680 = writer.prefix("TagSpecification");
    if let Some(var_681) = &input.tag_specifications {
        let mut list_683 = scope_680.start_list(true, Some("item"));
        for item_682 in var_681 {
            #[allow(unused_mut)]
            let mut entry_684 = list_683.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_684, item_682,
            )?;
        }
        list_683.finish();
    }
    #[allow(unused_mut)]
    let mut scope_685 = writer.prefix("Context");
    if let Some(var_686) = &input.context {
        scope_685.string(var_686);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_flow_logs(
    input: &crate::input::CreateFlowLogsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateFlowLogs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_687 = writer.prefix("DryRun");
    if let Some(var_688) = &input.dry_run {
        scope_687.boolean(*var_688);
    }
    #[allow(unused_mut)]
    let mut scope_689 = writer.prefix("ClientToken");
    if let Some(var_690) = &input.client_token {
        scope_689.string(var_690);
    }
    #[allow(unused_mut)]
    let mut scope_691 = writer.prefix("DeliverLogsPermissionArn");
    if let Some(var_692) = &input.deliver_logs_permission_arn {
        scope_691.string(var_692);
    }
    #[allow(unused_mut)]
    let mut scope_693 = writer.prefix("LogGroupName");
    if let Some(var_694) = &input.log_group_name {
        scope_693.string(var_694);
    }
    #[allow(unused_mut)]
    let mut scope_695 = writer.prefix("ResourceId");
    if let Some(var_696) = &input.resource_ids {
        let mut list_698 = scope_695.start_list(true, Some("item"));
        for item_697 in var_696 {
            #[allow(unused_mut)]
            let mut entry_699 = list_698.entry();
            entry_699.string(item_697);
        }
        list_698.finish();
    }
    #[allow(unused_mut)]
    let mut scope_700 = writer.prefix("ResourceType");
    if let Some(var_701) = &input.resource_type {
        scope_700.string(var_701.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_702 = writer.prefix("TrafficType");
    if let Some(var_703) = &input.traffic_type {
        scope_702.string(var_703.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_704 = writer.prefix("LogDestinationType");
    if let Some(var_705) = &input.log_destination_type {
        scope_704.string(var_705.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_706 = writer.prefix("LogDestination");
    if let Some(var_707) = &input.log_destination {
        scope_706.string(var_707);
    }
    #[allow(unused_mut)]
    let mut scope_708 = writer.prefix("LogFormat");
    if let Some(var_709) = &input.log_format {
        scope_708.string(var_709);
    }
    #[allow(unused_mut)]
    let mut scope_710 = writer.prefix("TagSpecification");
    if let Some(var_711) = &input.tag_specifications {
        let mut list_713 = scope_710.start_list(true, Some("item"));
        for item_712 in var_711 {
            #[allow(unused_mut)]
            let mut entry_714 = list_713.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_714, item_712,
            )?;
        }
        list_713.finish();
    }
    #[allow(unused_mut)]
    let mut scope_715 = writer.prefix("MaxAggregationInterval");
    if let Some(var_716) = &input.max_aggregation_interval {
        scope_715.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_716).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_717 = writer.prefix("DestinationOptions");
    if let Some(var_718) = &input.destination_options {
        crate::query_ser::serialize_structure_crate_model_destination_options_request(
            scope_717, var_718,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_fpga_image(
    input: &crate::input::CreateFpgaImageInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateFpgaImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_719 = writer.prefix("DryRun");
    if let Some(var_720) = &input.dry_run {
        scope_719.boolean(*var_720);
    }
    #[allow(unused_mut)]
    let mut scope_721 = writer.prefix("InputStorageLocation");
    if let Some(var_722) = &input.input_storage_location {
        crate::query_ser::serialize_structure_crate_model_storage_location(scope_721, var_722)?;
    }
    #[allow(unused_mut)]
    let mut scope_723 = writer.prefix("LogsStorageLocation");
    if let Some(var_724) = &input.logs_storage_location {
        crate::query_ser::serialize_structure_crate_model_storage_location(scope_723, var_724)?;
    }
    #[allow(unused_mut)]
    let mut scope_725 = writer.prefix("Description");
    if let Some(var_726) = &input.description {
        scope_725.string(var_726);
    }
    #[allow(unused_mut)]
    let mut scope_727 = writer.prefix("Name");
    if let Some(var_728) = &input.name {
        scope_727.string(var_728);
    }
    #[allow(unused_mut)]
    let mut scope_729 = writer.prefix("ClientToken");
    if let Some(var_730) = &input.client_token {
        scope_729.string(var_730);
    }
    #[allow(unused_mut)]
    let mut scope_731 = writer.prefix("TagSpecification");
    if let Some(var_732) = &input.tag_specifications {
        let mut list_734 = scope_731.start_list(true, Some("item"));
        for item_733 in var_732 {
            #[allow(unused_mut)]
            let mut entry_735 = list_734.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_735, item_733,
            )?;
        }
        list_734.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_image(
    input: &crate::input::CreateImageInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_736 = writer.prefix("BlockDeviceMapping");
    if let Some(var_737) = &input.block_device_mappings {
        let mut list_739 = scope_736.start_list(true, Some("BlockDeviceMapping"));
        for item_738 in var_737 {
            #[allow(unused_mut)]
            let mut entry_740 = list_739.entry();
            crate::query_ser::serialize_structure_crate_model_block_device_mapping(
                entry_740, item_738,
            )?;
        }
        list_739.finish();
    }
    #[allow(unused_mut)]
    let mut scope_741 = writer.prefix("Description");
    if let Some(var_742) = &input.description {
        scope_741.string(var_742);
    }
    #[allow(unused_mut)]
    let mut scope_743 = writer.prefix("DryRun");
    if let Some(var_744) = &input.dry_run {
        scope_743.boolean(*var_744);
    }
    #[allow(unused_mut)]
    let mut scope_745 = writer.prefix("InstanceId");
    if let Some(var_746) = &input.instance_id {
        scope_745.string(var_746);
    }
    #[allow(unused_mut)]
    let mut scope_747 = writer.prefix("Name");
    if let Some(var_748) = &input.name {
        scope_747.string(var_748);
    }
    #[allow(unused_mut)]
    let mut scope_749 = writer.prefix("NoReboot");
    if let Some(var_750) = &input.no_reboot {
        scope_749.boolean(*var_750);
    }
    #[allow(unused_mut)]
    let mut scope_751 = writer.prefix("TagSpecification");
    if let Some(var_752) = &input.tag_specifications {
        let mut list_754 = scope_751.start_list(true, Some("item"));
        for item_753 in var_752 {
            #[allow(unused_mut)]
            let mut entry_755 = list_754.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_755, item_753,
            )?;
        }
        list_754.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_instance_event_window(
    input: &crate::input::CreateInstanceEventWindowInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateInstanceEventWindow", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_756 = writer.prefix("DryRun");
    if let Some(var_757) = &input.dry_run {
        scope_756.boolean(*var_757);
    }
    #[allow(unused_mut)]
    let mut scope_758 = writer.prefix("Name");
    if let Some(var_759) = &input.name {
        scope_758.string(var_759);
    }
    #[allow(unused_mut)]
    let mut scope_760 = writer.prefix("TimeRange");
    if let Some(var_761) = &input.time_ranges {
        let mut list_763 = scope_760.start_list(true, None);
        for item_762 in var_761 {
            #[allow(unused_mut)]
            let mut entry_764 = list_763.entry();
            crate::query_ser::serialize_structure_crate_model_instance_event_window_time_range_request(entry_764, item_762)?;
        }
        list_763.finish();
    }
    #[allow(unused_mut)]
    let mut scope_765 = writer.prefix("CronExpression");
    if let Some(var_766) = &input.cron_expression {
        scope_765.string(var_766);
    }
    #[allow(unused_mut)]
    let mut scope_767 = writer.prefix("TagSpecification");
    if let Some(var_768) = &input.tag_specifications {
        let mut list_770 = scope_767.start_list(true, Some("item"));
        for item_769 in var_768 {
            #[allow(unused_mut)]
            let mut entry_771 = list_770.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_771, item_769,
            )?;
        }
        list_770.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_instance_export_task(
    input: &crate::input::CreateInstanceExportTaskInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateInstanceExportTask", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_772 = writer.prefix("Description");
    if let Some(var_773) = &input.description {
        scope_772.string(var_773);
    }
    #[allow(unused_mut)]
    let mut scope_774 = writer.prefix("ExportToS3");
    if let Some(var_775) = &input.export_to_s3_task {
        crate::query_ser::serialize_structure_crate_model_export_to_s3_task_specification(
            scope_774, var_775,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_776 = writer.prefix("InstanceId");
    if let Some(var_777) = &input.instance_id {
        scope_776.string(var_777);
    }
    #[allow(unused_mut)]
    let mut scope_778 = writer.prefix("TargetEnvironment");
    if let Some(var_779) = &input.target_environment {
        scope_778.string(var_779.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_780 = writer.prefix("TagSpecification");
    if let Some(var_781) = &input.tag_specifications {
        let mut list_783 = scope_780.start_list(true, Some("item"));
        for item_782 in var_781 {
            #[allow(unused_mut)]
            let mut entry_784 = list_783.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_784, item_782,
            )?;
        }
        list_783.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_internet_gateway(
    input: &crate::input::CreateInternetGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateInternetGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_785 = writer.prefix("TagSpecification");
    if let Some(var_786) = &input.tag_specifications {
        let mut list_788 = scope_785.start_list(true, Some("item"));
        for item_787 in var_786 {
            #[allow(unused_mut)]
            let mut entry_789 = list_788.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_789, item_787,
            )?;
        }
        list_788.finish();
    }
    #[allow(unused_mut)]
    let mut scope_790 = writer.prefix("DryRun");
    if let Some(var_791) = &input.dry_run {
        scope_790.boolean(*var_791);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_ipam(
    input: &crate::input::CreateIpamInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateIpam", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_792 = writer.prefix("DryRun");
    if let Some(var_793) = &input.dry_run {
        scope_792.boolean(*var_793);
    }
    #[allow(unused_mut)]
    let mut scope_794 = writer.prefix("Description");
    if let Some(var_795) = &input.description {
        scope_794.string(var_795);
    }
    #[allow(unused_mut)]
    let mut scope_796 = writer.prefix("OperatingRegion");
    if let Some(var_797) = &input.operating_regions {
        let mut list_799 = scope_796.start_list(true, None);
        for item_798 in var_797 {
            #[allow(unused_mut)]
            let mut entry_800 = list_799.entry();
            crate::query_ser::serialize_structure_crate_model_add_ipam_operating_region(
                entry_800, item_798,
            )?;
        }
        list_799.finish();
    }
    #[allow(unused_mut)]
    let mut scope_801 = writer.prefix("TagSpecification");
    if let Some(var_802) = &input.tag_specifications {
        let mut list_804 = scope_801.start_list(true, Some("item"));
        for item_803 in var_802 {
            #[allow(unused_mut)]
            let mut entry_805 = list_804.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_805, item_803,
            )?;
        }
        list_804.finish();
    }
    #[allow(unused_mut)]
    let mut scope_806 = writer.prefix("ClientToken");
    if let Some(var_807) = &input.client_token {
        scope_806.string(var_807);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_ipam_pool(
    input: &crate::input::CreateIpamPoolInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateIpamPool", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_808 = writer.prefix("DryRun");
    if let Some(var_809) = &input.dry_run {
        scope_808.boolean(*var_809);
    }
    #[allow(unused_mut)]
    let mut scope_810 = writer.prefix("IpamScopeId");
    if let Some(var_811) = &input.ipam_scope_id {
        scope_810.string(var_811);
    }
    #[allow(unused_mut)]
    let mut scope_812 = writer.prefix("Locale");
    if let Some(var_813) = &input.locale {
        scope_812.string(var_813);
    }
    #[allow(unused_mut)]
    let mut scope_814 = writer.prefix("SourceIpamPoolId");
    if let Some(var_815) = &input.source_ipam_pool_id {
        scope_814.string(var_815);
    }
    #[allow(unused_mut)]
    let mut scope_816 = writer.prefix("Description");
    if let Some(var_817) = &input.description {
        scope_816.string(var_817);
    }
    #[allow(unused_mut)]
    let mut scope_818 = writer.prefix("AddressFamily");
    if let Some(var_819) = &input.address_family {
        scope_818.string(var_819.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_820 = writer.prefix("AutoImport");
    if let Some(var_821) = &input.auto_import {
        scope_820.boolean(*var_821);
    }
    #[allow(unused_mut)]
    let mut scope_822 = writer.prefix("PubliclyAdvertisable");
    if let Some(var_823) = &input.publicly_advertisable {
        scope_822.boolean(*var_823);
    }
    #[allow(unused_mut)]
    let mut scope_824 = writer.prefix("AllocationMinNetmaskLength");
    if let Some(var_825) = &input.allocation_min_netmask_length {
        scope_824.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_825).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_826 = writer.prefix("AllocationMaxNetmaskLength");
    if let Some(var_827) = &input.allocation_max_netmask_length {
        scope_826.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_827).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_828 = writer.prefix("AllocationDefaultNetmaskLength");
    if let Some(var_829) = &input.allocation_default_netmask_length {
        scope_828.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_829).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_830 = writer.prefix("AllocationResourceTag");
    if let Some(var_831) = &input.allocation_resource_tags {
        let mut list_833 = scope_830.start_list(true, Some("item"));
        for item_832 in var_831 {
            #[allow(unused_mut)]
            let mut entry_834 = list_833.entry();
            crate::query_ser::serialize_structure_crate_model_request_ipam_resource_tag(
                entry_834, item_832,
            )?;
        }
        list_833.finish();
    }
    #[allow(unused_mut)]
    let mut scope_835 = writer.prefix("TagSpecification");
    if let Some(var_836) = &input.tag_specifications {
        let mut list_838 = scope_835.start_list(true, Some("item"));
        for item_837 in var_836 {
            #[allow(unused_mut)]
            let mut entry_839 = list_838.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_839, item_837,
            )?;
        }
        list_838.finish();
    }
    #[allow(unused_mut)]
    let mut scope_840 = writer.prefix("ClientToken");
    if let Some(var_841) = &input.client_token {
        scope_840.string(var_841);
    }
    #[allow(unused_mut)]
    let mut scope_842 = writer.prefix("AwsService");
    if let Some(var_843) = &input.aws_service {
        scope_842.string(var_843.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_ipam_scope(
    input: &crate::input::CreateIpamScopeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateIpamScope", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_844 = writer.prefix("DryRun");
    if let Some(var_845) = &input.dry_run {
        scope_844.boolean(*var_845);
    }
    #[allow(unused_mut)]
    let mut scope_846 = writer.prefix("IpamId");
    if let Some(var_847) = &input.ipam_id {
        scope_846.string(var_847);
    }
    #[allow(unused_mut)]
    let mut scope_848 = writer.prefix("Description");
    if let Some(var_849) = &input.description {
        scope_848.string(var_849);
    }
    #[allow(unused_mut)]
    let mut scope_850 = writer.prefix("TagSpecification");
    if let Some(var_851) = &input.tag_specifications {
        let mut list_853 = scope_850.start_list(true, Some("item"));
        for item_852 in var_851 {
            #[allow(unused_mut)]
            let mut entry_854 = list_853.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_854, item_852,
            )?;
        }
        list_853.finish();
    }
    #[allow(unused_mut)]
    let mut scope_855 = writer.prefix("ClientToken");
    if let Some(var_856) = &input.client_token {
        scope_855.string(var_856);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_key_pair(
    input: &crate::input::CreateKeyPairInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateKeyPair", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_857 = writer.prefix("KeyName");
    if let Some(var_858) = &input.key_name {
        scope_857.string(var_858);
    }
    #[allow(unused_mut)]
    let mut scope_859 = writer.prefix("DryRun");
    if let Some(var_860) = &input.dry_run {
        scope_859.boolean(*var_860);
    }
    #[allow(unused_mut)]
    let mut scope_861 = writer.prefix("KeyType");
    if let Some(var_862) = &input.key_type {
        scope_861.string(var_862.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_863 = writer.prefix("TagSpecification");
    if let Some(var_864) = &input.tag_specifications {
        let mut list_866 = scope_863.start_list(true, Some("item"));
        for item_865 in var_864 {
            #[allow(unused_mut)]
            let mut entry_867 = list_866.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_867, item_865,
            )?;
        }
        list_866.finish();
    }
    #[allow(unused_mut)]
    let mut scope_868 = writer.prefix("KeyFormat");
    if let Some(var_869) = &input.key_format {
        scope_868.string(var_869.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_launch_template(
    input: &crate::input::CreateLaunchTemplateInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateLaunchTemplate", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_870 = writer.prefix("DryRun");
    if let Some(var_871) = &input.dry_run {
        scope_870.boolean(*var_871);
    }
    #[allow(unused_mut)]
    let mut scope_872 = writer.prefix("ClientToken");
    if let Some(var_873) = &input.client_token {
        scope_872.string(var_873);
    }
    #[allow(unused_mut)]
    let mut scope_874 = writer.prefix("LaunchTemplateName");
    if let Some(var_875) = &input.launch_template_name {
        scope_874.string(var_875);
    }
    #[allow(unused_mut)]
    let mut scope_876 = writer.prefix("VersionDescription");
    if let Some(var_877) = &input.version_description {
        scope_876.string(var_877);
    }
    #[allow(unused_mut)]
    let mut scope_878 = writer.prefix("LaunchTemplateData");
    if let Some(var_879) = &input.launch_template_data {
        crate::query_ser::serialize_structure_crate_model_request_launch_template_data(
            scope_878, var_879,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_880 = writer.prefix("TagSpecification");
    if let Some(var_881) = &input.tag_specifications {
        let mut list_883 = scope_880.start_list(true, Some("item"));
        for item_882 in var_881 {
            #[allow(unused_mut)]
            let mut entry_884 = list_883.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_884, item_882,
            )?;
        }
        list_883.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_launch_template_version(
    input: &crate::input::CreateLaunchTemplateVersionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateLaunchTemplateVersion", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_885 = writer.prefix("DryRun");
    if let Some(var_886) = &input.dry_run {
        scope_885.boolean(*var_886);
    }
    #[allow(unused_mut)]
    let mut scope_887 = writer.prefix("ClientToken");
    if let Some(var_888) = &input.client_token {
        scope_887.string(var_888);
    }
    #[allow(unused_mut)]
    let mut scope_889 = writer.prefix("LaunchTemplateId");
    if let Some(var_890) = &input.launch_template_id {
        scope_889.string(var_890);
    }
    #[allow(unused_mut)]
    let mut scope_891 = writer.prefix("LaunchTemplateName");
    if let Some(var_892) = &input.launch_template_name {
        scope_891.string(var_892);
    }
    #[allow(unused_mut)]
    let mut scope_893 = writer.prefix("SourceVersion");
    if let Some(var_894) = &input.source_version {
        scope_893.string(var_894);
    }
    #[allow(unused_mut)]
    let mut scope_895 = writer.prefix("VersionDescription");
    if let Some(var_896) = &input.version_description {
        scope_895.string(var_896);
    }
    #[allow(unused_mut)]
    let mut scope_897 = writer.prefix("LaunchTemplateData");
    if let Some(var_898) = &input.launch_template_data {
        crate::query_ser::serialize_structure_crate_model_request_launch_template_data(
            scope_897, var_898,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_local_gateway_route(
    input: &crate::input::CreateLocalGatewayRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateLocalGatewayRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_899 = writer.prefix("DestinationCidrBlock");
    if let Some(var_900) = &input.destination_cidr_block {
        scope_899.string(var_900);
    }
    #[allow(unused_mut)]
    let mut scope_901 = writer.prefix("LocalGatewayRouteTableId");
    if let Some(var_902) = &input.local_gateway_route_table_id {
        scope_901.string(var_902);
    }
    #[allow(unused_mut)]
    let mut scope_903 = writer.prefix("LocalGatewayVirtualInterfaceGroupId");
    if let Some(var_904) = &input.local_gateway_virtual_interface_group_id {
        scope_903.string(var_904);
    }
    #[allow(unused_mut)]
    let mut scope_905 = writer.prefix("DryRun");
    if let Some(var_906) = &input.dry_run {
        scope_905.boolean(*var_906);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_local_gateway_route_table_vpc_association(
    input: &crate::input::CreateLocalGatewayRouteTableVpcAssociationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateLocalGatewayRouteTableVpcAssociation",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_907 = writer.prefix("LocalGatewayRouteTableId");
    if let Some(var_908) = &input.local_gateway_route_table_id {
        scope_907.string(var_908);
    }
    #[allow(unused_mut)]
    let mut scope_909 = writer.prefix("VpcId");
    if let Some(var_910) = &input.vpc_id {
        scope_909.string(var_910);
    }
    #[allow(unused_mut)]
    let mut scope_911 = writer.prefix("TagSpecification");
    if let Some(var_912) = &input.tag_specifications {
        let mut list_914 = scope_911.start_list(true, Some("item"));
        for item_913 in var_912 {
            #[allow(unused_mut)]
            let mut entry_915 = list_914.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_915, item_913,
            )?;
        }
        list_914.finish();
    }
    #[allow(unused_mut)]
    let mut scope_916 = writer.prefix("DryRun");
    if let Some(var_917) = &input.dry_run {
        scope_916.boolean(*var_917);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_managed_prefix_list(
    input: &crate::input::CreateManagedPrefixListInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateManagedPrefixList", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_918 = writer.prefix("DryRun");
    if let Some(var_919) = &input.dry_run {
        scope_918.boolean(*var_919);
    }
    #[allow(unused_mut)]
    let mut scope_920 = writer.prefix("PrefixListName");
    if let Some(var_921) = &input.prefix_list_name {
        scope_920.string(var_921);
    }
    #[allow(unused_mut)]
    let mut scope_922 = writer.prefix("Entry");
    if let Some(var_923) = &input.entries {
        let mut list_925 = scope_922.start_list(true, None);
        for item_924 in var_923 {
            #[allow(unused_mut)]
            let mut entry_926 = list_925.entry();
            crate::query_ser::serialize_structure_crate_model_add_prefix_list_entry(
                entry_926, item_924,
            )?;
        }
        list_925.finish();
    }
    #[allow(unused_mut)]
    let mut scope_927 = writer.prefix("MaxEntries");
    if let Some(var_928) = &input.max_entries {
        scope_927.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_928).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_929 = writer.prefix("TagSpecification");
    if let Some(var_930) = &input.tag_specifications {
        let mut list_932 = scope_929.start_list(true, Some("item"));
        for item_931 in var_930 {
            #[allow(unused_mut)]
            let mut entry_933 = list_932.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_933, item_931,
            )?;
        }
        list_932.finish();
    }
    #[allow(unused_mut)]
    let mut scope_934 = writer.prefix("AddressFamily");
    if let Some(var_935) = &input.address_family {
        scope_934.string(var_935);
    }
    #[allow(unused_mut)]
    let mut scope_936 = writer.prefix("ClientToken");
    if let Some(var_937) = &input.client_token {
        scope_936.string(var_937);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_nat_gateway(
    input: &crate::input::CreateNatGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateNatGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_938 = writer.prefix("AllocationId");
    if let Some(var_939) = &input.allocation_id {
        scope_938.string(var_939);
    }
    #[allow(unused_mut)]
    let mut scope_940 = writer.prefix("ClientToken");
    if let Some(var_941) = &input.client_token {
        scope_940.string(var_941);
    }
    #[allow(unused_mut)]
    let mut scope_942 = writer.prefix("DryRun");
    if let Some(var_943) = &input.dry_run {
        scope_942.boolean(*var_943);
    }
    #[allow(unused_mut)]
    let mut scope_944 = writer.prefix("SubnetId");
    if let Some(var_945) = &input.subnet_id {
        scope_944.string(var_945);
    }
    #[allow(unused_mut)]
    let mut scope_946 = writer.prefix("TagSpecification");
    if let Some(var_947) = &input.tag_specifications {
        let mut list_949 = scope_946.start_list(true, Some("item"));
        for item_948 in var_947 {
            #[allow(unused_mut)]
            let mut entry_950 = list_949.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_950, item_948,
            )?;
        }
        list_949.finish();
    }
    #[allow(unused_mut)]
    let mut scope_951 = writer.prefix("ConnectivityType");
    if let Some(var_952) = &input.connectivity_type {
        scope_951.string(var_952.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_network_acl(
    input: &crate::input::CreateNetworkAclInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateNetworkAcl", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_953 = writer.prefix("DryRun");
    if let Some(var_954) = &input.dry_run {
        scope_953.boolean(*var_954);
    }
    #[allow(unused_mut)]
    let mut scope_955 = writer.prefix("VpcId");
    if let Some(var_956) = &input.vpc_id {
        scope_955.string(var_956);
    }
    #[allow(unused_mut)]
    let mut scope_957 = writer.prefix("TagSpecification");
    if let Some(var_958) = &input.tag_specifications {
        let mut list_960 = scope_957.start_list(true, Some("item"));
        for item_959 in var_958 {
            #[allow(unused_mut)]
            let mut entry_961 = list_960.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_961, item_959,
            )?;
        }
        list_960.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_network_acl_entry(
    input: &crate::input::CreateNetworkAclEntryInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateNetworkAclEntry", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_962 = writer.prefix("CidrBlock");
    if let Some(var_963) = &input.cidr_block {
        scope_962.string(var_963);
    }
    #[allow(unused_mut)]
    let mut scope_964 = writer.prefix("DryRun");
    if let Some(var_965) = &input.dry_run {
        scope_964.boolean(*var_965);
    }
    #[allow(unused_mut)]
    let mut scope_966 = writer.prefix("Egress");
    if let Some(var_967) = &input.egress {
        scope_966.boolean(*var_967);
    }
    #[allow(unused_mut)]
    let mut scope_968 = writer.prefix("Icmp");
    if let Some(var_969) = &input.icmp_type_code {
        crate::query_ser::serialize_structure_crate_model_icmp_type_code(scope_968, var_969)?;
    }
    #[allow(unused_mut)]
    let mut scope_970 = writer.prefix("Ipv6CidrBlock");
    if let Some(var_971) = &input.ipv6_cidr_block {
        scope_970.string(var_971);
    }
    #[allow(unused_mut)]
    let mut scope_972 = writer.prefix("NetworkAclId");
    if let Some(var_973) = &input.network_acl_id {
        scope_972.string(var_973);
    }
    #[allow(unused_mut)]
    let mut scope_974 = writer.prefix("PortRange");
    if let Some(var_975) = &input.port_range {
        crate::query_ser::serialize_structure_crate_model_port_range(scope_974, var_975)?;
    }
    #[allow(unused_mut)]
    let mut scope_976 = writer.prefix("Protocol");
    if let Some(var_977) = &input.protocol {
        scope_976.string(var_977);
    }
    #[allow(unused_mut)]
    let mut scope_978 = writer.prefix("RuleAction");
    if let Some(var_979) = &input.rule_action {
        scope_978.string(var_979.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_980 = writer.prefix("RuleNumber");
    if let Some(var_981) = &input.rule_number {
        scope_980.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_981).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_network_insights_access_scope(
    input: &crate::input::CreateNetworkInsightsAccessScopeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateNetworkInsightsAccessScope",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_982 = writer.prefix("MatchPath");
    if let Some(var_983) = &input.match_paths {
        let mut list_985 = scope_982.start_list(true, Some("item"));
        for item_984 in var_983 {
            #[allow(unused_mut)]
            let mut entry_986 = list_985.entry();
            crate::query_ser::serialize_structure_crate_model_access_scope_path_request(
                entry_986, item_984,
            )?;
        }
        list_985.finish();
    }
    #[allow(unused_mut)]
    let mut scope_987 = writer.prefix("ExcludePath");
    if let Some(var_988) = &input.exclude_paths {
        let mut list_990 = scope_987.start_list(true, Some("item"));
        for item_989 in var_988 {
            #[allow(unused_mut)]
            let mut entry_991 = list_990.entry();
            crate::query_ser::serialize_structure_crate_model_access_scope_path_request(
                entry_991, item_989,
            )?;
        }
        list_990.finish();
    }
    #[allow(unused_mut)]
    let mut scope_992 = writer.prefix("ClientToken");
    if let Some(var_993) = &input.client_token {
        scope_992.string(var_993);
    }
    #[allow(unused_mut)]
    let mut scope_994 = writer.prefix("TagSpecification");
    if let Some(var_995) = &input.tag_specifications {
        let mut list_997 = scope_994.start_list(true, Some("item"));
        for item_996 in var_995 {
            #[allow(unused_mut)]
            let mut entry_998 = list_997.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_998, item_996,
            )?;
        }
        list_997.finish();
    }
    #[allow(unused_mut)]
    let mut scope_999 = writer.prefix("DryRun");
    if let Some(var_1000) = &input.dry_run {
        scope_999.boolean(*var_1000);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_network_insights_path(
    input: &crate::input::CreateNetworkInsightsPathInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateNetworkInsightsPath", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1001 = writer.prefix("SourceIp");
    if let Some(var_1002) = &input.source_ip {
        scope_1001.string(var_1002);
    }
    #[allow(unused_mut)]
    let mut scope_1003 = writer.prefix("DestinationIp");
    if let Some(var_1004) = &input.destination_ip {
        scope_1003.string(var_1004);
    }
    #[allow(unused_mut)]
    let mut scope_1005 = writer.prefix("Source");
    if let Some(var_1006) = &input.source {
        scope_1005.string(var_1006);
    }
    #[allow(unused_mut)]
    let mut scope_1007 = writer.prefix("Destination");
    if let Some(var_1008) = &input.destination {
        scope_1007.string(var_1008);
    }
    #[allow(unused_mut)]
    let mut scope_1009 = writer.prefix("Protocol");
    if let Some(var_1010) = &input.protocol {
        scope_1009.string(var_1010.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1011 = writer.prefix("DestinationPort");
    if let Some(var_1012) = &input.destination_port {
        scope_1011.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1012).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1013 = writer.prefix("TagSpecification");
    if let Some(var_1014) = &input.tag_specifications {
        let mut list_1016 = scope_1013.start_list(true, Some("item"));
        for item_1015 in var_1014 {
            #[allow(unused_mut)]
            let mut entry_1017 = list_1016.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1017, item_1015,
            )?;
        }
        list_1016.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1018 = writer.prefix("DryRun");
    if let Some(var_1019) = &input.dry_run {
        scope_1018.boolean(*var_1019);
    }
    #[allow(unused_mut)]
    let mut scope_1020 = writer.prefix("ClientToken");
    if let Some(var_1021) = &input.client_token {
        scope_1020.string(var_1021);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_network_interface(
    input: &crate::input::CreateNetworkInterfaceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateNetworkInterface", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1022 = writer.prefix("Description");
    if let Some(var_1023) = &input.description {
        scope_1022.string(var_1023);
    }
    #[allow(unused_mut)]
    let mut scope_1024 = writer.prefix("DryRun");
    if let Some(var_1025) = &input.dry_run {
        scope_1024.boolean(*var_1025);
    }
    #[allow(unused_mut)]
    let mut scope_1026 = writer.prefix("SecurityGroupId");
    if let Some(var_1027) = &input.groups {
        let mut list_1029 = scope_1026.start_list(true, Some("SecurityGroupId"));
        for item_1028 in var_1027 {
            #[allow(unused_mut)]
            let mut entry_1030 = list_1029.entry();
            entry_1030.string(item_1028);
        }
        list_1029.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1031 = writer.prefix("Ipv6AddressCount");
    if let Some(var_1032) = &input.ipv6_address_count {
        scope_1031.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1032).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1033 = writer.prefix("Ipv6Addresses");
    if let Some(var_1034) = &input.ipv6_addresses {
        let mut list_1036 = scope_1033.start_list(true, Some("item"));
        for item_1035 in var_1034 {
            #[allow(unused_mut)]
            let mut entry_1037 = list_1036.entry();
            crate::query_ser::serialize_structure_crate_model_instance_ipv6_address(
                entry_1037, item_1035,
            )?;
        }
        list_1036.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1038 = writer.prefix("PrivateIpAddress");
    if let Some(var_1039) = &input.private_ip_address {
        scope_1038.string(var_1039);
    }
    #[allow(unused_mut)]
    let mut scope_1040 = writer.prefix("PrivateIpAddresses");
    if let Some(var_1041) = &input.private_ip_addresses {
        let mut list_1043 = scope_1040.start_list(true, Some("item"));
        for item_1042 in var_1041 {
            #[allow(unused_mut)]
            let mut entry_1044 = list_1043.entry();
            crate::query_ser::serialize_structure_crate_model_private_ip_address_specification(
                entry_1044, item_1042,
            )?;
        }
        list_1043.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1045 = writer.prefix("SecondaryPrivateIpAddressCount");
    if let Some(var_1046) = &input.secondary_private_ip_address_count {
        scope_1045.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1046).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1047 = writer.prefix("Ipv4Prefix");
    if let Some(var_1048) = &input.ipv4_prefixes {
        let mut list_1050 = scope_1047.start_list(true, Some("item"));
        for item_1049 in var_1048 {
            #[allow(unused_mut)]
            let mut entry_1051 = list_1050.entry();
            crate::query_ser::serialize_structure_crate_model_ipv4_prefix_specification_request(
                entry_1051, item_1049,
            )?;
        }
        list_1050.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1052 = writer.prefix("Ipv4PrefixCount");
    if let Some(var_1053) = &input.ipv4_prefix_count {
        scope_1052.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1053).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1054 = writer.prefix("Ipv6Prefix");
    if let Some(var_1055) = &input.ipv6_prefixes {
        let mut list_1057 = scope_1054.start_list(true, Some("item"));
        for item_1056 in var_1055 {
            #[allow(unused_mut)]
            let mut entry_1058 = list_1057.entry();
            crate::query_ser::serialize_structure_crate_model_ipv6_prefix_specification_request(
                entry_1058, item_1056,
            )?;
        }
        list_1057.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1059 = writer.prefix("Ipv6PrefixCount");
    if let Some(var_1060) = &input.ipv6_prefix_count {
        scope_1059.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1060).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1061 = writer.prefix("InterfaceType");
    if let Some(var_1062) = &input.interface_type {
        scope_1061.string(var_1062.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1063 = writer.prefix("SubnetId");
    if let Some(var_1064) = &input.subnet_id {
        scope_1063.string(var_1064);
    }
    #[allow(unused_mut)]
    let mut scope_1065 = writer.prefix("TagSpecification");
    if let Some(var_1066) = &input.tag_specifications {
        let mut list_1068 = scope_1065.start_list(true, Some("item"));
        for item_1067 in var_1066 {
            #[allow(unused_mut)]
            let mut entry_1069 = list_1068.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1069, item_1067,
            )?;
        }
        list_1068.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1070 = writer.prefix("ClientToken");
    if let Some(var_1071) = &input.client_token {
        scope_1070.string(var_1071);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_network_interface_permission(
    input: &crate::input::CreateNetworkInterfacePermissionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateNetworkInterfacePermission",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1072 = writer.prefix("NetworkInterfaceId");
    if let Some(var_1073) = &input.network_interface_id {
        scope_1072.string(var_1073);
    }
    #[allow(unused_mut)]
    let mut scope_1074 = writer.prefix("AwsAccountId");
    if let Some(var_1075) = &input.aws_account_id {
        scope_1074.string(var_1075);
    }
    #[allow(unused_mut)]
    let mut scope_1076 = writer.prefix("AwsService");
    if let Some(var_1077) = &input.aws_service {
        scope_1076.string(var_1077);
    }
    #[allow(unused_mut)]
    let mut scope_1078 = writer.prefix("Permission");
    if let Some(var_1079) = &input.permission {
        scope_1078.string(var_1079.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1080 = writer.prefix("DryRun");
    if let Some(var_1081) = &input.dry_run {
        scope_1080.boolean(*var_1081);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_placement_group(
    input: &crate::input::CreatePlacementGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreatePlacementGroup", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1082 = writer.prefix("DryRun");
    if let Some(var_1083) = &input.dry_run {
        scope_1082.boolean(*var_1083);
    }
    #[allow(unused_mut)]
    let mut scope_1084 = writer.prefix("GroupName");
    if let Some(var_1085) = &input.group_name {
        scope_1084.string(var_1085);
    }
    #[allow(unused_mut)]
    let mut scope_1086 = writer.prefix("Strategy");
    if let Some(var_1087) = &input.strategy {
        scope_1086.string(var_1087.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1088 = writer.prefix("PartitionCount");
    if let Some(var_1089) = &input.partition_count {
        scope_1088.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1089).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1090 = writer.prefix("TagSpecification");
    if let Some(var_1091) = &input.tag_specifications {
        let mut list_1093 = scope_1090.start_list(true, Some("item"));
        for item_1092 in var_1091 {
            #[allow(unused_mut)]
            let mut entry_1094 = list_1093.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1094, item_1092,
            )?;
        }
        list_1093.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_public_ipv4_pool(
    input: &crate::input::CreatePublicIpv4PoolInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreatePublicIpv4Pool", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1095 = writer.prefix("DryRun");
    if let Some(var_1096) = &input.dry_run {
        scope_1095.boolean(*var_1096);
    }
    #[allow(unused_mut)]
    let mut scope_1097 = writer.prefix("TagSpecification");
    if let Some(var_1098) = &input.tag_specifications {
        let mut list_1100 = scope_1097.start_list(true, Some("item"));
        for item_1099 in var_1098 {
            #[allow(unused_mut)]
            let mut entry_1101 = list_1100.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1101, item_1099,
            )?;
        }
        list_1100.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_replace_root_volume_task(
    input: &crate::input::CreateReplaceRootVolumeTaskInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateReplaceRootVolumeTask", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1102 = writer.prefix("InstanceId");
    if let Some(var_1103) = &input.instance_id {
        scope_1102.string(var_1103);
    }
    #[allow(unused_mut)]
    let mut scope_1104 = writer.prefix("SnapshotId");
    if let Some(var_1105) = &input.snapshot_id {
        scope_1104.string(var_1105);
    }
    #[allow(unused_mut)]
    let mut scope_1106 = writer.prefix("ClientToken");
    if let Some(var_1107) = &input.client_token {
        scope_1106.string(var_1107);
    }
    #[allow(unused_mut)]
    let mut scope_1108 = writer.prefix("DryRun");
    if let Some(var_1109) = &input.dry_run {
        scope_1108.boolean(*var_1109);
    }
    #[allow(unused_mut)]
    let mut scope_1110 = writer.prefix("TagSpecification");
    if let Some(var_1111) = &input.tag_specifications {
        let mut list_1113 = scope_1110.start_list(true, Some("item"));
        for item_1112 in var_1111 {
            #[allow(unused_mut)]
            let mut entry_1114 = list_1113.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1114, item_1112,
            )?;
        }
        list_1113.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_reserved_instances_listing(
    input: &crate::input::CreateReservedInstancesListingInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateReservedInstancesListing",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1115 = writer.prefix("ClientToken");
    if let Some(var_1116) = &input.client_token {
        scope_1115.string(var_1116);
    }
    #[allow(unused_mut)]
    let mut scope_1117 = writer.prefix("InstanceCount");
    if let Some(var_1118) = &input.instance_count {
        scope_1117.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1118).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1119 = writer.prefix("PriceSchedules");
    if let Some(var_1120) = &input.price_schedules {
        let mut list_1122 = scope_1119.start_list(true, Some("item"));
        for item_1121 in var_1120 {
            #[allow(unused_mut)]
            let mut entry_1123 = list_1122.entry();
            crate::query_ser::serialize_structure_crate_model_price_schedule_specification(
                entry_1123, item_1121,
            )?;
        }
        list_1122.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1124 = writer.prefix("ReservedInstancesId");
    if let Some(var_1125) = &input.reserved_instances_id {
        scope_1124.string(var_1125);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_restore_image_task(
    input: &crate::input::CreateRestoreImageTaskInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateRestoreImageTask", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1126 = writer.prefix("Bucket");
    if let Some(var_1127) = &input.bucket {
        scope_1126.string(var_1127);
    }
    #[allow(unused_mut)]
    let mut scope_1128 = writer.prefix("ObjectKey");
    if let Some(var_1129) = &input.object_key {
        scope_1128.string(var_1129);
    }
    #[allow(unused_mut)]
    let mut scope_1130 = writer.prefix("Name");
    if let Some(var_1131) = &input.name {
        scope_1130.string(var_1131);
    }
    #[allow(unused_mut)]
    let mut scope_1132 = writer.prefix("TagSpecification");
    if let Some(var_1133) = &input.tag_specifications {
        let mut list_1135 = scope_1132.start_list(true, Some("item"));
        for item_1134 in var_1133 {
            #[allow(unused_mut)]
            let mut entry_1136 = list_1135.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1136, item_1134,
            )?;
        }
        list_1135.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1137 = writer.prefix("DryRun");
    if let Some(var_1138) = &input.dry_run {
        scope_1137.boolean(*var_1138);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_route(
    input: &crate::input::CreateRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1139 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1140) = &input.destination_cidr_block {
        scope_1139.string(var_1140);
    }
    #[allow(unused_mut)]
    let mut scope_1141 = writer.prefix("DestinationIpv6CidrBlock");
    if let Some(var_1142) = &input.destination_ipv6_cidr_block {
        scope_1141.string(var_1142);
    }
    #[allow(unused_mut)]
    let mut scope_1143 = writer.prefix("DestinationPrefixListId");
    if let Some(var_1144) = &input.destination_prefix_list_id {
        scope_1143.string(var_1144);
    }
    #[allow(unused_mut)]
    let mut scope_1145 = writer.prefix("DryRun");
    if let Some(var_1146) = &input.dry_run {
        scope_1145.boolean(*var_1146);
    }
    #[allow(unused_mut)]
    let mut scope_1147 = writer.prefix("VpcEndpointId");
    if let Some(var_1148) = &input.vpc_endpoint_id {
        scope_1147.string(var_1148);
    }
    #[allow(unused_mut)]
    let mut scope_1149 = writer.prefix("EgressOnlyInternetGatewayId");
    if let Some(var_1150) = &input.egress_only_internet_gateway_id {
        scope_1149.string(var_1150);
    }
    #[allow(unused_mut)]
    let mut scope_1151 = writer.prefix("GatewayId");
    if let Some(var_1152) = &input.gateway_id {
        scope_1151.string(var_1152);
    }
    #[allow(unused_mut)]
    let mut scope_1153 = writer.prefix("InstanceId");
    if let Some(var_1154) = &input.instance_id {
        scope_1153.string(var_1154);
    }
    #[allow(unused_mut)]
    let mut scope_1155 = writer.prefix("NatGatewayId");
    if let Some(var_1156) = &input.nat_gateway_id {
        scope_1155.string(var_1156);
    }
    #[allow(unused_mut)]
    let mut scope_1157 = writer.prefix("TransitGatewayId");
    if let Some(var_1158) = &input.transit_gateway_id {
        scope_1157.string(var_1158);
    }
    #[allow(unused_mut)]
    let mut scope_1159 = writer.prefix("LocalGatewayId");
    if let Some(var_1160) = &input.local_gateway_id {
        scope_1159.string(var_1160);
    }
    #[allow(unused_mut)]
    let mut scope_1161 = writer.prefix("CarrierGatewayId");
    if let Some(var_1162) = &input.carrier_gateway_id {
        scope_1161.string(var_1162);
    }
    #[allow(unused_mut)]
    let mut scope_1163 = writer.prefix("NetworkInterfaceId");
    if let Some(var_1164) = &input.network_interface_id {
        scope_1163.string(var_1164);
    }
    #[allow(unused_mut)]
    let mut scope_1165 = writer.prefix("RouteTableId");
    if let Some(var_1166) = &input.route_table_id {
        scope_1165.string(var_1166);
    }
    #[allow(unused_mut)]
    let mut scope_1167 = writer.prefix("VpcPeeringConnectionId");
    if let Some(var_1168) = &input.vpc_peering_connection_id {
        scope_1167.string(var_1168);
    }
    #[allow(unused_mut)]
    let mut scope_1169 = writer.prefix("CoreNetworkArn");
    if let Some(var_1170) = &input.core_network_arn {
        scope_1169.string(var_1170);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_route_table(
    input: &crate::input::CreateRouteTableInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateRouteTable", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1171 = writer.prefix("DryRun");
    if let Some(var_1172) = &input.dry_run {
        scope_1171.boolean(*var_1172);
    }
    #[allow(unused_mut)]
    let mut scope_1173 = writer.prefix("VpcId");
    if let Some(var_1174) = &input.vpc_id {
        scope_1173.string(var_1174);
    }
    #[allow(unused_mut)]
    let mut scope_1175 = writer.prefix("TagSpecification");
    if let Some(var_1176) = &input.tag_specifications {
        let mut list_1178 = scope_1175.start_list(true, Some("item"));
        for item_1177 in var_1176 {
            #[allow(unused_mut)]
            let mut entry_1179 = list_1178.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1179, item_1177,
            )?;
        }
        list_1178.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_security_group(
    input: &crate::input::CreateSecurityGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateSecurityGroup", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1180 = writer.prefix("GroupDescription");
    if let Some(var_1181) = &input.description {
        scope_1180.string(var_1181);
    }
    #[allow(unused_mut)]
    let mut scope_1182 = writer.prefix("GroupName");
    if let Some(var_1183) = &input.group_name {
        scope_1182.string(var_1183);
    }
    #[allow(unused_mut)]
    let mut scope_1184 = writer.prefix("VpcId");
    if let Some(var_1185) = &input.vpc_id {
        scope_1184.string(var_1185);
    }
    #[allow(unused_mut)]
    let mut scope_1186 = writer.prefix("TagSpecification");
    if let Some(var_1187) = &input.tag_specifications {
        let mut list_1189 = scope_1186.start_list(true, Some("item"));
        for item_1188 in var_1187 {
            #[allow(unused_mut)]
            let mut entry_1190 = list_1189.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1190, item_1188,
            )?;
        }
        list_1189.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1191 = writer.prefix("DryRun");
    if let Some(var_1192) = &input.dry_run {
        scope_1191.boolean(*var_1192);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_snapshot(
    input: &crate::input::CreateSnapshotInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateSnapshot", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1193 = writer.prefix("Description");
    if let Some(var_1194) = &input.description {
        scope_1193.string(var_1194);
    }
    #[allow(unused_mut)]
    let mut scope_1195 = writer.prefix("OutpostArn");
    if let Some(var_1196) = &input.outpost_arn {
        scope_1195.string(var_1196);
    }
    #[allow(unused_mut)]
    let mut scope_1197 = writer.prefix("VolumeId");
    if let Some(var_1198) = &input.volume_id {
        scope_1197.string(var_1198);
    }
    #[allow(unused_mut)]
    let mut scope_1199 = writer.prefix("TagSpecification");
    if let Some(var_1200) = &input.tag_specifications {
        let mut list_1202 = scope_1199.start_list(true, Some("item"));
        for item_1201 in var_1200 {
            #[allow(unused_mut)]
            let mut entry_1203 = list_1202.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1203, item_1201,
            )?;
        }
        list_1202.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1204 = writer.prefix("DryRun");
    if let Some(var_1205) = &input.dry_run {
        scope_1204.boolean(*var_1205);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_snapshots(
    input: &crate::input::CreateSnapshotsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateSnapshots", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1206 = writer.prefix("Description");
    if let Some(var_1207) = &input.description {
        scope_1206.string(var_1207);
    }
    #[allow(unused_mut)]
    let mut scope_1208 = writer.prefix("InstanceSpecification");
    if let Some(var_1209) = &input.instance_specification {
        crate::query_ser::serialize_structure_crate_model_instance_specification(
            scope_1208, var_1209,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1210 = writer.prefix("OutpostArn");
    if let Some(var_1211) = &input.outpost_arn {
        scope_1210.string(var_1211);
    }
    #[allow(unused_mut)]
    let mut scope_1212 = writer.prefix("TagSpecification");
    if let Some(var_1213) = &input.tag_specifications {
        let mut list_1215 = scope_1212.start_list(true, Some("item"));
        for item_1214 in var_1213 {
            #[allow(unused_mut)]
            let mut entry_1216 = list_1215.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1216, item_1214,
            )?;
        }
        list_1215.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1217 = writer.prefix("DryRun");
    if let Some(var_1218) = &input.dry_run {
        scope_1217.boolean(*var_1218);
    }
    #[allow(unused_mut)]
    let mut scope_1219 = writer.prefix("CopyTagsFromSource");
    if let Some(var_1220) = &input.copy_tags_from_source {
        scope_1219.string(var_1220.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_spot_datafeed_subscription(
    input: &crate::input::CreateSpotDatafeedSubscriptionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateSpotDatafeedSubscription",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1221 = writer.prefix("Bucket");
    if let Some(var_1222) = &input.bucket {
        scope_1221.string(var_1222);
    }
    #[allow(unused_mut)]
    let mut scope_1223 = writer.prefix("DryRun");
    if let Some(var_1224) = &input.dry_run {
        scope_1223.boolean(*var_1224);
    }
    #[allow(unused_mut)]
    let mut scope_1225 = writer.prefix("Prefix");
    if let Some(var_1226) = &input.prefix {
        scope_1225.string(var_1226);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_store_image_task(
    input: &crate::input::CreateStoreImageTaskInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateStoreImageTask", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1227 = writer.prefix("ImageId");
    if let Some(var_1228) = &input.image_id {
        scope_1227.string(var_1228);
    }
    #[allow(unused_mut)]
    let mut scope_1229 = writer.prefix("Bucket");
    if let Some(var_1230) = &input.bucket {
        scope_1229.string(var_1230);
    }
    #[allow(unused_mut)]
    let mut scope_1231 = writer.prefix("S3ObjectTag");
    if let Some(var_1232) = &input.s3_object_tags {
        let mut list_1234 = scope_1231.start_list(true, Some("item"));
        for item_1233 in var_1232 {
            #[allow(unused_mut)]
            let mut entry_1235 = list_1234.entry();
            crate::query_ser::serialize_structure_crate_model_s3_object_tag(entry_1235, item_1233)?;
        }
        list_1234.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1236 = writer.prefix("DryRun");
    if let Some(var_1237) = &input.dry_run {
        scope_1236.boolean(*var_1237);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_subnet(
    input: &crate::input::CreateSubnetInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateSubnet", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1238 = writer.prefix("TagSpecification");
    if let Some(var_1239) = &input.tag_specifications {
        let mut list_1241 = scope_1238.start_list(true, Some("item"));
        for item_1240 in var_1239 {
            #[allow(unused_mut)]
            let mut entry_1242 = list_1241.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1242, item_1240,
            )?;
        }
        list_1241.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1243 = writer.prefix("AvailabilityZone");
    if let Some(var_1244) = &input.availability_zone {
        scope_1243.string(var_1244);
    }
    #[allow(unused_mut)]
    let mut scope_1245 = writer.prefix("AvailabilityZoneId");
    if let Some(var_1246) = &input.availability_zone_id {
        scope_1245.string(var_1246);
    }
    #[allow(unused_mut)]
    let mut scope_1247 = writer.prefix("CidrBlock");
    if let Some(var_1248) = &input.cidr_block {
        scope_1247.string(var_1248);
    }
    #[allow(unused_mut)]
    let mut scope_1249 = writer.prefix("Ipv6CidrBlock");
    if let Some(var_1250) = &input.ipv6_cidr_block {
        scope_1249.string(var_1250);
    }
    #[allow(unused_mut)]
    let mut scope_1251 = writer.prefix("OutpostArn");
    if let Some(var_1252) = &input.outpost_arn {
        scope_1251.string(var_1252);
    }
    #[allow(unused_mut)]
    let mut scope_1253 = writer.prefix("VpcId");
    if let Some(var_1254) = &input.vpc_id {
        scope_1253.string(var_1254);
    }
    #[allow(unused_mut)]
    let mut scope_1255 = writer.prefix("DryRun");
    if let Some(var_1256) = &input.dry_run {
        scope_1255.boolean(*var_1256);
    }
    #[allow(unused_mut)]
    let mut scope_1257 = writer.prefix("Ipv6Native");
    if let Some(var_1258) = &input.ipv6_native {
        scope_1257.boolean(*var_1258);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_subnet_cidr_reservation(
    input: &crate::input::CreateSubnetCidrReservationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateSubnetCidrReservation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1259 = writer.prefix("TagSpecification");
    if let Some(var_1260) = &input.tag_specifications {
        let mut list_1262 = scope_1259.start_list(true, Some("item"));
        for item_1261 in var_1260 {
            #[allow(unused_mut)]
            let mut entry_1263 = list_1262.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1263, item_1261,
            )?;
        }
        list_1262.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1264 = writer.prefix("SubnetId");
    if let Some(var_1265) = &input.subnet_id {
        scope_1264.string(var_1265);
    }
    #[allow(unused_mut)]
    let mut scope_1266 = writer.prefix("Cidr");
    if let Some(var_1267) = &input.cidr {
        scope_1266.string(var_1267);
    }
    #[allow(unused_mut)]
    let mut scope_1268 = writer.prefix("ReservationType");
    if let Some(var_1269) = &input.reservation_type {
        scope_1268.string(var_1269.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1270 = writer.prefix("Description");
    if let Some(var_1271) = &input.description {
        scope_1270.string(var_1271);
    }
    #[allow(unused_mut)]
    let mut scope_1272 = writer.prefix("DryRun");
    if let Some(var_1273) = &input.dry_run {
        scope_1272.boolean(*var_1273);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_tags(
    input: &crate::input::CreateTagsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateTags", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1274 = writer.prefix("DryRun");
    if let Some(var_1275) = &input.dry_run {
        scope_1274.boolean(*var_1275);
    }
    #[allow(unused_mut)]
    let mut scope_1276 = writer.prefix("ResourceId");
    if let Some(var_1277) = &input.resources {
        let mut list_1279 = scope_1276.start_list(true, None);
        for item_1278 in var_1277 {
            #[allow(unused_mut)]
            let mut entry_1280 = list_1279.entry();
            entry_1280.string(item_1278);
        }
        list_1279.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1281 = writer.prefix("Tag");
    if let Some(var_1282) = &input.tags {
        let mut list_1284 = scope_1281.start_list(true, Some("item"));
        for item_1283 in var_1282 {
            #[allow(unused_mut)]
            let mut entry_1285 = list_1284.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_1285, item_1283)?;
        }
        list_1284.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_traffic_mirror_filter(
    input: &crate::input::CreateTrafficMirrorFilterInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateTrafficMirrorFilter", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1286 = writer.prefix("Description");
    if let Some(var_1287) = &input.description {
        scope_1286.string(var_1287);
    }
    #[allow(unused_mut)]
    let mut scope_1288 = writer.prefix("TagSpecification");
    if let Some(var_1289) = &input.tag_specifications {
        let mut list_1291 = scope_1288.start_list(true, Some("item"));
        for item_1290 in var_1289 {
            #[allow(unused_mut)]
            let mut entry_1292 = list_1291.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1292, item_1290,
            )?;
        }
        list_1291.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1293 = writer.prefix("DryRun");
    if let Some(var_1294) = &input.dry_run {
        scope_1293.boolean(*var_1294);
    }
    #[allow(unused_mut)]
    let mut scope_1295 = writer.prefix("ClientToken");
    if let Some(var_1296) = &input.client_token {
        scope_1295.string(var_1296);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_traffic_mirror_filter_rule(
    input: &crate::input::CreateTrafficMirrorFilterRuleInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateTrafficMirrorFilterRule", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1297 = writer.prefix("TrafficMirrorFilterId");
    if let Some(var_1298) = &input.traffic_mirror_filter_id {
        scope_1297.string(var_1298);
    }
    #[allow(unused_mut)]
    let mut scope_1299 = writer.prefix("TrafficDirection");
    if let Some(var_1300) = &input.traffic_direction {
        scope_1299.string(var_1300.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1301 = writer.prefix("RuleNumber");
    if let Some(var_1302) = &input.rule_number {
        scope_1301.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1302).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1303 = writer.prefix("RuleAction");
    if let Some(var_1304) = &input.rule_action {
        scope_1303.string(var_1304.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1305 = writer.prefix("DestinationPortRange");
    if let Some(var_1306) = &input.destination_port_range {
        crate::query_ser::serialize_structure_crate_model_traffic_mirror_port_range_request(
            scope_1305, var_1306,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1307 = writer.prefix("SourcePortRange");
    if let Some(var_1308) = &input.source_port_range {
        crate::query_ser::serialize_structure_crate_model_traffic_mirror_port_range_request(
            scope_1307, var_1308,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1309 = writer.prefix("Protocol");
    if let Some(var_1310) = &input.protocol {
        scope_1309.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1310).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1311 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1312) = &input.destination_cidr_block {
        scope_1311.string(var_1312);
    }
    #[allow(unused_mut)]
    let mut scope_1313 = writer.prefix("SourceCidrBlock");
    if let Some(var_1314) = &input.source_cidr_block {
        scope_1313.string(var_1314);
    }
    #[allow(unused_mut)]
    let mut scope_1315 = writer.prefix("Description");
    if let Some(var_1316) = &input.description {
        scope_1315.string(var_1316);
    }
    #[allow(unused_mut)]
    let mut scope_1317 = writer.prefix("DryRun");
    if let Some(var_1318) = &input.dry_run {
        scope_1317.boolean(*var_1318);
    }
    #[allow(unused_mut)]
    let mut scope_1319 = writer.prefix("ClientToken");
    if let Some(var_1320) = &input.client_token {
        scope_1319.string(var_1320);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_traffic_mirror_session(
    input: &crate::input::CreateTrafficMirrorSessionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateTrafficMirrorSession", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1321 = writer.prefix("NetworkInterfaceId");
    if let Some(var_1322) = &input.network_interface_id {
        scope_1321.string(var_1322);
    }
    #[allow(unused_mut)]
    let mut scope_1323 = writer.prefix("TrafficMirrorTargetId");
    if let Some(var_1324) = &input.traffic_mirror_target_id {
        scope_1323.string(var_1324);
    }
    #[allow(unused_mut)]
    let mut scope_1325 = writer.prefix("TrafficMirrorFilterId");
    if let Some(var_1326) = &input.traffic_mirror_filter_id {
        scope_1325.string(var_1326);
    }
    #[allow(unused_mut)]
    let mut scope_1327 = writer.prefix("PacketLength");
    if let Some(var_1328) = &input.packet_length {
        scope_1327.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1328).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1329 = writer.prefix("SessionNumber");
    if let Some(var_1330) = &input.session_number {
        scope_1329.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1330).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1331 = writer.prefix("VirtualNetworkId");
    if let Some(var_1332) = &input.virtual_network_id {
        scope_1331.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1332).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1333 = writer.prefix("Description");
    if let Some(var_1334) = &input.description {
        scope_1333.string(var_1334);
    }
    #[allow(unused_mut)]
    let mut scope_1335 = writer.prefix("TagSpecification");
    if let Some(var_1336) = &input.tag_specifications {
        let mut list_1338 = scope_1335.start_list(true, Some("item"));
        for item_1337 in var_1336 {
            #[allow(unused_mut)]
            let mut entry_1339 = list_1338.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1339, item_1337,
            )?;
        }
        list_1338.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1340 = writer.prefix("DryRun");
    if let Some(var_1341) = &input.dry_run {
        scope_1340.boolean(*var_1341);
    }
    #[allow(unused_mut)]
    let mut scope_1342 = writer.prefix("ClientToken");
    if let Some(var_1343) = &input.client_token {
        scope_1342.string(var_1343);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_traffic_mirror_target(
    input: &crate::input::CreateTrafficMirrorTargetInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateTrafficMirrorTarget", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1344 = writer.prefix("NetworkInterfaceId");
    if let Some(var_1345) = &input.network_interface_id {
        scope_1344.string(var_1345);
    }
    #[allow(unused_mut)]
    let mut scope_1346 = writer.prefix("NetworkLoadBalancerArn");
    if let Some(var_1347) = &input.network_load_balancer_arn {
        scope_1346.string(var_1347);
    }
    #[allow(unused_mut)]
    let mut scope_1348 = writer.prefix("Description");
    if let Some(var_1349) = &input.description {
        scope_1348.string(var_1349);
    }
    #[allow(unused_mut)]
    let mut scope_1350 = writer.prefix("TagSpecification");
    if let Some(var_1351) = &input.tag_specifications {
        let mut list_1353 = scope_1350.start_list(true, Some("item"));
        for item_1352 in var_1351 {
            #[allow(unused_mut)]
            let mut entry_1354 = list_1353.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1354, item_1352,
            )?;
        }
        list_1353.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1355 = writer.prefix("DryRun");
    if let Some(var_1356) = &input.dry_run {
        scope_1355.boolean(*var_1356);
    }
    #[allow(unused_mut)]
    let mut scope_1357 = writer.prefix("ClientToken");
    if let Some(var_1358) = &input.client_token {
        scope_1357.string(var_1358);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway(
    input: &crate::input::CreateTransitGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateTransitGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1359 = writer.prefix("Description");
    if let Some(var_1360) = &input.description {
        scope_1359.string(var_1360);
    }
    #[allow(unused_mut)]
    let mut scope_1361 = writer.prefix("Options");
    if let Some(var_1362) = &input.options {
        crate::query_ser::serialize_structure_crate_model_transit_gateway_request_options(
            scope_1361, var_1362,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1363 = writer.prefix("TagSpecification");
    if let Some(var_1364) = &input.tag_specifications {
        let mut list_1366 = scope_1363.start_list(true, Some("item"));
        for item_1365 in var_1364 {
            #[allow(unused_mut)]
            let mut entry_1367 = list_1366.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1367, item_1365,
            )?;
        }
        list_1366.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1368 = writer.prefix("DryRun");
    if let Some(var_1369) = &input.dry_run {
        scope_1368.boolean(*var_1369);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway_connect(
    input: &crate::input::CreateTransitGatewayConnectInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateTransitGatewayConnect", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1370 = writer.prefix("TransportTransitGatewayAttachmentId");
    if let Some(var_1371) = &input.transport_transit_gateway_attachment_id {
        scope_1370.string(var_1371);
    }
    #[allow(unused_mut)]
    let mut scope_1372 = writer.prefix("Options");
    if let Some(var_1373) = &input.options {
        crate::query_ser::serialize_structure_crate_model_create_transit_gateway_connect_request_options(scope_1372, var_1373)?;
    }
    #[allow(unused_mut)]
    let mut scope_1374 = writer.prefix("TagSpecification");
    if let Some(var_1375) = &input.tag_specifications {
        let mut list_1377 = scope_1374.start_list(true, Some("item"));
        for item_1376 in var_1375 {
            #[allow(unused_mut)]
            let mut entry_1378 = list_1377.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1378, item_1376,
            )?;
        }
        list_1377.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1379 = writer.prefix("DryRun");
    if let Some(var_1380) = &input.dry_run {
        scope_1379.boolean(*var_1380);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway_connect_peer(
    input: &crate::input::CreateTransitGatewayConnectPeerInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateTransitGatewayConnectPeer",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1381 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_1382) = &input.transit_gateway_attachment_id {
        scope_1381.string(var_1382);
    }
    #[allow(unused_mut)]
    let mut scope_1383 = writer.prefix("TransitGatewayAddress");
    if let Some(var_1384) = &input.transit_gateway_address {
        scope_1383.string(var_1384);
    }
    #[allow(unused_mut)]
    let mut scope_1385 = writer.prefix("PeerAddress");
    if let Some(var_1386) = &input.peer_address {
        scope_1385.string(var_1386);
    }
    #[allow(unused_mut)]
    let mut scope_1387 = writer.prefix("BgpOptions");
    if let Some(var_1388) = &input.bgp_options {
        crate::query_ser::serialize_structure_crate_model_transit_gateway_connect_request_bgp_options(scope_1387, var_1388)?;
    }
    #[allow(unused_mut)]
    let mut scope_1389 = writer.prefix("InsideCidrBlocks");
    if let Some(var_1390) = &input.inside_cidr_blocks {
        let mut list_1392 = scope_1389.start_list(true, Some("item"));
        for item_1391 in var_1390 {
            #[allow(unused_mut)]
            let mut entry_1393 = list_1392.entry();
            entry_1393.string(item_1391);
        }
        list_1392.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1394 = writer.prefix("TagSpecification");
    if let Some(var_1395) = &input.tag_specifications {
        let mut list_1397 = scope_1394.start_list(true, Some("item"));
        for item_1396 in var_1395 {
            #[allow(unused_mut)]
            let mut entry_1398 = list_1397.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1398, item_1396,
            )?;
        }
        list_1397.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1399 = writer.prefix("DryRun");
    if let Some(var_1400) = &input.dry_run {
        scope_1399.boolean(*var_1400);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway_multicast_domain(
    input: &crate::input::CreateTransitGatewayMulticastDomainInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateTransitGatewayMulticastDomain",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1401 = writer.prefix("TransitGatewayId");
    if let Some(var_1402) = &input.transit_gateway_id {
        scope_1401.string(var_1402);
    }
    #[allow(unused_mut)]
    let mut scope_1403 = writer.prefix("Options");
    if let Some(var_1404) = &input.options {
        crate::query_ser::serialize_structure_crate_model_create_transit_gateway_multicast_domain_request_options(scope_1403, var_1404)?;
    }
    #[allow(unused_mut)]
    let mut scope_1405 = writer.prefix("TagSpecification");
    if let Some(var_1406) = &input.tag_specifications {
        let mut list_1408 = scope_1405.start_list(true, Some("item"));
        for item_1407 in var_1406 {
            #[allow(unused_mut)]
            let mut entry_1409 = list_1408.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1409, item_1407,
            )?;
        }
        list_1408.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1410 = writer.prefix("DryRun");
    if let Some(var_1411) = &input.dry_run {
        scope_1410.boolean(*var_1411);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway_peering_attachment(
    input: &crate::input::CreateTransitGatewayPeeringAttachmentInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateTransitGatewayPeeringAttachment",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1412 = writer.prefix("TransitGatewayId");
    if let Some(var_1413) = &input.transit_gateway_id {
        scope_1412.string(var_1413);
    }
    #[allow(unused_mut)]
    let mut scope_1414 = writer.prefix("PeerTransitGatewayId");
    if let Some(var_1415) = &input.peer_transit_gateway_id {
        scope_1414.string(var_1415);
    }
    #[allow(unused_mut)]
    let mut scope_1416 = writer.prefix("PeerAccountId");
    if let Some(var_1417) = &input.peer_account_id {
        scope_1416.string(var_1417);
    }
    #[allow(unused_mut)]
    let mut scope_1418 = writer.prefix("PeerRegion");
    if let Some(var_1419) = &input.peer_region {
        scope_1418.string(var_1419);
    }
    #[allow(unused_mut)]
    let mut scope_1420 = writer.prefix("TagSpecification");
    if let Some(var_1421) = &input.tag_specifications {
        let mut list_1423 = scope_1420.start_list(true, Some("item"));
        for item_1422 in var_1421 {
            #[allow(unused_mut)]
            let mut entry_1424 = list_1423.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1424, item_1422,
            )?;
        }
        list_1423.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1425 = writer.prefix("DryRun");
    if let Some(var_1426) = &input.dry_run {
        scope_1425.boolean(*var_1426);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway_prefix_list_reference(
    input: &crate::input::CreateTransitGatewayPrefixListReferenceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateTransitGatewayPrefixListReference",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1427 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_1428) = &input.transit_gateway_route_table_id {
        scope_1427.string(var_1428);
    }
    #[allow(unused_mut)]
    let mut scope_1429 = writer.prefix("PrefixListId");
    if let Some(var_1430) = &input.prefix_list_id {
        scope_1429.string(var_1430);
    }
    #[allow(unused_mut)]
    let mut scope_1431 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_1432) = &input.transit_gateway_attachment_id {
        scope_1431.string(var_1432);
    }
    #[allow(unused_mut)]
    let mut scope_1433 = writer.prefix("Blackhole");
    if let Some(var_1434) = &input.blackhole {
        scope_1433.boolean(*var_1434);
    }
    #[allow(unused_mut)]
    let mut scope_1435 = writer.prefix("DryRun");
    if let Some(var_1436) = &input.dry_run {
        scope_1435.boolean(*var_1436);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway_route(
    input: &crate::input::CreateTransitGatewayRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateTransitGatewayRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1437 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1438) = &input.destination_cidr_block {
        scope_1437.string(var_1438);
    }
    #[allow(unused_mut)]
    let mut scope_1439 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_1440) = &input.transit_gateway_route_table_id {
        scope_1439.string(var_1440);
    }
    #[allow(unused_mut)]
    let mut scope_1441 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_1442) = &input.transit_gateway_attachment_id {
        scope_1441.string(var_1442);
    }
    #[allow(unused_mut)]
    let mut scope_1443 = writer.prefix("Blackhole");
    if let Some(var_1444) = &input.blackhole {
        scope_1443.boolean(*var_1444);
    }
    #[allow(unused_mut)]
    let mut scope_1445 = writer.prefix("DryRun");
    if let Some(var_1446) = &input.dry_run {
        scope_1445.boolean(*var_1446);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway_route_table(
    input: &crate::input::CreateTransitGatewayRouteTableInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateTransitGatewayRouteTable",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1447 = writer.prefix("TransitGatewayId");
    if let Some(var_1448) = &input.transit_gateway_id {
        scope_1447.string(var_1448);
    }
    #[allow(unused_mut)]
    let mut scope_1449 = writer.prefix("TagSpecifications");
    if let Some(var_1450) = &input.tag_specifications {
        let mut list_1452 = scope_1449.start_list(true, Some("item"));
        for item_1451 in var_1450 {
            #[allow(unused_mut)]
            let mut entry_1453 = list_1452.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1453, item_1451,
            )?;
        }
        list_1452.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1454 = writer.prefix("DryRun");
    if let Some(var_1455) = &input.dry_run {
        scope_1454.boolean(*var_1455);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway_vpc_attachment(
    input: &crate::input::CreateTransitGatewayVpcAttachmentInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateTransitGatewayVpcAttachment",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1456 = writer.prefix("TransitGatewayId");
    if let Some(var_1457) = &input.transit_gateway_id {
        scope_1456.string(var_1457);
    }
    #[allow(unused_mut)]
    let mut scope_1458 = writer.prefix("VpcId");
    if let Some(var_1459) = &input.vpc_id {
        scope_1458.string(var_1459);
    }
    #[allow(unused_mut)]
    let mut scope_1460 = writer.prefix("SubnetIds");
    if let Some(var_1461) = &input.subnet_ids {
        let mut list_1463 = scope_1460.start_list(true, Some("item"));
        for item_1462 in var_1461 {
            #[allow(unused_mut)]
            let mut entry_1464 = list_1463.entry();
            entry_1464.string(item_1462);
        }
        list_1463.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1465 = writer.prefix("Options");
    if let Some(var_1466) = &input.options {
        crate::query_ser::serialize_structure_crate_model_create_transit_gateway_vpc_attachment_request_options(scope_1465, var_1466)?;
    }
    #[allow(unused_mut)]
    let mut scope_1467 = writer.prefix("TagSpecifications");
    if let Some(var_1468) = &input.tag_specifications {
        let mut list_1470 = scope_1467.start_list(true, Some("item"));
        for item_1469 in var_1468 {
            #[allow(unused_mut)]
            let mut entry_1471 = list_1470.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1471, item_1469,
            )?;
        }
        list_1470.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1472 = writer.prefix("DryRun");
    if let Some(var_1473) = &input.dry_run {
        scope_1472.boolean(*var_1473);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_volume(
    input: &crate::input::CreateVolumeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateVolume", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1474 = writer.prefix("AvailabilityZone");
    if let Some(var_1475) = &input.availability_zone {
        scope_1474.string(var_1475);
    }
    #[allow(unused_mut)]
    let mut scope_1476 = writer.prefix("Encrypted");
    if let Some(var_1477) = &input.encrypted {
        scope_1476.boolean(*var_1477);
    }
    #[allow(unused_mut)]
    let mut scope_1478 = writer.prefix("Iops");
    if let Some(var_1479) = &input.iops {
        scope_1478.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1479).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1480 = writer.prefix("KmsKeyId");
    if let Some(var_1481) = &input.kms_key_id {
        scope_1480.string(var_1481);
    }
    #[allow(unused_mut)]
    let mut scope_1482 = writer.prefix("OutpostArn");
    if let Some(var_1483) = &input.outpost_arn {
        scope_1482.string(var_1483);
    }
    #[allow(unused_mut)]
    let mut scope_1484 = writer.prefix("Size");
    if let Some(var_1485) = &input.size {
        scope_1484.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1485).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1486 = writer.prefix("SnapshotId");
    if let Some(var_1487) = &input.snapshot_id {
        scope_1486.string(var_1487);
    }
    #[allow(unused_mut)]
    let mut scope_1488 = writer.prefix("VolumeType");
    if let Some(var_1489) = &input.volume_type {
        scope_1488.string(var_1489.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1490 = writer.prefix("DryRun");
    if let Some(var_1491) = &input.dry_run {
        scope_1490.boolean(*var_1491);
    }
    #[allow(unused_mut)]
    let mut scope_1492 = writer.prefix("TagSpecification");
    if let Some(var_1493) = &input.tag_specifications {
        let mut list_1495 = scope_1492.start_list(true, Some("item"));
        for item_1494 in var_1493 {
            #[allow(unused_mut)]
            let mut entry_1496 = list_1495.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1496, item_1494,
            )?;
        }
        list_1495.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1497 = writer.prefix("MultiAttachEnabled");
    if let Some(var_1498) = &input.multi_attach_enabled {
        scope_1497.boolean(*var_1498);
    }
    #[allow(unused_mut)]
    let mut scope_1499 = writer.prefix("Throughput");
    if let Some(var_1500) = &input.throughput {
        scope_1499.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1500).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1501 = writer.prefix("ClientToken");
    if let Some(var_1502) = &input.client_token {
        scope_1501.string(var_1502);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_vpc(
    input: &crate::input::CreateVpcInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateVpc", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1503 = writer.prefix("CidrBlock");
    if let Some(var_1504) = &input.cidr_block {
        scope_1503.string(var_1504);
    }
    #[allow(unused_mut)]
    let mut scope_1505 = writer.prefix("AmazonProvidedIpv6CidrBlock");
    if let Some(var_1506) = &input.amazon_provided_ipv6_cidr_block {
        scope_1505.boolean(*var_1506);
    }
    #[allow(unused_mut)]
    let mut scope_1507 = writer.prefix("Ipv6Pool");
    if let Some(var_1508) = &input.ipv6_pool {
        scope_1507.string(var_1508);
    }
    #[allow(unused_mut)]
    let mut scope_1509 = writer.prefix("Ipv6CidrBlock");
    if let Some(var_1510) = &input.ipv6_cidr_block {
        scope_1509.string(var_1510);
    }
    #[allow(unused_mut)]
    let mut scope_1511 = writer.prefix("Ipv4IpamPoolId");
    if let Some(var_1512) = &input.ipv4_ipam_pool_id {
        scope_1511.string(var_1512);
    }
    #[allow(unused_mut)]
    let mut scope_1513 = writer.prefix("Ipv4NetmaskLength");
    if let Some(var_1514) = &input.ipv4_netmask_length {
        scope_1513.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1514).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1515 = writer.prefix("Ipv6IpamPoolId");
    if let Some(var_1516) = &input.ipv6_ipam_pool_id {
        scope_1515.string(var_1516);
    }
    #[allow(unused_mut)]
    let mut scope_1517 = writer.prefix("Ipv6NetmaskLength");
    if let Some(var_1518) = &input.ipv6_netmask_length {
        scope_1517.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1518).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1519 = writer.prefix("DryRun");
    if let Some(var_1520) = &input.dry_run {
        scope_1519.boolean(*var_1520);
    }
    #[allow(unused_mut)]
    let mut scope_1521 = writer.prefix("InstanceTenancy");
    if let Some(var_1522) = &input.instance_tenancy {
        scope_1521.string(var_1522.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1523 = writer.prefix("Ipv6CidrBlockNetworkBorderGroup");
    if let Some(var_1524) = &input.ipv6_cidr_block_network_border_group {
        scope_1523.string(var_1524);
    }
    #[allow(unused_mut)]
    let mut scope_1525 = writer.prefix("TagSpecification");
    if let Some(var_1526) = &input.tag_specifications {
        let mut list_1528 = scope_1525.start_list(true, Some("item"));
        for item_1527 in var_1526 {
            #[allow(unused_mut)]
            let mut entry_1529 = list_1528.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1529, item_1527,
            )?;
        }
        list_1528.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_vpc_endpoint(
    input: &crate::input::CreateVpcEndpointInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateVpcEndpoint", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1530 = writer.prefix("DryRun");
    if let Some(var_1531) = &input.dry_run {
        scope_1530.boolean(*var_1531);
    }
    #[allow(unused_mut)]
    let mut scope_1532 = writer.prefix("VpcEndpointType");
    if let Some(var_1533) = &input.vpc_endpoint_type {
        scope_1532.string(var_1533.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1534 = writer.prefix("VpcId");
    if let Some(var_1535) = &input.vpc_id {
        scope_1534.string(var_1535);
    }
    #[allow(unused_mut)]
    let mut scope_1536 = writer.prefix("ServiceName");
    if let Some(var_1537) = &input.service_name {
        scope_1536.string(var_1537);
    }
    #[allow(unused_mut)]
    let mut scope_1538 = writer.prefix("PolicyDocument");
    if let Some(var_1539) = &input.policy_document {
        scope_1538.string(var_1539);
    }
    #[allow(unused_mut)]
    let mut scope_1540 = writer.prefix("RouteTableId");
    if let Some(var_1541) = &input.route_table_ids {
        let mut list_1543 = scope_1540.start_list(true, Some("item"));
        for item_1542 in var_1541 {
            #[allow(unused_mut)]
            let mut entry_1544 = list_1543.entry();
            entry_1544.string(item_1542);
        }
        list_1543.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1545 = writer.prefix("SubnetId");
    if let Some(var_1546) = &input.subnet_ids {
        let mut list_1548 = scope_1545.start_list(true, Some("item"));
        for item_1547 in var_1546 {
            #[allow(unused_mut)]
            let mut entry_1549 = list_1548.entry();
            entry_1549.string(item_1547);
        }
        list_1548.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1550 = writer.prefix("SecurityGroupId");
    if let Some(var_1551) = &input.security_group_ids {
        let mut list_1553 = scope_1550.start_list(true, Some("item"));
        for item_1552 in var_1551 {
            #[allow(unused_mut)]
            let mut entry_1554 = list_1553.entry();
            entry_1554.string(item_1552);
        }
        list_1553.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1555 = writer.prefix("ClientToken");
    if let Some(var_1556) = &input.client_token {
        scope_1555.string(var_1556);
    }
    #[allow(unused_mut)]
    let mut scope_1557 = writer.prefix("PrivateDnsEnabled");
    if let Some(var_1558) = &input.private_dns_enabled {
        scope_1557.boolean(*var_1558);
    }
    #[allow(unused_mut)]
    let mut scope_1559 = writer.prefix("TagSpecification");
    if let Some(var_1560) = &input.tag_specifications {
        let mut list_1562 = scope_1559.start_list(true, Some("item"));
        for item_1561 in var_1560 {
            #[allow(unused_mut)]
            let mut entry_1563 = list_1562.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1563, item_1561,
            )?;
        }
        list_1562.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_vpc_endpoint_connection_notification(
    input: &crate::input::CreateVpcEndpointConnectionNotificationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateVpcEndpointConnectionNotification",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1564 = writer.prefix("DryRun");
    if let Some(var_1565) = &input.dry_run {
        scope_1564.boolean(*var_1565);
    }
    #[allow(unused_mut)]
    let mut scope_1566 = writer.prefix("ServiceId");
    if let Some(var_1567) = &input.service_id {
        scope_1566.string(var_1567);
    }
    #[allow(unused_mut)]
    let mut scope_1568 = writer.prefix("VpcEndpointId");
    if let Some(var_1569) = &input.vpc_endpoint_id {
        scope_1568.string(var_1569);
    }
    #[allow(unused_mut)]
    let mut scope_1570 = writer.prefix("ConnectionNotificationArn");
    if let Some(var_1571) = &input.connection_notification_arn {
        scope_1570.string(var_1571);
    }
    #[allow(unused_mut)]
    let mut scope_1572 = writer.prefix("ConnectionEvents");
    if let Some(var_1573) = &input.connection_events {
        let mut list_1575 = scope_1572.start_list(true, Some("item"));
        for item_1574 in var_1573 {
            #[allow(unused_mut)]
            let mut entry_1576 = list_1575.entry();
            entry_1576.string(item_1574);
        }
        list_1575.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1577 = writer.prefix("ClientToken");
    if let Some(var_1578) = &input.client_token {
        scope_1577.string(var_1578);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_vpc_endpoint_service_configuration(
    input: &crate::input::CreateVpcEndpointServiceConfigurationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateVpcEndpointServiceConfiguration",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1579 = writer.prefix("DryRun");
    if let Some(var_1580) = &input.dry_run {
        scope_1579.boolean(*var_1580);
    }
    #[allow(unused_mut)]
    let mut scope_1581 = writer.prefix("AcceptanceRequired");
    if let Some(var_1582) = &input.acceptance_required {
        scope_1581.boolean(*var_1582);
    }
    #[allow(unused_mut)]
    let mut scope_1583 = writer.prefix("PrivateDnsName");
    if let Some(var_1584) = &input.private_dns_name {
        scope_1583.string(var_1584);
    }
    #[allow(unused_mut)]
    let mut scope_1585 = writer.prefix("NetworkLoadBalancerArn");
    if let Some(var_1586) = &input.network_load_balancer_arns {
        let mut list_1588 = scope_1585.start_list(true, Some("item"));
        for item_1587 in var_1586 {
            #[allow(unused_mut)]
            let mut entry_1589 = list_1588.entry();
            entry_1589.string(item_1587);
        }
        list_1588.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1590 = writer.prefix("GatewayLoadBalancerArn");
    if let Some(var_1591) = &input.gateway_load_balancer_arns {
        let mut list_1593 = scope_1590.start_list(true, Some("item"));
        for item_1592 in var_1591 {
            #[allow(unused_mut)]
            let mut entry_1594 = list_1593.entry();
            entry_1594.string(item_1592);
        }
        list_1593.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1595 = writer.prefix("ClientToken");
    if let Some(var_1596) = &input.client_token {
        scope_1595.string(var_1596);
    }
    #[allow(unused_mut)]
    let mut scope_1597 = writer.prefix("TagSpecification");
    if let Some(var_1598) = &input.tag_specifications {
        let mut list_1600 = scope_1597.start_list(true, Some("item"));
        for item_1599 in var_1598 {
            #[allow(unused_mut)]
            let mut entry_1601 = list_1600.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1601, item_1599,
            )?;
        }
        list_1600.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_vpc_peering_connection(
    input: &crate::input::CreateVpcPeeringConnectionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateVpcPeeringConnection", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1602 = writer.prefix("DryRun");
    if let Some(var_1603) = &input.dry_run {
        scope_1602.boolean(*var_1603);
    }
    #[allow(unused_mut)]
    let mut scope_1604 = writer.prefix("PeerOwnerId");
    if let Some(var_1605) = &input.peer_owner_id {
        scope_1604.string(var_1605);
    }
    #[allow(unused_mut)]
    let mut scope_1606 = writer.prefix("PeerVpcId");
    if let Some(var_1607) = &input.peer_vpc_id {
        scope_1606.string(var_1607);
    }
    #[allow(unused_mut)]
    let mut scope_1608 = writer.prefix("VpcId");
    if let Some(var_1609) = &input.vpc_id {
        scope_1608.string(var_1609);
    }
    #[allow(unused_mut)]
    let mut scope_1610 = writer.prefix("PeerRegion");
    if let Some(var_1611) = &input.peer_region {
        scope_1610.string(var_1611);
    }
    #[allow(unused_mut)]
    let mut scope_1612 = writer.prefix("TagSpecification");
    if let Some(var_1613) = &input.tag_specifications {
        let mut list_1615 = scope_1612.start_list(true, Some("item"));
        for item_1614 in var_1613 {
            #[allow(unused_mut)]
            let mut entry_1616 = list_1615.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1616, item_1614,
            )?;
        }
        list_1615.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_vpn_connection(
    input: &crate::input::CreateVpnConnectionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateVpnConnection", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1617 = writer.prefix("CustomerGatewayId");
    if let Some(var_1618) = &input.customer_gateway_id {
        scope_1617.string(var_1618);
    }
    #[allow(unused_mut)]
    let mut scope_1619 = writer.prefix("Type");
    if let Some(var_1620) = &input.r#type {
        scope_1619.string(var_1620);
    }
    #[allow(unused_mut)]
    let mut scope_1621 = writer.prefix("VpnGatewayId");
    if let Some(var_1622) = &input.vpn_gateway_id {
        scope_1621.string(var_1622);
    }
    #[allow(unused_mut)]
    let mut scope_1623 = writer.prefix("TransitGatewayId");
    if let Some(var_1624) = &input.transit_gateway_id {
        scope_1623.string(var_1624);
    }
    #[allow(unused_mut)]
    let mut scope_1625 = writer.prefix("DryRun");
    if let Some(var_1626) = &input.dry_run {
        scope_1625.boolean(*var_1626);
    }
    #[allow(unused_mut)]
    let mut scope_1627 = writer.prefix("Options");
    if let Some(var_1628) = &input.options {
        crate::query_ser::serialize_structure_crate_model_vpn_connection_options_specification(
            scope_1627, var_1628,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1629 = writer.prefix("TagSpecification");
    if let Some(var_1630) = &input.tag_specifications {
        let mut list_1632 = scope_1629.start_list(true, Some("item"));
        for item_1631 in var_1630 {
            #[allow(unused_mut)]
            let mut entry_1633 = list_1632.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1633, item_1631,
            )?;
        }
        list_1632.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_vpn_connection_route(
    input: &crate::input::CreateVpnConnectionRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateVpnConnectionRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1634 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1635) = &input.destination_cidr_block {
        scope_1634.string(var_1635);
    }
    #[allow(unused_mut)]
    let mut scope_1636 = writer.prefix("VpnConnectionId");
    if let Some(var_1637) = &input.vpn_connection_id {
        scope_1636.string(var_1637);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_vpn_gateway(
    input: &crate::input::CreateVpnGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateVpnGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1638 = writer.prefix("AvailabilityZone");
    if let Some(var_1639) = &input.availability_zone {
        scope_1638.string(var_1639);
    }
    #[allow(unused_mut)]
    let mut scope_1640 = writer.prefix("Type");
    if let Some(var_1641) = &input.r#type {
        scope_1640.string(var_1641.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1642 = writer.prefix("TagSpecification");
    if let Some(var_1643) = &input.tag_specifications {
        let mut list_1645 = scope_1642.start_list(true, Some("item"));
        for item_1644 in var_1643 {
            #[allow(unused_mut)]
            let mut entry_1646 = list_1645.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1646, item_1644,
            )?;
        }
        list_1645.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1647 = writer.prefix("AmazonSideAsn");
    if let Some(var_1648) = &input.amazon_side_asn {
        scope_1647.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1648).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1649 = writer.prefix("DryRun");
    if let Some(var_1650) = &input.dry_run {
        scope_1649.boolean(*var_1650);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_carrier_gateway(
    input: &crate::input::DeleteCarrierGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteCarrierGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1651 = writer.prefix("CarrierGatewayId");
    if let Some(var_1652) = &input.carrier_gateway_id {
        scope_1651.string(var_1652);
    }
    #[allow(unused_mut)]
    let mut scope_1653 = writer.prefix("DryRun");
    if let Some(var_1654) = &input.dry_run {
        scope_1653.boolean(*var_1654);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_client_vpn_endpoint(
    input: &crate::input::DeleteClientVpnEndpointInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteClientVpnEndpoint", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1655 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_1656) = &input.client_vpn_endpoint_id {
        scope_1655.string(var_1656);
    }
    #[allow(unused_mut)]
    let mut scope_1657 = writer.prefix("DryRun");
    if let Some(var_1658) = &input.dry_run {
        scope_1657.boolean(*var_1658);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_client_vpn_route(
    input: &crate::input::DeleteClientVpnRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteClientVpnRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1659 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_1660) = &input.client_vpn_endpoint_id {
        scope_1659.string(var_1660);
    }
    #[allow(unused_mut)]
    let mut scope_1661 = writer.prefix("TargetVpcSubnetId");
    if let Some(var_1662) = &input.target_vpc_subnet_id {
        scope_1661.string(var_1662);
    }
    #[allow(unused_mut)]
    let mut scope_1663 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1664) = &input.destination_cidr_block {
        scope_1663.string(var_1664);
    }
    #[allow(unused_mut)]
    let mut scope_1665 = writer.prefix("DryRun");
    if let Some(var_1666) = &input.dry_run {
        scope_1665.boolean(*var_1666);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_customer_gateway(
    input: &crate::input::DeleteCustomerGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteCustomerGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1667 = writer.prefix("CustomerGatewayId");
    if let Some(var_1668) = &input.customer_gateway_id {
        scope_1667.string(var_1668);
    }
    #[allow(unused_mut)]
    let mut scope_1669 = writer.prefix("DryRun");
    if let Some(var_1670) = &input.dry_run {
        scope_1669.boolean(*var_1670);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_dhcp_options(
    input: &crate::input::DeleteDhcpOptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteDhcpOptions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1671 = writer.prefix("DhcpOptionsId");
    if let Some(var_1672) = &input.dhcp_options_id {
        scope_1671.string(var_1672);
    }
    #[allow(unused_mut)]
    let mut scope_1673 = writer.prefix("DryRun");
    if let Some(var_1674) = &input.dry_run {
        scope_1673.boolean(*var_1674);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_egress_only_internet_gateway(
    input: &crate::input::DeleteEgressOnlyInternetGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteEgressOnlyInternetGateway",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1675 = writer.prefix("DryRun");
    if let Some(var_1676) = &input.dry_run {
        scope_1675.boolean(*var_1676);
    }
    #[allow(unused_mut)]
    let mut scope_1677 = writer.prefix("EgressOnlyInternetGatewayId");
    if let Some(var_1678) = &input.egress_only_internet_gateway_id {
        scope_1677.string(var_1678);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_fleets(
    input: &crate::input::DeleteFleetsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteFleets", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1679 = writer.prefix("DryRun");
    if let Some(var_1680) = &input.dry_run {
        scope_1679.boolean(*var_1680);
    }
    #[allow(unused_mut)]
    let mut scope_1681 = writer.prefix("FleetId");
    if let Some(var_1682) = &input.fleet_ids {
        let mut list_1684 = scope_1681.start_list(true, None);
        for item_1683 in var_1682 {
            #[allow(unused_mut)]
            let mut entry_1685 = list_1684.entry();
            entry_1685.string(item_1683);
        }
        list_1684.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1686 = writer.prefix("TerminateInstances");
    if let Some(var_1687) = &input.terminate_instances {
        scope_1686.boolean(*var_1687);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_flow_logs(
    input: &crate::input::DeleteFlowLogsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteFlowLogs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1688 = writer.prefix("DryRun");
    if let Some(var_1689) = &input.dry_run {
        scope_1688.boolean(*var_1689);
    }
    #[allow(unused_mut)]
    let mut scope_1690 = writer.prefix("FlowLogId");
    if let Some(var_1691) = &input.flow_log_ids {
        let mut list_1693 = scope_1690.start_list(true, Some("item"));
        for item_1692 in var_1691 {
            #[allow(unused_mut)]
            let mut entry_1694 = list_1693.entry();
            entry_1694.string(item_1692);
        }
        list_1693.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_fpga_image(
    input: &crate::input::DeleteFpgaImageInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteFpgaImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1695 = writer.prefix("DryRun");
    if let Some(var_1696) = &input.dry_run {
        scope_1695.boolean(*var_1696);
    }
    #[allow(unused_mut)]
    let mut scope_1697 = writer.prefix("FpgaImageId");
    if let Some(var_1698) = &input.fpga_image_id {
        scope_1697.string(var_1698);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_instance_event_window(
    input: &crate::input::DeleteInstanceEventWindowInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteInstanceEventWindow", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1699 = writer.prefix("DryRun");
    if let Some(var_1700) = &input.dry_run {
        scope_1699.boolean(*var_1700);
    }
    #[allow(unused_mut)]
    let mut scope_1701 = writer.prefix("ForceDelete");
    if let Some(var_1702) = &input.force_delete {
        scope_1701.boolean(*var_1702);
    }
    #[allow(unused_mut)]
    let mut scope_1703 = writer.prefix("InstanceEventWindowId");
    if let Some(var_1704) = &input.instance_event_window_id {
        scope_1703.string(var_1704);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_internet_gateway(
    input: &crate::input::DeleteInternetGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteInternetGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1705 = writer.prefix("DryRun");
    if let Some(var_1706) = &input.dry_run {
        scope_1705.boolean(*var_1706);
    }
    #[allow(unused_mut)]
    let mut scope_1707 = writer.prefix("InternetGatewayId");
    if let Some(var_1708) = &input.internet_gateway_id {
        scope_1707.string(var_1708);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_ipam(
    input: &crate::input::DeleteIpamInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteIpam", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1709 = writer.prefix("DryRun");
    if let Some(var_1710) = &input.dry_run {
        scope_1709.boolean(*var_1710);
    }
    #[allow(unused_mut)]
    let mut scope_1711 = writer.prefix("IpamId");
    if let Some(var_1712) = &input.ipam_id {
        scope_1711.string(var_1712);
    }
    #[allow(unused_mut)]
    let mut scope_1713 = writer.prefix("Cascade");
    if let Some(var_1714) = &input.cascade {
        scope_1713.boolean(*var_1714);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_ipam_pool(
    input: &crate::input::DeleteIpamPoolInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteIpamPool", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1715 = writer.prefix("DryRun");
    if let Some(var_1716) = &input.dry_run {
        scope_1715.boolean(*var_1716);
    }
    #[allow(unused_mut)]
    let mut scope_1717 = writer.prefix("IpamPoolId");
    if let Some(var_1718) = &input.ipam_pool_id {
        scope_1717.string(var_1718);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_ipam_scope(
    input: &crate::input::DeleteIpamScopeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteIpamScope", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1719 = writer.prefix("DryRun");
    if let Some(var_1720) = &input.dry_run {
        scope_1719.boolean(*var_1720);
    }
    #[allow(unused_mut)]
    let mut scope_1721 = writer.prefix("IpamScopeId");
    if let Some(var_1722) = &input.ipam_scope_id {
        scope_1721.string(var_1722);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_key_pair(
    input: &crate::input::DeleteKeyPairInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteKeyPair", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1723 = writer.prefix("KeyName");
    if let Some(var_1724) = &input.key_name {
        scope_1723.string(var_1724);
    }
    #[allow(unused_mut)]
    let mut scope_1725 = writer.prefix("KeyPairId");
    if let Some(var_1726) = &input.key_pair_id {
        scope_1725.string(var_1726);
    }
    #[allow(unused_mut)]
    let mut scope_1727 = writer.prefix("DryRun");
    if let Some(var_1728) = &input.dry_run {
        scope_1727.boolean(*var_1728);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_launch_template(
    input: &crate::input::DeleteLaunchTemplateInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteLaunchTemplate", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1729 = writer.prefix("DryRun");
    if let Some(var_1730) = &input.dry_run {
        scope_1729.boolean(*var_1730);
    }
    #[allow(unused_mut)]
    let mut scope_1731 = writer.prefix("LaunchTemplateId");
    if let Some(var_1732) = &input.launch_template_id {
        scope_1731.string(var_1732);
    }
    #[allow(unused_mut)]
    let mut scope_1733 = writer.prefix("LaunchTemplateName");
    if let Some(var_1734) = &input.launch_template_name {
        scope_1733.string(var_1734);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_launch_template_versions(
    input: &crate::input::DeleteLaunchTemplateVersionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteLaunchTemplateVersions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1735 = writer.prefix("DryRun");
    if let Some(var_1736) = &input.dry_run {
        scope_1735.boolean(*var_1736);
    }
    #[allow(unused_mut)]
    let mut scope_1737 = writer.prefix("LaunchTemplateId");
    if let Some(var_1738) = &input.launch_template_id {
        scope_1737.string(var_1738);
    }
    #[allow(unused_mut)]
    let mut scope_1739 = writer.prefix("LaunchTemplateName");
    if let Some(var_1740) = &input.launch_template_name {
        scope_1739.string(var_1740);
    }
    #[allow(unused_mut)]
    let mut scope_1741 = writer.prefix("LaunchTemplateVersion");
    if let Some(var_1742) = &input.versions {
        let mut list_1744 = scope_1741.start_list(true, Some("item"));
        for item_1743 in var_1742 {
            #[allow(unused_mut)]
            let mut entry_1745 = list_1744.entry();
            entry_1745.string(item_1743);
        }
        list_1744.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_local_gateway_route(
    input: &crate::input::DeleteLocalGatewayRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteLocalGatewayRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1746 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1747) = &input.destination_cidr_block {
        scope_1746.string(var_1747);
    }
    #[allow(unused_mut)]
    let mut scope_1748 = writer.prefix("LocalGatewayRouteTableId");
    if let Some(var_1749) = &input.local_gateway_route_table_id {
        scope_1748.string(var_1749);
    }
    #[allow(unused_mut)]
    let mut scope_1750 = writer.prefix("DryRun");
    if let Some(var_1751) = &input.dry_run {
        scope_1750.boolean(*var_1751);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_local_gateway_route_table_vpc_association(
    input: &crate::input::DeleteLocalGatewayRouteTableVpcAssociationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteLocalGatewayRouteTableVpcAssociation",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1752 = writer.prefix("LocalGatewayRouteTableVpcAssociationId");
    if let Some(var_1753) = &input.local_gateway_route_table_vpc_association_id {
        scope_1752.string(var_1753);
    }
    #[allow(unused_mut)]
    let mut scope_1754 = writer.prefix("DryRun");
    if let Some(var_1755) = &input.dry_run {
        scope_1754.boolean(*var_1755);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_managed_prefix_list(
    input: &crate::input::DeleteManagedPrefixListInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteManagedPrefixList", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1756 = writer.prefix("DryRun");
    if let Some(var_1757) = &input.dry_run {
        scope_1756.boolean(*var_1757);
    }
    #[allow(unused_mut)]
    let mut scope_1758 = writer.prefix("PrefixListId");
    if let Some(var_1759) = &input.prefix_list_id {
        scope_1758.string(var_1759);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_nat_gateway(
    input: &crate::input::DeleteNatGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteNatGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1760 = writer.prefix("DryRun");
    if let Some(var_1761) = &input.dry_run {
        scope_1760.boolean(*var_1761);
    }
    #[allow(unused_mut)]
    let mut scope_1762 = writer.prefix("NatGatewayId");
    if let Some(var_1763) = &input.nat_gateway_id {
        scope_1762.string(var_1763);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_network_acl(
    input: &crate::input::DeleteNetworkAclInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteNetworkAcl", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1764 = writer.prefix("DryRun");
    if let Some(var_1765) = &input.dry_run {
        scope_1764.boolean(*var_1765);
    }
    #[allow(unused_mut)]
    let mut scope_1766 = writer.prefix("NetworkAclId");
    if let Some(var_1767) = &input.network_acl_id {
        scope_1766.string(var_1767);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_network_acl_entry(
    input: &crate::input::DeleteNetworkAclEntryInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteNetworkAclEntry", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1768 = writer.prefix("DryRun");
    if let Some(var_1769) = &input.dry_run {
        scope_1768.boolean(*var_1769);
    }
    #[allow(unused_mut)]
    let mut scope_1770 = writer.prefix("Egress");
    if let Some(var_1771) = &input.egress {
        scope_1770.boolean(*var_1771);
    }
    #[allow(unused_mut)]
    let mut scope_1772 = writer.prefix("NetworkAclId");
    if let Some(var_1773) = &input.network_acl_id {
        scope_1772.string(var_1773);
    }
    #[allow(unused_mut)]
    let mut scope_1774 = writer.prefix("RuleNumber");
    if let Some(var_1775) = &input.rule_number {
        scope_1774.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1775).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_network_insights_access_scope(
    input: &crate::input::DeleteNetworkInsightsAccessScopeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteNetworkInsightsAccessScope",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1776 = writer.prefix("DryRun");
    if let Some(var_1777) = &input.dry_run {
        scope_1776.boolean(*var_1777);
    }
    #[allow(unused_mut)]
    let mut scope_1778 = writer.prefix("NetworkInsightsAccessScopeId");
    if let Some(var_1779) = &input.network_insights_access_scope_id {
        scope_1778.string(var_1779);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_network_insights_access_scope_analysis(
    input: &crate::input::DeleteNetworkInsightsAccessScopeAnalysisInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteNetworkInsightsAccessScopeAnalysis",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1780 = writer.prefix("NetworkInsightsAccessScopeAnalysisId");
    if let Some(var_1781) = &input.network_insights_access_scope_analysis_id {
        scope_1780.string(var_1781);
    }
    #[allow(unused_mut)]
    let mut scope_1782 = writer.prefix("DryRun");
    if let Some(var_1783) = &input.dry_run {
        scope_1782.boolean(*var_1783);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_network_insights_analysis(
    input: &crate::input::DeleteNetworkInsightsAnalysisInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteNetworkInsightsAnalysis", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1784 = writer.prefix("DryRun");
    if let Some(var_1785) = &input.dry_run {
        scope_1784.boolean(*var_1785);
    }
    #[allow(unused_mut)]
    let mut scope_1786 = writer.prefix("NetworkInsightsAnalysisId");
    if let Some(var_1787) = &input.network_insights_analysis_id {
        scope_1786.string(var_1787);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_network_insights_path(
    input: &crate::input::DeleteNetworkInsightsPathInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteNetworkInsightsPath", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1788 = writer.prefix("DryRun");
    if let Some(var_1789) = &input.dry_run {
        scope_1788.boolean(*var_1789);
    }
    #[allow(unused_mut)]
    let mut scope_1790 = writer.prefix("NetworkInsightsPathId");
    if let Some(var_1791) = &input.network_insights_path_id {
        scope_1790.string(var_1791);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_network_interface(
    input: &crate::input::DeleteNetworkInterfaceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteNetworkInterface", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1792 = writer.prefix("DryRun");
    if let Some(var_1793) = &input.dry_run {
        scope_1792.boolean(*var_1793);
    }
    #[allow(unused_mut)]
    let mut scope_1794 = writer.prefix("NetworkInterfaceId");
    if let Some(var_1795) = &input.network_interface_id {
        scope_1794.string(var_1795);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_network_interface_permission(
    input: &crate::input::DeleteNetworkInterfacePermissionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteNetworkInterfacePermission",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1796 = writer.prefix("NetworkInterfacePermissionId");
    if let Some(var_1797) = &input.network_interface_permission_id {
        scope_1796.string(var_1797);
    }
    #[allow(unused_mut)]
    let mut scope_1798 = writer.prefix("Force");
    if let Some(var_1799) = &input.force {
        scope_1798.boolean(*var_1799);
    }
    #[allow(unused_mut)]
    let mut scope_1800 = writer.prefix("DryRun");
    if let Some(var_1801) = &input.dry_run {
        scope_1800.boolean(*var_1801);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_placement_group(
    input: &crate::input::DeletePlacementGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeletePlacementGroup", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1802 = writer.prefix("DryRun");
    if let Some(var_1803) = &input.dry_run {
        scope_1802.boolean(*var_1803);
    }
    #[allow(unused_mut)]
    let mut scope_1804 = writer.prefix("GroupName");
    if let Some(var_1805) = &input.group_name {
        scope_1804.string(var_1805);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_public_ipv4_pool(
    input: &crate::input::DeletePublicIpv4PoolInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeletePublicIpv4Pool", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1806 = writer.prefix("DryRun");
    if let Some(var_1807) = &input.dry_run {
        scope_1806.boolean(*var_1807);
    }
    #[allow(unused_mut)]
    let mut scope_1808 = writer.prefix("PoolId");
    if let Some(var_1809) = &input.pool_id {
        scope_1808.string(var_1809);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_queued_reserved_instances(
    input: &crate::input::DeleteQueuedReservedInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteQueuedReservedInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1810 = writer.prefix("DryRun");
    if let Some(var_1811) = &input.dry_run {
        scope_1810.boolean(*var_1811);
    }
    #[allow(unused_mut)]
    let mut scope_1812 = writer.prefix("ReservedInstancesId");
    if let Some(var_1813) = &input.reserved_instances_ids {
        let mut list_1815 = scope_1812.start_list(true, Some("item"));
        for item_1814 in var_1813 {
            #[allow(unused_mut)]
            let mut entry_1816 = list_1815.entry();
            entry_1816.string(item_1814);
        }
        list_1815.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_route(
    input: &crate::input::DeleteRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1817 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1818) = &input.destination_cidr_block {
        scope_1817.string(var_1818);
    }
    #[allow(unused_mut)]
    let mut scope_1819 = writer.prefix("DestinationIpv6CidrBlock");
    if let Some(var_1820) = &input.destination_ipv6_cidr_block {
        scope_1819.string(var_1820);
    }
    #[allow(unused_mut)]
    let mut scope_1821 = writer.prefix("DestinationPrefixListId");
    if let Some(var_1822) = &input.destination_prefix_list_id {
        scope_1821.string(var_1822);
    }
    #[allow(unused_mut)]
    let mut scope_1823 = writer.prefix("DryRun");
    if let Some(var_1824) = &input.dry_run {
        scope_1823.boolean(*var_1824);
    }
    #[allow(unused_mut)]
    let mut scope_1825 = writer.prefix("RouteTableId");
    if let Some(var_1826) = &input.route_table_id {
        scope_1825.string(var_1826);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_route_table(
    input: &crate::input::DeleteRouteTableInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteRouteTable", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1827 = writer.prefix("DryRun");
    if let Some(var_1828) = &input.dry_run {
        scope_1827.boolean(*var_1828);
    }
    #[allow(unused_mut)]
    let mut scope_1829 = writer.prefix("RouteTableId");
    if let Some(var_1830) = &input.route_table_id {
        scope_1829.string(var_1830);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_security_group(
    input: &crate::input::DeleteSecurityGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteSecurityGroup", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1831 = writer.prefix("GroupId");
    if let Some(var_1832) = &input.group_id {
        scope_1831.string(var_1832);
    }
    #[allow(unused_mut)]
    let mut scope_1833 = writer.prefix("GroupName");
    if let Some(var_1834) = &input.group_name {
        scope_1833.string(var_1834);
    }
    #[allow(unused_mut)]
    let mut scope_1835 = writer.prefix("DryRun");
    if let Some(var_1836) = &input.dry_run {
        scope_1835.boolean(*var_1836);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_snapshot(
    input: &crate::input::DeleteSnapshotInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteSnapshot", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1837 = writer.prefix("SnapshotId");
    if let Some(var_1838) = &input.snapshot_id {
        scope_1837.string(var_1838);
    }
    #[allow(unused_mut)]
    let mut scope_1839 = writer.prefix("DryRun");
    if let Some(var_1840) = &input.dry_run {
        scope_1839.boolean(*var_1840);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_spot_datafeed_subscription(
    input: &crate::input::DeleteSpotDatafeedSubscriptionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteSpotDatafeedSubscription",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1841 = writer.prefix("DryRun");
    if let Some(var_1842) = &input.dry_run {
        scope_1841.boolean(*var_1842);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_subnet(
    input: &crate::input::DeleteSubnetInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteSubnet", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1843 = writer.prefix("SubnetId");
    if let Some(var_1844) = &input.subnet_id {
        scope_1843.string(var_1844);
    }
    #[allow(unused_mut)]
    let mut scope_1845 = writer.prefix("DryRun");
    if let Some(var_1846) = &input.dry_run {
        scope_1845.boolean(*var_1846);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_subnet_cidr_reservation(
    input: &crate::input::DeleteSubnetCidrReservationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteSubnetCidrReservation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1847 = writer.prefix("SubnetCidrReservationId");
    if let Some(var_1848) = &input.subnet_cidr_reservation_id {
        scope_1847.string(var_1848);
    }
    #[allow(unused_mut)]
    let mut scope_1849 = writer.prefix("DryRun");
    if let Some(var_1850) = &input.dry_run {
        scope_1849.boolean(*var_1850);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_tags(
    input: &crate::input::DeleteTagsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteTags", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1851 = writer.prefix("DryRun");
    if let Some(var_1852) = &input.dry_run {
        scope_1851.boolean(*var_1852);
    }
    #[allow(unused_mut)]
    let mut scope_1853 = writer.prefix("ResourceId");
    if let Some(var_1854) = &input.resources {
        let mut list_1856 = scope_1853.start_list(true, None);
        for item_1855 in var_1854 {
            #[allow(unused_mut)]
            let mut entry_1857 = list_1856.entry();
            entry_1857.string(item_1855);
        }
        list_1856.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1858 = writer.prefix("Tag");
    if let Some(var_1859) = &input.tags {
        let mut list_1861 = scope_1858.start_list(true, Some("item"));
        for item_1860 in var_1859 {
            #[allow(unused_mut)]
            let mut entry_1862 = list_1861.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_1862, item_1860)?;
        }
        list_1861.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_traffic_mirror_filter(
    input: &crate::input::DeleteTrafficMirrorFilterInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteTrafficMirrorFilter", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1863 = writer.prefix("TrafficMirrorFilterId");
    if let Some(var_1864) = &input.traffic_mirror_filter_id {
        scope_1863.string(var_1864);
    }
    #[allow(unused_mut)]
    let mut scope_1865 = writer.prefix("DryRun");
    if let Some(var_1866) = &input.dry_run {
        scope_1865.boolean(*var_1866);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_traffic_mirror_filter_rule(
    input: &crate::input::DeleteTrafficMirrorFilterRuleInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteTrafficMirrorFilterRule", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1867 = writer.prefix("TrafficMirrorFilterRuleId");
    if let Some(var_1868) = &input.traffic_mirror_filter_rule_id {
        scope_1867.string(var_1868);
    }
    #[allow(unused_mut)]
    let mut scope_1869 = writer.prefix("DryRun");
    if let Some(var_1870) = &input.dry_run {
        scope_1869.boolean(*var_1870);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_traffic_mirror_session(
    input: &crate::input::DeleteTrafficMirrorSessionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteTrafficMirrorSession", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1871 = writer.prefix("TrafficMirrorSessionId");
    if let Some(var_1872) = &input.traffic_mirror_session_id {
        scope_1871.string(var_1872);
    }
    #[allow(unused_mut)]
    let mut scope_1873 = writer.prefix("DryRun");
    if let Some(var_1874) = &input.dry_run {
        scope_1873.boolean(*var_1874);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_traffic_mirror_target(
    input: &crate::input::DeleteTrafficMirrorTargetInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteTrafficMirrorTarget", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1875 = writer.prefix("TrafficMirrorTargetId");
    if let Some(var_1876) = &input.traffic_mirror_target_id {
        scope_1875.string(var_1876);
    }
    #[allow(unused_mut)]
    let mut scope_1877 = writer.prefix("DryRun");
    if let Some(var_1878) = &input.dry_run {
        scope_1877.boolean(*var_1878);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway(
    input: &crate::input::DeleteTransitGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteTransitGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1879 = writer.prefix("TransitGatewayId");
    if let Some(var_1880) = &input.transit_gateway_id {
        scope_1879.string(var_1880);
    }
    #[allow(unused_mut)]
    let mut scope_1881 = writer.prefix("DryRun");
    if let Some(var_1882) = &input.dry_run {
        scope_1881.boolean(*var_1882);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway_connect(
    input: &crate::input::DeleteTransitGatewayConnectInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteTransitGatewayConnect", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1883 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_1884) = &input.transit_gateway_attachment_id {
        scope_1883.string(var_1884);
    }
    #[allow(unused_mut)]
    let mut scope_1885 = writer.prefix("DryRun");
    if let Some(var_1886) = &input.dry_run {
        scope_1885.boolean(*var_1886);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway_connect_peer(
    input: &crate::input::DeleteTransitGatewayConnectPeerInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteTransitGatewayConnectPeer",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1887 = writer.prefix("TransitGatewayConnectPeerId");
    if let Some(var_1888) = &input.transit_gateway_connect_peer_id {
        scope_1887.string(var_1888);
    }
    #[allow(unused_mut)]
    let mut scope_1889 = writer.prefix("DryRun");
    if let Some(var_1890) = &input.dry_run {
        scope_1889.boolean(*var_1890);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway_multicast_domain(
    input: &crate::input::DeleteTransitGatewayMulticastDomainInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteTransitGatewayMulticastDomain",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1891 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_1892) = &input.transit_gateway_multicast_domain_id {
        scope_1891.string(var_1892);
    }
    #[allow(unused_mut)]
    let mut scope_1893 = writer.prefix("DryRun");
    if let Some(var_1894) = &input.dry_run {
        scope_1893.boolean(*var_1894);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway_peering_attachment(
    input: &crate::input::DeleteTransitGatewayPeeringAttachmentInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteTransitGatewayPeeringAttachment",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1895 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_1896) = &input.transit_gateway_attachment_id {
        scope_1895.string(var_1896);
    }
    #[allow(unused_mut)]
    let mut scope_1897 = writer.prefix("DryRun");
    if let Some(var_1898) = &input.dry_run {
        scope_1897.boolean(*var_1898);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway_prefix_list_reference(
    input: &crate::input::DeleteTransitGatewayPrefixListReferenceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteTransitGatewayPrefixListReference",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1899 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_1900) = &input.transit_gateway_route_table_id {
        scope_1899.string(var_1900);
    }
    #[allow(unused_mut)]
    let mut scope_1901 = writer.prefix("PrefixListId");
    if let Some(var_1902) = &input.prefix_list_id {
        scope_1901.string(var_1902);
    }
    #[allow(unused_mut)]
    let mut scope_1903 = writer.prefix("DryRun");
    if let Some(var_1904) = &input.dry_run {
        scope_1903.boolean(*var_1904);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway_route(
    input: &crate::input::DeleteTransitGatewayRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteTransitGatewayRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1905 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_1906) = &input.transit_gateway_route_table_id {
        scope_1905.string(var_1906);
    }
    #[allow(unused_mut)]
    let mut scope_1907 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1908) = &input.destination_cidr_block {
        scope_1907.string(var_1908);
    }
    #[allow(unused_mut)]
    let mut scope_1909 = writer.prefix("DryRun");
    if let Some(var_1910) = &input.dry_run {
        scope_1909.boolean(*var_1910);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway_route_table(
    input: &crate::input::DeleteTransitGatewayRouteTableInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteTransitGatewayRouteTable",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1911 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_1912) = &input.transit_gateway_route_table_id {
        scope_1911.string(var_1912);
    }
    #[allow(unused_mut)]
    let mut scope_1913 = writer.prefix("DryRun");
    if let Some(var_1914) = &input.dry_run {
        scope_1913.boolean(*var_1914);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway_vpc_attachment(
    input: &crate::input::DeleteTransitGatewayVpcAttachmentInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteTransitGatewayVpcAttachment",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1915 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_1916) = &input.transit_gateway_attachment_id {
        scope_1915.string(var_1916);
    }
    #[allow(unused_mut)]
    let mut scope_1917 = writer.prefix("DryRun");
    if let Some(var_1918) = &input.dry_run {
        scope_1917.boolean(*var_1918);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_volume(
    input: &crate::input::DeleteVolumeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteVolume", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1919 = writer.prefix("VolumeId");
    if let Some(var_1920) = &input.volume_id {
        scope_1919.string(var_1920);
    }
    #[allow(unused_mut)]
    let mut scope_1921 = writer.prefix("DryRun");
    if let Some(var_1922) = &input.dry_run {
        scope_1921.boolean(*var_1922);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_vpc(
    input: &crate::input::DeleteVpcInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteVpc", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1923 = writer.prefix("VpcId");
    if let Some(var_1924) = &input.vpc_id {
        scope_1923.string(var_1924);
    }
    #[allow(unused_mut)]
    let mut scope_1925 = writer.prefix("DryRun");
    if let Some(var_1926) = &input.dry_run {
        scope_1925.boolean(*var_1926);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_vpc_endpoint_connection_notifications(
    input: &crate::input::DeleteVpcEndpointConnectionNotificationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteVpcEndpointConnectionNotifications",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1927 = writer.prefix("DryRun");
    if let Some(var_1928) = &input.dry_run {
        scope_1927.boolean(*var_1928);
    }
    #[allow(unused_mut)]
    let mut scope_1929 = writer.prefix("ConnectionNotificationId");
    if let Some(var_1930) = &input.connection_notification_ids {
        let mut list_1932 = scope_1929.start_list(true, Some("item"));
        for item_1931 in var_1930 {
            #[allow(unused_mut)]
            let mut entry_1933 = list_1932.entry();
            entry_1933.string(item_1931);
        }
        list_1932.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_vpc_endpoints(
    input: &crate::input::DeleteVpcEndpointsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteVpcEndpoints", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1934 = writer.prefix("DryRun");
    if let Some(var_1935) = &input.dry_run {
        scope_1934.boolean(*var_1935);
    }
    #[allow(unused_mut)]
    let mut scope_1936 = writer.prefix("VpcEndpointId");
    if let Some(var_1937) = &input.vpc_endpoint_ids {
        let mut list_1939 = scope_1936.start_list(true, Some("item"));
        for item_1938 in var_1937 {
            #[allow(unused_mut)]
            let mut entry_1940 = list_1939.entry();
            entry_1940.string(item_1938);
        }
        list_1939.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_vpc_endpoint_service_configurations(
    input: &crate::input::DeleteVpcEndpointServiceConfigurationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteVpcEndpointServiceConfigurations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1941 = writer.prefix("DryRun");
    if let Some(var_1942) = &input.dry_run {
        scope_1941.boolean(*var_1942);
    }
    #[allow(unused_mut)]
    let mut scope_1943 = writer.prefix("ServiceId");
    if let Some(var_1944) = &input.service_ids {
        let mut list_1946 = scope_1943.start_list(true, Some("item"));
        for item_1945 in var_1944 {
            #[allow(unused_mut)]
            let mut entry_1947 = list_1946.entry();
            entry_1947.string(item_1945);
        }
        list_1946.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_vpc_peering_connection(
    input: &crate::input::DeleteVpcPeeringConnectionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteVpcPeeringConnection", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1948 = writer.prefix("DryRun");
    if let Some(var_1949) = &input.dry_run {
        scope_1948.boolean(*var_1949);
    }
    #[allow(unused_mut)]
    let mut scope_1950 = writer.prefix("VpcPeeringConnectionId");
    if let Some(var_1951) = &input.vpc_peering_connection_id {
        scope_1950.string(var_1951);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_vpn_connection(
    input: &crate::input::DeleteVpnConnectionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteVpnConnection", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1952 = writer.prefix("VpnConnectionId");
    if let Some(var_1953) = &input.vpn_connection_id {
        scope_1952.string(var_1953);
    }
    #[allow(unused_mut)]
    let mut scope_1954 = writer.prefix("DryRun");
    if let Some(var_1955) = &input.dry_run {
        scope_1954.boolean(*var_1955);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_vpn_connection_route(
    input: &crate::input::DeleteVpnConnectionRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteVpnConnectionRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1956 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1957) = &input.destination_cidr_block {
        scope_1956.string(var_1957);
    }
    #[allow(unused_mut)]
    let mut scope_1958 = writer.prefix("VpnConnectionId");
    if let Some(var_1959) = &input.vpn_connection_id {
        scope_1958.string(var_1959);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_vpn_gateway(
    input: &crate::input::DeleteVpnGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteVpnGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1960 = writer.prefix("VpnGatewayId");
    if let Some(var_1961) = &input.vpn_gateway_id {
        scope_1960.string(var_1961);
    }
    #[allow(unused_mut)]
    let mut scope_1962 = writer.prefix("DryRun");
    if let Some(var_1963) = &input.dry_run {
        scope_1962.boolean(*var_1963);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_deprovision_byoip_cidr(
    input: &crate::input::DeprovisionByoipCidrInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeprovisionByoipCidr", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1964 = writer.prefix("Cidr");
    if let Some(var_1965) = &input.cidr {
        scope_1964.string(var_1965);
    }
    #[allow(unused_mut)]
    let mut scope_1966 = writer.prefix("DryRun");
    if let Some(var_1967) = &input.dry_run {
        scope_1966.boolean(*var_1967);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_deprovision_ipam_pool_cidr(
    input: &crate::input::DeprovisionIpamPoolCidrInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeprovisionIpamPoolCidr", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1968 = writer.prefix("DryRun");
    if let Some(var_1969) = &input.dry_run {
        scope_1968.boolean(*var_1969);
    }
    #[allow(unused_mut)]
    let mut scope_1970 = writer.prefix("IpamPoolId");
    if let Some(var_1971) = &input.ipam_pool_id {
        scope_1970.string(var_1971);
    }
    #[allow(unused_mut)]
    let mut scope_1972 = writer.prefix("Cidr");
    if let Some(var_1973) = &input.cidr {
        scope_1972.string(var_1973);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_deprovision_public_ipv4_pool_cidr(
    input: &crate::input::DeprovisionPublicIpv4PoolCidrInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeprovisionPublicIpv4PoolCidr", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1974 = writer.prefix("DryRun");
    if let Some(var_1975) = &input.dry_run {
        scope_1974.boolean(*var_1975);
    }
    #[allow(unused_mut)]
    let mut scope_1976 = writer.prefix("PoolId");
    if let Some(var_1977) = &input.pool_id {
        scope_1976.string(var_1977);
    }
    #[allow(unused_mut)]
    let mut scope_1978 = writer.prefix("Cidr");
    if let Some(var_1979) = &input.cidr {
        scope_1978.string(var_1979);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_deregister_image(
    input: &crate::input::DeregisterImageInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeregisterImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1980 = writer.prefix("ImageId");
    if let Some(var_1981) = &input.image_id {
        scope_1980.string(var_1981);
    }
    #[allow(unused_mut)]
    let mut scope_1982 = writer.prefix("DryRun");
    if let Some(var_1983) = &input.dry_run {
        scope_1982.boolean(*var_1983);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_deregister_instance_event_notification_attributes(
    input: &crate::input::DeregisterInstanceEventNotificationAttributesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeregisterInstanceEventNotificationAttributes",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1984 = writer.prefix("DryRun");
    if let Some(var_1985) = &input.dry_run {
        scope_1984.boolean(*var_1985);
    }
    #[allow(unused_mut)]
    let mut scope_1986 = writer.prefix("InstanceTagAttribute");
    if let Some(var_1987) = &input.instance_tag_attribute {
        crate::query_ser::serialize_structure_crate_model_deregister_instance_tag_attribute_request(scope_1986, var_1987)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_deregister_transit_gateway_multicast_group_members(
    input: &crate::input::DeregisterTransitGatewayMulticastGroupMembersInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeregisterTransitGatewayMulticastGroupMembers",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1988 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_1989) = &input.transit_gateway_multicast_domain_id {
        scope_1988.string(var_1989);
    }
    #[allow(unused_mut)]
    let mut scope_1990 = writer.prefix("GroupIpAddress");
    if let Some(var_1991) = &input.group_ip_address {
        scope_1990.string(var_1991);
    }
    #[allow(unused_mut)]
    let mut scope_1992 = writer.prefix("NetworkInterfaceIds");
    if let Some(var_1993) = &input.network_interface_ids {
        let mut list_1995 = scope_1992.start_list(true, Some("item"));
        for item_1994 in var_1993 {
            #[allow(unused_mut)]
            let mut entry_1996 = list_1995.entry();
            entry_1996.string(item_1994);
        }
        list_1995.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1997 = writer.prefix("DryRun");
    if let Some(var_1998) = &input.dry_run {
        scope_1997.boolean(*var_1998);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_deregister_transit_gateway_multicast_group_sources(
    input: &crate::input::DeregisterTransitGatewayMulticastGroupSourcesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeregisterTransitGatewayMulticastGroupSources",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1999 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_2000) = &input.transit_gateway_multicast_domain_id {
        scope_1999.string(var_2000);
    }
    #[allow(unused_mut)]
    let mut scope_2001 = writer.prefix("GroupIpAddress");
    if let Some(var_2002) = &input.group_ip_address {
        scope_2001.string(var_2002);
    }
    #[allow(unused_mut)]
    let mut scope_2003 = writer.prefix("NetworkInterfaceIds");
    if let Some(var_2004) = &input.network_interface_ids {
        let mut list_2006 = scope_2003.start_list(true, Some("item"));
        for item_2005 in var_2004 {
            #[allow(unused_mut)]
            let mut entry_2007 = list_2006.entry();
            entry_2007.string(item_2005);
        }
        list_2006.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2008 = writer.prefix("DryRun");
    if let Some(var_2009) = &input.dry_run {
        scope_2008.boolean(*var_2009);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_account_attributes(
    input: &crate::input::DescribeAccountAttributesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeAccountAttributes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2010 = writer.prefix("AttributeName");
    if let Some(var_2011) = &input.attribute_names {
        let mut list_2013 = scope_2010.start_list(true, Some("attributeName"));
        for item_2012 in var_2011 {
            #[allow(unused_mut)]
            let mut entry_2014 = list_2013.entry();
            entry_2014.string(item_2012.as_str());
        }
        list_2013.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2015 = writer.prefix("DryRun");
    if let Some(var_2016) = &input.dry_run {
        scope_2015.boolean(*var_2016);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_addresses(
    input: &crate::input::DescribeAddressesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeAddresses", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2017 = writer.prefix("Filter");
    if let Some(var_2018) = &input.filters {
        let mut list_2020 = scope_2017.start_list(true, Some("Filter"));
        for item_2019 in var_2018 {
            #[allow(unused_mut)]
            let mut entry_2021 = list_2020.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2021, item_2019)?;
        }
        list_2020.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2022 = writer.prefix("PublicIp");
    if let Some(var_2023) = &input.public_ips {
        let mut list_2025 = scope_2022.start_list(true, Some("PublicIp"));
        for item_2024 in var_2023 {
            #[allow(unused_mut)]
            let mut entry_2026 = list_2025.entry();
            entry_2026.string(item_2024);
        }
        list_2025.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2027 = writer.prefix("AllocationId");
    if let Some(var_2028) = &input.allocation_ids {
        let mut list_2030 = scope_2027.start_list(true, Some("AllocationId"));
        for item_2029 in var_2028 {
            #[allow(unused_mut)]
            let mut entry_2031 = list_2030.entry();
            entry_2031.string(item_2029);
        }
        list_2030.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2032 = writer.prefix("DryRun");
    if let Some(var_2033) = &input.dry_run {
        scope_2032.boolean(*var_2033);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_addresses_attribute(
    input: &crate::input::DescribeAddressesAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeAddressesAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2034 = writer.prefix("AllocationId");
    if let Some(var_2035) = &input.allocation_ids {
        let mut list_2037 = scope_2034.start_list(true, Some("item"));
        for item_2036 in var_2035 {
            #[allow(unused_mut)]
            let mut entry_2038 = list_2037.entry();
            entry_2038.string(item_2036);
        }
        list_2037.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2039 = writer.prefix("Attribute");
    if let Some(var_2040) = &input.attribute {
        scope_2039.string(var_2040.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_2041 = writer.prefix("NextToken");
    if let Some(var_2042) = &input.next_token {
        scope_2041.string(var_2042);
    }
    #[allow(unused_mut)]
    let mut scope_2043 = writer.prefix("MaxResults");
    if let Some(var_2044) = &input.max_results {
        scope_2043.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2044).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2045 = writer.prefix("DryRun");
    if let Some(var_2046) = &input.dry_run {
        scope_2045.boolean(*var_2046);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_aggregate_id_format(
    input: &crate::input::DescribeAggregateIdFormatInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeAggregateIdFormat", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2047 = writer.prefix("DryRun");
    if let Some(var_2048) = &input.dry_run {
        scope_2047.boolean(*var_2048);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_availability_zones(
    input: &crate::input::DescribeAvailabilityZonesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeAvailabilityZones", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2049 = writer.prefix("Filter");
    if let Some(var_2050) = &input.filters {
        let mut list_2052 = scope_2049.start_list(true, Some("Filter"));
        for item_2051 in var_2050 {
            #[allow(unused_mut)]
            let mut entry_2053 = list_2052.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2053, item_2051)?;
        }
        list_2052.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2054 = writer.prefix("ZoneName");
    if let Some(var_2055) = &input.zone_names {
        let mut list_2057 = scope_2054.start_list(true, Some("ZoneName"));
        for item_2056 in var_2055 {
            #[allow(unused_mut)]
            let mut entry_2058 = list_2057.entry();
            entry_2058.string(item_2056);
        }
        list_2057.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2059 = writer.prefix("ZoneId");
    if let Some(var_2060) = &input.zone_ids {
        let mut list_2062 = scope_2059.start_list(true, Some("ZoneId"));
        for item_2061 in var_2060 {
            #[allow(unused_mut)]
            let mut entry_2063 = list_2062.entry();
            entry_2063.string(item_2061);
        }
        list_2062.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2064 = writer.prefix("AllAvailabilityZones");
    if let Some(var_2065) = &input.all_availability_zones {
        scope_2064.boolean(*var_2065);
    }
    #[allow(unused_mut)]
    let mut scope_2066 = writer.prefix("DryRun");
    if let Some(var_2067) = &input.dry_run {
        scope_2066.boolean(*var_2067);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_bundle_tasks(
    input: &crate::input::DescribeBundleTasksInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeBundleTasks", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2068 = writer.prefix("BundleId");
    if let Some(var_2069) = &input.bundle_ids {
        let mut list_2071 = scope_2068.start_list(true, Some("BundleId"));
        for item_2070 in var_2069 {
            #[allow(unused_mut)]
            let mut entry_2072 = list_2071.entry();
            entry_2072.string(item_2070);
        }
        list_2071.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2073 = writer.prefix("Filter");
    if let Some(var_2074) = &input.filters {
        let mut list_2076 = scope_2073.start_list(true, Some("Filter"));
        for item_2075 in var_2074 {
            #[allow(unused_mut)]
            let mut entry_2077 = list_2076.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2077, item_2075)?;
        }
        list_2076.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2078 = writer.prefix("DryRun");
    if let Some(var_2079) = &input.dry_run {
        scope_2078.boolean(*var_2079);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_byoip_cidrs(
    input: &crate::input::DescribeByoipCidrsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeByoipCidrs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2080 = writer.prefix("DryRun");
    if let Some(var_2081) = &input.dry_run {
        scope_2080.boolean(*var_2081);
    }
    #[allow(unused_mut)]
    let mut scope_2082 = writer.prefix("MaxResults");
    if let Some(var_2083) = &input.max_results {
        scope_2082.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2083).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2084 = writer.prefix("NextToken");
    if let Some(var_2085) = &input.next_token {
        scope_2084.string(var_2085);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_capacity_reservation_fleets(
    input: &crate::input::DescribeCapacityReservationFleetsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeCapacityReservationFleets",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2086 = writer.prefix("CapacityReservationFleetId");
    if let Some(var_2087) = &input.capacity_reservation_fleet_ids {
        let mut list_2089 = scope_2086.start_list(true, Some("item"));
        for item_2088 in var_2087 {
            #[allow(unused_mut)]
            let mut entry_2090 = list_2089.entry();
            entry_2090.string(item_2088);
        }
        list_2089.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2091 = writer.prefix("NextToken");
    if let Some(var_2092) = &input.next_token {
        scope_2091.string(var_2092);
    }
    #[allow(unused_mut)]
    let mut scope_2093 = writer.prefix("MaxResults");
    if let Some(var_2094) = &input.max_results {
        scope_2093.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2094).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2095 = writer.prefix("Filter");
    if let Some(var_2096) = &input.filters {
        let mut list_2098 = scope_2095.start_list(true, Some("Filter"));
        for item_2097 in var_2096 {
            #[allow(unused_mut)]
            let mut entry_2099 = list_2098.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2099, item_2097)?;
        }
        list_2098.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2100 = writer.prefix("DryRun");
    if let Some(var_2101) = &input.dry_run {
        scope_2100.boolean(*var_2101);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_capacity_reservations(
    input: &crate::input::DescribeCapacityReservationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeCapacityReservations", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2102 = writer.prefix("CapacityReservationId");
    if let Some(var_2103) = &input.capacity_reservation_ids {
        let mut list_2105 = scope_2102.start_list(true, Some("item"));
        for item_2104 in var_2103 {
            #[allow(unused_mut)]
            let mut entry_2106 = list_2105.entry();
            entry_2106.string(item_2104);
        }
        list_2105.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2107 = writer.prefix("NextToken");
    if let Some(var_2108) = &input.next_token {
        scope_2107.string(var_2108);
    }
    #[allow(unused_mut)]
    let mut scope_2109 = writer.prefix("MaxResults");
    if let Some(var_2110) = &input.max_results {
        scope_2109.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2110).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2111 = writer.prefix("Filter");
    if let Some(var_2112) = &input.filters {
        let mut list_2114 = scope_2111.start_list(true, Some("Filter"));
        for item_2113 in var_2112 {
            #[allow(unused_mut)]
            let mut entry_2115 = list_2114.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2115, item_2113)?;
        }
        list_2114.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2116 = writer.prefix("DryRun");
    if let Some(var_2117) = &input.dry_run {
        scope_2116.boolean(*var_2117);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_carrier_gateways(
    input: &crate::input::DescribeCarrierGatewaysInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeCarrierGateways", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2118 = writer.prefix("CarrierGatewayId");
    if let Some(var_2119) = &input.carrier_gateway_ids {
        let mut list_2121 = scope_2118.start_list(true, None);
        for item_2120 in var_2119 {
            #[allow(unused_mut)]
            let mut entry_2122 = list_2121.entry();
            entry_2122.string(item_2120);
        }
        list_2121.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2123 = writer.prefix("Filter");
    if let Some(var_2124) = &input.filters {
        let mut list_2126 = scope_2123.start_list(true, Some("Filter"));
        for item_2125 in var_2124 {
            #[allow(unused_mut)]
            let mut entry_2127 = list_2126.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2127, item_2125)?;
        }
        list_2126.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2128 = writer.prefix("MaxResults");
    if let Some(var_2129) = &input.max_results {
        scope_2128.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2129).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2130 = writer.prefix("NextToken");
    if let Some(var_2131) = &input.next_token {
        scope_2130.string(var_2131);
    }
    #[allow(unused_mut)]
    let mut scope_2132 = writer.prefix("DryRun");
    if let Some(var_2133) = &input.dry_run {
        scope_2132.boolean(*var_2133);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_classic_link_instances(
    input: &crate::input::DescribeClassicLinkInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeClassicLinkInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2134 = writer.prefix("Filter");
    if let Some(var_2135) = &input.filters {
        let mut list_2137 = scope_2134.start_list(true, Some("Filter"));
        for item_2136 in var_2135 {
            #[allow(unused_mut)]
            let mut entry_2138 = list_2137.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2138, item_2136)?;
        }
        list_2137.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2139 = writer.prefix("DryRun");
    if let Some(var_2140) = &input.dry_run {
        scope_2139.boolean(*var_2140);
    }
    #[allow(unused_mut)]
    let mut scope_2141 = writer.prefix("InstanceId");
    if let Some(var_2142) = &input.instance_ids {
        let mut list_2144 = scope_2141.start_list(true, Some("InstanceId"));
        for item_2143 in var_2142 {
            #[allow(unused_mut)]
            let mut entry_2145 = list_2144.entry();
            entry_2145.string(item_2143);
        }
        list_2144.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2146 = writer.prefix("MaxResults");
    if let Some(var_2147) = &input.max_results {
        scope_2146.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2147).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2148 = writer.prefix("NextToken");
    if let Some(var_2149) = &input.next_token {
        scope_2148.string(var_2149);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_client_vpn_authorization_rules(
    input: &crate::input::DescribeClientVpnAuthorizationRulesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeClientVpnAuthorizationRules",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2150 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_2151) = &input.client_vpn_endpoint_id {
        scope_2150.string(var_2151);
    }
    #[allow(unused_mut)]
    let mut scope_2152 = writer.prefix("DryRun");
    if let Some(var_2153) = &input.dry_run {
        scope_2152.boolean(*var_2153);
    }
    #[allow(unused_mut)]
    let mut scope_2154 = writer.prefix("NextToken");
    if let Some(var_2155) = &input.next_token {
        scope_2154.string(var_2155);
    }
    #[allow(unused_mut)]
    let mut scope_2156 = writer.prefix("Filter");
    if let Some(var_2157) = &input.filters {
        let mut list_2159 = scope_2156.start_list(true, Some("Filter"));
        for item_2158 in var_2157 {
            #[allow(unused_mut)]
            let mut entry_2160 = list_2159.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2160, item_2158)?;
        }
        list_2159.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2161 = writer.prefix("MaxResults");
    if let Some(var_2162) = &input.max_results {
        scope_2161.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2162).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_client_vpn_connections(
    input: &crate::input::DescribeClientVpnConnectionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeClientVpnConnections", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2163 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_2164) = &input.client_vpn_endpoint_id {
        scope_2163.string(var_2164);
    }
    #[allow(unused_mut)]
    let mut scope_2165 = writer.prefix("Filter");
    if let Some(var_2166) = &input.filters {
        let mut list_2168 = scope_2165.start_list(true, Some("Filter"));
        for item_2167 in var_2166 {
            #[allow(unused_mut)]
            let mut entry_2169 = list_2168.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2169, item_2167)?;
        }
        list_2168.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2170 = writer.prefix("NextToken");
    if let Some(var_2171) = &input.next_token {
        scope_2170.string(var_2171);
    }
    #[allow(unused_mut)]
    let mut scope_2172 = writer.prefix("MaxResults");
    if let Some(var_2173) = &input.max_results {
        scope_2172.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2173).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2174 = writer.prefix("DryRun");
    if let Some(var_2175) = &input.dry_run {
        scope_2174.boolean(*var_2175);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_client_vpn_endpoints(
    input: &crate::input::DescribeClientVpnEndpointsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeClientVpnEndpoints", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2176 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_2177) = &input.client_vpn_endpoint_ids {
        let mut list_2179 = scope_2176.start_list(true, Some("item"));
        for item_2178 in var_2177 {
            #[allow(unused_mut)]
            let mut entry_2180 = list_2179.entry();
            entry_2180.string(item_2178);
        }
        list_2179.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2181 = writer.prefix("MaxResults");
    if let Some(var_2182) = &input.max_results {
        scope_2181.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2182).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2183 = writer.prefix("NextToken");
    if let Some(var_2184) = &input.next_token {
        scope_2183.string(var_2184);
    }
    #[allow(unused_mut)]
    let mut scope_2185 = writer.prefix("Filter");
    if let Some(var_2186) = &input.filters {
        let mut list_2188 = scope_2185.start_list(true, Some("Filter"));
        for item_2187 in var_2186 {
            #[allow(unused_mut)]
            let mut entry_2189 = list_2188.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2189, item_2187)?;
        }
        list_2188.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2190 = writer.prefix("DryRun");
    if let Some(var_2191) = &input.dry_run {
        scope_2190.boolean(*var_2191);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_client_vpn_routes(
    input: &crate::input::DescribeClientVpnRoutesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeClientVpnRoutes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2192 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_2193) = &input.client_vpn_endpoint_id {
        scope_2192.string(var_2193);
    }
    #[allow(unused_mut)]
    let mut scope_2194 = writer.prefix("Filter");
    if let Some(var_2195) = &input.filters {
        let mut list_2197 = scope_2194.start_list(true, Some("Filter"));
        for item_2196 in var_2195 {
            #[allow(unused_mut)]
            let mut entry_2198 = list_2197.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2198, item_2196)?;
        }
        list_2197.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2199 = writer.prefix("MaxResults");
    if let Some(var_2200) = &input.max_results {
        scope_2199.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2200).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2201 = writer.prefix("NextToken");
    if let Some(var_2202) = &input.next_token {
        scope_2201.string(var_2202);
    }
    #[allow(unused_mut)]
    let mut scope_2203 = writer.prefix("DryRun");
    if let Some(var_2204) = &input.dry_run {
        scope_2203.boolean(*var_2204);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_client_vpn_target_networks(
    input: &crate::input::DescribeClientVpnTargetNetworksInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeClientVpnTargetNetworks",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2205 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_2206) = &input.client_vpn_endpoint_id {
        scope_2205.string(var_2206);
    }
    #[allow(unused_mut)]
    let mut scope_2207 = writer.prefix("AssociationIds");
    if let Some(var_2208) = &input.association_ids {
        let mut list_2210 = scope_2207.start_list(true, Some("item"));
        for item_2209 in var_2208 {
            #[allow(unused_mut)]
            let mut entry_2211 = list_2210.entry();
            entry_2211.string(item_2209);
        }
        list_2210.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2212 = writer.prefix("MaxResults");
    if let Some(var_2213) = &input.max_results {
        scope_2212.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2213).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2214 = writer.prefix("NextToken");
    if let Some(var_2215) = &input.next_token {
        scope_2214.string(var_2215);
    }
    #[allow(unused_mut)]
    let mut scope_2216 = writer.prefix("Filter");
    if let Some(var_2217) = &input.filters {
        let mut list_2219 = scope_2216.start_list(true, Some("Filter"));
        for item_2218 in var_2217 {
            #[allow(unused_mut)]
            let mut entry_2220 = list_2219.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2220, item_2218)?;
        }
        list_2219.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2221 = writer.prefix("DryRun");
    if let Some(var_2222) = &input.dry_run {
        scope_2221.boolean(*var_2222);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_coip_pools(
    input: &crate::input::DescribeCoipPoolsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeCoipPools", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2223 = writer.prefix("PoolId");
    if let Some(var_2224) = &input.pool_ids {
        let mut list_2226 = scope_2223.start_list(true, Some("item"));
        for item_2225 in var_2224 {
            #[allow(unused_mut)]
            let mut entry_2227 = list_2226.entry();
            entry_2227.string(item_2225);
        }
        list_2226.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2228 = writer.prefix("Filter");
    if let Some(var_2229) = &input.filters {
        let mut list_2231 = scope_2228.start_list(true, Some("Filter"));
        for item_2230 in var_2229 {
            #[allow(unused_mut)]
            let mut entry_2232 = list_2231.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2232, item_2230)?;
        }
        list_2231.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2233 = writer.prefix("MaxResults");
    if let Some(var_2234) = &input.max_results {
        scope_2233.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2234).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2235 = writer.prefix("NextToken");
    if let Some(var_2236) = &input.next_token {
        scope_2235.string(var_2236);
    }
    #[allow(unused_mut)]
    let mut scope_2237 = writer.prefix("DryRun");
    if let Some(var_2238) = &input.dry_run {
        scope_2237.boolean(*var_2238);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_conversion_tasks(
    input: &crate::input::DescribeConversionTasksInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeConversionTasks", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2239 = writer.prefix("ConversionTaskId");
    if let Some(var_2240) = &input.conversion_task_ids {
        let mut list_2242 = scope_2239.start_list(true, Some("item"));
        for item_2241 in var_2240 {
            #[allow(unused_mut)]
            let mut entry_2243 = list_2242.entry();
            entry_2243.string(item_2241);
        }
        list_2242.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2244 = writer.prefix("DryRun");
    if let Some(var_2245) = &input.dry_run {
        scope_2244.boolean(*var_2245);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_customer_gateways(
    input: &crate::input::DescribeCustomerGatewaysInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeCustomerGateways", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2246 = writer.prefix("CustomerGatewayId");
    if let Some(var_2247) = &input.customer_gateway_ids {
        let mut list_2249 = scope_2246.start_list(true, Some("CustomerGatewayId"));
        for item_2248 in var_2247 {
            #[allow(unused_mut)]
            let mut entry_2250 = list_2249.entry();
            entry_2250.string(item_2248);
        }
        list_2249.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2251 = writer.prefix("Filter");
    if let Some(var_2252) = &input.filters {
        let mut list_2254 = scope_2251.start_list(true, Some("Filter"));
        for item_2253 in var_2252 {
            #[allow(unused_mut)]
            let mut entry_2255 = list_2254.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2255, item_2253)?;
        }
        list_2254.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2256 = writer.prefix("DryRun");
    if let Some(var_2257) = &input.dry_run {
        scope_2256.boolean(*var_2257);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_dhcp_options(
    input: &crate::input::DescribeDhcpOptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeDhcpOptions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2258 = writer.prefix("DhcpOptionsId");
    if let Some(var_2259) = &input.dhcp_options_ids {
        let mut list_2261 = scope_2258.start_list(true, Some("DhcpOptionsId"));
        for item_2260 in var_2259 {
            #[allow(unused_mut)]
            let mut entry_2262 = list_2261.entry();
            entry_2262.string(item_2260);
        }
        list_2261.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2263 = writer.prefix("Filter");
    if let Some(var_2264) = &input.filters {
        let mut list_2266 = scope_2263.start_list(true, Some("Filter"));
        for item_2265 in var_2264 {
            #[allow(unused_mut)]
            let mut entry_2267 = list_2266.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2267, item_2265)?;
        }
        list_2266.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2268 = writer.prefix("DryRun");
    if let Some(var_2269) = &input.dry_run {
        scope_2268.boolean(*var_2269);
    }
    #[allow(unused_mut)]
    let mut scope_2270 = writer.prefix("NextToken");
    if let Some(var_2271) = &input.next_token {
        scope_2270.string(var_2271);
    }
    #[allow(unused_mut)]
    let mut scope_2272 = writer.prefix("MaxResults");
    if let Some(var_2273) = &input.max_results {
        scope_2272.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2273).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_egress_only_internet_gateways(
    input: &crate::input::DescribeEgressOnlyInternetGatewaysInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeEgressOnlyInternetGateways",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2274 = writer.prefix("DryRun");
    if let Some(var_2275) = &input.dry_run {
        scope_2274.boolean(*var_2275);
    }
    #[allow(unused_mut)]
    let mut scope_2276 = writer.prefix("EgressOnlyInternetGatewayId");
    if let Some(var_2277) = &input.egress_only_internet_gateway_ids {
        let mut list_2279 = scope_2276.start_list(true, Some("item"));
        for item_2278 in var_2277 {
            #[allow(unused_mut)]
            let mut entry_2280 = list_2279.entry();
            entry_2280.string(item_2278);
        }
        list_2279.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2281 = writer.prefix("MaxResults");
    if let Some(var_2282) = &input.max_results {
        scope_2281.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2282).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2283 = writer.prefix("NextToken");
    if let Some(var_2284) = &input.next_token {
        scope_2283.string(var_2284);
    }
    #[allow(unused_mut)]
    let mut scope_2285 = writer.prefix("Filter");
    if let Some(var_2286) = &input.filters {
        let mut list_2288 = scope_2285.start_list(true, Some("Filter"));
        for item_2287 in var_2286 {
            #[allow(unused_mut)]
            let mut entry_2289 = list_2288.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2289, item_2287)?;
        }
        list_2288.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_elastic_gpus(
    input: &crate::input::DescribeElasticGpusInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeElasticGpus", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2290 = writer.prefix("ElasticGpuId");
    if let Some(var_2291) = &input.elastic_gpu_ids {
        let mut list_2293 = scope_2290.start_list(true, Some("item"));
        for item_2292 in var_2291 {
            #[allow(unused_mut)]
            let mut entry_2294 = list_2293.entry();
            entry_2294.string(item_2292);
        }
        list_2293.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2295 = writer.prefix("DryRun");
    if let Some(var_2296) = &input.dry_run {
        scope_2295.boolean(*var_2296);
    }
    #[allow(unused_mut)]
    let mut scope_2297 = writer.prefix("Filter");
    if let Some(var_2298) = &input.filters {
        let mut list_2300 = scope_2297.start_list(true, Some("Filter"));
        for item_2299 in var_2298 {
            #[allow(unused_mut)]
            let mut entry_2301 = list_2300.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2301, item_2299)?;
        }
        list_2300.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2302 = writer.prefix("MaxResults");
    if let Some(var_2303) = &input.max_results {
        scope_2302.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2303).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2304 = writer.prefix("NextToken");
    if let Some(var_2305) = &input.next_token {
        scope_2304.string(var_2305);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_export_image_tasks(
    input: &crate::input::DescribeExportImageTasksInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeExportImageTasks", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2306 = writer.prefix("DryRun");
    if let Some(var_2307) = &input.dry_run {
        scope_2306.boolean(*var_2307);
    }
    #[allow(unused_mut)]
    let mut scope_2308 = writer.prefix("Filter");
    if let Some(var_2309) = &input.filters {
        let mut list_2311 = scope_2308.start_list(true, Some("Filter"));
        for item_2310 in var_2309 {
            #[allow(unused_mut)]
            let mut entry_2312 = list_2311.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2312, item_2310)?;
        }
        list_2311.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2313 = writer.prefix("ExportImageTaskId");
    if let Some(var_2314) = &input.export_image_task_ids {
        let mut list_2316 = scope_2313.start_list(true, Some("ExportImageTaskId"));
        for item_2315 in var_2314 {
            #[allow(unused_mut)]
            let mut entry_2317 = list_2316.entry();
            entry_2317.string(item_2315);
        }
        list_2316.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2318 = writer.prefix("MaxResults");
    if let Some(var_2319) = &input.max_results {
        scope_2318.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2319).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2320 = writer.prefix("NextToken");
    if let Some(var_2321) = &input.next_token {
        scope_2320.string(var_2321);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_export_tasks(
    input: &crate::input::DescribeExportTasksInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeExportTasks", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2322 = writer.prefix("ExportTaskId");
    if let Some(var_2323) = &input.export_task_ids {
        let mut list_2325 = scope_2322.start_list(true, Some("ExportTaskId"));
        for item_2324 in var_2323 {
            #[allow(unused_mut)]
            let mut entry_2326 = list_2325.entry();
            entry_2326.string(item_2324);
        }
        list_2325.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2327 = writer.prefix("Filter");
    if let Some(var_2328) = &input.filters {
        let mut list_2330 = scope_2327.start_list(true, Some("Filter"));
        for item_2329 in var_2328 {
            #[allow(unused_mut)]
            let mut entry_2331 = list_2330.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2331, item_2329)?;
        }
        list_2330.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_fast_launch_images(
    input: &crate::input::DescribeFastLaunchImagesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeFastLaunchImages", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2332 = writer.prefix("ImageId");
    if let Some(var_2333) = &input.image_ids {
        let mut list_2335 = scope_2332.start_list(true, Some("ImageId"));
        for item_2334 in var_2333 {
            #[allow(unused_mut)]
            let mut entry_2336 = list_2335.entry();
            entry_2336.string(item_2334);
        }
        list_2335.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2337 = writer.prefix("Filter");
    if let Some(var_2338) = &input.filters {
        let mut list_2340 = scope_2337.start_list(true, Some("Filter"));
        for item_2339 in var_2338 {
            #[allow(unused_mut)]
            let mut entry_2341 = list_2340.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2341, item_2339)?;
        }
        list_2340.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2342 = writer.prefix("MaxResults");
    if let Some(var_2343) = &input.max_results {
        scope_2342.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2343).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2344 = writer.prefix("NextToken");
    if let Some(var_2345) = &input.next_token {
        scope_2344.string(var_2345);
    }
    #[allow(unused_mut)]
    let mut scope_2346 = writer.prefix("DryRun");
    if let Some(var_2347) = &input.dry_run {
        scope_2346.boolean(*var_2347);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_fast_snapshot_restores(
    input: &crate::input::DescribeFastSnapshotRestoresInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeFastSnapshotRestores", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2348 = writer.prefix("Filter");
    if let Some(var_2349) = &input.filters {
        let mut list_2351 = scope_2348.start_list(true, Some("Filter"));
        for item_2350 in var_2349 {
            #[allow(unused_mut)]
            let mut entry_2352 = list_2351.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2352, item_2350)?;
        }
        list_2351.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2353 = writer.prefix("MaxResults");
    if let Some(var_2354) = &input.max_results {
        scope_2353.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2354).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2355 = writer.prefix("NextToken");
    if let Some(var_2356) = &input.next_token {
        scope_2355.string(var_2356);
    }
    #[allow(unused_mut)]
    let mut scope_2357 = writer.prefix("DryRun");
    if let Some(var_2358) = &input.dry_run {
        scope_2357.boolean(*var_2358);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_fleet_history(
    input: &crate::input::DescribeFleetHistoryInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeFleetHistory", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2359 = writer.prefix("DryRun");
    if let Some(var_2360) = &input.dry_run {
        scope_2359.boolean(*var_2360);
    }
    #[allow(unused_mut)]
    let mut scope_2361 = writer.prefix("EventType");
    if let Some(var_2362) = &input.event_type {
        scope_2361.string(var_2362.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_2363 = writer.prefix("MaxResults");
    if let Some(var_2364) = &input.max_results {
        scope_2363.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2364).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2365 = writer.prefix("NextToken");
    if let Some(var_2366) = &input.next_token {
        scope_2365.string(var_2366);
    }
    #[allow(unused_mut)]
    let mut scope_2367 = writer.prefix("FleetId");
    if let Some(var_2368) = &input.fleet_id {
        scope_2367.string(var_2368);
    }
    #[allow(unused_mut)]
    let mut scope_2369 = writer.prefix("StartTime");
    if let Some(var_2370) = &input.start_time {
        scope_2369.date_time(var_2370, aws_smithy_types::date_time::Format::DateTime)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_fleet_instances(
    input: &crate::input::DescribeFleetInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeFleetInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2371 = writer.prefix("DryRun");
    if let Some(var_2372) = &input.dry_run {
        scope_2371.boolean(*var_2372);
    }
    #[allow(unused_mut)]
    let mut scope_2373 = writer.prefix("MaxResults");
    if let Some(var_2374) = &input.max_results {
        scope_2373.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2374).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2375 = writer.prefix("NextToken");
    if let Some(var_2376) = &input.next_token {
        scope_2375.string(var_2376);
    }
    #[allow(unused_mut)]
    let mut scope_2377 = writer.prefix("FleetId");
    if let Some(var_2378) = &input.fleet_id {
        scope_2377.string(var_2378);
    }
    #[allow(unused_mut)]
    let mut scope_2379 = writer.prefix("Filter");
    if let Some(var_2380) = &input.filters {
        let mut list_2382 = scope_2379.start_list(true, Some("Filter"));
        for item_2381 in var_2380 {
            #[allow(unused_mut)]
            let mut entry_2383 = list_2382.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2383, item_2381)?;
        }
        list_2382.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_fleets(
    input: &crate::input::DescribeFleetsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeFleets", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2384 = writer.prefix("DryRun");
    if let Some(var_2385) = &input.dry_run {
        scope_2384.boolean(*var_2385);
    }
    #[allow(unused_mut)]
    let mut scope_2386 = writer.prefix("MaxResults");
    if let Some(var_2387) = &input.max_results {
        scope_2386.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2387).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2388 = writer.prefix("NextToken");
    if let Some(var_2389) = &input.next_token {
        scope_2388.string(var_2389);
    }
    #[allow(unused_mut)]
    let mut scope_2390 = writer.prefix("FleetId");
    if let Some(var_2391) = &input.fleet_ids {
        let mut list_2393 = scope_2390.start_list(true, None);
        for item_2392 in var_2391 {
            #[allow(unused_mut)]
            let mut entry_2394 = list_2393.entry();
            entry_2394.string(item_2392);
        }
        list_2393.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2395 = writer.prefix("Filter");
    if let Some(var_2396) = &input.filters {
        let mut list_2398 = scope_2395.start_list(true, Some("Filter"));
        for item_2397 in var_2396 {
            #[allow(unused_mut)]
            let mut entry_2399 = list_2398.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2399, item_2397)?;
        }
        list_2398.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_flow_logs(
    input: &crate::input::DescribeFlowLogsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeFlowLogs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2400 = writer.prefix("DryRun");
    if let Some(var_2401) = &input.dry_run {
        scope_2400.boolean(*var_2401);
    }
    #[allow(unused_mut)]
    let mut scope_2402 = writer.prefix("Filter");
    if let Some(var_2403) = &input.filter {
        let mut list_2405 = scope_2402.start_list(true, Some("Filter"));
        for item_2404 in var_2403 {
            #[allow(unused_mut)]
            let mut entry_2406 = list_2405.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2406, item_2404)?;
        }
        list_2405.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2407 = writer.prefix("FlowLogId");
    if let Some(var_2408) = &input.flow_log_ids {
        let mut list_2410 = scope_2407.start_list(true, Some("item"));
        for item_2409 in var_2408 {
            #[allow(unused_mut)]
            let mut entry_2411 = list_2410.entry();
            entry_2411.string(item_2409);
        }
        list_2410.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2412 = writer.prefix("MaxResults");
    if let Some(var_2413) = &input.max_results {
        scope_2412.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2413).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2414 = writer.prefix("NextToken");
    if let Some(var_2415) = &input.next_token {
        scope_2414.string(var_2415);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_fpga_image_attribute(
    input: &crate::input::DescribeFpgaImageAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeFpgaImageAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2416 = writer.prefix("DryRun");
    if let Some(var_2417) = &input.dry_run {
        scope_2416.boolean(*var_2417);
    }
    #[allow(unused_mut)]
    let mut scope_2418 = writer.prefix("FpgaImageId");
    if let Some(var_2419) = &input.fpga_image_id {
        scope_2418.string(var_2419);
    }
    #[allow(unused_mut)]
    let mut scope_2420 = writer.prefix("Attribute");
    if let Some(var_2421) = &input.attribute {
        scope_2420.string(var_2421.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_fpga_images(
    input: &crate::input::DescribeFpgaImagesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeFpgaImages", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2422 = writer.prefix("DryRun");
    if let Some(var_2423) = &input.dry_run {
        scope_2422.boolean(*var_2423);
    }
    #[allow(unused_mut)]
    let mut scope_2424 = writer.prefix("FpgaImageId");
    if let Some(var_2425) = &input.fpga_image_ids {
        let mut list_2427 = scope_2424.start_list(true, Some("item"));
        for item_2426 in var_2425 {
            #[allow(unused_mut)]
            let mut entry_2428 = list_2427.entry();
            entry_2428.string(item_2426);
        }
        list_2427.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2429 = writer.prefix("Owner");
    if let Some(var_2430) = &input.owners {
        let mut list_2432 = scope_2429.start_list(true, Some("Owner"));
        for item_2431 in var_2430 {
            #[allow(unused_mut)]
            let mut entry_2433 = list_2432.entry();
            entry_2433.string(item_2431);
        }
        list_2432.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2434 = writer.prefix("Filter");
    if let Some(var_2435) = &input.filters {
        let mut list_2437 = scope_2434.start_list(true, Some("Filter"));
        for item_2436 in var_2435 {
            #[allow(unused_mut)]
            let mut entry_2438 = list_2437.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2438, item_2436)?;
        }
        list_2437.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2439 = writer.prefix("NextToken");
    if let Some(var_2440) = &input.next_token {
        scope_2439.string(var_2440);
    }
    #[allow(unused_mut)]
    let mut scope_2441 = writer.prefix("MaxResults");
    if let Some(var_2442) = &input.max_results {
        scope_2441.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2442).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_host_reservation_offerings(
    input: &crate::input::DescribeHostReservationOfferingsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeHostReservationOfferings",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2443 = writer.prefix("Filter");
    if let Some(var_2444) = &input.filter {
        let mut list_2446 = scope_2443.start_list(true, Some("Filter"));
        for item_2445 in var_2444 {
            #[allow(unused_mut)]
            let mut entry_2447 = list_2446.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2447, item_2445)?;
        }
        list_2446.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2448 = writer.prefix("MaxDuration");
    if let Some(var_2449) = &input.max_duration {
        scope_2448.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2449).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2450 = writer.prefix("MaxResults");
    if let Some(var_2451) = &input.max_results {
        scope_2450.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2451).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2452 = writer.prefix("MinDuration");
    if let Some(var_2453) = &input.min_duration {
        scope_2452.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2453).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2454 = writer.prefix("NextToken");
    if let Some(var_2455) = &input.next_token {
        scope_2454.string(var_2455);
    }
    #[allow(unused_mut)]
    let mut scope_2456 = writer.prefix("OfferingId");
    if let Some(var_2457) = &input.offering_id {
        scope_2456.string(var_2457);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_host_reservations(
    input: &crate::input::DescribeHostReservationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeHostReservations", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2458 = writer.prefix("Filter");
    if let Some(var_2459) = &input.filter {
        let mut list_2461 = scope_2458.start_list(true, Some("Filter"));
        for item_2460 in var_2459 {
            #[allow(unused_mut)]
            let mut entry_2462 = list_2461.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2462, item_2460)?;
        }
        list_2461.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2463 = writer.prefix("HostReservationIdSet");
    if let Some(var_2464) = &input.host_reservation_id_set {
        let mut list_2466 = scope_2463.start_list(true, Some("item"));
        for item_2465 in var_2464 {
            #[allow(unused_mut)]
            let mut entry_2467 = list_2466.entry();
            entry_2467.string(item_2465);
        }
        list_2466.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2468 = writer.prefix("MaxResults");
    if let Some(var_2469) = &input.max_results {
        scope_2468.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2469).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2470 = writer.prefix("NextToken");
    if let Some(var_2471) = &input.next_token {
        scope_2470.string(var_2471);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_hosts(
    input: &crate::input::DescribeHostsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeHosts", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2472 = writer.prefix("Filter");
    if let Some(var_2473) = &input.filter {
        let mut list_2475 = scope_2472.start_list(true, Some("Filter"));
        for item_2474 in var_2473 {
            #[allow(unused_mut)]
            let mut entry_2476 = list_2475.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2476, item_2474)?;
        }
        list_2475.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2477 = writer.prefix("HostId");
    if let Some(var_2478) = &input.host_ids {
        let mut list_2480 = scope_2477.start_list(true, Some("item"));
        for item_2479 in var_2478 {
            #[allow(unused_mut)]
            let mut entry_2481 = list_2480.entry();
            entry_2481.string(item_2479);
        }
        list_2480.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2482 = writer.prefix("MaxResults");
    if let Some(var_2483) = &input.max_results {
        scope_2482.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2483).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2484 = writer.prefix("NextToken");
    if let Some(var_2485) = &input.next_token {
        scope_2484.string(var_2485);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_iam_instance_profile_associations(
    input: &crate::input::DescribeIamInstanceProfileAssociationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeIamInstanceProfileAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2486 = writer.prefix("AssociationId");
    if let Some(var_2487) = &input.association_ids {
        let mut list_2489 = scope_2486.start_list(true, Some("AssociationId"));
        for item_2488 in var_2487 {
            #[allow(unused_mut)]
            let mut entry_2490 = list_2489.entry();
            entry_2490.string(item_2488);
        }
        list_2489.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2491 = writer.prefix("Filter");
    if let Some(var_2492) = &input.filters {
        let mut list_2494 = scope_2491.start_list(true, Some("Filter"));
        for item_2493 in var_2492 {
            #[allow(unused_mut)]
            let mut entry_2495 = list_2494.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2495, item_2493)?;
        }
        list_2494.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2496 = writer.prefix("MaxResults");
    if let Some(var_2497) = &input.max_results {
        scope_2496.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2497).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2498 = writer.prefix("NextToken");
    if let Some(var_2499) = &input.next_token {
        scope_2498.string(var_2499);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_identity_id_format(
    input: &crate::input::DescribeIdentityIdFormatInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeIdentityIdFormat", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2500 = writer.prefix("PrincipalArn");
    if let Some(var_2501) = &input.principal_arn {
        scope_2500.string(var_2501);
    }
    #[allow(unused_mut)]
    let mut scope_2502 = writer.prefix("Resource");
    if let Some(var_2503) = &input.resource {
        scope_2502.string(var_2503);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_id_format(
    input: &crate::input::DescribeIdFormatInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeIdFormat", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2504 = writer.prefix("Resource");
    if let Some(var_2505) = &input.resource {
        scope_2504.string(var_2505);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_image_attribute(
    input: &crate::input::DescribeImageAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeImageAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2506 = writer.prefix("Attribute");
    if let Some(var_2507) = &input.attribute {
        scope_2506.string(var_2507.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_2508 = writer.prefix("ImageId");
    if let Some(var_2509) = &input.image_id {
        scope_2508.string(var_2509);
    }
    #[allow(unused_mut)]
    let mut scope_2510 = writer.prefix("DryRun");
    if let Some(var_2511) = &input.dry_run {
        scope_2510.boolean(*var_2511);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_images(
    input: &crate::input::DescribeImagesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeImages", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2512 = writer.prefix("ExecutableBy");
    if let Some(var_2513) = &input.executable_users {
        let mut list_2515 = scope_2512.start_list(true, Some("ExecutableBy"));
        for item_2514 in var_2513 {
            #[allow(unused_mut)]
            let mut entry_2516 = list_2515.entry();
            entry_2516.string(item_2514);
        }
        list_2515.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2517 = writer.prefix("Filter");
    if let Some(var_2518) = &input.filters {
        let mut list_2520 = scope_2517.start_list(true, Some("Filter"));
        for item_2519 in var_2518 {
            #[allow(unused_mut)]
            let mut entry_2521 = list_2520.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2521, item_2519)?;
        }
        list_2520.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2522 = writer.prefix("ImageId");
    if let Some(var_2523) = &input.image_ids {
        let mut list_2525 = scope_2522.start_list(true, Some("ImageId"));
        for item_2524 in var_2523 {
            #[allow(unused_mut)]
            let mut entry_2526 = list_2525.entry();
            entry_2526.string(item_2524);
        }
        list_2525.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2527 = writer.prefix("Owner");
    if let Some(var_2528) = &input.owners {
        let mut list_2530 = scope_2527.start_list(true, Some("Owner"));
        for item_2529 in var_2528 {
            #[allow(unused_mut)]
            let mut entry_2531 = list_2530.entry();
            entry_2531.string(item_2529);
        }
        list_2530.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2532 = writer.prefix("IncludeDeprecated");
    if let Some(var_2533) = &input.include_deprecated {
        scope_2532.boolean(*var_2533);
    }
    #[allow(unused_mut)]
    let mut scope_2534 = writer.prefix("DryRun");
    if let Some(var_2535) = &input.dry_run {
        scope_2534.boolean(*var_2535);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_import_image_tasks(
    input: &crate::input::DescribeImportImageTasksInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeImportImageTasks", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2536 = writer.prefix("DryRun");
    if let Some(var_2537) = &input.dry_run {
        scope_2536.boolean(*var_2537);
    }
    #[allow(unused_mut)]
    let mut scope_2538 = writer.prefix("Filters");
    if let Some(var_2539) = &input.filters {
        let mut list_2541 = scope_2538.start_list(true, Some("Filter"));
        for item_2540 in var_2539 {
            #[allow(unused_mut)]
            let mut entry_2542 = list_2541.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2542, item_2540)?;
        }
        list_2541.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2543 = writer.prefix("ImportTaskId");
    if let Some(var_2544) = &input.import_task_ids {
        let mut list_2546 = scope_2543.start_list(true, Some("ImportTaskId"));
        for item_2545 in var_2544 {
            #[allow(unused_mut)]
            let mut entry_2547 = list_2546.entry();
            entry_2547.string(item_2545);
        }
        list_2546.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2548 = writer.prefix("MaxResults");
    if let Some(var_2549) = &input.max_results {
        scope_2548.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2549).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2550 = writer.prefix("NextToken");
    if let Some(var_2551) = &input.next_token {
        scope_2550.string(var_2551);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_import_snapshot_tasks(
    input: &crate::input::DescribeImportSnapshotTasksInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeImportSnapshotTasks", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2552 = writer.prefix("DryRun");
    if let Some(var_2553) = &input.dry_run {
        scope_2552.boolean(*var_2553);
    }
    #[allow(unused_mut)]
    let mut scope_2554 = writer.prefix("Filters");
    if let Some(var_2555) = &input.filters {
        let mut list_2557 = scope_2554.start_list(true, Some("Filter"));
        for item_2556 in var_2555 {
            #[allow(unused_mut)]
            let mut entry_2558 = list_2557.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2558, item_2556)?;
        }
        list_2557.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2559 = writer.prefix("ImportTaskId");
    if let Some(var_2560) = &input.import_task_ids {
        let mut list_2562 = scope_2559.start_list(true, Some("ImportTaskId"));
        for item_2561 in var_2560 {
            #[allow(unused_mut)]
            let mut entry_2563 = list_2562.entry();
            entry_2563.string(item_2561);
        }
        list_2562.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2564 = writer.prefix("MaxResults");
    if let Some(var_2565) = &input.max_results {
        scope_2564.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2565).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2566 = writer.prefix("NextToken");
    if let Some(var_2567) = &input.next_token {
        scope_2566.string(var_2567);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_instance_attribute(
    input: &crate::input::DescribeInstanceAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeInstanceAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2568 = writer.prefix("Attribute");
    if let Some(var_2569) = &input.attribute {
        scope_2568.string(var_2569.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_2570 = writer.prefix("DryRun");
    if let Some(var_2571) = &input.dry_run {
        scope_2570.boolean(*var_2571);
    }
    #[allow(unused_mut)]
    let mut scope_2572 = writer.prefix("InstanceId");
    if let Some(var_2573) = &input.instance_id {
        scope_2572.string(var_2573);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_instance_credit_specifications(
    input: &crate::input::DescribeInstanceCreditSpecificationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeInstanceCreditSpecifications",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2574 = writer.prefix("DryRun");
    if let Some(var_2575) = &input.dry_run {
        scope_2574.boolean(*var_2575);
    }
    #[allow(unused_mut)]
    let mut scope_2576 = writer.prefix("Filter");
    if let Some(var_2577) = &input.filters {
        let mut list_2579 = scope_2576.start_list(true, Some("Filter"));
        for item_2578 in var_2577 {
            #[allow(unused_mut)]
            let mut entry_2580 = list_2579.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2580, item_2578)?;
        }
        list_2579.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2581 = writer.prefix("InstanceId");
    if let Some(var_2582) = &input.instance_ids {
        let mut list_2584 = scope_2581.start_list(true, Some("InstanceId"));
        for item_2583 in var_2582 {
            #[allow(unused_mut)]
            let mut entry_2585 = list_2584.entry();
            entry_2585.string(item_2583);
        }
        list_2584.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2586 = writer.prefix("MaxResults");
    if let Some(var_2587) = &input.max_results {
        scope_2586.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2587).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2588 = writer.prefix("NextToken");
    if let Some(var_2589) = &input.next_token {
        scope_2588.string(var_2589);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_instance_event_notification_attributes(
    input: &crate::input::DescribeInstanceEventNotificationAttributesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeInstanceEventNotificationAttributes",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2590 = writer.prefix("DryRun");
    if let Some(var_2591) = &input.dry_run {
        scope_2590.boolean(*var_2591);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_instance_event_windows(
    input: &crate::input::DescribeInstanceEventWindowsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeInstanceEventWindows", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2592 = writer.prefix("DryRun");
    if let Some(var_2593) = &input.dry_run {
        scope_2592.boolean(*var_2593);
    }
    #[allow(unused_mut)]
    let mut scope_2594 = writer.prefix("InstanceEventWindowId");
    if let Some(var_2595) = &input.instance_event_window_ids {
        let mut list_2597 = scope_2594.start_list(true, Some("InstanceEventWindowId"));
        for item_2596 in var_2595 {
            #[allow(unused_mut)]
            let mut entry_2598 = list_2597.entry();
            entry_2598.string(item_2596);
        }
        list_2597.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2599 = writer.prefix("Filter");
    if let Some(var_2600) = &input.filters {
        let mut list_2602 = scope_2599.start_list(true, Some("Filter"));
        for item_2601 in var_2600 {
            #[allow(unused_mut)]
            let mut entry_2603 = list_2602.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2603, item_2601)?;
        }
        list_2602.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2604 = writer.prefix("MaxResults");
    if let Some(var_2605) = &input.max_results {
        scope_2604.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2605).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2606 = writer.prefix("NextToken");
    if let Some(var_2607) = &input.next_token {
        scope_2606.string(var_2607);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_instances(
    input: &crate::input::DescribeInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2608 = writer.prefix("Filter");
    if let Some(var_2609) = &input.filters {
        let mut list_2611 = scope_2608.start_list(true, Some("Filter"));
        for item_2610 in var_2609 {
            #[allow(unused_mut)]
            let mut entry_2612 = list_2611.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2612, item_2610)?;
        }
        list_2611.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2613 = writer.prefix("InstanceId");
    if let Some(var_2614) = &input.instance_ids {
        let mut list_2616 = scope_2613.start_list(true, Some("InstanceId"));
        for item_2615 in var_2614 {
            #[allow(unused_mut)]
            let mut entry_2617 = list_2616.entry();
            entry_2617.string(item_2615);
        }
        list_2616.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2618 = writer.prefix("DryRun");
    if let Some(var_2619) = &input.dry_run {
        scope_2618.boolean(*var_2619);
    }
    #[allow(unused_mut)]
    let mut scope_2620 = writer.prefix("MaxResults");
    if let Some(var_2621) = &input.max_results {
        scope_2620.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2621).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2622 = writer.prefix("NextToken");
    if let Some(var_2623) = &input.next_token {
        scope_2622.string(var_2623);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_instance_status(
    input: &crate::input::DescribeInstanceStatusInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeInstanceStatus", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2624 = writer.prefix("Filter");
    if let Some(var_2625) = &input.filters {
        let mut list_2627 = scope_2624.start_list(true, Some("Filter"));
        for item_2626 in var_2625 {
            #[allow(unused_mut)]
            let mut entry_2628 = list_2627.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2628, item_2626)?;
        }
        list_2627.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2629 = writer.prefix("InstanceId");
    if let Some(var_2630) = &input.instance_ids {
        let mut list_2632 = scope_2629.start_list(true, Some("InstanceId"));
        for item_2631 in var_2630 {
            #[allow(unused_mut)]
            let mut entry_2633 = list_2632.entry();
            entry_2633.string(item_2631);
        }
        list_2632.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2634 = writer.prefix("MaxResults");
    if let Some(var_2635) = &input.max_results {
        scope_2634.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2635).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2636 = writer.prefix("NextToken");
    if let Some(var_2637) = &input.next_token {
        scope_2636.string(var_2637);
    }
    #[allow(unused_mut)]
    let mut scope_2638 = writer.prefix("DryRun");
    if let Some(var_2639) = &input.dry_run {
        scope_2638.boolean(*var_2639);
    }
    #[allow(unused_mut)]
    let mut scope_2640 = writer.prefix("IncludeAllInstances");
    if let Some(var_2641) = &input.include_all_instances {
        scope_2640.boolean(*var_2641);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_instance_type_offerings(
    input: &crate::input::DescribeInstanceTypeOfferingsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeInstanceTypeOfferings", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2642 = writer.prefix("DryRun");
    if let Some(var_2643) = &input.dry_run {
        scope_2642.boolean(*var_2643);
    }
    #[allow(unused_mut)]
    let mut scope_2644 = writer.prefix("LocationType");
    if let Some(var_2645) = &input.location_type {
        scope_2644.string(var_2645.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_2646 = writer.prefix("Filter");
    if let Some(var_2647) = &input.filters {
        let mut list_2649 = scope_2646.start_list(true, Some("Filter"));
        for item_2648 in var_2647 {
            #[allow(unused_mut)]
            let mut entry_2650 = list_2649.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2650, item_2648)?;
        }
        list_2649.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2651 = writer.prefix("MaxResults");
    if let Some(var_2652) = &input.max_results {
        scope_2651.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2652).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2653 = writer.prefix("NextToken");
    if let Some(var_2654) = &input.next_token {
        scope_2653.string(var_2654);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_instance_types(
    input: &crate::input::DescribeInstanceTypesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeInstanceTypes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2655 = writer.prefix("DryRun");
    if let Some(var_2656) = &input.dry_run {
        scope_2655.boolean(*var_2656);
    }
    #[allow(unused_mut)]
    let mut scope_2657 = writer.prefix("InstanceType");
    if let Some(var_2658) = &input.instance_types {
        let mut list_2660 = scope_2657.start_list(true, None);
        for item_2659 in var_2658 {
            #[allow(unused_mut)]
            let mut entry_2661 = list_2660.entry();
            entry_2661.string(item_2659.as_str());
        }
        list_2660.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2662 = writer.prefix("Filter");
    if let Some(var_2663) = &input.filters {
        let mut list_2665 = scope_2662.start_list(true, Some("Filter"));
        for item_2664 in var_2663 {
            #[allow(unused_mut)]
            let mut entry_2666 = list_2665.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2666, item_2664)?;
        }
        list_2665.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2667 = writer.prefix("MaxResults");
    if let Some(var_2668) = &input.max_results {
        scope_2667.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2668).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2669 = writer.prefix("NextToken");
    if let Some(var_2670) = &input.next_token {
        scope_2669.string(var_2670);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_internet_gateways(
    input: &crate::input::DescribeInternetGatewaysInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeInternetGateways", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2671 = writer.prefix("Filter");
    if let Some(var_2672) = &input.filters {
        let mut list_2674 = scope_2671.start_list(true, Some("Filter"));
        for item_2673 in var_2672 {
            #[allow(unused_mut)]
            let mut entry_2675 = list_2674.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2675, item_2673)?;
        }
        list_2674.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2676 = writer.prefix("DryRun");
    if let Some(var_2677) = &input.dry_run {
        scope_2676.boolean(*var_2677);
    }
    #[allow(unused_mut)]
    let mut scope_2678 = writer.prefix("InternetGatewayId");
    if let Some(var_2679) = &input.internet_gateway_ids {
        let mut list_2681 = scope_2678.start_list(true, Some("item"));
        for item_2680 in var_2679 {
            #[allow(unused_mut)]
            let mut entry_2682 = list_2681.entry();
            entry_2682.string(item_2680);
        }
        list_2681.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2683 = writer.prefix("NextToken");
    if let Some(var_2684) = &input.next_token {
        scope_2683.string(var_2684);
    }
    #[allow(unused_mut)]
    let mut scope_2685 = writer.prefix("MaxResults");
    if let Some(var_2686) = &input.max_results {
        scope_2685.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2686).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_ipam_pools(
    input: &crate::input::DescribeIpamPoolsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeIpamPools", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2687 = writer.prefix("DryRun");
    if let Some(var_2688) = &input.dry_run {
        scope_2687.boolean(*var_2688);
    }
    #[allow(unused_mut)]
    let mut scope_2689 = writer.prefix("Filter");
    if let Some(var_2690) = &input.filters {
        let mut list_2692 = scope_2689.start_list(true, Some("Filter"));
        for item_2691 in var_2690 {
            #[allow(unused_mut)]
            let mut entry_2693 = list_2692.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2693, item_2691)?;
        }
        list_2692.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2694 = writer.prefix("MaxResults");
    if let Some(var_2695) = &input.max_results {
        scope_2694.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2695).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2696 = writer.prefix("NextToken");
    if let Some(var_2697) = &input.next_token {
        scope_2696.string(var_2697);
    }
    #[allow(unused_mut)]
    let mut scope_2698 = writer.prefix("IpamPoolId");
    if let Some(var_2699) = &input.ipam_pool_ids {
        let mut list_2701 = scope_2698.start_list(true, Some("item"));
        for item_2700 in var_2699 {
            #[allow(unused_mut)]
            let mut entry_2702 = list_2701.entry();
            entry_2702.string(item_2700);
        }
        list_2701.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_ipams(
    input: &crate::input::DescribeIpamsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeIpams", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2703 = writer.prefix("DryRun");
    if let Some(var_2704) = &input.dry_run {
        scope_2703.boolean(*var_2704);
    }
    #[allow(unused_mut)]
    let mut scope_2705 = writer.prefix("Filter");
    if let Some(var_2706) = &input.filters {
        let mut list_2708 = scope_2705.start_list(true, Some("Filter"));
        for item_2707 in var_2706 {
            #[allow(unused_mut)]
            let mut entry_2709 = list_2708.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2709, item_2707)?;
        }
        list_2708.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2710 = writer.prefix("MaxResults");
    if let Some(var_2711) = &input.max_results {
        scope_2710.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2711).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2712 = writer.prefix("NextToken");
    if let Some(var_2713) = &input.next_token {
        scope_2712.string(var_2713);
    }
    #[allow(unused_mut)]
    let mut scope_2714 = writer.prefix("IpamId");
    if let Some(var_2715) = &input.ipam_ids {
        let mut list_2717 = scope_2714.start_list(true, Some("item"));
        for item_2716 in var_2715 {
            #[allow(unused_mut)]
            let mut entry_2718 = list_2717.entry();
            entry_2718.string(item_2716);
        }
        list_2717.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_ipam_scopes(
    input: &crate::input::DescribeIpamScopesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeIpamScopes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2719 = writer.prefix("DryRun");
    if let Some(var_2720) = &input.dry_run {
        scope_2719.boolean(*var_2720);
    }
    #[allow(unused_mut)]
    let mut scope_2721 = writer.prefix("Filter");
    if let Some(var_2722) = &input.filters {
        let mut list_2724 = scope_2721.start_list(true, Some("Filter"));
        for item_2723 in var_2722 {
            #[allow(unused_mut)]
            let mut entry_2725 = list_2724.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2725, item_2723)?;
        }
        list_2724.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2726 = writer.prefix("MaxResults");
    if let Some(var_2727) = &input.max_results {
        scope_2726.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2727).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2728 = writer.prefix("NextToken");
    if let Some(var_2729) = &input.next_token {
        scope_2728.string(var_2729);
    }
    #[allow(unused_mut)]
    let mut scope_2730 = writer.prefix("IpamScopeId");
    if let Some(var_2731) = &input.ipam_scope_ids {
        let mut list_2733 = scope_2730.start_list(true, Some("item"));
        for item_2732 in var_2731 {
            #[allow(unused_mut)]
            let mut entry_2734 = list_2733.entry();
            entry_2734.string(item_2732);
        }
        list_2733.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_ipv6_pools(
    input: &crate::input::DescribeIpv6PoolsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeIpv6Pools", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2735 = writer.prefix("PoolId");
    if let Some(var_2736) = &input.pool_ids {
        let mut list_2738 = scope_2735.start_list(true, Some("item"));
        for item_2737 in var_2736 {
            #[allow(unused_mut)]
            let mut entry_2739 = list_2738.entry();
            entry_2739.string(item_2737);
        }
        list_2738.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2740 = writer.prefix("NextToken");
    if let Some(var_2741) = &input.next_token {
        scope_2740.string(var_2741);
    }
    #[allow(unused_mut)]
    let mut scope_2742 = writer.prefix("MaxResults");
    if let Some(var_2743) = &input.max_results {
        scope_2742.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2743).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2744 = writer.prefix("DryRun");
    if let Some(var_2745) = &input.dry_run {
        scope_2744.boolean(*var_2745);
    }
    #[allow(unused_mut)]
    let mut scope_2746 = writer.prefix("Filter");
    if let Some(var_2747) = &input.filters {
        let mut list_2749 = scope_2746.start_list(true, Some("Filter"));
        for item_2748 in var_2747 {
            #[allow(unused_mut)]
            let mut entry_2750 = list_2749.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2750, item_2748)?;
        }
        list_2749.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_key_pairs(
    input: &crate::input::DescribeKeyPairsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeKeyPairs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2751 = writer.prefix("Filter");
    if let Some(var_2752) = &input.filters {
        let mut list_2754 = scope_2751.start_list(true, Some("Filter"));
        for item_2753 in var_2752 {
            #[allow(unused_mut)]
            let mut entry_2755 = list_2754.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2755, item_2753)?;
        }
        list_2754.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2756 = writer.prefix("KeyName");
    if let Some(var_2757) = &input.key_names {
        let mut list_2759 = scope_2756.start_list(true, Some("KeyName"));
        for item_2758 in var_2757 {
            #[allow(unused_mut)]
            let mut entry_2760 = list_2759.entry();
            entry_2760.string(item_2758);
        }
        list_2759.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2761 = writer.prefix("KeyPairId");
    if let Some(var_2762) = &input.key_pair_ids {
        let mut list_2764 = scope_2761.start_list(true, Some("KeyPairId"));
        for item_2763 in var_2762 {
            #[allow(unused_mut)]
            let mut entry_2765 = list_2764.entry();
            entry_2765.string(item_2763);
        }
        list_2764.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2766 = writer.prefix("DryRun");
    if let Some(var_2767) = &input.dry_run {
        scope_2766.boolean(*var_2767);
    }
    #[allow(unused_mut)]
    let mut scope_2768 = writer.prefix("IncludePublicKey");
    if let Some(var_2769) = &input.include_public_key {
        scope_2768.boolean(*var_2769);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_launch_templates(
    input: &crate::input::DescribeLaunchTemplatesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeLaunchTemplates", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2770 = writer.prefix("DryRun");
    if let Some(var_2771) = &input.dry_run {
        scope_2770.boolean(*var_2771);
    }
    #[allow(unused_mut)]
    let mut scope_2772 = writer.prefix("LaunchTemplateId");
    if let Some(var_2773) = &input.launch_template_ids {
        let mut list_2775 = scope_2772.start_list(true, Some("item"));
        for item_2774 in var_2773 {
            #[allow(unused_mut)]
            let mut entry_2776 = list_2775.entry();
            entry_2776.string(item_2774);
        }
        list_2775.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2777 = writer.prefix("LaunchTemplateName");
    if let Some(var_2778) = &input.launch_template_names {
        let mut list_2780 = scope_2777.start_list(true, Some("item"));
        for item_2779 in var_2778 {
            #[allow(unused_mut)]
            let mut entry_2781 = list_2780.entry();
            entry_2781.string(item_2779);
        }
        list_2780.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2782 = writer.prefix("Filter");
    if let Some(var_2783) = &input.filters {
        let mut list_2785 = scope_2782.start_list(true, Some("Filter"));
        for item_2784 in var_2783 {
            #[allow(unused_mut)]
            let mut entry_2786 = list_2785.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2786, item_2784)?;
        }
        list_2785.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2787 = writer.prefix("NextToken");
    if let Some(var_2788) = &input.next_token {
        scope_2787.string(var_2788);
    }
    #[allow(unused_mut)]
    let mut scope_2789 = writer.prefix("MaxResults");
    if let Some(var_2790) = &input.max_results {
        scope_2789.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2790).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_launch_template_versions(
    input: &crate::input::DescribeLaunchTemplateVersionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeLaunchTemplateVersions",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2791 = writer.prefix("DryRun");
    if let Some(var_2792) = &input.dry_run {
        scope_2791.boolean(*var_2792);
    }
    #[allow(unused_mut)]
    let mut scope_2793 = writer.prefix("LaunchTemplateId");
    if let Some(var_2794) = &input.launch_template_id {
        scope_2793.string(var_2794);
    }
    #[allow(unused_mut)]
    let mut scope_2795 = writer.prefix("LaunchTemplateName");
    if let Some(var_2796) = &input.launch_template_name {
        scope_2795.string(var_2796);
    }
    #[allow(unused_mut)]
    let mut scope_2797 = writer.prefix("LaunchTemplateVersion");
    if let Some(var_2798) = &input.versions {
        let mut list_2800 = scope_2797.start_list(true, Some("item"));
        for item_2799 in var_2798 {
            #[allow(unused_mut)]
            let mut entry_2801 = list_2800.entry();
            entry_2801.string(item_2799);
        }
        list_2800.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2802 = writer.prefix("MinVersion");
    if let Some(var_2803) = &input.min_version {
        scope_2802.string(var_2803);
    }
    #[allow(unused_mut)]
    let mut scope_2804 = writer.prefix("MaxVersion");
    if let Some(var_2805) = &input.max_version {
        scope_2804.string(var_2805);
    }
    #[allow(unused_mut)]
    let mut scope_2806 = writer.prefix("NextToken");
    if let Some(var_2807) = &input.next_token {
        scope_2806.string(var_2807);
    }
    #[allow(unused_mut)]
    let mut scope_2808 = writer.prefix("MaxResults");
    if let Some(var_2809) = &input.max_results {
        scope_2808.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2809).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2810 = writer.prefix("Filter");
    if let Some(var_2811) = &input.filters {
        let mut list_2813 = scope_2810.start_list(true, Some("Filter"));
        for item_2812 in var_2811 {
            #[allow(unused_mut)]
            let mut entry_2814 = list_2813.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2814, item_2812)?;
        }
        list_2813.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_local_gateway_route_tables(
    input: &crate::input::DescribeLocalGatewayRouteTablesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeLocalGatewayRouteTables",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2815 = writer.prefix("LocalGatewayRouteTableId");
    if let Some(var_2816) = &input.local_gateway_route_table_ids {
        let mut list_2818 = scope_2815.start_list(true, Some("item"));
        for item_2817 in var_2816 {
            #[allow(unused_mut)]
            let mut entry_2819 = list_2818.entry();
            entry_2819.string(item_2817);
        }
        list_2818.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2820 = writer.prefix("Filter");
    if let Some(var_2821) = &input.filters {
        let mut list_2823 = scope_2820.start_list(true, Some("Filter"));
        for item_2822 in var_2821 {
            #[allow(unused_mut)]
            let mut entry_2824 = list_2823.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2824, item_2822)?;
        }
        list_2823.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2825 = writer.prefix("MaxResults");
    if let Some(var_2826) = &input.max_results {
        scope_2825.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2826).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2827 = writer.prefix("NextToken");
    if let Some(var_2828) = &input.next_token {
        scope_2827.string(var_2828);
    }
    #[allow(unused_mut)]
    let mut scope_2829 = writer.prefix("DryRun");
    if let Some(var_2830) = &input.dry_run {
        scope_2829.boolean(*var_2830);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_local_gateway_route_table_virtual_interface_group_associations(
    input: &crate::input::DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2831 = writer.prefix("LocalGatewayRouteTableVirtualInterfaceGroupAssociationId");
    if let Some(var_2832) = &input.local_gateway_route_table_virtual_interface_group_association_ids
    {
        let mut list_2834 = scope_2831.start_list(true, Some("item"));
        for item_2833 in var_2832 {
            #[allow(unused_mut)]
            let mut entry_2835 = list_2834.entry();
            entry_2835.string(item_2833);
        }
        list_2834.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2836 = writer.prefix("Filter");
    if let Some(var_2837) = &input.filters {
        let mut list_2839 = scope_2836.start_list(true, Some("Filter"));
        for item_2838 in var_2837 {
            #[allow(unused_mut)]
            let mut entry_2840 = list_2839.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2840, item_2838)?;
        }
        list_2839.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2841 = writer.prefix("MaxResults");
    if let Some(var_2842) = &input.max_results {
        scope_2841.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2842).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2843 = writer.prefix("NextToken");
    if let Some(var_2844) = &input.next_token {
        scope_2843.string(var_2844);
    }
    #[allow(unused_mut)]
    let mut scope_2845 = writer.prefix("DryRun");
    if let Some(var_2846) = &input.dry_run {
        scope_2845.boolean(*var_2846);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_local_gateway_route_table_vpc_associations(
    input: &crate::input::DescribeLocalGatewayRouteTableVpcAssociationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeLocalGatewayRouteTableVpcAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2847 = writer.prefix("LocalGatewayRouteTableVpcAssociationId");
    if let Some(var_2848) = &input.local_gateway_route_table_vpc_association_ids {
        let mut list_2850 = scope_2847.start_list(true, Some("item"));
        for item_2849 in var_2848 {
            #[allow(unused_mut)]
            let mut entry_2851 = list_2850.entry();
            entry_2851.string(item_2849);
        }
        list_2850.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2852 = writer.prefix("Filter");
    if let Some(var_2853) = &input.filters {
        let mut list_2855 = scope_2852.start_list(true, Some("Filter"));
        for item_2854 in var_2853 {
            #[allow(unused_mut)]
            let mut entry_2856 = list_2855.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2856, item_2854)?;
        }
        list_2855.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2857 = writer.prefix("MaxResults");
    if let Some(var_2858) = &input.max_results {
        scope_2857.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2858).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2859 = writer.prefix("NextToken");
    if let Some(var_2860) = &input.next_token {
        scope_2859.string(var_2860);
    }
    #[allow(unused_mut)]
    let mut scope_2861 = writer.prefix("DryRun");
    if let Some(var_2862) = &input.dry_run {
        scope_2861.boolean(*var_2862);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_local_gateways(
    input: &crate::input::DescribeLocalGatewaysInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeLocalGateways", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2863 = writer.prefix("LocalGatewayId");
    if let Some(var_2864) = &input.local_gateway_ids {
        let mut list_2866 = scope_2863.start_list(true, Some("item"));
        for item_2865 in var_2864 {
            #[allow(unused_mut)]
            let mut entry_2867 = list_2866.entry();
            entry_2867.string(item_2865);
        }
        list_2866.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2868 = writer.prefix("Filter");
    if let Some(var_2869) = &input.filters {
        let mut list_2871 = scope_2868.start_list(true, Some("Filter"));
        for item_2870 in var_2869 {
            #[allow(unused_mut)]
            let mut entry_2872 = list_2871.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2872, item_2870)?;
        }
        list_2871.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2873 = writer.prefix("MaxResults");
    if let Some(var_2874) = &input.max_results {
        scope_2873.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2874).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2875 = writer.prefix("NextToken");
    if let Some(var_2876) = &input.next_token {
        scope_2875.string(var_2876);
    }
    #[allow(unused_mut)]
    let mut scope_2877 = writer.prefix("DryRun");
    if let Some(var_2878) = &input.dry_run {
        scope_2877.boolean(*var_2878);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_local_gateway_virtual_interface_groups(
    input: &crate::input::DescribeLocalGatewayVirtualInterfaceGroupsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeLocalGatewayVirtualInterfaceGroups",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2879 = writer.prefix("LocalGatewayVirtualInterfaceGroupId");
    if let Some(var_2880) = &input.local_gateway_virtual_interface_group_ids {
        let mut list_2882 = scope_2879.start_list(true, Some("item"));
        for item_2881 in var_2880 {
            #[allow(unused_mut)]
            let mut entry_2883 = list_2882.entry();
            entry_2883.string(item_2881);
        }
        list_2882.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2884 = writer.prefix("Filter");
    if let Some(var_2885) = &input.filters {
        let mut list_2887 = scope_2884.start_list(true, Some("Filter"));
        for item_2886 in var_2885 {
            #[allow(unused_mut)]
            let mut entry_2888 = list_2887.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2888, item_2886)?;
        }
        list_2887.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2889 = writer.prefix("MaxResults");
    if let Some(var_2890) = &input.max_results {
        scope_2889.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2890).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2891 = writer.prefix("NextToken");
    if let Some(var_2892) = &input.next_token {
        scope_2891.string(var_2892);
    }
    #[allow(unused_mut)]
    let mut scope_2893 = writer.prefix("DryRun");
    if let Some(var_2894) = &input.dry_run {
        scope_2893.boolean(*var_2894);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_local_gateway_virtual_interfaces(
    input: &crate::input::DescribeLocalGatewayVirtualInterfacesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeLocalGatewayVirtualInterfaces",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2895 = writer.prefix("LocalGatewayVirtualInterfaceId");
    if let Some(var_2896) = &input.local_gateway_virtual_interface_ids {
        let mut list_2898 = scope_2895.start_list(true, Some("item"));
        for item_2897 in var_2896 {
            #[allow(unused_mut)]
            let mut entry_2899 = list_2898.entry();
            entry_2899.string(item_2897);
        }
        list_2898.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2900 = writer.prefix("Filter");
    if let Some(var_2901) = &input.filters {
        let mut list_2903 = scope_2900.start_list(true, Some("Filter"));
        for item_2902 in var_2901 {
            #[allow(unused_mut)]
            let mut entry_2904 = list_2903.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2904, item_2902)?;
        }
        list_2903.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2905 = writer.prefix("MaxResults");
    if let Some(var_2906) = &input.max_results {
        scope_2905.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2906).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2907 = writer.prefix("NextToken");
    if let Some(var_2908) = &input.next_token {
        scope_2907.string(var_2908);
    }
    #[allow(unused_mut)]
    let mut scope_2909 = writer.prefix("DryRun");
    if let Some(var_2910) = &input.dry_run {
        scope_2909.boolean(*var_2910);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_managed_prefix_lists(
    input: &crate::input::DescribeManagedPrefixListsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeManagedPrefixLists", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2911 = writer.prefix("DryRun");
    if let Some(var_2912) = &input.dry_run {
        scope_2911.boolean(*var_2912);
    }
    #[allow(unused_mut)]
    let mut scope_2913 = writer.prefix("Filter");
    if let Some(var_2914) = &input.filters {
        let mut list_2916 = scope_2913.start_list(true, Some("Filter"));
        for item_2915 in var_2914 {
            #[allow(unused_mut)]
            let mut entry_2917 = list_2916.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2917, item_2915)?;
        }
        list_2916.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2918 = writer.prefix("MaxResults");
    if let Some(var_2919) = &input.max_results {
        scope_2918.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2919).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2920 = writer.prefix("NextToken");
    if let Some(var_2921) = &input.next_token {
        scope_2920.string(var_2921);
    }
    #[allow(unused_mut)]
    let mut scope_2922 = writer.prefix("PrefixListId");
    if let Some(var_2923) = &input.prefix_list_ids {
        let mut list_2925 = scope_2922.start_list(true, Some("item"));
        for item_2924 in var_2923 {
            #[allow(unused_mut)]
            let mut entry_2926 = list_2925.entry();
            entry_2926.string(item_2924);
        }
        list_2925.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_moving_addresses(
    input: &crate::input::DescribeMovingAddressesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeMovingAddresses", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2927 = writer.prefix("Filter");
    if let Some(var_2928) = &input.filters {
        let mut list_2930 = scope_2927.start_list(true, Some("Filter"));
        for item_2929 in var_2928 {
            #[allow(unused_mut)]
            let mut entry_2931 = list_2930.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2931, item_2929)?;
        }
        list_2930.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2932 = writer.prefix("DryRun");
    if let Some(var_2933) = &input.dry_run {
        scope_2932.boolean(*var_2933);
    }
    #[allow(unused_mut)]
    let mut scope_2934 = writer.prefix("MaxResults");
    if let Some(var_2935) = &input.max_results {
        scope_2934.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2935).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2936 = writer.prefix("NextToken");
    if let Some(var_2937) = &input.next_token {
        scope_2936.string(var_2937);
    }
    #[allow(unused_mut)]
    let mut scope_2938 = writer.prefix("PublicIp");
    if let Some(var_2939) = &input.public_ips {
        let mut list_2941 = scope_2938.start_list(true, Some("item"));
        for item_2940 in var_2939 {
            #[allow(unused_mut)]
            let mut entry_2942 = list_2941.entry();
            entry_2942.string(item_2940);
        }
        list_2941.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_nat_gateways(
    input: &crate::input::DescribeNatGatewaysInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeNatGateways", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2943 = writer.prefix("DryRun");
    if let Some(var_2944) = &input.dry_run {
        scope_2943.boolean(*var_2944);
    }
    #[allow(unused_mut)]
    let mut scope_2945 = writer.prefix("Filter");
    if let Some(var_2946) = &input.filter {
        let mut list_2948 = scope_2945.start_list(true, Some("Filter"));
        for item_2947 in var_2946 {
            #[allow(unused_mut)]
            let mut entry_2949 = list_2948.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2949, item_2947)?;
        }
        list_2948.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2950 = writer.prefix("MaxResults");
    if let Some(var_2951) = &input.max_results {
        scope_2950.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2951).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2952 = writer.prefix("NatGatewayId");
    if let Some(var_2953) = &input.nat_gateway_ids {
        let mut list_2955 = scope_2952.start_list(true, Some("item"));
        for item_2954 in var_2953 {
            #[allow(unused_mut)]
            let mut entry_2956 = list_2955.entry();
            entry_2956.string(item_2954);
        }
        list_2955.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2957 = writer.prefix("NextToken");
    if let Some(var_2958) = &input.next_token {
        scope_2957.string(var_2958);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_network_acls(
    input: &crate::input::DescribeNetworkAclsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeNetworkAcls", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2959 = writer.prefix("Filter");
    if let Some(var_2960) = &input.filters {
        let mut list_2962 = scope_2959.start_list(true, Some("Filter"));
        for item_2961 in var_2960 {
            #[allow(unused_mut)]
            let mut entry_2963 = list_2962.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2963, item_2961)?;
        }
        list_2962.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2964 = writer.prefix("DryRun");
    if let Some(var_2965) = &input.dry_run {
        scope_2964.boolean(*var_2965);
    }
    #[allow(unused_mut)]
    let mut scope_2966 = writer.prefix("NetworkAclId");
    if let Some(var_2967) = &input.network_acl_ids {
        let mut list_2969 = scope_2966.start_list(true, Some("item"));
        for item_2968 in var_2967 {
            #[allow(unused_mut)]
            let mut entry_2970 = list_2969.entry();
            entry_2970.string(item_2968);
        }
        list_2969.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2971 = writer.prefix("NextToken");
    if let Some(var_2972) = &input.next_token {
        scope_2971.string(var_2972);
    }
    #[allow(unused_mut)]
    let mut scope_2973 = writer.prefix("MaxResults");
    if let Some(var_2974) = &input.max_results {
        scope_2973.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2974).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_network_insights_access_scope_analyses(
    input: &crate::input::DescribeNetworkInsightsAccessScopeAnalysesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeNetworkInsightsAccessScopeAnalyses",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2975 = writer.prefix("NetworkInsightsAccessScopeAnalysisId");
    if let Some(var_2976) = &input.network_insights_access_scope_analysis_ids {
        let mut list_2978 = scope_2975.start_list(true, Some("item"));
        for item_2977 in var_2976 {
            #[allow(unused_mut)]
            let mut entry_2979 = list_2978.entry();
            entry_2979.string(item_2977);
        }
        list_2978.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2980 = writer.prefix("NetworkInsightsAccessScopeId");
    if let Some(var_2981) = &input.network_insights_access_scope_id {
        scope_2980.string(var_2981);
    }
    #[allow(unused_mut)]
    let mut scope_2982 = writer.prefix("AnalysisStartTimeBegin");
    if let Some(var_2983) = &input.analysis_start_time_begin {
        scope_2982.date_time(var_2983, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_2984 = writer.prefix("AnalysisStartTimeEnd");
    if let Some(var_2985) = &input.analysis_start_time_end {
        scope_2984.date_time(var_2985, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_2986 = writer.prefix("Filter");
    if let Some(var_2987) = &input.filters {
        let mut list_2989 = scope_2986.start_list(true, Some("Filter"));
        for item_2988 in var_2987 {
            #[allow(unused_mut)]
            let mut entry_2990 = list_2989.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2990, item_2988)?;
        }
        list_2989.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2991 = writer.prefix("MaxResults");
    if let Some(var_2992) = &input.max_results {
        scope_2991.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2992).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2993 = writer.prefix("DryRun");
    if let Some(var_2994) = &input.dry_run {
        scope_2993.boolean(*var_2994);
    }
    #[allow(unused_mut)]
    let mut scope_2995 = writer.prefix("NextToken");
    if let Some(var_2996) = &input.next_token {
        scope_2995.string(var_2996);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_network_insights_access_scopes(
    input: &crate::input::DescribeNetworkInsightsAccessScopesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeNetworkInsightsAccessScopes",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2997 = writer.prefix("NetworkInsightsAccessScopeId");
    if let Some(var_2998) = &input.network_insights_access_scope_ids {
        let mut list_3000 = scope_2997.start_list(true, Some("item"));
        for item_2999 in var_2998 {
            #[allow(unused_mut)]
            let mut entry_3001 = list_3000.entry();
            entry_3001.string(item_2999);
        }
        list_3000.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3002 = writer.prefix("Filter");
    if let Some(var_3003) = &input.filters {
        let mut list_3005 = scope_3002.start_list(true, Some("Filter"));
        for item_3004 in var_3003 {
            #[allow(unused_mut)]
            let mut entry_3006 = list_3005.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3006, item_3004)?;
        }
        list_3005.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3007 = writer.prefix("MaxResults");
    if let Some(var_3008) = &input.max_results {
        scope_3007.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3008).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3009 = writer.prefix("DryRun");
    if let Some(var_3010) = &input.dry_run {
        scope_3009.boolean(*var_3010);
    }
    #[allow(unused_mut)]
    let mut scope_3011 = writer.prefix("NextToken");
    if let Some(var_3012) = &input.next_token {
        scope_3011.string(var_3012);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_network_insights_analyses(
    input: &crate::input::DescribeNetworkInsightsAnalysesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeNetworkInsightsAnalyses",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3013 = writer.prefix("NetworkInsightsAnalysisId");
    if let Some(var_3014) = &input.network_insights_analysis_ids {
        let mut list_3016 = scope_3013.start_list(true, Some("item"));
        for item_3015 in var_3014 {
            #[allow(unused_mut)]
            let mut entry_3017 = list_3016.entry();
            entry_3017.string(item_3015);
        }
        list_3016.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3018 = writer.prefix("NetworkInsightsPathId");
    if let Some(var_3019) = &input.network_insights_path_id {
        scope_3018.string(var_3019);
    }
    #[allow(unused_mut)]
    let mut scope_3020 = writer.prefix("AnalysisStartTime");
    if let Some(var_3021) = &input.analysis_start_time {
        scope_3020.date_time(var_3021, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_3022 = writer.prefix("AnalysisEndTime");
    if let Some(var_3023) = &input.analysis_end_time {
        scope_3022.date_time(var_3023, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_3024 = writer.prefix("Filter");
    if let Some(var_3025) = &input.filters {
        let mut list_3027 = scope_3024.start_list(true, Some("Filter"));
        for item_3026 in var_3025 {
            #[allow(unused_mut)]
            let mut entry_3028 = list_3027.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3028, item_3026)?;
        }
        list_3027.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3029 = writer.prefix("MaxResults");
    if let Some(var_3030) = &input.max_results {
        scope_3029.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3030).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3031 = writer.prefix("DryRun");
    if let Some(var_3032) = &input.dry_run {
        scope_3031.boolean(*var_3032);
    }
    #[allow(unused_mut)]
    let mut scope_3033 = writer.prefix("NextToken");
    if let Some(var_3034) = &input.next_token {
        scope_3033.string(var_3034);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_network_insights_paths(
    input: &crate::input::DescribeNetworkInsightsPathsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeNetworkInsightsPaths", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3035 = writer.prefix("NetworkInsightsPathId");
    if let Some(var_3036) = &input.network_insights_path_ids {
        let mut list_3038 = scope_3035.start_list(true, Some("item"));
        for item_3037 in var_3036 {
            #[allow(unused_mut)]
            let mut entry_3039 = list_3038.entry();
            entry_3039.string(item_3037);
        }
        list_3038.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3040 = writer.prefix("Filter");
    if let Some(var_3041) = &input.filters {
        let mut list_3043 = scope_3040.start_list(true, Some("Filter"));
        for item_3042 in var_3041 {
            #[allow(unused_mut)]
            let mut entry_3044 = list_3043.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3044, item_3042)?;
        }
        list_3043.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3045 = writer.prefix("MaxResults");
    if let Some(var_3046) = &input.max_results {
        scope_3045.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3046).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3047 = writer.prefix("DryRun");
    if let Some(var_3048) = &input.dry_run {
        scope_3047.boolean(*var_3048);
    }
    #[allow(unused_mut)]
    let mut scope_3049 = writer.prefix("NextToken");
    if let Some(var_3050) = &input.next_token {
        scope_3049.string(var_3050);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_network_interface_attribute(
    input: &crate::input::DescribeNetworkInterfaceAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeNetworkInterfaceAttribute",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3051 = writer.prefix("Attribute");
    if let Some(var_3052) = &input.attribute {
        scope_3051.string(var_3052.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3053 = writer.prefix("DryRun");
    if let Some(var_3054) = &input.dry_run {
        scope_3053.boolean(*var_3054);
    }
    #[allow(unused_mut)]
    let mut scope_3055 = writer.prefix("NetworkInterfaceId");
    if let Some(var_3056) = &input.network_interface_id {
        scope_3055.string(var_3056);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_network_interface_permissions(
    input: &crate::input::DescribeNetworkInterfacePermissionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeNetworkInterfacePermissions",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3057 = writer.prefix("NetworkInterfacePermissionId");
    if let Some(var_3058) = &input.network_interface_permission_ids {
        let mut list_3060 = scope_3057.start_list(true, None);
        for item_3059 in var_3058 {
            #[allow(unused_mut)]
            let mut entry_3061 = list_3060.entry();
            entry_3061.string(item_3059);
        }
        list_3060.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3062 = writer.prefix("Filter");
    if let Some(var_3063) = &input.filters {
        let mut list_3065 = scope_3062.start_list(true, Some("Filter"));
        for item_3064 in var_3063 {
            #[allow(unused_mut)]
            let mut entry_3066 = list_3065.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3066, item_3064)?;
        }
        list_3065.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3067 = writer.prefix("NextToken");
    if let Some(var_3068) = &input.next_token {
        scope_3067.string(var_3068);
    }
    #[allow(unused_mut)]
    let mut scope_3069 = writer.prefix("MaxResults");
    if let Some(var_3070) = &input.max_results {
        scope_3069.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3070).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_network_interfaces(
    input: &crate::input::DescribeNetworkInterfacesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeNetworkInterfaces", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3071 = writer.prefix("Filter");
    if let Some(var_3072) = &input.filters {
        let mut list_3074 = scope_3071.start_list(true, Some("Filter"));
        for item_3073 in var_3072 {
            #[allow(unused_mut)]
            let mut entry_3075 = list_3074.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3075, item_3073)?;
        }
        list_3074.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3076 = writer.prefix("DryRun");
    if let Some(var_3077) = &input.dry_run {
        scope_3076.boolean(*var_3077);
    }
    #[allow(unused_mut)]
    let mut scope_3078 = writer.prefix("NetworkInterfaceId");
    if let Some(var_3079) = &input.network_interface_ids {
        let mut list_3081 = scope_3078.start_list(true, Some("item"));
        for item_3080 in var_3079 {
            #[allow(unused_mut)]
            let mut entry_3082 = list_3081.entry();
            entry_3082.string(item_3080);
        }
        list_3081.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3083 = writer.prefix("NextToken");
    if let Some(var_3084) = &input.next_token {
        scope_3083.string(var_3084);
    }
    #[allow(unused_mut)]
    let mut scope_3085 = writer.prefix("MaxResults");
    if let Some(var_3086) = &input.max_results {
        scope_3085.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3086).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_placement_groups(
    input: &crate::input::DescribePlacementGroupsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribePlacementGroups", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3087 = writer.prefix("Filter");
    if let Some(var_3088) = &input.filters {
        let mut list_3090 = scope_3087.start_list(true, Some("Filter"));
        for item_3089 in var_3088 {
            #[allow(unused_mut)]
            let mut entry_3091 = list_3090.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3091, item_3089)?;
        }
        list_3090.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3092 = writer.prefix("DryRun");
    if let Some(var_3093) = &input.dry_run {
        scope_3092.boolean(*var_3093);
    }
    #[allow(unused_mut)]
    let mut scope_3094 = writer.prefix("GroupName");
    if let Some(var_3095) = &input.group_names {
        let mut list_3097 = scope_3094.start_list(true, None);
        for item_3096 in var_3095 {
            #[allow(unused_mut)]
            let mut entry_3098 = list_3097.entry();
            entry_3098.string(item_3096);
        }
        list_3097.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3099 = writer.prefix("GroupId");
    if let Some(var_3100) = &input.group_ids {
        let mut list_3102 = scope_3099.start_list(true, Some("GroupId"));
        for item_3101 in var_3100 {
            #[allow(unused_mut)]
            let mut entry_3103 = list_3102.entry();
            entry_3103.string(item_3101);
        }
        list_3102.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_prefix_lists(
    input: &crate::input::DescribePrefixListsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribePrefixLists", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3104 = writer.prefix("DryRun");
    if let Some(var_3105) = &input.dry_run {
        scope_3104.boolean(*var_3105);
    }
    #[allow(unused_mut)]
    let mut scope_3106 = writer.prefix("Filter");
    if let Some(var_3107) = &input.filters {
        let mut list_3109 = scope_3106.start_list(true, Some("Filter"));
        for item_3108 in var_3107 {
            #[allow(unused_mut)]
            let mut entry_3110 = list_3109.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3110, item_3108)?;
        }
        list_3109.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3111 = writer.prefix("MaxResults");
    if let Some(var_3112) = &input.max_results {
        scope_3111.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3112).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3113 = writer.prefix("NextToken");
    if let Some(var_3114) = &input.next_token {
        scope_3113.string(var_3114);
    }
    #[allow(unused_mut)]
    let mut scope_3115 = writer.prefix("PrefixListId");
    if let Some(var_3116) = &input.prefix_list_ids {
        let mut list_3118 = scope_3115.start_list(true, Some("item"));
        for item_3117 in var_3116 {
            #[allow(unused_mut)]
            let mut entry_3119 = list_3118.entry();
            entry_3119.string(item_3117);
        }
        list_3118.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_principal_id_format(
    input: &crate::input::DescribePrincipalIdFormatInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribePrincipalIdFormat", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3120 = writer.prefix("DryRun");
    if let Some(var_3121) = &input.dry_run {
        scope_3120.boolean(*var_3121);
    }
    #[allow(unused_mut)]
    let mut scope_3122 = writer.prefix("Resource");
    if let Some(var_3123) = &input.resources {
        let mut list_3125 = scope_3122.start_list(true, Some("item"));
        for item_3124 in var_3123 {
            #[allow(unused_mut)]
            let mut entry_3126 = list_3125.entry();
            entry_3126.string(item_3124);
        }
        list_3125.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3127 = writer.prefix("MaxResults");
    if let Some(var_3128) = &input.max_results {
        scope_3127.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3128).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3129 = writer.prefix("NextToken");
    if let Some(var_3130) = &input.next_token {
        scope_3129.string(var_3130);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_public_ipv4_pools(
    input: &crate::input::DescribePublicIpv4PoolsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribePublicIpv4Pools", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3131 = writer.prefix("PoolId");
    if let Some(var_3132) = &input.pool_ids {
        let mut list_3134 = scope_3131.start_list(true, Some("item"));
        for item_3133 in var_3132 {
            #[allow(unused_mut)]
            let mut entry_3135 = list_3134.entry();
            entry_3135.string(item_3133);
        }
        list_3134.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3136 = writer.prefix("NextToken");
    if let Some(var_3137) = &input.next_token {
        scope_3136.string(var_3137);
    }
    #[allow(unused_mut)]
    let mut scope_3138 = writer.prefix("MaxResults");
    if let Some(var_3139) = &input.max_results {
        scope_3138.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3139).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3140 = writer.prefix("Filter");
    if let Some(var_3141) = &input.filters {
        let mut list_3143 = scope_3140.start_list(true, Some("Filter"));
        for item_3142 in var_3141 {
            #[allow(unused_mut)]
            let mut entry_3144 = list_3143.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3144, item_3142)?;
        }
        list_3143.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_regions(
    input: &crate::input::DescribeRegionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeRegions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3145 = writer.prefix("Filter");
    if let Some(var_3146) = &input.filters {
        let mut list_3148 = scope_3145.start_list(true, Some("Filter"));
        for item_3147 in var_3146 {
            #[allow(unused_mut)]
            let mut entry_3149 = list_3148.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3149, item_3147)?;
        }
        list_3148.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3150 = writer.prefix("RegionName");
    if let Some(var_3151) = &input.region_names {
        let mut list_3153 = scope_3150.start_list(true, Some("RegionName"));
        for item_3152 in var_3151 {
            #[allow(unused_mut)]
            let mut entry_3154 = list_3153.entry();
            entry_3154.string(item_3152);
        }
        list_3153.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3155 = writer.prefix("DryRun");
    if let Some(var_3156) = &input.dry_run {
        scope_3155.boolean(*var_3156);
    }
    #[allow(unused_mut)]
    let mut scope_3157 = writer.prefix("AllRegions");
    if let Some(var_3158) = &input.all_regions {
        scope_3157.boolean(*var_3158);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_replace_root_volume_tasks(
    input: &crate::input::DescribeReplaceRootVolumeTasksInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeReplaceRootVolumeTasks",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3159 = writer.prefix("ReplaceRootVolumeTaskId");
    if let Some(var_3160) = &input.replace_root_volume_task_ids {
        let mut list_3162 = scope_3159.start_list(true, Some("ReplaceRootVolumeTaskId"));
        for item_3161 in var_3160 {
            #[allow(unused_mut)]
            let mut entry_3163 = list_3162.entry();
            entry_3163.string(item_3161);
        }
        list_3162.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3164 = writer.prefix("Filter");
    if let Some(var_3165) = &input.filters {
        let mut list_3167 = scope_3164.start_list(true, Some("Filter"));
        for item_3166 in var_3165 {
            #[allow(unused_mut)]
            let mut entry_3168 = list_3167.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3168, item_3166)?;
        }
        list_3167.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3169 = writer.prefix("MaxResults");
    if let Some(var_3170) = &input.max_results {
        scope_3169.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3170).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3171 = writer.prefix("NextToken");
    if let Some(var_3172) = &input.next_token {
        scope_3171.string(var_3172);
    }
    #[allow(unused_mut)]
    let mut scope_3173 = writer.prefix("DryRun");
    if let Some(var_3174) = &input.dry_run {
        scope_3173.boolean(*var_3174);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_reserved_instances(
    input: &crate::input::DescribeReservedInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeReservedInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3175 = writer.prefix("Filter");
    if let Some(var_3176) = &input.filters {
        let mut list_3178 = scope_3175.start_list(true, Some("Filter"));
        for item_3177 in var_3176 {
            #[allow(unused_mut)]
            let mut entry_3179 = list_3178.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3179, item_3177)?;
        }
        list_3178.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3180 = writer.prefix("OfferingClass");
    if let Some(var_3181) = &input.offering_class {
        scope_3180.string(var_3181.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3182 = writer.prefix("ReservedInstancesId");
    if let Some(var_3183) = &input.reserved_instances_ids {
        let mut list_3185 = scope_3182.start_list(true, Some("ReservedInstancesId"));
        for item_3184 in var_3183 {
            #[allow(unused_mut)]
            let mut entry_3186 = list_3185.entry();
            entry_3186.string(item_3184);
        }
        list_3185.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3187 = writer.prefix("DryRun");
    if let Some(var_3188) = &input.dry_run {
        scope_3187.boolean(*var_3188);
    }
    #[allow(unused_mut)]
    let mut scope_3189 = writer.prefix("OfferingType");
    if let Some(var_3190) = &input.offering_type {
        scope_3189.string(var_3190.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_reserved_instances_listings(
    input: &crate::input::DescribeReservedInstancesListingsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeReservedInstancesListings",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3191 = writer.prefix("Filter");
    if let Some(var_3192) = &input.filters {
        let mut list_3194 = scope_3191.start_list(true, Some("Filter"));
        for item_3193 in var_3192 {
            #[allow(unused_mut)]
            let mut entry_3195 = list_3194.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3195, item_3193)?;
        }
        list_3194.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3196 = writer.prefix("ReservedInstancesId");
    if let Some(var_3197) = &input.reserved_instances_id {
        scope_3196.string(var_3197);
    }
    #[allow(unused_mut)]
    let mut scope_3198 = writer.prefix("ReservedInstancesListingId");
    if let Some(var_3199) = &input.reserved_instances_listing_id {
        scope_3198.string(var_3199);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_reserved_instances_modifications(
    input: &crate::input::DescribeReservedInstancesModificationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeReservedInstancesModifications",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3200 = writer.prefix("Filter");
    if let Some(var_3201) = &input.filters {
        let mut list_3203 = scope_3200.start_list(true, Some("Filter"));
        for item_3202 in var_3201 {
            #[allow(unused_mut)]
            let mut entry_3204 = list_3203.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3204, item_3202)?;
        }
        list_3203.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3205 = writer.prefix("ReservedInstancesModificationId");
    if let Some(var_3206) = &input.reserved_instances_modification_ids {
        let mut list_3208 = scope_3205.start_list(true, Some("ReservedInstancesModificationId"));
        for item_3207 in var_3206 {
            #[allow(unused_mut)]
            let mut entry_3209 = list_3208.entry();
            entry_3209.string(item_3207);
        }
        list_3208.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3210 = writer.prefix("NextToken");
    if let Some(var_3211) = &input.next_token {
        scope_3210.string(var_3211);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_reserved_instances_offerings(
    input: &crate::input::DescribeReservedInstancesOfferingsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeReservedInstancesOfferings",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3212 = writer.prefix("AvailabilityZone");
    if let Some(var_3213) = &input.availability_zone {
        scope_3212.string(var_3213);
    }
    #[allow(unused_mut)]
    let mut scope_3214 = writer.prefix("Filter");
    if let Some(var_3215) = &input.filters {
        let mut list_3217 = scope_3214.start_list(true, Some("Filter"));
        for item_3216 in var_3215 {
            #[allow(unused_mut)]
            let mut entry_3218 = list_3217.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3218, item_3216)?;
        }
        list_3217.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3219 = writer.prefix("IncludeMarketplace");
    if let Some(var_3220) = &input.include_marketplace {
        scope_3219.boolean(*var_3220);
    }
    #[allow(unused_mut)]
    let mut scope_3221 = writer.prefix("InstanceType");
    if let Some(var_3222) = &input.instance_type {
        scope_3221.string(var_3222.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3223 = writer.prefix("MaxDuration");
    if let Some(var_3224) = &input.max_duration {
        scope_3223.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3224).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3225 = writer.prefix("MaxInstanceCount");
    if let Some(var_3226) = &input.max_instance_count {
        scope_3225.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3226).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3227 = writer.prefix("MinDuration");
    if let Some(var_3228) = &input.min_duration {
        scope_3227.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3228).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3229 = writer.prefix("OfferingClass");
    if let Some(var_3230) = &input.offering_class {
        scope_3229.string(var_3230.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3231 = writer.prefix("ProductDescription");
    if let Some(var_3232) = &input.product_description {
        scope_3231.string(var_3232.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3233 = writer.prefix("ReservedInstancesOfferingId");
    if let Some(var_3234) = &input.reserved_instances_offering_ids {
        let mut list_3236 = scope_3233.start_list(true, None);
        for item_3235 in var_3234 {
            #[allow(unused_mut)]
            let mut entry_3237 = list_3236.entry();
            entry_3237.string(item_3235);
        }
        list_3236.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3238 = writer.prefix("DryRun");
    if let Some(var_3239) = &input.dry_run {
        scope_3238.boolean(*var_3239);
    }
    #[allow(unused_mut)]
    let mut scope_3240 = writer.prefix("InstanceTenancy");
    if let Some(var_3241) = &input.instance_tenancy {
        scope_3240.string(var_3241.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3242 = writer.prefix("MaxResults");
    if let Some(var_3243) = &input.max_results {
        scope_3242.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3243).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3244 = writer.prefix("NextToken");
    if let Some(var_3245) = &input.next_token {
        scope_3244.string(var_3245);
    }
    #[allow(unused_mut)]
    let mut scope_3246 = writer.prefix("OfferingType");
    if let Some(var_3247) = &input.offering_type {
        scope_3246.string(var_3247.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_route_tables(
    input: &crate::input::DescribeRouteTablesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeRouteTables", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3248 = writer.prefix("Filter");
    if let Some(var_3249) = &input.filters {
        let mut list_3251 = scope_3248.start_list(true, Some("Filter"));
        for item_3250 in var_3249 {
            #[allow(unused_mut)]
            let mut entry_3252 = list_3251.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3252, item_3250)?;
        }
        list_3251.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3253 = writer.prefix("DryRun");
    if let Some(var_3254) = &input.dry_run {
        scope_3253.boolean(*var_3254);
    }
    #[allow(unused_mut)]
    let mut scope_3255 = writer.prefix("RouteTableId");
    if let Some(var_3256) = &input.route_table_ids {
        let mut list_3258 = scope_3255.start_list(true, Some("item"));
        for item_3257 in var_3256 {
            #[allow(unused_mut)]
            let mut entry_3259 = list_3258.entry();
            entry_3259.string(item_3257);
        }
        list_3258.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3260 = writer.prefix("NextToken");
    if let Some(var_3261) = &input.next_token {
        scope_3260.string(var_3261);
    }
    #[allow(unused_mut)]
    let mut scope_3262 = writer.prefix("MaxResults");
    if let Some(var_3263) = &input.max_results {
        scope_3262.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3263).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_scheduled_instance_availability(
    input: &crate::input::DescribeScheduledInstanceAvailabilityInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeScheduledInstanceAvailability",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3264 = writer.prefix("DryRun");
    if let Some(var_3265) = &input.dry_run {
        scope_3264.boolean(*var_3265);
    }
    #[allow(unused_mut)]
    let mut scope_3266 = writer.prefix("Filter");
    if let Some(var_3267) = &input.filters {
        let mut list_3269 = scope_3266.start_list(true, Some("Filter"));
        for item_3268 in var_3267 {
            #[allow(unused_mut)]
            let mut entry_3270 = list_3269.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3270, item_3268)?;
        }
        list_3269.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3271 = writer.prefix("FirstSlotStartTimeRange");
    if let Some(var_3272) = &input.first_slot_start_time_range {
        crate::query_ser::serialize_structure_crate_model_slot_date_time_range_request(
            scope_3271, var_3272,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_3273 = writer.prefix("MaxResults");
    if let Some(var_3274) = &input.max_results {
        scope_3273.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3274).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3275 = writer.prefix("MaxSlotDurationInHours");
    if let Some(var_3276) = &input.max_slot_duration_in_hours {
        scope_3275.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3276).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3277 = writer.prefix("MinSlotDurationInHours");
    if let Some(var_3278) = &input.min_slot_duration_in_hours {
        scope_3277.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3278).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3279 = writer.prefix("NextToken");
    if let Some(var_3280) = &input.next_token {
        scope_3279.string(var_3280);
    }
    #[allow(unused_mut)]
    let mut scope_3281 = writer.prefix("Recurrence");
    if let Some(var_3282) = &input.recurrence {
        crate::query_ser::serialize_structure_crate_model_scheduled_instance_recurrence_request(
            scope_3281, var_3282,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_scheduled_instances(
    input: &crate::input::DescribeScheduledInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeScheduledInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3283 = writer.prefix("DryRun");
    if let Some(var_3284) = &input.dry_run {
        scope_3283.boolean(*var_3284);
    }
    #[allow(unused_mut)]
    let mut scope_3285 = writer.prefix("Filter");
    if let Some(var_3286) = &input.filters {
        let mut list_3288 = scope_3285.start_list(true, Some("Filter"));
        for item_3287 in var_3286 {
            #[allow(unused_mut)]
            let mut entry_3289 = list_3288.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3289, item_3287)?;
        }
        list_3288.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3290 = writer.prefix("MaxResults");
    if let Some(var_3291) = &input.max_results {
        scope_3290.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3291).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3292 = writer.prefix("NextToken");
    if let Some(var_3293) = &input.next_token {
        scope_3292.string(var_3293);
    }
    #[allow(unused_mut)]
    let mut scope_3294 = writer.prefix("ScheduledInstanceId");
    if let Some(var_3295) = &input.scheduled_instance_ids {
        let mut list_3297 = scope_3294.start_list(true, Some("ScheduledInstanceId"));
        for item_3296 in var_3295 {
            #[allow(unused_mut)]
            let mut entry_3298 = list_3297.entry();
            entry_3298.string(item_3296);
        }
        list_3297.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3299 = writer.prefix("SlotStartTimeRange");
    if let Some(var_3300) = &input.slot_start_time_range {
        crate::query_ser::serialize_structure_crate_model_slot_start_time_range_request(
            scope_3299, var_3300,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_security_group_references(
    input: &crate::input::DescribeSecurityGroupReferencesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeSecurityGroupReferences",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3301 = writer.prefix("DryRun");
    if let Some(var_3302) = &input.dry_run {
        scope_3301.boolean(*var_3302);
    }
    #[allow(unused_mut)]
    let mut scope_3303 = writer.prefix("GroupId");
    if let Some(var_3304) = &input.group_id {
        let mut list_3306 = scope_3303.start_list(true, Some("item"));
        for item_3305 in var_3304 {
            #[allow(unused_mut)]
            let mut entry_3307 = list_3306.entry();
            entry_3307.string(item_3305);
        }
        list_3306.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_security_group_rules(
    input: &crate::input::DescribeSecurityGroupRulesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeSecurityGroupRules", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3308 = writer.prefix("Filter");
    if let Some(var_3309) = &input.filters {
        let mut list_3311 = scope_3308.start_list(true, Some("Filter"));
        for item_3310 in var_3309 {
            #[allow(unused_mut)]
            let mut entry_3312 = list_3311.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3312, item_3310)?;
        }
        list_3311.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3313 = writer.prefix("SecurityGroupRuleId");
    if let Some(var_3314) = &input.security_group_rule_ids {
        let mut list_3316 = scope_3313.start_list(true, Some("item"));
        for item_3315 in var_3314 {
            #[allow(unused_mut)]
            let mut entry_3317 = list_3316.entry();
            entry_3317.string(item_3315);
        }
        list_3316.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3318 = writer.prefix("DryRun");
    if let Some(var_3319) = &input.dry_run {
        scope_3318.boolean(*var_3319);
    }
    #[allow(unused_mut)]
    let mut scope_3320 = writer.prefix("NextToken");
    if let Some(var_3321) = &input.next_token {
        scope_3320.string(var_3321);
    }
    #[allow(unused_mut)]
    let mut scope_3322 = writer.prefix("MaxResults");
    if let Some(var_3323) = &input.max_results {
        scope_3322.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3323).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_security_groups(
    input: &crate::input::DescribeSecurityGroupsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeSecurityGroups", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3324 = writer.prefix("Filter");
    if let Some(var_3325) = &input.filters {
        let mut list_3327 = scope_3324.start_list(true, Some("Filter"));
        for item_3326 in var_3325 {
            #[allow(unused_mut)]
            let mut entry_3328 = list_3327.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3328, item_3326)?;
        }
        list_3327.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3329 = writer.prefix("GroupId");
    if let Some(var_3330) = &input.group_ids {
        let mut list_3332 = scope_3329.start_list(true, Some("groupId"));
        for item_3331 in var_3330 {
            #[allow(unused_mut)]
            let mut entry_3333 = list_3332.entry();
            entry_3333.string(item_3331);
        }
        list_3332.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3334 = writer.prefix("GroupName");
    if let Some(var_3335) = &input.group_names {
        let mut list_3337 = scope_3334.start_list(true, Some("GroupName"));
        for item_3336 in var_3335 {
            #[allow(unused_mut)]
            let mut entry_3338 = list_3337.entry();
            entry_3338.string(item_3336);
        }
        list_3337.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3339 = writer.prefix("DryRun");
    if let Some(var_3340) = &input.dry_run {
        scope_3339.boolean(*var_3340);
    }
    #[allow(unused_mut)]
    let mut scope_3341 = writer.prefix("NextToken");
    if let Some(var_3342) = &input.next_token {
        scope_3341.string(var_3342);
    }
    #[allow(unused_mut)]
    let mut scope_3343 = writer.prefix("MaxResults");
    if let Some(var_3344) = &input.max_results {
        scope_3343.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3344).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_snapshot_attribute(
    input: &crate::input::DescribeSnapshotAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeSnapshotAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3345 = writer.prefix("Attribute");
    if let Some(var_3346) = &input.attribute {
        scope_3345.string(var_3346.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3347 = writer.prefix("SnapshotId");
    if let Some(var_3348) = &input.snapshot_id {
        scope_3347.string(var_3348);
    }
    #[allow(unused_mut)]
    let mut scope_3349 = writer.prefix("DryRun");
    if let Some(var_3350) = &input.dry_run {
        scope_3349.boolean(*var_3350);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_snapshots(
    input: &crate::input::DescribeSnapshotsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeSnapshots", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3351 = writer.prefix("Filter");
    if let Some(var_3352) = &input.filters {
        let mut list_3354 = scope_3351.start_list(true, Some("Filter"));
        for item_3353 in var_3352 {
            #[allow(unused_mut)]
            let mut entry_3355 = list_3354.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3355, item_3353)?;
        }
        list_3354.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3356 = writer.prefix("MaxResults");
    if let Some(var_3357) = &input.max_results {
        scope_3356.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3357).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3358 = writer.prefix("NextToken");
    if let Some(var_3359) = &input.next_token {
        scope_3358.string(var_3359);
    }
    #[allow(unused_mut)]
    let mut scope_3360 = writer.prefix("Owner");
    if let Some(var_3361) = &input.owner_ids {
        let mut list_3363 = scope_3360.start_list(true, Some("Owner"));
        for item_3362 in var_3361 {
            #[allow(unused_mut)]
            let mut entry_3364 = list_3363.entry();
            entry_3364.string(item_3362);
        }
        list_3363.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3365 = writer.prefix("RestorableBy");
    if let Some(var_3366) = &input.restorable_by_user_ids {
        let mut list_3368 = scope_3365.start_list(true, None);
        for item_3367 in var_3366 {
            #[allow(unused_mut)]
            let mut entry_3369 = list_3368.entry();
            entry_3369.string(item_3367);
        }
        list_3368.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3370 = writer.prefix("SnapshotId");
    if let Some(var_3371) = &input.snapshot_ids {
        let mut list_3373 = scope_3370.start_list(true, Some("SnapshotId"));
        for item_3372 in var_3371 {
            #[allow(unused_mut)]
            let mut entry_3374 = list_3373.entry();
            entry_3374.string(item_3372);
        }
        list_3373.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3375 = writer.prefix("DryRun");
    if let Some(var_3376) = &input.dry_run {
        scope_3375.boolean(*var_3376);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_snapshot_tier_status(
    input: &crate::input::DescribeSnapshotTierStatusInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeSnapshotTierStatus", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3377 = writer.prefix("Filter");
    if let Some(var_3378) = &input.filters {
        let mut list_3380 = scope_3377.start_list(true, Some("Filter"));
        for item_3379 in var_3378 {
            #[allow(unused_mut)]
            let mut entry_3381 = list_3380.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3381, item_3379)?;
        }
        list_3380.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3382 = writer.prefix("DryRun");
    if let Some(var_3383) = &input.dry_run {
        scope_3382.boolean(*var_3383);
    }
    #[allow(unused_mut)]
    let mut scope_3384 = writer.prefix("NextToken");
    if let Some(var_3385) = &input.next_token {
        scope_3384.string(var_3385);
    }
    #[allow(unused_mut)]
    let mut scope_3386 = writer.prefix("MaxResults");
    if let Some(var_3387) = &input.max_results {
        scope_3386.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3387).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_spot_datafeed_subscription(
    input: &crate::input::DescribeSpotDatafeedSubscriptionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeSpotDatafeedSubscription",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3388 = writer.prefix("DryRun");
    if let Some(var_3389) = &input.dry_run {
        scope_3388.boolean(*var_3389);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_spot_fleet_instances(
    input: &crate::input::DescribeSpotFleetInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeSpotFleetInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3390 = writer.prefix("DryRun");
    if let Some(var_3391) = &input.dry_run {
        scope_3390.boolean(*var_3391);
    }
    #[allow(unused_mut)]
    let mut scope_3392 = writer.prefix("MaxResults");
    if let Some(var_3393) = &input.max_results {
        scope_3392.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3393).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3394 = writer.prefix("NextToken");
    if let Some(var_3395) = &input.next_token {
        scope_3394.string(var_3395);
    }
    #[allow(unused_mut)]
    let mut scope_3396 = writer.prefix("SpotFleetRequestId");
    if let Some(var_3397) = &input.spot_fleet_request_id {
        scope_3396.string(var_3397);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_spot_fleet_request_history(
    input: &crate::input::DescribeSpotFleetRequestHistoryInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeSpotFleetRequestHistory",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3398 = writer.prefix("DryRun");
    if let Some(var_3399) = &input.dry_run {
        scope_3398.boolean(*var_3399);
    }
    #[allow(unused_mut)]
    let mut scope_3400 = writer.prefix("EventType");
    if let Some(var_3401) = &input.event_type {
        scope_3400.string(var_3401.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3402 = writer.prefix("MaxResults");
    if let Some(var_3403) = &input.max_results {
        scope_3402.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3403).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3404 = writer.prefix("NextToken");
    if let Some(var_3405) = &input.next_token {
        scope_3404.string(var_3405);
    }
    #[allow(unused_mut)]
    let mut scope_3406 = writer.prefix("SpotFleetRequestId");
    if let Some(var_3407) = &input.spot_fleet_request_id {
        scope_3406.string(var_3407);
    }
    #[allow(unused_mut)]
    let mut scope_3408 = writer.prefix("StartTime");
    if let Some(var_3409) = &input.start_time {
        scope_3408.date_time(var_3409, aws_smithy_types::date_time::Format::DateTime)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_spot_fleet_requests(
    input: &crate::input::DescribeSpotFleetRequestsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeSpotFleetRequests", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3410 = writer.prefix("DryRun");
    if let Some(var_3411) = &input.dry_run {
        scope_3410.boolean(*var_3411);
    }
    #[allow(unused_mut)]
    let mut scope_3412 = writer.prefix("MaxResults");
    if let Some(var_3413) = &input.max_results {
        scope_3412.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3413).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3414 = writer.prefix("NextToken");
    if let Some(var_3415) = &input.next_token {
        scope_3414.string(var_3415);
    }
    #[allow(unused_mut)]
    let mut scope_3416 = writer.prefix("SpotFleetRequestId");
    if let Some(var_3417) = &input.spot_fleet_request_ids {
        let mut list_3419 = scope_3416.start_list(true, Some("item"));
        for item_3418 in var_3417 {
            #[allow(unused_mut)]
            let mut entry_3420 = list_3419.entry();
            entry_3420.string(item_3418);
        }
        list_3419.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_spot_instance_requests(
    input: &crate::input::DescribeSpotInstanceRequestsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeSpotInstanceRequests", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3421 = writer.prefix("Filter");
    if let Some(var_3422) = &input.filters {
        let mut list_3424 = scope_3421.start_list(true, Some("Filter"));
        for item_3423 in var_3422 {
            #[allow(unused_mut)]
            let mut entry_3425 = list_3424.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3425, item_3423)?;
        }
        list_3424.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3426 = writer.prefix("DryRun");
    if let Some(var_3427) = &input.dry_run {
        scope_3426.boolean(*var_3427);
    }
    #[allow(unused_mut)]
    let mut scope_3428 = writer.prefix("SpotInstanceRequestId");
    if let Some(var_3429) = &input.spot_instance_request_ids {
        let mut list_3431 = scope_3428.start_list(true, Some("SpotInstanceRequestId"));
        for item_3430 in var_3429 {
            #[allow(unused_mut)]
            let mut entry_3432 = list_3431.entry();
            entry_3432.string(item_3430);
        }
        list_3431.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3433 = writer.prefix("NextToken");
    if let Some(var_3434) = &input.next_token {
        scope_3433.string(var_3434);
    }
    #[allow(unused_mut)]
    let mut scope_3435 = writer.prefix("MaxResults");
    if let Some(var_3436) = &input.max_results {
        scope_3435.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3436).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_spot_price_history(
    input: &crate::input::DescribeSpotPriceHistoryInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeSpotPriceHistory", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3437 = writer.prefix("Filter");
    if let Some(var_3438) = &input.filters {
        let mut list_3440 = scope_3437.start_list(true, Some("Filter"));
        for item_3439 in var_3438 {
            #[allow(unused_mut)]
            let mut entry_3441 = list_3440.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3441, item_3439)?;
        }
        list_3440.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3442 = writer.prefix("AvailabilityZone");
    if let Some(var_3443) = &input.availability_zone {
        scope_3442.string(var_3443);
    }
    #[allow(unused_mut)]
    let mut scope_3444 = writer.prefix("DryRun");
    if let Some(var_3445) = &input.dry_run {
        scope_3444.boolean(*var_3445);
    }
    #[allow(unused_mut)]
    let mut scope_3446 = writer.prefix("EndTime");
    if let Some(var_3447) = &input.end_time {
        scope_3446.date_time(var_3447, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_3448 = writer.prefix("InstanceType");
    if let Some(var_3449) = &input.instance_types {
        let mut list_3451 = scope_3448.start_list(true, None);
        for item_3450 in var_3449 {
            #[allow(unused_mut)]
            let mut entry_3452 = list_3451.entry();
            entry_3452.string(item_3450.as_str());
        }
        list_3451.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3453 = writer.prefix("MaxResults");
    if let Some(var_3454) = &input.max_results {
        scope_3453.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3454).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3455 = writer.prefix("NextToken");
    if let Some(var_3456) = &input.next_token {
        scope_3455.string(var_3456);
    }
    #[allow(unused_mut)]
    let mut scope_3457 = writer.prefix("ProductDescription");
    if let Some(var_3458) = &input.product_descriptions {
        let mut list_3460 = scope_3457.start_list(true, None);
        for item_3459 in var_3458 {
            #[allow(unused_mut)]
            let mut entry_3461 = list_3460.entry();
            entry_3461.string(item_3459);
        }
        list_3460.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3462 = writer.prefix("StartTime");
    if let Some(var_3463) = &input.start_time {
        scope_3462.date_time(var_3463, aws_smithy_types::date_time::Format::DateTime)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_stale_security_groups(
    input: &crate::input::DescribeStaleSecurityGroupsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeStaleSecurityGroups", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3464 = writer.prefix("DryRun");
    if let Some(var_3465) = &input.dry_run {
        scope_3464.boolean(*var_3465);
    }
    #[allow(unused_mut)]
    let mut scope_3466 = writer.prefix("MaxResults");
    if let Some(var_3467) = &input.max_results {
        scope_3466.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3467).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3468 = writer.prefix("NextToken");
    if let Some(var_3469) = &input.next_token {
        scope_3468.string(var_3469);
    }
    #[allow(unused_mut)]
    let mut scope_3470 = writer.prefix("VpcId");
    if let Some(var_3471) = &input.vpc_id {
        scope_3470.string(var_3471);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_store_image_tasks(
    input: &crate::input::DescribeStoreImageTasksInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeStoreImageTasks", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3472 = writer.prefix("ImageId");
    if let Some(var_3473) = &input.image_ids {
        let mut list_3475 = scope_3472.start_list(true, Some("item"));
        for item_3474 in var_3473 {
            #[allow(unused_mut)]
            let mut entry_3476 = list_3475.entry();
            entry_3476.string(item_3474);
        }
        list_3475.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3477 = writer.prefix("DryRun");
    if let Some(var_3478) = &input.dry_run {
        scope_3477.boolean(*var_3478);
    }
    #[allow(unused_mut)]
    let mut scope_3479 = writer.prefix("Filter");
    if let Some(var_3480) = &input.filters {
        let mut list_3482 = scope_3479.start_list(true, Some("Filter"));
        for item_3481 in var_3480 {
            #[allow(unused_mut)]
            let mut entry_3483 = list_3482.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3483, item_3481)?;
        }
        list_3482.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3484 = writer.prefix("NextToken");
    if let Some(var_3485) = &input.next_token {
        scope_3484.string(var_3485);
    }
    #[allow(unused_mut)]
    let mut scope_3486 = writer.prefix("MaxResults");
    if let Some(var_3487) = &input.max_results {
        scope_3486.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3487).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_subnets(
    input: &crate::input::DescribeSubnetsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeSubnets", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3488 = writer.prefix("Filter");
    if let Some(var_3489) = &input.filters {
        let mut list_3491 = scope_3488.start_list(true, Some("Filter"));
        for item_3490 in var_3489 {
            #[allow(unused_mut)]
            let mut entry_3492 = list_3491.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3492, item_3490)?;
        }
        list_3491.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3493 = writer.prefix("SubnetId");
    if let Some(var_3494) = &input.subnet_ids {
        let mut list_3496 = scope_3493.start_list(true, Some("SubnetId"));
        for item_3495 in var_3494 {
            #[allow(unused_mut)]
            let mut entry_3497 = list_3496.entry();
            entry_3497.string(item_3495);
        }
        list_3496.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3498 = writer.prefix("DryRun");
    if let Some(var_3499) = &input.dry_run {
        scope_3498.boolean(*var_3499);
    }
    #[allow(unused_mut)]
    let mut scope_3500 = writer.prefix("NextToken");
    if let Some(var_3501) = &input.next_token {
        scope_3500.string(var_3501);
    }
    #[allow(unused_mut)]
    let mut scope_3502 = writer.prefix("MaxResults");
    if let Some(var_3503) = &input.max_results {
        scope_3502.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3503).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_tags(
    input: &crate::input::DescribeTagsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeTags", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3504 = writer.prefix("DryRun");
    if let Some(var_3505) = &input.dry_run {
        scope_3504.boolean(*var_3505);
    }
    #[allow(unused_mut)]
    let mut scope_3506 = writer.prefix("Filter");
    if let Some(var_3507) = &input.filters {
        let mut list_3509 = scope_3506.start_list(true, Some("Filter"));
        for item_3508 in var_3507 {
            #[allow(unused_mut)]
            let mut entry_3510 = list_3509.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3510, item_3508)?;
        }
        list_3509.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3511 = writer.prefix("MaxResults");
    if let Some(var_3512) = &input.max_results {
        scope_3511.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3512).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3513 = writer.prefix("NextToken");
    if let Some(var_3514) = &input.next_token {
        scope_3513.string(var_3514);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_traffic_mirror_filters(
    input: &crate::input::DescribeTrafficMirrorFiltersInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeTrafficMirrorFilters", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3515 = writer.prefix("TrafficMirrorFilterId");
    if let Some(var_3516) = &input.traffic_mirror_filter_ids {
        let mut list_3518 = scope_3515.start_list(true, Some("item"));
        for item_3517 in var_3516 {
            #[allow(unused_mut)]
            let mut entry_3519 = list_3518.entry();
            entry_3519.string(item_3517);
        }
        list_3518.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3520 = writer.prefix("DryRun");
    if let Some(var_3521) = &input.dry_run {
        scope_3520.boolean(*var_3521);
    }
    #[allow(unused_mut)]
    let mut scope_3522 = writer.prefix("Filter");
    if let Some(var_3523) = &input.filters {
        let mut list_3525 = scope_3522.start_list(true, Some("Filter"));
        for item_3524 in var_3523 {
            #[allow(unused_mut)]
            let mut entry_3526 = list_3525.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3526, item_3524)?;
        }
        list_3525.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3527 = writer.prefix("MaxResults");
    if let Some(var_3528) = &input.max_results {
        scope_3527.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3528).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3529 = writer.prefix("NextToken");
    if let Some(var_3530) = &input.next_token {
        scope_3529.string(var_3530);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_traffic_mirror_sessions(
    input: &crate::input::DescribeTrafficMirrorSessionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeTrafficMirrorSessions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3531 = writer.prefix("TrafficMirrorSessionId");
    if let Some(var_3532) = &input.traffic_mirror_session_ids {
        let mut list_3534 = scope_3531.start_list(true, Some("item"));
        for item_3533 in var_3532 {
            #[allow(unused_mut)]
            let mut entry_3535 = list_3534.entry();
            entry_3535.string(item_3533);
        }
        list_3534.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3536 = writer.prefix("DryRun");
    if let Some(var_3537) = &input.dry_run {
        scope_3536.boolean(*var_3537);
    }
    #[allow(unused_mut)]
    let mut scope_3538 = writer.prefix("Filter");
    if let Some(var_3539) = &input.filters {
        let mut list_3541 = scope_3538.start_list(true, Some("Filter"));
        for item_3540 in var_3539 {
            #[allow(unused_mut)]
            let mut entry_3542 = list_3541.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3542, item_3540)?;
        }
        list_3541.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3543 = writer.prefix("MaxResults");
    if let Some(var_3544) = &input.max_results {
        scope_3543.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3544).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3545 = writer.prefix("NextToken");
    if let Some(var_3546) = &input.next_token {
        scope_3545.string(var_3546);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_traffic_mirror_targets(
    input: &crate::input::DescribeTrafficMirrorTargetsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeTrafficMirrorTargets", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3547 = writer.prefix("TrafficMirrorTargetId");
    if let Some(var_3548) = &input.traffic_mirror_target_ids {
        let mut list_3550 = scope_3547.start_list(true, Some("item"));
        for item_3549 in var_3548 {
            #[allow(unused_mut)]
            let mut entry_3551 = list_3550.entry();
            entry_3551.string(item_3549);
        }
        list_3550.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3552 = writer.prefix("DryRun");
    if let Some(var_3553) = &input.dry_run {
        scope_3552.boolean(*var_3553);
    }
    #[allow(unused_mut)]
    let mut scope_3554 = writer.prefix("Filter");
    if let Some(var_3555) = &input.filters {
        let mut list_3557 = scope_3554.start_list(true, Some("Filter"));
        for item_3556 in var_3555 {
            #[allow(unused_mut)]
            let mut entry_3558 = list_3557.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3558, item_3556)?;
        }
        list_3557.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3559 = writer.prefix("MaxResults");
    if let Some(var_3560) = &input.max_results {
        scope_3559.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3560).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3561 = writer.prefix("NextToken");
    if let Some(var_3562) = &input.next_token {
        scope_3561.string(var_3562);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_transit_gateway_attachments(
    input: &crate::input::DescribeTransitGatewayAttachmentsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeTransitGatewayAttachments",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3563 = writer.prefix("TransitGatewayAttachmentIds");
    if let Some(var_3564) = &input.transit_gateway_attachment_ids {
        let mut list_3566 = scope_3563.start_list(true, None);
        for item_3565 in var_3564 {
            #[allow(unused_mut)]
            let mut entry_3567 = list_3566.entry();
            entry_3567.string(item_3565);
        }
        list_3566.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3568 = writer.prefix("Filter");
    if let Some(var_3569) = &input.filters {
        let mut list_3571 = scope_3568.start_list(true, Some("Filter"));
        for item_3570 in var_3569 {
            #[allow(unused_mut)]
            let mut entry_3572 = list_3571.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3572, item_3570)?;
        }
        list_3571.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3573 = writer.prefix("MaxResults");
    if let Some(var_3574) = &input.max_results {
        scope_3573.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3574).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3575 = writer.prefix("NextToken");
    if let Some(var_3576) = &input.next_token {
        scope_3575.string(var_3576);
    }
    #[allow(unused_mut)]
    let mut scope_3577 = writer.prefix("DryRun");
    if let Some(var_3578) = &input.dry_run {
        scope_3577.boolean(*var_3578);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_transit_gateway_connect_peers(
    input: &crate::input::DescribeTransitGatewayConnectPeersInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeTransitGatewayConnectPeers",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3579 = writer.prefix("TransitGatewayConnectPeerIds");
    if let Some(var_3580) = &input.transit_gateway_connect_peer_ids {
        let mut list_3582 = scope_3579.start_list(true, Some("item"));
        for item_3581 in var_3580 {
            #[allow(unused_mut)]
            let mut entry_3583 = list_3582.entry();
            entry_3583.string(item_3581);
        }
        list_3582.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3584 = writer.prefix("Filter");
    if let Some(var_3585) = &input.filters {
        let mut list_3587 = scope_3584.start_list(true, Some("Filter"));
        for item_3586 in var_3585 {
            #[allow(unused_mut)]
            let mut entry_3588 = list_3587.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3588, item_3586)?;
        }
        list_3587.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3589 = writer.prefix("MaxResults");
    if let Some(var_3590) = &input.max_results {
        scope_3589.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3590).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3591 = writer.prefix("NextToken");
    if let Some(var_3592) = &input.next_token {
        scope_3591.string(var_3592);
    }
    #[allow(unused_mut)]
    let mut scope_3593 = writer.prefix("DryRun");
    if let Some(var_3594) = &input.dry_run {
        scope_3593.boolean(*var_3594);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_transit_gateway_connects(
    input: &crate::input::DescribeTransitGatewayConnectsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeTransitGatewayConnects",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3595 = writer.prefix("TransitGatewayAttachmentIds");
    if let Some(var_3596) = &input.transit_gateway_attachment_ids {
        let mut list_3598 = scope_3595.start_list(true, None);
        for item_3597 in var_3596 {
            #[allow(unused_mut)]
            let mut entry_3599 = list_3598.entry();
            entry_3599.string(item_3597);
        }
        list_3598.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3600 = writer.prefix("Filter");
    if let Some(var_3601) = &input.filters {
        let mut list_3603 = scope_3600.start_list(true, Some("Filter"));
        for item_3602 in var_3601 {
            #[allow(unused_mut)]
            let mut entry_3604 = list_3603.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3604, item_3602)?;
        }
        list_3603.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3605 = writer.prefix("MaxResults");
    if let Some(var_3606) = &input.max_results {
        scope_3605.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3606).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3607 = writer.prefix("NextToken");
    if let Some(var_3608) = &input.next_token {
        scope_3607.string(var_3608);
    }
    #[allow(unused_mut)]
    let mut scope_3609 = writer.prefix("DryRun");
    if let Some(var_3610) = &input.dry_run {
        scope_3609.boolean(*var_3610);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_transit_gateway_multicast_domains(
    input: &crate::input::DescribeTransitGatewayMulticastDomainsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeTransitGatewayMulticastDomains",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3611 = writer.prefix("TransitGatewayMulticastDomainIds");
    if let Some(var_3612) = &input.transit_gateway_multicast_domain_ids {
        let mut list_3614 = scope_3611.start_list(true, Some("item"));
        for item_3613 in var_3612 {
            #[allow(unused_mut)]
            let mut entry_3615 = list_3614.entry();
            entry_3615.string(item_3613);
        }
        list_3614.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3616 = writer.prefix("Filter");
    if let Some(var_3617) = &input.filters {
        let mut list_3619 = scope_3616.start_list(true, Some("Filter"));
        for item_3618 in var_3617 {
            #[allow(unused_mut)]
            let mut entry_3620 = list_3619.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3620, item_3618)?;
        }
        list_3619.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3621 = writer.prefix("MaxResults");
    if let Some(var_3622) = &input.max_results {
        scope_3621.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3622).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3623 = writer.prefix("NextToken");
    if let Some(var_3624) = &input.next_token {
        scope_3623.string(var_3624);
    }
    #[allow(unused_mut)]
    let mut scope_3625 = writer.prefix("DryRun");
    if let Some(var_3626) = &input.dry_run {
        scope_3625.boolean(*var_3626);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_transit_gateway_peering_attachments(
    input: &crate::input::DescribeTransitGatewayPeeringAttachmentsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeTransitGatewayPeeringAttachments",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3627 = writer.prefix("TransitGatewayAttachmentIds");
    if let Some(var_3628) = &input.transit_gateway_attachment_ids {
        let mut list_3630 = scope_3627.start_list(true, None);
        for item_3629 in var_3628 {
            #[allow(unused_mut)]
            let mut entry_3631 = list_3630.entry();
            entry_3631.string(item_3629);
        }
        list_3630.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3632 = writer.prefix("Filter");
    if let Some(var_3633) = &input.filters {
        let mut list_3635 = scope_3632.start_list(true, Some("Filter"));
        for item_3634 in var_3633 {
            #[allow(unused_mut)]
            let mut entry_3636 = list_3635.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3636, item_3634)?;
        }
        list_3635.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3637 = writer.prefix("MaxResults");
    if let Some(var_3638) = &input.max_results {
        scope_3637.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3638).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3639 = writer.prefix("NextToken");
    if let Some(var_3640) = &input.next_token {
        scope_3639.string(var_3640);
    }
    #[allow(unused_mut)]
    let mut scope_3641 = writer.prefix("DryRun");
    if let Some(var_3642) = &input.dry_run {
        scope_3641.boolean(*var_3642);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_transit_gateway_route_tables(
    input: &crate::input::DescribeTransitGatewayRouteTablesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeTransitGatewayRouteTables",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3643 = writer.prefix("TransitGatewayRouteTableIds");
    if let Some(var_3644) = &input.transit_gateway_route_table_ids {
        let mut list_3646 = scope_3643.start_list(true, Some("item"));
        for item_3645 in var_3644 {
            #[allow(unused_mut)]
            let mut entry_3647 = list_3646.entry();
            entry_3647.string(item_3645);
        }
        list_3646.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3648 = writer.prefix("Filter");
    if let Some(var_3649) = &input.filters {
        let mut list_3651 = scope_3648.start_list(true, Some("Filter"));
        for item_3650 in var_3649 {
            #[allow(unused_mut)]
            let mut entry_3652 = list_3651.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3652, item_3650)?;
        }
        list_3651.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3653 = writer.prefix("MaxResults");
    if let Some(var_3654) = &input.max_results {
        scope_3653.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3654).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3655 = writer.prefix("NextToken");
    if let Some(var_3656) = &input.next_token {
        scope_3655.string(var_3656);
    }
    #[allow(unused_mut)]
    let mut scope_3657 = writer.prefix("DryRun");
    if let Some(var_3658) = &input.dry_run {
        scope_3657.boolean(*var_3658);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_transit_gateways(
    input: &crate::input::DescribeTransitGatewaysInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeTransitGateways", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3659 = writer.prefix("TransitGatewayIds");
    if let Some(var_3660) = &input.transit_gateway_ids {
        let mut list_3662 = scope_3659.start_list(true, Some("item"));
        for item_3661 in var_3660 {
            #[allow(unused_mut)]
            let mut entry_3663 = list_3662.entry();
            entry_3663.string(item_3661);
        }
        list_3662.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3664 = writer.prefix("Filter");
    if let Some(var_3665) = &input.filters {
        let mut list_3667 = scope_3664.start_list(true, Some("Filter"));
        for item_3666 in var_3665 {
            #[allow(unused_mut)]
            let mut entry_3668 = list_3667.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3668, item_3666)?;
        }
        list_3667.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3669 = writer.prefix("MaxResults");
    if let Some(var_3670) = &input.max_results {
        scope_3669.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3670).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3671 = writer.prefix("NextToken");
    if let Some(var_3672) = &input.next_token {
        scope_3671.string(var_3672);
    }
    #[allow(unused_mut)]
    let mut scope_3673 = writer.prefix("DryRun");
    if let Some(var_3674) = &input.dry_run {
        scope_3673.boolean(*var_3674);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_transit_gateway_vpc_attachments(
    input: &crate::input::DescribeTransitGatewayVpcAttachmentsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeTransitGatewayVpcAttachments",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3675 = writer.prefix("TransitGatewayAttachmentIds");
    if let Some(var_3676) = &input.transit_gateway_attachment_ids {
        let mut list_3678 = scope_3675.start_list(true, None);
        for item_3677 in var_3676 {
            #[allow(unused_mut)]
            let mut entry_3679 = list_3678.entry();
            entry_3679.string(item_3677);
        }
        list_3678.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3680 = writer.prefix("Filter");
    if let Some(var_3681) = &input.filters {
        let mut list_3683 = scope_3680.start_list(true, Some("Filter"));
        for item_3682 in var_3681 {
            #[allow(unused_mut)]
            let mut entry_3684 = list_3683.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3684, item_3682)?;
        }
        list_3683.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3685 = writer.prefix("MaxResults");
    if let Some(var_3686) = &input.max_results {
        scope_3685.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3686).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3687 = writer.prefix("NextToken");
    if let Some(var_3688) = &input.next_token {
        scope_3687.string(var_3688);
    }
    #[allow(unused_mut)]
    let mut scope_3689 = writer.prefix("DryRun");
    if let Some(var_3690) = &input.dry_run {
        scope_3689.boolean(*var_3690);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_trunk_interface_associations(
    input: &crate::input::DescribeTrunkInterfaceAssociationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeTrunkInterfaceAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3691 = writer.prefix("AssociationId");
    if let Some(var_3692) = &input.association_ids {
        let mut list_3694 = scope_3691.start_list(true, Some("item"));
        for item_3693 in var_3692 {
            #[allow(unused_mut)]
            let mut entry_3695 = list_3694.entry();
            entry_3695.string(item_3693);
        }
        list_3694.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3696 = writer.prefix("DryRun");
    if let Some(var_3697) = &input.dry_run {
        scope_3696.boolean(*var_3697);
    }
    #[allow(unused_mut)]
    let mut scope_3698 = writer.prefix("Filter");
    if let Some(var_3699) = &input.filters {
        let mut list_3701 = scope_3698.start_list(true, Some("Filter"));
        for item_3700 in var_3699 {
            #[allow(unused_mut)]
            let mut entry_3702 = list_3701.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3702, item_3700)?;
        }
        list_3701.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3703 = writer.prefix("NextToken");
    if let Some(var_3704) = &input.next_token {
        scope_3703.string(var_3704);
    }
    #[allow(unused_mut)]
    let mut scope_3705 = writer.prefix("MaxResults");
    if let Some(var_3706) = &input.max_results {
        scope_3705.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3706).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_volume_attribute(
    input: &crate::input::DescribeVolumeAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeVolumeAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3707 = writer.prefix("Attribute");
    if let Some(var_3708) = &input.attribute {
        scope_3707.string(var_3708.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3709 = writer.prefix("VolumeId");
    if let Some(var_3710) = &input.volume_id {
        scope_3709.string(var_3710);
    }
    #[allow(unused_mut)]
    let mut scope_3711 = writer.prefix("DryRun");
    if let Some(var_3712) = &input.dry_run {
        scope_3711.boolean(*var_3712);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_volumes(
    input: &crate::input::DescribeVolumesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeVolumes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3713 = writer.prefix("Filter");
    if let Some(var_3714) = &input.filters {
        let mut list_3716 = scope_3713.start_list(true, Some("Filter"));
        for item_3715 in var_3714 {
            #[allow(unused_mut)]
            let mut entry_3717 = list_3716.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3717, item_3715)?;
        }
        list_3716.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3718 = writer.prefix("VolumeId");
    if let Some(var_3719) = &input.volume_ids {
        let mut list_3721 = scope_3718.start_list(true, Some("VolumeId"));
        for item_3720 in var_3719 {
            #[allow(unused_mut)]
            let mut entry_3722 = list_3721.entry();
            entry_3722.string(item_3720);
        }
        list_3721.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3723 = writer.prefix("DryRun");
    if let Some(var_3724) = &input.dry_run {
        scope_3723.boolean(*var_3724);
    }
    #[allow(unused_mut)]
    let mut scope_3725 = writer.prefix("MaxResults");
    if let Some(var_3726) = &input.max_results {
        scope_3725.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3726).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3727 = writer.prefix("NextToken");
    if let Some(var_3728) = &input.next_token {
        scope_3727.string(var_3728);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_volumes_modifications(
    input: &crate::input::DescribeVolumesModificationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeVolumesModifications", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3729 = writer.prefix("DryRun");
    if let Some(var_3730) = &input.dry_run {
        scope_3729.boolean(*var_3730);
    }
    #[allow(unused_mut)]
    let mut scope_3731 = writer.prefix("VolumeId");
    if let Some(var_3732) = &input.volume_ids {
        let mut list_3734 = scope_3731.start_list(true, Some("VolumeId"));
        for item_3733 in var_3732 {
            #[allow(unused_mut)]
            let mut entry_3735 = list_3734.entry();
            entry_3735.string(item_3733);
        }
        list_3734.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3736 = writer.prefix("Filter");
    if let Some(var_3737) = &input.filters {
        let mut list_3739 = scope_3736.start_list(true, Some("Filter"));
        for item_3738 in var_3737 {
            #[allow(unused_mut)]
            let mut entry_3740 = list_3739.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3740, item_3738)?;
        }
        list_3739.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3741 = writer.prefix("NextToken");
    if let Some(var_3742) = &input.next_token {
        scope_3741.string(var_3742);
    }
    #[allow(unused_mut)]
    let mut scope_3743 = writer.prefix("MaxResults");
    if let Some(var_3744) = &input.max_results {
        scope_3743.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3744).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_volume_status(
    input: &crate::input::DescribeVolumeStatusInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeVolumeStatus", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3745 = writer.prefix("Filter");
    if let Some(var_3746) = &input.filters {
        let mut list_3748 = scope_3745.start_list(true, Some("Filter"));
        for item_3747 in var_3746 {
            #[allow(unused_mut)]
            let mut entry_3749 = list_3748.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3749, item_3747)?;
        }
        list_3748.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3750 = writer.prefix("MaxResults");
    if let Some(var_3751) = &input.max_results {
        scope_3750.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3751).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3752 = writer.prefix("NextToken");
    if let Some(var_3753) = &input.next_token {
        scope_3752.string(var_3753);
    }
    #[allow(unused_mut)]
    let mut scope_3754 = writer.prefix("VolumeId");
    if let Some(var_3755) = &input.volume_ids {
        let mut list_3757 = scope_3754.start_list(true, Some("VolumeId"));
        for item_3756 in var_3755 {
            #[allow(unused_mut)]
            let mut entry_3758 = list_3757.entry();
            entry_3758.string(item_3756);
        }
        list_3757.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3759 = writer.prefix("DryRun");
    if let Some(var_3760) = &input.dry_run {
        scope_3759.boolean(*var_3760);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_attribute(
    input: &crate::input::DescribeVpcAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeVpcAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3761 = writer.prefix("Attribute");
    if let Some(var_3762) = &input.attribute {
        scope_3761.string(var_3762.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3763 = writer.prefix("VpcId");
    if let Some(var_3764) = &input.vpc_id {
        scope_3763.string(var_3764);
    }
    #[allow(unused_mut)]
    let mut scope_3765 = writer.prefix("DryRun");
    if let Some(var_3766) = &input.dry_run {
        scope_3765.boolean(*var_3766);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_classic_link(
    input: &crate::input::DescribeVpcClassicLinkInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeVpcClassicLink", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3767 = writer.prefix("Filter");
    if let Some(var_3768) = &input.filters {
        let mut list_3770 = scope_3767.start_list(true, Some("Filter"));
        for item_3769 in var_3768 {
            #[allow(unused_mut)]
            let mut entry_3771 = list_3770.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3771, item_3769)?;
        }
        list_3770.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3772 = writer.prefix("DryRun");
    if let Some(var_3773) = &input.dry_run {
        scope_3772.boolean(*var_3773);
    }
    #[allow(unused_mut)]
    let mut scope_3774 = writer.prefix("VpcId");
    if let Some(var_3775) = &input.vpc_ids {
        let mut list_3777 = scope_3774.start_list(true, Some("VpcId"));
        for item_3776 in var_3775 {
            #[allow(unused_mut)]
            let mut entry_3778 = list_3777.entry();
            entry_3778.string(item_3776);
        }
        list_3777.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_classic_link_dns_support(
    input: &crate::input::DescribeVpcClassicLinkDnsSupportInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeVpcClassicLinkDnsSupport",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3779 = writer.prefix("MaxResults");
    if let Some(var_3780) = &input.max_results {
        scope_3779.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3780).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3781 = writer.prefix("NextToken");
    if let Some(var_3782) = &input.next_token {
        scope_3781.string(var_3782);
    }
    #[allow(unused_mut)]
    let mut scope_3783 = writer.prefix("VpcIds");
    if let Some(var_3784) = &input.vpc_ids {
        let mut list_3786 = scope_3783.start_list(true, Some("VpcId"));
        for item_3785 in var_3784 {
            #[allow(unused_mut)]
            let mut entry_3787 = list_3786.entry();
            entry_3787.string(item_3785);
        }
        list_3786.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_endpoint_connection_notifications(
    input: &crate::input::DescribeVpcEndpointConnectionNotificationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeVpcEndpointConnectionNotifications",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3788 = writer.prefix("DryRun");
    if let Some(var_3789) = &input.dry_run {
        scope_3788.boolean(*var_3789);
    }
    #[allow(unused_mut)]
    let mut scope_3790 = writer.prefix("ConnectionNotificationId");
    if let Some(var_3791) = &input.connection_notification_id {
        scope_3790.string(var_3791);
    }
    #[allow(unused_mut)]
    let mut scope_3792 = writer.prefix("Filter");
    if let Some(var_3793) = &input.filters {
        let mut list_3795 = scope_3792.start_list(true, Some("Filter"));
        for item_3794 in var_3793 {
            #[allow(unused_mut)]
            let mut entry_3796 = list_3795.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3796, item_3794)?;
        }
        list_3795.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3797 = writer.prefix("MaxResults");
    if let Some(var_3798) = &input.max_results {
        scope_3797.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3798).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3799 = writer.prefix("NextToken");
    if let Some(var_3800) = &input.next_token {
        scope_3799.string(var_3800);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_endpoint_connections(
    input: &crate::input::DescribeVpcEndpointConnectionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeVpcEndpointConnections",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3801 = writer.prefix("DryRun");
    if let Some(var_3802) = &input.dry_run {
        scope_3801.boolean(*var_3802);
    }
    #[allow(unused_mut)]
    let mut scope_3803 = writer.prefix("Filter");
    if let Some(var_3804) = &input.filters {
        let mut list_3806 = scope_3803.start_list(true, Some("Filter"));
        for item_3805 in var_3804 {
            #[allow(unused_mut)]
            let mut entry_3807 = list_3806.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3807, item_3805)?;
        }
        list_3806.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3808 = writer.prefix("MaxResults");
    if let Some(var_3809) = &input.max_results {
        scope_3808.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3809).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3810 = writer.prefix("NextToken");
    if let Some(var_3811) = &input.next_token {
        scope_3810.string(var_3811);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_endpoints(
    input: &crate::input::DescribeVpcEndpointsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeVpcEndpoints", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3812 = writer.prefix("DryRun");
    if let Some(var_3813) = &input.dry_run {
        scope_3812.boolean(*var_3813);
    }
    #[allow(unused_mut)]
    let mut scope_3814 = writer.prefix("VpcEndpointId");
    if let Some(var_3815) = &input.vpc_endpoint_ids {
        let mut list_3817 = scope_3814.start_list(true, Some("item"));
        for item_3816 in var_3815 {
            #[allow(unused_mut)]
            let mut entry_3818 = list_3817.entry();
            entry_3818.string(item_3816);
        }
        list_3817.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3819 = writer.prefix("Filter");
    if let Some(var_3820) = &input.filters {
        let mut list_3822 = scope_3819.start_list(true, Some("Filter"));
        for item_3821 in var_3820 {
            #[allow(unused_mut)]
            let mut entry_3823 = list_3822.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3823, item_3821)?;
        }
        list_3822.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3824 = writer.prefix("MaxResults");
    if let Some(var_3825) = &input.max_results {
        scope_3824.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3825).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3826 = writer.prefix("NextToken");
    if let Some(var_3827) = &input.next_token {
        scope_3826.string(var_3827);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_endpoint_service_configurations(
    input: &crate::input::DescribeVpcEndpointServiceConfigurationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeVpcEndpointServiceConfigurations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3828 = writer.prefix("DryRun");
    if let Some(var_3829) = &input.dry_run {
        scope_3828.boolean(*var_3829);
    }
    #[allow(unused_mut)]
    let mut scope_3830 = writer.prefix("ServiceId");
    if let Some(var_3831) = &input.service_ids {
        let mut list_3833 = scope_3830.start_list(true, Some("item"));
        for item_3832 in var_3831 {
            #[allow(unused_mut)]
            let mut entry_3834 = list_3833.entry();
            entry_3834.string(item_3832);
        }
        list_3833.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3835 = writer.prefix("Filter");
    if let Some(var_3836) = &input.filters {
        let mut list_3838 = scope_3835.start_list(true, Some("Filter"));
        for item_3837 in var_3836 {
            #[allow(unused_mut)]
            let mut entry_3839 = list_3838.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3839, item_3837)?;
        }
        list_3838.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3840 = writer.prefix("MaxResults");
    if let Some(var_3841) = &input.max_results {
        scope_3840.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3841).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3842 = writer.prefix("NextToken");
    if let Some(var_3843) = &input.next_token {
        scope_3842.string(var_3843);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_endpoint_service_permissions(
    input: &crate::input::DescribeVpcEndpointServicePermissionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeVpcEndpointServicePermissions",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3844 = writer.prefix("DryRun");
    if let Some(var_3845) = &input.dry_run {
        scope_3844.boolean(*var_3845);
    }
    #[allow(unused_mut)]
    let mut scope_3846 = writer.prefix("ServiceId");
    if let Some(var_3847) = &input.service_id {
        scope_3846.string(var_3847);
    }
    #[allow(unused_mut)]
    let mut scope_3848 = writer.prefix("Filter");
    if let Some(var_3849) = &input.filters {
        let mut list_3851 = scope_3848.start_list(true, Some("Filter"));
        for item_3850 in var_3849 {
            #[allow(unused_mut)]
            let mut entry_3852 = list_3851.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3852, item_3850)?;
        }
        list_3851.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3853 = writer.prefix("MaxResults");
    if let Some(var_3854) = &input.max_results {
        scope_3853.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3854).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3855 = writer.prefix("NextToken");
    if let Some(var_3856) = &input.next_token {
        scope_3855.string(var_3856);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_endpoint_services(
    input: &crate::input::DescribeVpcEndpointServicesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeVpcEndpointServices", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3857 = writer.prefix("DryRun");
    if let Some(var_3858) = &input.dry_run {
        scope_3857.boolean(*var_3858);
    }
    #[allow(unused_mut)]
    let mut scope_3859 = writer.prefix("ServiceName");
    if let Some(var_3860) = &input.service_names {
        let mut list_3862 = scope_3859.start_list(true, Some("item"));
        for item_3861 in var_3860 {
            #[allow(unused_mut)]
            let mut entry_3863 = list_3862.entry();
            entry_3863.string(item_3861);
        }
        list_3862.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3864 = writer.prefix("Filter");
    if let Some(var_3865) = &input.filters {
        let mut list_3867 = scope_3864.start_list(true, Some("Filter"));
        for item_3866 in var_3865 {
            #[allow(unused_mut)]
            let mut entry_3868 = list_3867.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3868, item_3866)?;
        }
        list_3867.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3869 = writer.prefix("MaxResults");
    if let Some(var_3870) = &input.max_results {
        scope_3869.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3870).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3871 = writer.prefix("NextToken");
    if let Some(var_3872) = &input.next_token {
        scope_3871.string(var_3872);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_peering_connections(
    input: &crate::input::DescribeVpcPeeringConnectionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeVpcPeeringConnections", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3873 = writer.prefix("Filter");
    if let Some(var_3874) = &input.filters {
        let mut list_3876 = scope_3873.start_list(true, Some("Filter"));
        for item_3875 in var_3874 {
            #[allow(unused_mut)]
            let mut entry_3877 = list_3876.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3877, item_3875)?;
        }
        list_3876.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3878 = writer.prefix("DryRun");
    if let Some(var_3879) = &input.dry_run {
        scope_3878.boolean(*var_3879);
    }
    #[allow(unused_mut)]
    let mut scope_3880 = writer.prefix("VpcPeeringConnectionId");
    if let Some(var_3881) = &input.vpc_peering_connection_ids {
        let mut list_3883 = scope_3880.start_list(true, Some("item"));
        for item_3882 in var_3881 {
            #[allow(unused_mut)]
            let mut entry_3884 = list_3883.entry();
            entry_3884.string(item_3882);
        }
        list_3883.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3885 = writer.prefix("NextToken");
    if let Some(var_3886) = &input.next_token {
        scope_3885.string(var_3886);
    }
    #[allow(unused_mut)]
    let mut scope_3887 = writer.prefix("MaxResults");
    if let Some(var_3888) = &input.max_results {
        scope_3887.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3888).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpcs(
    input: &crate::input::DescribeVpcsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeVpcs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3889 = writer.prefix("Filter");
    if let Some(var_3890) = &input.filters {
        let mut list_3892 = scope_3889.start_list(true, Some("Filter"));
        for item_3891 in var_3890 {
            #[allow(unused_mut)]
            let mut entry_3893 = list_3892.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3893, item_3891)?;
        }
        list_3892.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3894 = writer.prefix("VpcId");
    if let Some(var_3895) = &input.vpc_ids {
        let mut list_3897 = scope_3894.start_list(true, Some("VpcId"));
        for item_3896 in var_3895 {
            #[allow(unused_mut)]
            let mut entry_3898 = list_3897.entry();
            entry_3898.string(item_3896);
        }
        list_3897.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3899 = writer.prefix("DryRun");
    if let Some(var_3900) = &input.dry_run {
        scope_3899.boolean(*var_3900);
    }
    #[allow(unused_mut)]
    let mut scope_3901 = writer.prefix("NextToken");
    if let Some(var_3902) = &input.next_token {
        scope_3901.string(var_3902);
    }
    #[allow(unused_mut)]
    let mut scope_3903 = writer.prefix("MaxResults");
    if let Some(var_3904) = &input.max_results {
        scope_3903.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3904).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpn_connections(
    input: &crate::input::DescribeVpnConnectionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeVpnConnections", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3905 = writer.prefix("Filter");
    if let Some(var_3906) = &input.filters {
        let mut list_3908 = scope_3905.start_list(true, Some("Filter"));
        for item_3907 in var_3906 {
            #[allow(unused_mut)]
            let mut entry_3909 = list_3908.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3909, item_3907)?;
        }
        list_3908.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3910 = writer.prefix("VpnConnectionId");
    if let Some(var_3911) = &input.vpn_connection_ids {
        let mut list_3913 = scope_3910.start_list(true, Some("VpnConnectionId"));
        for item_3912 in var_3911 {
            #[allow(unused_mut)]
            let mut entry_3914 = list_3913.entry();
            entry_3914.string(item_3912);
        }
        list_3913.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3915 = writer.prefix("DryRun");
    if let Some(var_3916) = &input.dry_run {
        scope_3915.boolean(*var_3916);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpn_gateways(
    input: &crate::input::DescribeVpnGatewaysInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeVpnGateways", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3917 = writer.prefix("Filter");
    if let Some(var_3918) = &input.filters {
        let mut list_3920 = scope_3917.start_list(true, Some("Filter"));
        for item_3919 in var_3918 {
            #[allow(unused_mut)]
            let mut entry_3921 = list_3920.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3921, item_3919)?;
        }
        list_3920.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3922 = writer.prefix("VpnGatewayId");
    if let Some(var_3923) = &input.vpn_gateway_ids {
        let mut list_3925 = scope_3922.start_list(true, Some("VpnGatewayId"));
        for item_3924 in var_3923 {
            #[allow(unused_mut)]
            let mut entry_3926 = list_3925.entry();
            entry_3926.string(item_3924);
        }
        list_3925.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3927 = writer.prefix("DryRun");
    if let Some(var_3928) = &input.dry_run {
        scope_3927.boolean(*var_3928);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_detach_classic_link_vpc(
    input: &crate::input::DetachClassicLinkVpcInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DetachClassicLinkVpc", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3929 = writer.prefix("DryRun");
    if let Some(var_3930) = &input.dry_run {
        scope_3929.boolean(*var_3930);
    }
    #[allow(unused_mut)]
    let mut scope_3931 = writer.prefix("InstanceId");
    if let Some(var_3932) = &input.instance_id {
        scope_3931.string(var_3932);
    }
    #[allow(unused_mut)]
    let mut scope_3933 = writer.prefix("VpcId");
    if let Some(var_3934) = &input.vpc_id {
        scope_3933.string(var_3934);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_detach_internet_gateway(
    input: &crate::input::DetachInternetGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DetachInternetGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3935 = writer.prefix("DryRun");
    if let Some(var_3936) = &input.dry_run {
        scope_3935.boolean(*var_3936);
    }
    #[allow(unused_mut)]
    let mut scope_3937 = writer.prefix("InternetGatewayId");
    if let Some(var_3938) = &input.internet_gateway_id {
        scope_3937.string(var_3938);
    }
    #[allow(unused_mut)]
    let mut scope_3939 = writer.prefix("VpcId");
    if let Some(var_3940) = &input.vpc_id {
        scope_3939.string(var_3940);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_detach_network_interface(
    input: &crate::input::DetachNetworkInterfaceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DetachNetworkInterface", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3941 = writer.prefix("AttachmentId");
    if let Some(var_3942) = &input.attachment_id {
        scope_3941.string(var_3942);
    }
    #[allow(unused_mut)]
    let mut scope_3943 = writer.prefix("DryRun");
    if let Some(var_3944) = &input.dry_run {
        scope_3943.boolean(*var_3944);
    }
    #[allow(unused_mut)]
    let mut scope_3945 = writer.prefix("Force");
    if let Some(var_3946) = &input.force {
        scope_3945.boolean(*var_3946);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_detach_volume(
    input: &crate::input::DetachVolumeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DetachVolume", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3947 = writer.prefix("Device");
    if let Some(var_3948) = &input.device {
        scope_3947.string(var_3948);
    }
    #[allow(unused_mut)]
    let mut scope_3949 = writer.prefix("Force");
    if let Some(var_3950) = &input.force {
        scope_3949.boolean(*var_3950);
    }
    #[allow(unused_mut)]
    let mut scope_3951 = writer.prefix("InstanceId");
    if let Some(var_3952) = &input.instance_id {
        scope_3951.string(var_3952);
    }
    #[allow(unused_mut)]
    let mut scope_3953 = writer.prefix("VolumeId");
    if let Some(var_3954) = &input.volume_id {
        scope_3953.string(var_3954);
    }
    #[allow(unused_mut)]
    let mut scope_3955 = writer.prefix("DryRun");
    if let Some(var_3956) = &input.dry_run {
        scope_3955.boolean(*var_3956);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_detach_vpn_gateway(
    input: &crate::input::DetachVpnGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DetachVpnGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3957 = writer.prefix("VpcId");
    if let Some(var_3958) = &input.vpc_id {
        scope_3957.string(var_3958);
    }
    #[allow(unused_mut)]
    let mut scope_3959 = writer.prefix("VpnGatewayId");
    if let Some(var_3960) = &input.vpn_gateway_id {
        scope_3959.string(var_3960);
    }
    #[allow(unused_mut)]
    let mut scope_3961 = writer.prefix("DryRun");
    if let Some(var_3962) = &input.dry_run {
        scope_3961.boolean(*var_3962);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_ebs_encryption_by_default(
    input: &crate::input::DisableEbsEncryptionByDefaultInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisableEbsEncryptionByDefault", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3963 = writer.prefix("DryRun");
    if let Some(var_3964) = &input.dry_run {
        scope_3963.boolean(*var_3964);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_fast_launch(
    input: &crate::input::DisableFastLaunchInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisableFastLaunch", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3965 = writer.prefix("ImageId");
    if let Some(var_3966) = &input.image_id {
        scope_3965.string(var_3966);
    }
    #[allow(unused_mut)]
    let mut scope_3967 = writer.prefix("Force");
    if let Some(var_3968) = &input.force {
        scope_3967.boolean(*var_3968);
    }
    #[allow(unused_mut)]
    let mut scope_3969 = writer.prefix("DryRun");
    if let Some(var_3970) = &input.dry_run {
        scope_3969.boolean(*var_3970);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_fast_snapshot_restores(
    input: &crate::input::DisableFastSnapshotRestoresInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisableFastSnapshotRestores", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3971 = writer.prefix("AvailabilityZone");
    if let Some(var_3972) = &input.availability_zones {
        let mut list_3974 = scope_3971.start_list(true, Some("AvailabilityZone"));
        for item_3973 in var_3972 {
            #[allow(unused_mut)]
            let mut entry_3975 = list_3974.entry();
            entry_3975.string(item_3973);
        }
        list_3974.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3976 = writer.prefix("SourceSnapshotId");
    if let Some(var_3977) = &input.source_snapshot_ids {
        let mut list_3979 = scope_3976.start_list(true, Some("SnapshotId"));
        for item_3978 in var_3977 {
            #[allow(unused_mut)]
            let mut entry_3980 = list_3979.entry();
            entry_3980.string(item_3978);
        }
        list_3979.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3981 = writer.prefix("DryRun");
    if let Some(var_3982) = &input.dry_run {
        scope_3981.boolean(*var_3982);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_image_deprecation(
    input: &crate::input::DisableImageDeprecationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisableImageDeprecation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3983 = writer.prefix("ImageId");
    if let Some(var_3984) = &input.image_id {
        scope_3983.string(var_3984);
    }
    #[allow(unused_mut)]
    let mut scope_3985 = writer.prefix("DryRun");
    if let Some(var_3986) = &input.dry_run {
        scope_3985.boolean(*var_3986);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_ipam_organization_admin_account(
    input: &crate::input::DisableIpamOrganizationAdminAccountInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DisableIpamOrganizationAdminAccount",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3987 = writer.prefix("DryRun");
    if let Some(var_3988) = &input.dry_run {
        scope_3987.boolean(*var_3988);
    }
    #[allow(unused_mut)]
    let mut scope_3989 = writer.prefix("DelegatedAdminAccountId");
    if let Some(var_3990) = &input.delegated_admin_account_id {
        scope_3989.string(var_3990);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_serial_console_access(
    input: &crate::input::DisableSerialConsoleAccessInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisableSerialConsoleAccess", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3991 = writer.prefix("DryRun");
    if let Some(var_3992) = &input.dry_run {
        scope_3991.boolean(*var_3992);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_transit_gateway_route_table_propagation(
    input: &crate::input::DisableTransitGatewayRouteTablePropagationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DisableTransitGatewayRouteTablePropagation",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3993 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_3994) = &input.transit_gateway_route_table_id {
        scope_3993.string(var_3994);
    }
    #[allow(unused_mut)]
    let mut scope_3995 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_3996) = &input.transit_gateway_attachment_id {
        scope_3995.string(var_3996);
    }
    #[allow(unused_mut)]
    let mut scope_3997 = writer.prefix("DryRun");
    if let Some(var_3998) = &input.dry_run {
        scope_3997.boolean(*var_3998);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_vgw_route_propagation(
    input: &crate::input::DisableVgwRoutePropagationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisableVgwRoutePropagation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3999 = writer.prefix("GatewayId");
    if let Some(var_4000) = &input.gateway_id {
        scope_3999.string(var_4000);
    }
    #[allow(unused_mut)]
    let mut scope_4001 = writer.prefix("RouteTableId");
    if let Some(var_4002) = &input.route_table_id {
        scope_4001.string(var_4002);
    }
    #[allow(unused_mut)]
    let mut scope_4003 = writer.prefix("DryRun");
    if let Some(var_4004) = &input.dry_run {
        scope_4003.boolean(*var_4004);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_vpc_classic_link(
    input: &crate::input::DisableVpcClassicLinkInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisableVpcClassicLink", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4005 = writer.prefix("DryRun");
    if let Some(var_4006) = &input.dry_run {
        scope_4005.boolean(*var_4006);
    }
    #[allow(unused_mut)]
    let mut scope_4007 = writer.prefix("VpcId");
    if let Some(var_4008) = &input.vpc_id {
        scope_4007.string(var_4008);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_vpc_classic_link_dns_support(
    input: &crate::input::DisableVpcClassicLinkDnsSupportInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DisableVpcClassicLinkDnsSupport",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4009 = writer.prefix("VpcId");
    if let Some(var_4010) = &input.vpc_id {
        scope_4009.string(var_4010);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_address(
    input: &crate::input::DisassociateAddressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisassociateAddress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4011 = writer.prefix("AssociationId");
    if let Some(var_4012) = &input.association_id {
        scope_4011.string(var_4012);
    }
    #[allow(unused_mut)]
    let mut scope_4013 = writer.prefix("PublicIp");
    if let Some(var_4014) = &input.public_ip {
        scope_4013.string(var_4014);
    }
    #[allow(unused_mut)]
    let mut scope_4015 = writer.prefix("DryRun");
    if let Some(var_4016) = &input.dry_run {
        scope_4015.boolean(*var_4016);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_client_vpn_target_network(
    input: &crate::input::DisassociateClientVpnTargetNetworkInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DisassociateClientVpnTargetNetwork",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4017 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_4018) = &input.client_vpn_endpoint_id {
        scope_4017.string(var_4018);
    }
    #[allow(unused_mut)]
    let mut scope_4019 = writer.prefix("AssociationId");
    if let Some(var_4020) = &input.association_id {
        scope_4019.string(var_4020);
    }
    #[allow(unused_mut)]
    let mut scope_4021 = writer.prefix("DryRun");
    if let Some(var_4022) = &input.dry_run {
        scope_4021.boolean(*var_4022);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_enclave_certificate_iam_role(
    input: &crate::input::DisassociateEnclaveCertificateIamRoleInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DisassociateEnclaveCertificateIamRole",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4023 = writer.prefix("CertificateArn");
    if let Some(var_4024) = &input.certificate_arn {
        scope_4023.string(var_4024);
    }
    #[allow(unused_mut)]
    let mut scope_4025 = writer.prefix("RoleArn");
    if let Some(var_4026) = &input.role_arn {
        scope_4025.string(var_4026);
    }
    #[allow(unused_mut)]
    let mut scope_4027 = writer.prefix("DryRun");
    if let Some(var_4028) = &input.dry_run {
        scope_4027.boolean(*var_4028);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_iam_instance_profile(
    input: &crate::input::DisassociateIamInstanceProfileInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DisassociateIamInstanceProfile",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4029 = writer.prefix("AssociationId");
    if let Some(var_4030) = &input.association_id {
        scope_4029.string(var_4030);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_instance_event_window(
    input: &crate::input::DisassociateInstanceEventWindowInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DisassociateInstanceEventWindow",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4031 = writer.prefix("DryRun");
    if let Some(var_4032) = &input.dry_run {
        scope_4031.boolean(*var_4032);
    }
    #[allow(unused_mut)]
    let mut scope_4033 = writer.prefix("InstanceEventWindowId");
    if let Some(var_4034) = &input.instance_event_window_id {
        scope_4033.string(var_4034);
    }
    #[allow(unused_mut)]
    let mut scope_4035 = writer.prefix("AssociationTarget");
    if let Some(var_4036) = &input.association_target {
        crate::query_ser::serialize_structure_crate_model_instance_event_window_disassociation_request(scope_4035, var_4036)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_route_table(
    input: &crate::input::DisassociateRouteTableInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisassociateRouteTable", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4037 = writer.prefix("AssociationId");
    if let Some(var_4038) = &input.association_id {
        scope_4037.string(var_4038);
    }
    #[allow(unused_mut)]
    let mut scope_4039 = writer.prefix("DryRun");
    if let Some(var_4040) = &input.dry_run {
        scope_4039.boolean(*var_4040);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_subnet_cidr_block(
    input: &crate::input::DisassociateSubnetCidrBlockInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisassociateSubnetCidrBlock", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4041 = writer.prefix("AssociationId");
    if let Some(var_4042) = &input.association_id {
        scope_4041.string(var_4042);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_transit_gateway_multicast_domain(
    input: &crate::input::DisassociateTransitGatewayMulticastDomainInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DisassociateTransitGatewayMulticastDomain",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4043 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_4044) = &input.transit_gateway_multicast_domain_id {
        scope_4043.string(var_4044);
    }
    #[allow(unused_mut)]
    let mut scope_4045 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_4046) = &input.transit_gateway_attachment_id {
        scope_4045.string(var_4046);
    }
    #[allow(unused_mut)]
    let mut scope_4047 = writer.prefix("SubnetIds");
    if let Some(var_4048) = &input.subnet_ids {
        let mut list_4050 = scope_4047.start_list(true, Some("item"));
        for item_4049 in var_4048 {
            #[allow(unused_mut)]
            let mut entry_4051 = list_4050.entry();
            entry_4051.string(item_4049);
        }
        list_4050.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4052 = writer.prefix("DryRun");
    if let Some(var_4053) = &input.dry_run {
        scope_4052.boolean(*var_4053);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_transit_gateway_route_table(
    input: &crate::input::DisassociateTransitGatewayRouteTableInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DisassociateTransitGatewayRouteTable",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4054 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_4055) = &input.transit_gateway_route_table_id {
        scope_4054.string(var_4055);
    }
    #[allow(unused_mut)]
    let mut scope_4056 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_4057) = &input.transit_gateway_attachment_id {
        scope_4056.string(var_4057);
    }
    #[allow(unused_mut)]
    let mut scope_4058 = writer.prefix("DryRun");
    if let Some(var_4059) = &input.dry_run {
        scope_4058.boolean(*var_4059);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_trunk_interface(
    input: &crate::input::DisassociateTrunkInterfaceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisassociateTrunkInterface", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4060 = writer.prefix("AssociationId");
    if let Some(var_4061) = &input.association_id {
        scope_4060.string(var_4061);
    }
    #[allow(unused_mut)]
    let mut scope_4062 = writer.prefix("ClientToken");
    if let Some(var_4063) = &input.client_token {
        scope_4062.string(var_4063);
    }
    #[allow(unused_mut)]
    let mut scope_4064 = writer.prefix("DryRun");
    if let Some(var_4065) = &input.dry_run {
        scope_4064.boolean(*var_4065);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_vpc_cidr_block(
    input: &crate::input::DisassociateVpcCidrBlockInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisassociateVpcCidrBlock", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4066 = writer.prefix("AssociationId");
    if let Some(var_4067) = &input.association_id {
        scope_4066.string(var_4067);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_ebs_encryption_by_default(
    input: &crate::input::EnableEbsEncryptionByDefaultInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "EnableEbsEncryptionByDefault", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4068 = writer.prefix("DryRun");
    if let Some(var_4069) = &input.dry_run {
        scope_4068.boolean(*var_4069);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_fast_launch(
    input: &crate::input::EnableFastLaunchInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "EnableFastLaunch", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4070 = writer.prefix("ImageId");
    if let Some(var_4071) = &input.image_id {
        scope_4070.string(var_4071);
    }
    #[allow(unused_mut)]
    let mut scope_4072 = writer.prefix("ResourceType");
    if let Some(var_4073) = &input.resource_type {
        scope_4072.string(var_4073);
    }
    #[allow(unused_mut)]
    let mut scope_4074 = writer.prefix("SnapshotConfiguration");
    if let Some(var_4075) = &input.snapshot_configuration {
        crate::query_ser::serialize_structure_crate_model_fast_launch_snapshot_configuration_request(scope_4074, var_4075)?;
    }
    #[allow(unused_mut)]
    let mut scope_4076 = writer.prefix("LaunchTemplate");
    if let Some(var_4077) = &input.launch_template {
        crate::query_ser::serialize_structure_crate_model_fast_launch_launch_template_specification_request(scope_4076, var_4077)?;
    }
    #[allow(unused_mut)]
    let mut scope_4078 = writer.prefix("MaxParallelLaunches");
    if let Some(var_4079) = &input.max_parallel_launches {
        scope_4078.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4079).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4080 = writer.prefix("DryRun");
    if let Some(var_4081) = &input.dry_run {
        scope_4080.boolean(*var_4081);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_fast_snapshot_restores(
    input: &crate::input::EnableFastSnapshotRestoresInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "EnableFastSnapshotRestores", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4082 = writer.prefix("AvailabilityZone");
    if let Some(var_4083) = &input.availability_zones {
        let mut list_4085 = scope_4082.start_list(true, Some("AvailabilityZone"));
        for item_4084 in var_4083 {
            #[allow(unused_mut)]
            let mut entry_4086 = list_4085.entry();
            entry_4086.string(item_4084);
        }
        list_4085.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4087 = writer.prefix("SourceSnapshotId");
    if let Some(var_4088) = &input.source_snapshot_ids {
        let mut list_4090 = scope_4087.start_list(true, Some("SnapshotId"));
        for item_4089 in var_4088 {
            #[allow(unused_mut)]
            let mut entry_4091 = list_4090.entry();
            entry_4091.string(item_4089);
        }
        list_4090.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4092 = writer.prefix("DryRun");
    if let Some(var_4093) = &input.dry_run {
        scope_4092.boolean(*var_4093);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_image_deprecation(
    input: &crate::input::EnableImageDeprecationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "EnableImageDeprecation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4094 = writer.prefix("ImageId");
    if let Some(var_4095) = &input.image_id {
        scope_4094.string(var_4095);
    }
    #[allow(unused_mut)]
    let mut scope_4096 = writer.prefix("DeprecateAt");
    if let Some(var_4097) = &input.deprecate_at {
        scope_4096.date_time(var_4097, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_4098 = writer.prefix("DryRun");
    if let Some(var_4099) = &input.dry_run {
        scope_4098.boolean(*var_4099);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_ipam_organization_admin_account(
    input: &crate::input::EnableIpamOrganizationAdminAccountInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "EnableIpamOrganizationAdminAccount",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4100 = writer.prefix("DryRun");
    if let Some(var_4101) = &input.dry_run {
        scope_4100.boolean(*var_4101);
    }
    #[allow(unused_mut)]
    let mut scope_4102 = writer.prefix("DelegatedAdminAccountId");
    if let Some(var_4103) = &input.delegated_admin_account_id {
        scope_4102.string(var_4103);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_serial_console_access(
    input: &crate::input::EnableSerialConsoleAccessInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "EnableSerialConsoleAccess", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4104 = writer.prefix("DryRun");
    if let Some(var_4105) = &input.dry_run {
        scope_4104.boolean(*var_4105);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_transit_gateway_route_table_propagation(
    input: &crate::input::EnableTransitGatewayRouteTablePropagationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "EnableTransitGatewayRouteTablePropagation",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4106 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_4107) = &input.transit_gateway_route_table_id {
        scope_4106.string(var_4107);
    }
    #[allow(unused_mut)]
    let mut scope_4108 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_4109) = &input.transit_gateway_attachment_id {
        scope_4108.string(var_4109);
    }
    #[allow(unused_mut)]
    let mut scope_4110 = writer.prefix("DryRun");
    if let Some(var_4111) = &input.dry_run {
        scope_4110.boolean(*var_4111);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_vgw_route_propagation(
    input: &crate::input::EnableVgwRoutePropagationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "EnableVgwRoutePropagation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4112 = writer.prefix("GatewayId");
    if let Some(var_4113) = &input.gateway_id {
        scope_4112.string(var_4113);
    }
    #[allow(unused_mut)]
    let mut scope_4114 = writer.prefix("RouteTableId");
    if let Some(var_4115) = &input.route_table_id {
        scope_4114.string(var_4115);
    }
    #[allow(unused_mut)]
    let mut scope_4116 = writer.prefix("DryRun");
    if let Some(var_4117) = &input.dry_run {
        scope_4116.boolean(*var_4117);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_volume_io(
    input: &crate::input::EnableVolumeIoInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "EnableVolumeIO", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4118 = writer.prefix("DryRun");
    if let Some(var_4119) = &input.dry_run {
        scope_4118.boolean(*var_4119);
    }
    #[allow(unused_mut)]
    let mut scope_4120 = writer.prefix("VolumeId");
    if let Some(var_4121) = &input.volume_id {
        scope_4120.string(var_4121);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_vpc_classic_link(
    input: &crate::input::EnableVpcClassicLinkInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "EnableVpcClassicLink", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4122 = writer.prefix("DryRun");
    if let Some(var_4123) = &input.dry_run {
        scope_4122.boolean(*var_4123);
    }
    #[allow(unused_mut)]
    let mut scope_4124 = writer.prefix("VpcId");
    if let Some(var_4125) = &input.vpc_id {
        scope_4124.string(var_4125);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_vpc_classic_link_dns_support(
    input: &crate::input::EnableVpcClassicLinkDnsSupportInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "EnableVpcClassicLinkDnsSupport",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4126 = writer.prefix("VpcId");
    if let Some(var_4127) = &input.vpc_id {
        scope_4126.string(var_4127);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_export_client_vpn_client_certificate_revocation_list(
    input: &crate::input::ExportClientVpnClientCertificateRevocationListInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ExportClientVpnClientCertificateRevocationList",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4128 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_4129) = &input.client_vpn_endpoint_id {
        scope_4128.string(var_4129);
    }
    #[allow(unused_mut)]
    let mut scope_4130 = writer.prefix("DryRun");
    if let Some(var_4131) = &input.dry_run {
        scope_4130.boolean(*var_4131);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_export_client_vpn_client_configuration(
    input: &crate::input::ExportClientVpnClientConfigurationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ExportClientVpnClientConfiguration",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4132 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_4133) = &input.client_vpn_endpoint_id {
        scope_4132.string(var_4133);
    }
    #[allow(unused_mut)]
    let mut scope_4134 = writer.prefix("DryRun");
    if let Some(var_4135) = &input.dry_run {
        scope_4134.boolean(*var_4135);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_export_image(
    input: &crate::input::ExportImageInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ExportImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4136 = writer.prefix("ClientToken");
    if let Some(var_4137) = &input.client_token {
        scope_4136.string(var_4137);
    }
    #[allow(unused_mut)]
    let mut scope_4138 = writer.prefix("Description");
    if let Some(var_4139) = &input.description {
        scope_4138.string(var_4139);
    }
    #[allow(unused_mut)]
    let mut scope_4140 = writer.prefix("DiskImageFormat");
    if let Some(var_4141) = &input.disk_image_format {
        scope_4140.string(var_4141.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4142 = writer.prefix("DryRun");
    if let Some(var_4143) = &input.dry_run {
        scope_4142.boolean(*var_4143);
    }
    #[allow(unused_mut)]
    let mut scope_4144 = writer.prefix("ImageId");
    if let Some(var_4145) = &input.image_id {
        scope_4144.string(var_4145);
    }
    #[allow(unused_mut)]
    let mut scope_4146 = writer.prefix("S3ExportLocation");
    if let Some(var_4147) = &input.s3_export_location {
        crate::query_ser::serialize_structure_crate_model_export_task_s3_location_request(
            scope_4146, var_4147,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4148 = writer.prefix("RoleName");
    if let Some(var_4149) = &input.role_name {
        scope_4148.string(var_4149);
    }
    #[allow(unused_mut)]
    let mut scope_4150 = writer.prefix("TagSpecification");
    if let Some(var_4151) = &input.tag_specifications {
        let mut list_4153 = scope_4150.start_list(true, Some("item"));
        for item_4152 in var_4151 {
            #[allow(unused_mut)]
            let mut entry_4154 = list_4153.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_4154, item_4152,
            )?;
        }
        list_4153.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_export_transit_gateway_routes(
    input: &crate::input::ExportTransitGatewayRoutesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ExportTransitGatewayRoutes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4155 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_4156) = &input.transit_gateway_route_table_id {
        scope_4155.string(var_4156);
    }
    #[allow(unused_mut)]
    let mut scope_4157 = writer.prefix("Filter");
    if let Some(var_4158) = &input.filters {
        let mut list_4160 = scope_4157.start_list(true, Some("Filter"));
        for item_4159 in var_4158 {
            #[allow(unused_mut)]
            let mut entry_4161 = list_4160.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4161, item_4159)?;
        }
        list_4160.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4162 = writer.prefix("S3Bucket");
    if let Some(var_4163) = &input.s3_bucket {
        scope_4162.string(var_4163);
    }
    #[allow(unused_mut)]
    let mut scope_4164 = writer.prefix("DryRun");
    if let Some(var_4165) = &input.dry_run {
        scope_4164.boolean(*var_4165);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_associated_enclave_certificate_iam_roles(
    input: &crate::input::GetAssociatedEnclaveCertificateIamRolesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetAssociatedEnclaveCertificateIamRoles",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4166 = writer.prefix("CertificateArn");
    if let Some(var_4167) = &input.certificate_arn {
        scope_4166.string(var_4167);
    }
    #[allow(unused_mut)]
    let mut scope_4168 = writer.prefix("DryRun");
    if let Some(var_4169) = &input.dry_run {
        scope_4168.boolean(*var_4169);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_associated_ipv6_pool_cidrs(
    input: &crate::input::GetAssociatedIpv6PoolCidrsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetAssociatedIpv6PoolCidrs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4170 = writer.prefix("PoolId");
    if let Some(var_4171) = &input.pool_id {
        scope_4170.string(var_4171);
    }
    #[allow(unused_mut)]
    let mut scope_4172 = writer.prefix("NextToken");
    if let Some(var_4173) = &input.next_token {
        scope_4172.string(var_4173);
    }
    #[allow(unused_mut)]
    let mut scope_4174 = writer.prefix("MaxResults");
    if let Some(var_4175) = &input.max_results {
        scope_4174.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4175).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4176 = writer.prefix("DryRun");
    if let Some(var_4177) = &input.dry_run {
        scope_4176.boolean(*var_4177);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_capacity_reservation_usage(
    input: &crate::input::GetCapacityReservationUsageInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetCapacityReservationUsage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4178 = writer.prefix("CapacityReservationId");
    if let Some(var_4179) = &input.capacity_reservation_id {
        scope_4178.string(var_4179);
    }
    #[allow(unused_mut)]
    let mut scope_4180 = writer.prefix("NextToken");
    if let Some(var_4181) = &input.next_token {
        scope_4180.string(var_4181);
    }
    #[allow(unused_mut)]
    let mut scope_4182 = writer.prefix("MaxResults");
    if let Some(var_4183) = &input.max_results {
        scope_4182.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4183).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4184 = writer.prefix("DryRun");
    if let Some(var_4185) = &input.dry_run {
        scope_4184.boolean(*var_4185);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_coip_pool_usage(
    input: &crate::input::GetCoipPoolUsageInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "GetCoipPoolUsage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4186 = writer.prefix("PoolId");
    if let Some(var_4187) = &input.pool_id {
        scope_4186.string(var_4187);
    }
    #[allow(unused_mut)]
    let mut scope_4188 = writer.prefix("Filter");
    if let Some(var_4189) = &input.filters {
        let mut list_4191 = scope_4188.start_list(true, Some("Filter"));
        for item_4190 in var_4189 {
            #[allow(unused_mut)]
            let mut entry_4192 = list_4191.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4192, item_4190)?;
        }
        list_4191.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4193 = writer.prefix("MaxResults");
    if let Some(var_4194) = &input.max_results {
        scope_4193.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4194).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4195 = writer.prefix("NextToken");
    if let Some(var_4196) = &input.next_token {
        scope_4195.string(var_4196);
    }
    #[allow(unused_mut)]
    let mut scope_4197 = writer.prefix("DryRun");
    if let Some(var_4198) = &input.dry_run {
        scope_4197.boolean(*var_4198);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_console_output(
    input: &crate::input::GetConsoleOutputInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "GetConsoleOutput", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4199 = writer.prefix("InstanceId");
    if let Some(var_4200) = &input.instance_id {
        scope_4199.string(var_4200);
    }
    #[allow(unused_mut)]
    let mut scope_4201 = writer.prefix("DryRun");
    if let Some(var_4202) = &input.dry_run {
        scope_4201.boolean(*var_4202);
    }
    #[allow(unused_mut)]
    let mut scope_4203 = writer.prefix("Latest");
    if let Some(var_4204) = &input.latest {
        scope_4203.boolean(*var_4204);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_console_screenshot(
    input: &crate::input::GetConsoleScreenshotInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetConsoleScreenshot", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4205 = writer.prefix("DryRun");
    if let Some(var_4206) = &input.dry_run {
        scope_4205.boolean(*var_4206);
    }
    #[allow(unused_mut)]
    let mut scope_4207 = writer.prefix("InstanceId");
    if let Some(var_4208) = &input.instance_id {
        scope_4207.string(var_4208);
    }
    #[allow(unused_mut)]
    let mut scope_4209 = writer.prefix("WakeUp");
    if let Some(var_4210) = &input.wake_up {
        scope_4209.boolean(*var_4210);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_default_credit_specification(
    input: &crate::input::GetDefaultCreditSpecificationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetDefaultCreditSpecification", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4211 = writer.prefix("DryRun");
    if let Some(var_4212) = &input.dry_run {
        scope_4211.boolean(*var_4212);
    }
    #[allow(unused_mut)]
    let mut scope_4213 = writer.prefix("InstanceFamily");
    if let Some(var_4214) = &input.instance_family {
        scope_4213.string(var_4214.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_ebs_default_kms_key_id(
    input: &crate::input::GetEbsDefaultKmsKeyIdInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetEbsDefaultKmsKeyId", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4215 = writer.prefix("DryRun");
    if let Some(var_4216) = &input.dry_run {
        scope_4215.boolean(*var_4216);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_ebs_encryption_by_default(
    input: &crate::input::GetEbsEncryptionByDefaultInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetEbsEncryptionByDefault", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4217 = writer.prefix("DryRun");
    if let Some(var_4218) = &input.dry_run {
        scope_4217.boolean(*var_4218);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_flow_logs_integration_template(
    input: &crate::input::GetFlowLogsIntegrationTemplateInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetFlowLogsIntegrationTemplate",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4219 = writer.prefix("DryRun");
    if let Some(var_4220) = &input.dry_run {
        scope_4219.boolean(*var_4220);
    }
    #[allow(unused_mut)]
    let mut scope_4221 = writer.prefix("FlowLogId");
    if let Some(var_4222) = &input.flow_log_id {
        scope_4221.string(var_4222);
    }
    #[allow(unused_mut)]
    let mut scope_4223 = writer.prefix("ConfigDeliveryS3DestinationArn");
    if let Some(var_4224) = &input.config_delivery_s3_destination_arn {
        scope_4223.string(var_4224);
    }
    #[allow(unused_mut)]
    let mut scope_4225 = writer.prefix("IntegrateService");
    if let Some(var_4226) = &input.integrate_services {
        crate::query_ser::serialize_structure_crate_model_integrate_services(scope_4225, var_4226)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_groups_for_capacity_reservation(
    input: &crate::input::GetGroupsForCapacityReservationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetGroupsForCapacityReservation",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4227 = writer.prefix("CapacityReservationId");
    if let Some(var_4228) = &input.capacity_reservation_id {
        scope_4227.string(var_4228);
    }
    #[allow(unused_mut)]
    let mut scope_4229 = writer.prefix("NextToken");
    if let Some(var_4230) = &input.next_token {
        scope_4229.string(var_4230);
    }
    #[allow(unused_mut)]
    let mut scope_4231 = writer.prefix("MaxResults");
    if let Some(var_4232) = &input.max_results {
        scope_4231.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4232).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4233 = writer.prefix("DryRun");
    if let Some(var_4234) = &input.dry_run {
        scope_4233.boolean(*var_4234);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_host_reservation_purchase_preview(
    input: &crate::input::GetHostReservationPurchasePreviewInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetHostReservationPurchasePreview",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4235 = writer.prefix("HostIdSet");
    if let Some(var_4236) = &input.host_id_set {
        let mut list_4238 = scope_4235.start_list(true, Some("item"));
        for item_4237 in var_4236 {
            #[allow(unused_mut)]
            let mut entry_4239 = list_4238.entry();
            entry_4239.string(item_4237);
        }
        list_4238.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4240 = writer.prefix("OfferingId");
    if let Some(var_4241) = &input.offering_id {
        scope_4240.string(var_4241);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_instance_types_from_instance_requirements(
    input: &crate::input::GetInstanceTypesFromInstanceRequirementsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetInstanceTypesFromInstanceRequirements",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4242 = writer.prefix("DryRun");
    if let Some(var_4243) = &input.dry_run {
        scope_4242.boolean(*var_4243);
    }
    #[allow(unused_mut)]
    let mut scope_4244 = writer.prefix("ArchitectureType");
    if let Some(var_4245) = &input.architecture_types {
        let mut list_4247 = scope_4244.start_list(true, Some("item"));
        for item_4246 in var_4245 {
            #[allow(unused_mut)]
            let mut entry_4248 = list_4247.entry();
            entry_4248.string(item_4246.as_str());
        }
        list_4247.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4249 = writer.prefix("VirtualizationType");
    if let Some(var_4250) = &input.virtualization_types {
        let mut list_4252 = scope_4249.start_list(true, Some("item"));
        for item_4251 in var_4250 {
            #[allow(unused_mut)]
            let mut entry_4253 = list_4252.entry();
            entry_4253.string(item_4251.as_str());
        }
        list_4252.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4254 = writer.prefix("InstanceRequirements");
    if let Some(var_4255) = &input.instance_requirements {
        crate::query_ser::serialize_structure_crate_model_instance_requirements_request(
            scope_4254, var_4255,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4256 = writer.prefix("MaxResults");
    if let Some(var_4257) = &input.max_results {
        scope_4256.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4257).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4258 = writer.prefix("NextToken");
    if let Some(var_4259) = &input.next_token {
        scope_4258.string(var_4259);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_ipam_address_history(
    input: &crate::input::GetIpamAddressHistoryInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetIpamAddressHistory", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4260 = writer.prefix("DryRun");
    if let Some(var_4261) = &input.dry_run {
        scope_4260.boolean(*var_4261);
    }
    #[allow(unused_mut)]
    let mut scope_4262 = writer.prefix("Cidr");
    if let Some(var_4263) = &input.cidr {
        scope_4262.string(var_4263);
    }
    #[allow(unused_mut)]
    let mut scope_4264 = writer.prefix("IpamScopeId");
    if let Some(var_4265) = &input.ipam_scope_id {
        scope_4264.string(var_4265);
    }
    #[allow(unused_mut)]
    let mut scope_4266 = writer.prefix("VpcId");
    if let Some(var_4267) = &input.vpc_id {
        scope_4266.string(var_4267);
    }
    #[allow(unused_mut)]
    let mut scope_4268 = writer.prefix("StartTime");
    if let Some(var_4269) = &input.start_time {
        scope_4268.date_time(var_4269, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_4270 = writer.prefix("EndTime");
    if let Some(var_4271) = &input.end_time {
        scope_4270.date_time(var_4271, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_4272 = writer.prefix("MaxResults");
    if let Some(var_4273) = &input.max_results {
        scope_4272.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4273).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4274 = writer.prefix("NextToken");
    if let Some(var_4275) = &input.next_token {
        scope_4274.string(var_4275);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_ipam_pool_allocations(
    input: &crate::input::GetIpamPoolAllocationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetIpamPoolAllocations", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4276 = writer.prefix("DryRun");
    if let Some(var_4277) = &input.dry_run {
        scope_4276.boolean(*var_4277);
    }
    #[allow(unused_mut)]
    let mut scope_4278 = writer.prefix("IpamPoolId");
    if let Some(var_4279) = &input.ipam_pool_id {
        scope_4278.string(var_4279);
    }
    #[allow(unused_mut)]
    let mut scope_4280 = writer.prefix("IpamPoolAllocationId");
    if let Some(var_4281) = &input.ipam_pool_allocation_id {
        scope_4280.string(var_4281);
    }
    #[allow(unused_mut)]
    let mut scope_4282 = writer.prefix("Filter");
    if let Some(var_4283) = &input.filters {
        let mut list_4285 = scope_4282.start_list(true, Some("Filter"));
        for item_4284 in var_4283 {
            #[allow(unused_mut)]
            let mut entry_4286 = list_4285.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4286, item_4284)?;
        }
        list_4285.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4287 = writer.prefix("MaxResults");
    if let Some(var_4288) = &input.max_results {
        scope_4287.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4288).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4289 = writer.prefix("NextToken");
    if let Some(var_4290) = &input.next_token {
        scope_4289.string(var_4290);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_ipam_pool_cidrs(
    input: &crate::input::GetIpamPoolCidrsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "GetIpamPoolCidrs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4291 = writer.prefix("DryRun");
    if let Some(var_4292) = &input.dry_run {
        scope_4291.boolean(*var_4292);
    }
    #[allow(unused_mut)]
    let mut scope_4293 = writer.prefix("IpamPoolId");
    if let Some(var_4294) = &input.ipam_pool_id {
        scope_4293.string(var_4294);
    }
    #[allow(unused_mut)]
    let mut scope_4295 = writer.prefix("Filter");
    if let Some(var_4296) = &input.filters {
        let mut list_4298 = scope_4295.start_list(true, Some("Filter"));
        for item_4297 in var_4296 {
            #[allow(unused_mut)]
            let mut entry_4299 = list_4298.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4299, item_4297)?;
        }
        list_4298.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4300 = writer.prefix("MaxResults");
    if let Some(var_4301) = &input.max_results {
        scope_4300.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4301).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4302 = writer.prefix("NextToken");
    if let Some(var_4303) = &input.next_token {
        scope_4302.string(var_4303);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_ipam_resource_cidrs(
    input: &crate::input::GetIpamResourceCidrsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetIpamResourceCidrs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4304 = writer.prefix("DryRun");
    if let Some(var_4305) = &input.dry_run {
        scope_4304.boolean(*var_4305);
    }
    #[allow(unused_mut)]
    let mut scope_4306 = writer.prefix("Filter");
    if let Some(var_4307) = &input.filters {
        let mut list_4309 = scope_4306.start_list(true, Some("Filter"));
        for item_4308 in var_4307 {
            #[allow(unused_mut)]
            let mut entry_4310 = list_4309.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4310, item_4308)?;
        }
        list_4309.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4311 = writer.prefix("MaxResults");
    if let Some(var_4312) = &input.max_results {
        scope_4311.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4312).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4313 = writer.prefix("NextToken");
    if let Some(var_4314) = &input.next_token {
        scope_4313.string(var_4314);
    }
    #[allow(unused_mut)]
    let mut scope_4315 = writer.prefix("IpamScopeId");
    if let Some(var_4316) = &input.ipam_scope_id {
        scope_4315.string(var_4316);
    }
    #[allow(unused_mut)]
    let mut scope_4317 = writer.prefix("IpamPoolId");
    if let Some(var_4318) = &input.ipam_pool_id {
        scope_4317.string(var_4318);
    }
    #[allow(unused_mut)]
    let mut scope_4319 = writer.prefix("ResourceId");
    if let Some(var_4320) = &input.resource_id {
        scope_4319.string(var_4320);
    }
    #[allow(unused_mut)]
    let mut scope_4321 = writer.prefix("ResourceType");
    if let Some(var_4322) = &input.resource_type {
        scope_4321.string(var_4322.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4323 = writer.prefix("ResourceTag");
    if let Some(var_4324) = &input.resource_tag {
        crate::query_ser::serialize_structure_crate_model_request_ipam_resource_tag(
            scope_4323, var_4324,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4325 = writer.prefix("ResourceOwner");
    if let Some(var_4326) = &input.resource_owner {
        scope_4325.string(var_4326);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_launch_template_data(
    input: &crate::input::GetLaunchTemplateDataInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetLaunchTemplateData", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4327 = writer.prefix("DryRun");
    if let Some(var_4328) = &input.dry_run {
        scope_4327.boolean(*var_4328);
    }
    #[allow(unused_mut)]
    let mut scope_4329 = writer.prefix("InstanceId");
    if let Some(var_4330) = &input.instance_id {
        scope_4329.string(var_4330);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_managed_prefix_list_associations(
    input: &crate::input::GetManagedPrefixListAssociationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetManagedPrefixListAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4331 = writer.prefix("DryRun");
    if let Some(var_4332) = &input.dry_run {
        scope_4331.boolean(*var_4332);
    }
    #[allow(unused_mut)]
    let mut scope_4333 = writer.prefix("PrefixListId");
    if let Some(var_4334) = &input.prefix_list_id {
        scope_4333.string(var_4334);
    }
    #[allow(unused_mut)]
    let mut scope_4335 = writer.prefix("MaxResults");
    if let Some(var_4336) = &input.max_results {
        scope_4335.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4336).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4337 = writer.prefix("NextToken");
    if let Some(var_4338) = &input.next_token {
        scope_4337.string(var_4338);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_managed_prefix_list_entries(
    input: &crate::input::GetManagedPrefixListEntriesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetManagedPrefixListEntries", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4339 = writer.prefix("DryRun");
    if let Some(var_4340) = &input.dry_run {
        scope_4339.boolean(*var_4340);
    }
    #[allow(unused_mut)]
    let mut scope_4341 = writer.prefix("PrefixListId");
    if let Some(var_4342) = &input.prefix_list_id {
        scope_4341.string(var_4342);
    }
    #[allow(unused_mut)]
    let mut scope_4343 = writer.prefix("TargetVersion");
    if let Some(var_4344) = &input.target_version {
        scope_4343.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4344).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4345 = writer.prefix("MaxResults");
    if let Some(var_4346) = &input.max_results {
        scope_4345.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4346).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4347 = writer.prefix("NextToken");
    if let Some(var_4348) = &input.next_token {
        scope_4347.string(var_4348);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_network_insights_access_scope_analysis_findings(
    input: &crate::input::GetNetworkInsightsAccessScopeAnalysisFindingsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetNetworkInsightsAccessScopeAnalysisFindings",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4349 = writer.prefix("NetworkInsightsAccessScopeAnalysisId");
    if let Some(var_4350) = &input.network_insights_access_scope_analysis_id {
        scope_4349.string(var_4350);
    }
    #[allow(unused_mut)]
    let mut scope_4351 = writer.prefix("MaxResults");
    if let Some(var_4352) = &input.max_results {
        scope_4351.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4352).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4353 = writer.prefix("NextToken");
    if let Some(var_4354) = &input.next_token {
        scope_4353.string(var_4354);
    }
    #[allow(unused_mut)]
    let mut scope_4355 = writer.prefix("DryRun");
    if let Some(var_4356) = &input.dry_run {
        scope_4355.boolean(*var_4356);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_network_insights_access_scope_content(
    input: &crate::input::GetNetworkInsightsAccessScopeContentInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetNetworkInsightsAccessScopeContent",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4357 = writer.prefix("NetworkInsightsAccessScopeId");
    if let Some(var_4358) = &input.network_insights_access_scope_id {
        scope_4357.string(var_4358);
    }
    #[allow(unused_mut)]
    let mut scope_4359 = writer.prefix("DryRun");
    if let Some(var_4360) = &input.dry_run {
        scope_4359.boolean(*var_4360);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_password_data(
    input: &crate::input::GetPasswordDataInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "GetPasswordData", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4361 = writer.prefix("InstanceId");
    if let Some(var_4362) = &input.instance_id {
        scope_4361.string(var_4362);
    }
    #[allow(unused_mut)]
    let mut scope_4363 = writer.prefix("DryRun");
    if let Some(var_4364) = &input.dry_run {
        scope_4363.boolean(*var_4364);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_reserved_instances_exchange_quote(
    input: &crate::input::GetReservedInstancesExchangeQuoteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetReservedInstancesExchangeQuote",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4365 = writer.prefix("DryRun");
    if let Some(var_4366) = &input.dry_run {
        scope_4365.boolean(*var_4366);
    }
    #[allow(unused_mut)]
    let mut scope_4367 = writer.prefix("ReservedInstanceId");
    if let Some(var_4368) = &input.reserved_instance_ids {
        let mut list_4370 = scope_4367.start_list(true, Some("ReservedInstanceId"));
        for item_4369 in var_4368 {
            #[allow(unused_mut)]
            let mut entry_4371 = list_4370.entry();
            entry_4371.string(item_4369);
        }
        list_4370.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4372 = writer.prefix("TargetConfiguration");
    if let Some(var_4373) = &input.target_configurations {
        let mut list_4375 = scope_4372.start_list(true, Some("TargetConfigurationRequest"));
        for item_4374 in var_4373 {
            #[allow(unused_mut)]
            let mut entry_4376 = list_4375.entry();
            crate::query_ser::serialize_structure_crate_model_target_configuration_request(
                entry_4376, item_4374,
            )?;
        }
        list_4375.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_serial_console_access_status(
    input: &crate::input::GetSerialConsoleAccessStatusInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetSerialConsoleAccessStatus", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4377 = writer.prefix("DryRun");
    if let Some(var_4378) = &input.dry_run {
        scope_4377.boolean(*var_4378);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_spot_placement_scores(
    input: &crate::input::GetSpotPlacementScoresInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetSpotPlacementScores", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4379 = writer.prefix("InstanceType");
    if let Some(var_4380) = &input.instance_types {
        let mut list_4382 = scope_4379.start_list(true, None);
        for item_4381 in var_4380 {
            #[allow(unused_mut)]
            let mut entry_4383 = list_4382.entry();
            entry_4383.string(item_4381);
        }
        list_4382.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4384 = writer.prefix("TargetCapacity");
    if let Some(var_4385) = &input.target_capacity {
        scope_4384.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4385).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4386 = writer.prefix("TargetCapacityUnitType");
    if let Some(var_4387) = &input.target_capacity_unit_type {
        scope_4386.string(var_4387.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4388 = writer.prefix("SingleAvailabilityZone");
    if let Some(var_4389) = &input.single_availability_zone {
        scope_4388.boolean(*var_4389);
    }
    #[allow(unused_mut)]
    let mut scope_4390 = writer.prefix("RegionName");
    if let Some(var_4391) = &input.region_names {
        let mut list_4393 = scope_4390.start_list(true, None);
        for item_4392 in var_4391 {
            #[allow(unused_mut)]
            let mut entry_4394 = list_4393.entry();
            entry_4394.string(item_4392);
        }
        list_4393.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4395 = writer.prefix("InstanceRequirementsWithMetadata");
    if let Some(var_4396) = &input.instance_requirements_with_metadata {
        crate::query_ser::serialize_structure_crate_model_instance_requirements_with_metadata_request(scope_4395, var_4396)?;
    }
    #[allow(unused_mut)]
    let mut scope_4397 = writer.prefix("DryRun");
    if let Some(var_4398) = &input.dry_run {
        scope_4397.boolean(*var_4398);
    }
    #[allow(unused_mut)]
    let mut scope_4399 = writer.prefix("MaxResults");
    if let Some(var_4400) = &input.max_results {
        scope_4399.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4400).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4401 = writer.prefix("NextToken");
    if let Some(var_4402) = &input.next_token {
        scope_4401.string(var_4402);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_subnet_cidr_reservations(
    input: &crate::input::GetSubnetCidrReservationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetSubnetCidrReservations", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4403 = writer.prefix("Filter");
    if let Some(var_4404) = &input.filters {
        let mut list_4406 = scope_4403.start_list(true, Some("Filter"));
        for item_4405 in var_4404 {
            #[allow(unused_mut)]
            let mut entry_4407 = list_4406.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4407, item_4405)?;
        }
        list_4406.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4408 = writer.prefix("SubnetId");
    if let Some(var_4409) = &input.subnet_id {
        scope_4408.string(var_4409);
    }
    #[allow(unused_mut)]
    let mut scope_4410 = writer.prefix("DryRun");
    if let Some(var_4411) = &input.dry_run {
        scope_4410.boolean(*var_4411);
    }
    #[allow(unused_mut)]
    let mut scope_4412 = writer.prefix("NextToken");
    if let Some(var_4413) = &input.next_token {
        scope_4412.string(var_4413);
    }
    #[allow(unused_mut)]
    let mut scope_4414 = writer.prefix("MaxResults");
    if let Some(var_4415) = &input.max_results {
        scope_4414.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4415).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_transit_gateway_attachment_propagations(
    input: &crate::input::GetTransitGatewayAttachmentPropagationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetTransitGatewayAttachmentPropagations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4416 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_4417) = &input.transit_gateway_attachment_id {
        scope_4416.string(var_4417);
    }
    #[allow(unused_mut)]
    let mut scope_4418 = writer.prefix("Filter");
    if let Some(var_4419) = &input.filters {
        let mut list_4421 = scope_4418.start_list(true, Some("Filter"));
        for item_4420 in var_4419 {
            #[allow(unused_mut)]
            let mut entry_4422 = list_4421.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4422, item_4420)?;
        }
        list_4421.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4423 = writer.prefix("MaxResults");
    if let Some(var_4424) = &input.max_results {
        scope_4423.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4424).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4425 = writer.prefix("NextToken");
    if let Some(var_4426) = &input.next_token {
        scope_4425.string(var_4426);
    }
    #[allow(unused_mut)]
    let mut scope_4427 = writer.prefix("DryRun");
    if let Some(var_4428) = &input.dry_run {
        scope_4427.boolean(*var_4428);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_transit_gateway_multicast_domain_associations(
    input: &crate::input::GetTransitGatewayMulticastDomainAssociationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetTransitGatewayMulticastDomainAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4429 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_4430) = &input.transit_gateway_multicast_domain_id {
        scope_4429.string(var_4430);
    }
    #[allow(unused_mut)]
    let mut scope_4431 = writer.prefix("Filter");
    if let Some(var_4432) = &input.filters {
        let mut list_4434 = scope_4431.start_list(true, Some("Filter"));
        for item_4433 in var_4432 {
            #[allow(unused_mut)]
            let mut entry_4435 = list_4434.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4435, item_4433)?;
        }
        list_4434.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4436 = writer.prefix("MaxResults");
    if let Some(var_4437) = &input.max_results {
        scope_4436.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4437).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4438 = writer.prefix("NextToken");
    if let Some(var_4439) = &input.next_token {
        scope_4438.string(var_4439);
    }
    #[allow(unused_mut)]
    let mut scope_4440 = writer.prefix("DryRun");
    if let Some(var_4441) = &input.dry_run {
        scope_4440.boolean(*var_4441);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_transit_gateway_prefix_list_references(
    input: &crate::input::GetTransitGatewayPrefixListReferencesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetTransitGatewayPrefixListReferences",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4442 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_4443) = &input.transit_gateway_route_table_id {
        scope_4442.string(var_4443);
    }
    #[allow(unused_mut)]
    let mut scope_4444 = writer.prefix("Filter");
    if let Some(var_4445) = &input.filters {
        let mut list_4447 = scope_4444.start_list(true, Some("Filter"));
        for item_4446 in var_4445 {
            #[allow(unused_mut)]
            let mut entry_4448 = list_4447.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4448, item_4446)?;
        }
        list_4447.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4449 = writer.prefix("MaxResults");
    if let Some(var_4450) = &input.max_results {
        scope_4449.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4450).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4451 = writer.prefix("NextToken");
    if let Some(var_4452) = &input.next_token {
        scope_4451.string(var_4452);
    }
    #[allow(unused_mut)]
    let mut scope_4453 = writer.prefix("DryRun");
    if let Some(var_4454) = &input.dry_run {
        scope_4453.boolean(*var_4454);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_transit_gateway_route_table_associations(
    input: &crate::input::GetTransitGatewayRouteTableAssociationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetTransitGatewayRouteTableAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4455 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_4456) = &input.transit_gateway_route_table_id {
        scope_4455.string(var_4456);
    }
    #[allow(unused_mut)]
    let mut scope_4457 = writer.prefix("Filter");
    if let Some(var_4458) = &input.filters {
        let mut list_4460 = scope_4457.start_list(true, Some("Filter"));
        for item_4459 in var_4458 {
            #[allow(unused_mut)]
            let mut entry_4461 = list_4460.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4461, item_4459)?;
        }
        list_4460.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4462 = writer.prefix("MaxResults");
    if let Some(var_4463) = &input.max_results {
        scope_4462.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4463).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4464 = writer.prefix("NextToken");
    if let Some(var_4465) = &input.next_token {
        scope_4464.string(var_4465);
    }
    #[allow(unused_mut)]
    let mut scope_4466 = writer.prefix("DryRun");
    if let Some(var_4467) = &input.dry_run {
        scope_4466.boolean(*var_4467);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_transit_gateway_route_table_propagations(
    input: &crate::input::GetTransitGatewayRouteTablePropagationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetTransitGatewayRouteTablePropagations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4468 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_4469) = &input.transit_gateway_route_table_id {
        scope_4468.string(var_4469);
    }
    #[allow(unused_mut)]
    let mut scope_4470 = writer.prefix("Filter");
    if let Some(var_4471) = &input.filters {
        let mut list_4473 = scope_4470.start_list(true, Some("Filter"));
        for item_4472 in var_4471 {
            #[allow(unused_mut)]
            let mut entry_4474 = list_4473.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4474, item_4472)?;
        }
        list_4473.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4475 = writer.prefix("MaxResults");
    if let Some(var_4476) = &input.max_results {
        scope_4475.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4476).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4477 = writer.prefix("NextToken");
    if let Some(var_4478) = &input.next_token {
        scope_4477.string(var_4478);
    }
    #[allow(unused_mut)]
    let mut scope_4479 = writer.prefix("DryRun");
    if let Some(var_4480) = &input.dry_run {
        scope_4479.boolean(*var_4480);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_vpn_connection_device_sample_configuration(
    input: &crate::input::GetVpnConnectionDeviceSampleConfigurationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetVpnConnectionDeviceSampleConfiguration",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4481 = writer.prefix("VpnConnectionId");
    if let Some(var_4482) = &input.vpn_connection_id {
        scope_4481.string(var_4482);
    }
    #[allow(unused_mut)]
    let mut scope_4483 = writer.prefix("VpnConnectionDeviceTypeId");
    if let Some(var_4484) = &input.vpn_connection_device_type_id {
        scope_4483.string(var_4484);
    }
    #[allow(unused_mut)]
    let mut scope_4485 = writer.prefix("InternetKeyExchangeVersion");
    if let Some(var_4486) = &input.internet_key_exchange_version {
        scope_4485.string(var_4486);
    }
    #[allow(unused_mut)]
    let mut scope_4487 = writer.prefix("DryRun");
    if let Some(var_4488) = &input.dry_run {
        scope_4487.boolean(*var_4488);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_vpn_connection_device_types(
    input: &crate::input::GetVpnConnectionDeviceTypesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetVpnConnectionDeviceTypes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4489 = writer.prefix("MaxResults");
    if let Some(var_4490) = &input.max_results {
        scope_4489.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4490).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4491 = writer.prefix("NextToken");
    if let Some(var_4492) = &input.next_token {
        scope_4491.string(var_4492);
    }
    #[allow(unused_mut)]
    let mut scope_4493 = writer.prefix("DryRun");
    if let Some(var_4494) = &input.dry_run {
        scope_4493.boolean(*var_4494);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_import_client_vpn_client_certificate_revocation_list(
    input: &crate::input::ImportClientVpnClientCertificateRevocationListInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ImportClientVpnClientCertificateRevocationList",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4495 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_4496) = &input.client_vpn_endpoint_id {
        scope_4495.string(var_4496);
    }
    #[allow(unused_mut)]
    let mut scope_4497 = writer.prefix("CertificateRevocationList");
    if let Some(var_4498) = &input.certificate_revocation_list {
        scope_4497.string(var_4498);
    }
    #[allow(unused_mut)]
    let mut scope_4499 = writer.prefix("DryRun");
    if let Some(var_4500) = &input.dry_run {
        scope_4499.boolean(*var_4500);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_import_image(
    input: &crate::input::ImportImageInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ImportImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4501 = writer.prefix("Architecture");
    if let Some(var_4502) = &input.architecture {
        scope_4501.string(var_4502);
    }
    #[allow(unused_mut)]
    let mut scope_4503 = writer.prefix("ClientData");
    if let Some(var_4504) = &input.client_data {
        crate::query_ser::serialize_structure_crate_model_client_data(scope_4503, var_4504)?;
    }
    #[allow(unused_mut)]
    let mut scope_4505 = writer.prefix("ClientToken");
    if let Some(var_4506) = &input.client_token {
        scope_4505.string(var_4506);
    }
    #[allow(unused_mut)]
    let mut scope_4507 = writer.prefix("Description");
    if let Some(var_4508) = &input.description {
        scope_4507.string(var_4508);
    }
    #[allow(unused_mut)]
    let mut scope_4509 = writer.prefix("DiskContainer");
    if let Some(var_4510) = &input.disk_containers {
        let mut list_4512 = scope_4509.start_list(true, Some("item"));
        for item_4511 in var_4510 {
            #[allow(unused_mut)]
            let mut entry_4513 = list_4512.entry();
            crate::query_ser::serialize_structure_crate_model_image_disk_container(
                entry_4513, item_4511,
            )?;
        }
        list_4512.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4514 = writer.prefix("DryRun");
    if let Some(var_4515) = &input.dry_run {
        scope_4514.boolean(*var_4515);
    }
    #[allow(unused_mut)]
    let mut scope_4516 = writer.prefix("Encrypted");
    if let Some(var_4517) = &input.encrypted {
        scope_4516.boolean(*var_4517);
    }
    #[allow(unused_mut)]
    let mut scope_4518 = writer.prefix("Hypervisor");
    if let Some(var_4519) = &input.hypervisor {
        scope_4518.string(var_4519);
    }
    #[allow(unused_mut)]
    let mut scope_4520 = writer.prefix("KmsKeyId");
    if let Some(var_4521) = &input.kms_key_id {
        scope_4520.string(var_4521);
    }
    #[allow(unused_mut)]
    let mut scope_4522 = writer.prefix("LicenseType");
    if let Some(var_4523) = &input.license_type {
        scope_4522.string(var_4523);
    }
    #[allow(unused_mut)]
    let mut scope_4524 = writer.prefix("Platform");
    if let Some(var_4525) = &input.platform {
        scope_4524.string(var_4525);
    }
    #[allow(unused_mut)]
    let mut scope_4526 = writer.prefix("RoleName");
    if let Some(var_4527) = &input.role_name {
        scope_4526.string(var_4527);
    }
    #[allow(unused_mut)]
    let mut scope_4528 = writer.prefix("LicenseSpecifications");
    if let Some(var_4529) = &input.license_specifications {
        let mut list_4531 = scope_4528.start_list(true, Some("item"));
        for item_4530 in var_4529 {
            #[allow(unused_mut)]
            let mut entry_4532 = list_4531.entry();
            crate::query_ser::serialize_structure_crate_model_import_image_license_configuration_request(entry_4532, item_4530)?;
        }
        list_4531.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4533 = writer.prefix("TagSpecification");
    if let Some(var_4534) = &input.tag_specifications {
        let mut list_4536 = scope_4533.start_list(true, Some("item"));
        for item_4535 in var_4534 {
            #[allow(unused_mut)]
            let mut entry_4537 = list_4536.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_4537, item_4535,
            )?;
        }
        list_4536.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4538 = writer.prefix("UsageOperation");
    if let Some(var_4539) = &input.usage_operation {
        scope_4538.string(var_4539);
    }
    #[allow(unused_mut)]
    let mut scope_4540 = writer.prefix("BootMode");
    if let Some(var_4541) = &input.boot_mode {
        scope_4540.string(var_4541.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_import_instance(
    input: &crate::input::ImportInstanceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ImportInstance", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4542 = writer.prefix("Description");
    if let Some(var_4543) = &input.description {
        scope_4542.string(var_4543);
    }
    #[allow(unused_mut)]
    let mut scope_4544 = writer.prefix("DiskImage");
    if let Some(var_4545) = &input.disk_images {
        let mut list_4547 = scope_4544.start_list(true, None);
        for item_4546 in var_4545 {
            #[allow(unused_mut)]
            let mut entry_4548 = list_4547.entry();
            crate::query_ser::serialize_structure_crate_model_disk_image(entry_4548, item_4546)?;
        }
        list_4547.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4549 = writer.prefix("DryRun");
    if let Some(var_4550) = &input.dry_run {
        scope_4549.boolean(*var_4550);
    }
    #[allow(unused_mut)]
    let mut scope_4551 = writer.prefix("LaunchSpecification");
    if let Some(var_4552) = &input.launch_specification {
        crate::query_ser::serialize_structure_crate_model_import_instance_launch_specification(
            scope_4551, var_4552,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4553 = writer.prefix("Platform");
    if let Some(var_4554) = &input.platform {
        scope_4553.string(var_4554.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_import_key_pair(
    input: &crate::input::ImportKeyPairInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ImportKeyPair", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4555 = writer.prefix("DryRun");
    if let Some(var_4556) = &input.dry_run {
        scope_4555.boolean(*var_4556);
    }
    #[allow(unused_mut)]
    let mut scope_4557 = writer.prefix("KeyName");
    if let Some(var_4558) = &input.key_name {
        scope_4557.string(var_4558);
    }
    #[allow(unused_mut)]
    let mut scope_4559 = writer.prefix("PublicKeyMaterial");
    if let Some(var_4560) = &input.public_key_material {
        scope_4559.string(&aws_smithy_types::base64::encode(var_4560));
    }
    #[allow(unused_mut)]
    let mut scope_4561 = writer.prefix("TagSpecification");
    if let Some(var_4562) = &input.tag_specifications {
        let mut list_4564 = scope_4561.start_list(true, Some("item"));
        for item_4563 in var_4562 {
            #[allow(unused_mut)]
            let mut entry_4565 = list_4564.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_4565, item_4563,
            )?;
        }
        list_4564.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_import_snapshot(
    input: &crate::input::ImportSnapshotInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ImportSnapshot", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4566 = writer.prefix("ClientData");
    if let Some(var_4567) = &input.client_data {
        crate::query_ser::serialize_structure_crate_model_client_data(scope_4566, var_4567)?;
    }
    #[allow(unused_mut)]
    let mut scope_4568 = writer.prefix("ClientToken");
    if let Some(var_4569) = &input.client_token {
        scope_4568.string(var_4569);
    }
    #[allow(unused_mut)]
    let mut scope_4570 = writer.prefix("Description");
    if let Some(var_4571) = &input.description {
        scope_4570.string(var_4571);
    }
    #[allow(unused_mut)]
    let mut scope_4572 = writer.prefix("DiskContainer");
    if let Some(var_4573) = &input.disk_container {
        crate::query_ser::serialize_structure_crate_model_snapshot_disk_container(
            scope_4572, var_4573,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4574 = writer.prefix("DryRun");
    if let Some(var_4575) = &input.dry_run {
        scope_4574.boolean(*var_4575);
    }
    #[allow(unused_mut)]
    let mut scope_4576 = writer.prefix("Encrypted");
    if let Some(var_4577) = &input.encrypted {
        scope_4576.boolean(*var_4577);
    }
    #[allow(unused_mut)]
    let mut scope_4578 = writer.prefix("KmsKeyId");
    if let Some(var_4579) = &input.kms_key_id {
        scope_4578.string(var_4579);
    }
    #[allow(unused_mut)]
    let mut scope_4580 = writer.prefix("RoleName");
    if let Some(var_4581) = &input.role_name {
        scope_4580.string(var_4581);
    }
    #[allow(unused_mut)]
    let mut scope_4582 = writer.prefix("TagSpecification");
    if let Some(var_4583) = &input.tag_specifications {
        let mut list_4585 = scope_4582.start_list(true, Some("item"));
        for item_4584 in var_4583 {
            #[allow(unused_mut)]
            let mut entry_4586 = list_4585.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_4586, item_4584,
            )?;
        }
        list_4585.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_import_volume(
    input: &crate::input::ImportVolumeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ImportVolume", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4587 = writer.prefix("AvailabilityZone");
    if let Some(var_4588) = &input.availability_zone {
        scope_4587.string(var_4588);
    }
    #[allow(unused_mut)]
    let mut scope_4589 = writer.prefix("Description");
    if let Some(var_4590) = &input.description {
        scope_4589.string(var_4590);
    }
    #[allow(unused_mut)]
    let mut scope_4591 = writer.prefix("DryRun");
    if let Some(var_4592) = &input.dry_run {
        scope_4591.boolean(*var_4592);
    }
    #[allow(unused_mut)]
    let mut scope_4593 = writer.prefix("Image");
    if let Some(var_4594) = &input.image {
        crate::query_ser::serialize_structure_crate_model_disk_image_detail(scope_4593, var_4594)?;
    }
    #[allow(unused_mut)]
    let mut scope_4595 = writer.prefix("Volume");
    if let Some(var_4596) = &input.volume {
        crate::query_ser::serialize_structure_crate_model_volume_detail(scope_4595, var_4596)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_list_images_in_recycle_bin(
    input: &crate::input::ListImagesInRecycleBinInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ListImagesInRecycleBin", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4597 = writer.prefix("ImageId");
    if let Some(var_4598) = &input.image_ids {
        let mut list_4600 = scope_4597.start_list(true, Some("ImageId"));
        for item_4599 in var_4598 {
            #[allow(unused_mut)]
            let mut entry_4601 = list_4600.entry();
            entry_4601.string(item_4599);
        }
        list_4600.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4602 = writer.prefix("NextToken");
    if let Some(var_4603) = &input.next_token {
        scope_4602.string(var_4603);
    }
    #[allow(unused_mut)]
    let mut scope_4604 = writer.prefix("MaxResults");
    if let Some(var_4605) = &input.max_results {
        scope_4604.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4605).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4606 = writer.prefix("DryRun");
    if let Some(var_4607) = &input.dry_run {
        scope_4606.boolean(*var_4607);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_list_snapshots_in_recycle_bin(
    input: &crate::input::ListSnapshotsInRecycleBinInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ListSnapshotsInRecycleBin", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4608 = writer.prefix("MaxResults");
    if let Some(var_4609) = &input.max_results {
        scope_4608.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4609).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4610 = writer.prefix("NextToken");
    if let Some(var_4611) = &input.next_token {
        scope_4610.string(var_4611);
    }
    #[allow(unused_mut)]
    let mut scope_4612 = writer.prefix("SnapshotId");
    if let Some(var_4613) = &input.snapshot_ids {
        let mut list_4615 = scope_4612.start_list(true, Some("SnapshotId"));
        for item_4614 in var_4613 {
            #[allow(unused_mut)]
            let mut entry_4616 = list_4615.entry();
            entry_4616.string(item_4614);
        }
        list_4615.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4617 = writer.prefix("DryRun");
    if let Some(var_4618) = &input.dry_run {
        scope_4617.boolean(*var_4618);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_address_attribute(
    input: &crate::input::ModifyAddressAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyAddressAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4619 = writer.prefix("AllocationId");
    if let Some(var_4620) = &input.allocation_id {
        scope_4619.string(var_4620);
    }
    #[allow(unused_mut)]
    let mut scope_4621 = writer.prefix("DomainName");
    if let Some(var_4622) = &input.domain_name {
        scope_4621.string(var_4622);
    }
    #[allow(unused_mut)]
    let mut scope_4623 = writer.prefix("DryRun");
    if let Some(var_4624) = &input.dry_run {
        scope_4623.boolean(*var_4624);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_availability_zone_group(
    input: &crate::input::ModifyAvailabilityZoneGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyAvailabilityZoneGroup", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4625 = writer.prefix("GroupName");
    if let Some(var_4626) = &input.group_name {
        scope_4625.string(var_4626);
    }
    #[allow(unused_mut)]
    let mut scope_4627 = writer.prefix("OptInStatus");
    if let Some(var_4628) = &input.opt_in_status {
        scope_4627.string(var_4628.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4629 = writer.prefix("DryRun");
    if let Some(var_4630) = &input.dry_run {
        scope_4629.boolean(*var_4630);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_capacity_reservation(
    input: &crate::input::ModifyCapacityReservationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyCapacityReservation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4631 = writer.prefix("CapacityReservationId");
    if let Some(var_4632) = &input.capacity_reservation_id {
        scope_4631.string(var_4632);
    }
    #[allow(unused_mut)]
    let mut scope_4633 = writer.prefix("InstanceCount");
    if let Some(var_4634) = &input.instance_count {
        scope_4633.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4634).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4635 = writer.prefix("EndDate");
    if let Some(var_4636) = &input.end_date {
        scope_4635.date_time(var_4636, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_4637 = writer.prefix("EndDateType");
    if let Some(var_4638) = &input.end_date_type {
        scope_4637.string(var_4638.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4639 = writer.prefix("Accept");
    if let Some(var_4640) = &input.accept {
        scope_4639.boolean(*var_4640);
    }
    #[allow(unused_mut)]
    let mut scope_4641 = writer.prefix("DryRun");
    if let Some(var_4642) = &input.dry_run {
        scope_4641.boolean(*var_4642);
    }
    #[allow(unused_mut)]
    let mut scope_4643 = writer.prefix("AdditionalInfo");
    if let Some(var_4644) = &input.additional_info {
        scope_4643.string(var_4644);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_capacity_reservation_fleet(
    input: &crate::input::ModifyCapacityReservationFleetInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyCapacityReservationFleet",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4645 = writer.prefix("CapacityReservationFleetId");
    if let Some(var_4646) = &input.capacity_reservation_fleet_id {
        scope_4645.string(var_4646);
    }
    #[allow(unused_mut)]
    let mut scope_4647 = writer.prefix("TotalTargetCapacity");
    if let Some(var_4648) = &input.total_target_capacity {
        scope_4647.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4648).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4649 = writer.prefix("EndDate");
    if let Some(var_4650) = &input.end_date {
        scope_4649.date_time(var_4650, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_4651 = writer.prefix("DryRun");
    if let Some(var_4652) = &input.dry_run {
        scope_4651.boolean(*var_4652);
    }
    #[allow(unused_mut)]
    let mut scope_4653 = writer.prefix("RemoveEndDate");
    if let Some(var_4654) = &input.remove_end_date {
        scope_4653.boolean(*var_4654);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_client_vpn_endpoint(
    input: &crate::input::ModifyClientVpnEndpointInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyClientVpnEndpoint", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4655 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_4656) = &input.client_vpn_endpoint_id {
        scope_4655.string(var_4656);
    }
    #[allow(unused_mut)]
    let mut scope_4657 = writer.prefix("ServerCertificateArn");
    if let Some(var_4658) = &input.server_certificate_arn {
        scope_4657.string(var_4658);
    }
    #[allow(unused_mut)]
    let mut scope_4659 = writer.prefix("ConnectionLogOptions");
    if let Some(var_4660) = &input.connection_log_options {
        crate::query_ser::serialize_structure_crate_model_connection_log_options(
            scope_4659, var_4660,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4661 = writer.prefix("DnsServers");
    if let Some(var_4662) = &input.dns_servers {
        crate::query_ser::serialize_structure_crate_model_dns_servers_options_modify_structure(
            scope_4661, var_4662,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4663 = writer.prefix("VpnPort");
    if let Some(var_4664) = &input.vpn_port {
        scope_4663.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4664).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4665 = writer.prefix("Description");
    if let Some(var_4666) = &input.description {
        scope_4665.string(var_4666);
    }
    #[allow(unused_mut)]
    let mut scope_4667 = writer.prefix("SplitTunnel");
    if let Some(var_4668) = &input.split_tunnel {
        scope_4667.boolean(*var_4668);
    }
    #[allow(unused_mut)]
    let mut scope_4669 = writer.prefix("DryRun");
    if let Some(var_4670) = &input.dry_run {
        scope_4669.boolean(*var_4670);
    }
    #[allow(unused_mut)]
    let mut scope_4671 = writer.prefix("SecurityGroupId");
    if let Some(var_4672) = &input.security_group_ids {
        let mut list_4674 = scope_4671.start_list(true, Some("item"));
        for item_4673 in var_4672 {
            #[allow(unused_mut)]
            let mut entry_4675 = list_4674.entry();
            entry_4675.string(item_4673);
        }
        list_4674.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4676 = writer.prefix("VpcId");
    if let Some(var_4677) = &input.vpc_id {
        scope_4676.string(var_4677);
    }
    #[allow(unused_mut)]
    let mut scope_4678 = writer.prefix("SelfServicePortal");
    if let Some(var_4679) = &input.self_service_portal {
        scope_4678.string(var_4679.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4680 = writer.prefix("ClientConnectOptions");
    if let Some(var_4681) = &input.client_connect_options {
        crate::query_ser::serialize_structure_crate_model_client_connect_options(
            scope_4680, var_4681,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4682 = writer.prefix("SessionTimeoutHours");
    if let Some(var_4683) = &input.session_timeout_hours {
        scope_4682.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4683).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4684 = writer.prefix("ClientLoginBannerOptions");
    if let Some(var_4685) = &input.client_login_banner_options {
        crate::query_ser::serialize_structure_crate_model_client_login_banner_options(
            scope_4684, var_4685,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_default_credit_specification(
    input: &crate::input::ModifyDefaultCreditSpecificationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyDefaultCreditSpecification",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4686 = writer.prefix("DryRun");
    if let Some(var_4687) = &input.dry_run {
        scope_4686.boolean(*var_4687);
    }
    #[allow(unused_mut)]
    let mut scope_4688 = writer.prefix("InstanceFamily");
    if let Some(var_4689) = &input.instance_family {
        scope_4688.string(var_4689.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4690 = writer.prefix("CpuCredits");
    if let Some(var_4691) = &input.cpu_credits {
        scope_4690.string(var_4691);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_ebs_default_kms_key_id(
    input: &crate::input::ModifyEbsDefaultKmsKeyIdInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyEbsDefaultKmsKeyId", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4692 = writer.prefix("KmsKeyId");
    if let Some(var_4693) = &input.kms_key_id {
        scope_4692.string(var_4693);
    }
    #[allow(unused_mut)]
    let mut scope_4694 = writer.prefix("DryRun");
    if let Some(var_4695) = &input.dry_run {
        scope_4694.boolean(*var_4695);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_fleet(
    input: &crate::input::ModifyFleetInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyFleet", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4696 = writer.prefix("DryRun");
    if let Some(var_4697) = &input.dry_run {
        scope_4696.boolean(*var_4697);
    }
    #[allow(unused_mut)]
    let mut scope_4698 = writer.prefix("ExcessCapacityTerminationPolicy");
    if let Some(var_4699) = &input.excess_capacity_termination_policy {
        scope_4698.string(var_4699.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4700 = writer.prefix("LaunchTemplateConfig");
    if let Some(var_4701) = &input.launch_template_configs {
        let mut list_4703 = scope_4700.start_list(true, Some("item"));
        for item_4702 in var_4701 {
            #[allow(unused_mut)]
            let mut entry_4704 = list_4703.entry();
            crate::query_ser::serialize_structure_crate_model_fleet_launch_template_config_request(
                entry_4704, item_4702,
            )?;
        }
        list_4703.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4705 = writer.prefix("FleetId");
    if let Some(var_4706) = &input.fleet_id {
        scope_4705.string(var_4706);
    }
    #[allow(unused_mut)]
    let mut scope_4707 = writer.prefix("TargetCapacitySpecification");
    if let Some(var_4708) = &input.target_capacity_specification {
        crate::query_ser::serialize_structure_crate_model_target_capacity_specification_request(
            scope_4707, var_4708,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4709 = writer.prefix("Context");
    if let Some(var_4710) = &input.context {
        scope_4709.string(var_4710);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_fpga_image_attribute(
    input: &crate::input::ModifyFpgaImageAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyFpgaImageAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4711 = writer.prefix("DryRun");
    if let Some(var_4712) = &input.dry_run {
        scope_4711.boolean(*var_4712);
    }
    #[allow(unused_mut)]
    let mut scope_4713 = writer.prefix("FpgaImageId");
    if let Some(var_4714) = &input.fpga_image_id {
        scope_4713.string(var_4714);
    }
    #[allow(unused_mut)]
    let mut scope_4715 = writer.prefix("Attribute");
    if let Some(var_4716) = &input.attribute {
        scope_4715.string(var_4716.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4717 = writer.prefix("OperationType");
    if let Some(var_4718) = &input.operation_type {
        scope_4717.string(var_4718.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4719 = writer.prefix("UserId");
    if let Some(var_4720) = &input.user_ids {
        let mut list_4722 = scope_4719.start_list(true, Some("UserId"));
        for item_4721 in var_4720 {
            #[allow(unused_mut)]
            let mut entry_4723 = list_4722.entry();
            entry_4723.string(item_4721);
        }
        list_4722.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4724 = writer.prefix("UserGroup");
    if let Some(var_4725) = &input.user_groups {
        let mut list_4727 = scope_4724.start_list(true, Some("UserGroup"));
        for item_4726 in var_4725 {
            #[allow(unused_mut)]
            let mut entry_4728 = list_4727.entry();
            entry_4728.string(item_4726);
        }
        list_4727.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4729 = writer.prefix("ProductCode");
    if let Some(var_4730) = &input.product_codes {
        let mut list_4732 = scope_4729.start_list(true, Some("ProductCode"));
        for item_4731 in var_4730 {
            #[allow(unused_mut)]
            let mut entry_4733 = list_4732.entry();
            entry_4733.string(item_4731);
        }
        list_4732.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4734 = writer.prefix("LoadPermission");
    if let Some(var_4735) = &input.load_permission {
        crate::query_ser::serialize_structure_crate_model_load_permission_modifications(
            scope_4734, var_4735,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4736 = writer.prefix("Description");
    if let Some(var_4737) = &input.description {
        scope_4736.string(var_4737);
    }
    #[allow(unused_mut)]
    let mut scope_4738 = writer.prefix("Name");
    if let Some(var_4739) = &input.name {
        scope_4738.string(var_4739);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_hosts(
    input: &crate::input::ModifyHostsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyHosts", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4740 = writer.prefix("AutoPlacement");
    if let Some(var_4741) = &input.auto_placement {
        scope_4740.string(var_4741.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4742 = writer.prefix("HostId");
    if let Some(var_4743) = &input.host_ids {
        let mut list_4745 = scope_4742.start_list(true, Some("item"));
        for item_4744 in var_4743 {
            #[allow(unused_mut)]
            let mut entry_4746 = list_4745.entry();
            entry_4746.string(item_4744);
        }
        list_4745.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4747 = writer.prefix("HostRecovery");
    if let Some(var_4748) = &input.host_recovery {
        scope_4747.string(var_4748.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4749 = writer.prefix("InstanceType");
    if let Some(var_4750) = &input.instance_type {
        scope_4749.string(var_4750);
    }
    #[allow(unused_mut)]
    let mut scope_4751 = writer.prefix("InstanceFamily");
    if let Some(var_4752) = &input.instance_family {
        scope_4751.string(var_4752);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_identity_id_format(
    input: &crate::input::ModifyIdentityIdFormatInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyIdentityIdFormat", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4753 = writer.prefix("PrincipalArn");
    if let Some(var_4754) = &input.principal_arn {
        scope_4753.string(var_4754);
    }
    #[allow(unused_mut)]
    let mut scope_4755 = writer.prefix("Resource");
    if let Some(var_4756) = &input.resource {
        scope_4755.string(var_4756);
    }
    #[allow(unused_mut)]
    let mut scope_4757 = writer.prefix("UseLongIds");
    if let Some(var_4758) = &input.use_long_ids {
        scope_4757.boolean(*var_4758);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_id_format(
    input: &crate::input::ModifyIdFormatInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyIdFormat", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4759 = writer.prefix("Resource");
    if let Some(var_4760) = &input.resource {
        scope_4759.string(var_4760);
    }
    #[allow(unused_mut)]
    let mut scope_4761 = writer.prefix("UseLongIds");
    if let Some(var_4762) = &input.use_long_ids {
        scope_4761.boolean(*var_4762);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_image_attribute(
    input: &crate::input::ModifyImageAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyImageAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4763 = writer.prefix("Attribute");
    if let Some(var_4764) = &input.attribute {
        scope_4763.string(var_4764);
    }
    #[allow(unused_mut)]
    let mut scope_4765 = writer.prefix("Description");
    if let Some(var_4766) = &input.description {
        crate::query_ser::serialize_structure_crate_model_attribute_value(scope_4765, var_4766)?;
    }
    #[allow(unused_mut)]
    let mut scope_4767 = writer.prefix("ImageId");
    if let Some(var_4768) = &input.image_id {
        scope_4767.string(var_4768);
    }
    #[allow(unused_mut)]
    let mut scope_4769 = writer.prefix("LaunchPermission");
    if let Some(var_4770) = &input.launch_permission {
        crate::query_ser::serialize_structure_crate_model_launch_permission_modifications(
            scope_4769, var_4770,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4771 = writer.prefix("OperationType");
    if let Some(var_4772) = &input.operation_type {
        scope_4771.string(var_4772.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4773 = writer.prefix("ProductCode");
    if let Some(var_4774) = &input.product_codes {
        let mut list_4776 = scope_4773.start_list(true, Some("ProductCode"));
        for item_4775 in var_4774 {
            #[allow(unused_mut)]
            let mut entry_4777 = list_4776.entry();
            entry_4777.string(item_4775);
        }
        list_4776.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4778 = writer.prefix("UserGroup");
    if let Some(var_4779) = &input.user_groups {
        let mut list_4781 = scope_4778.start_list(true, Some("UserGroup"));
        for item_4780 in var_4779 {
            #[allow(unused_mut)]
            let mut entry_4782 = list_4781.entry();
            entry_4782.string(item_4780);
        }
        list_4781.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4783 = writer.prefix("UserId");
    if let Some(var_4784) = &input.user_ids {
        let mut list_4786 = scope_4783.start_list(true, Some("UserId"));
        for item_4785 in var_4784 {
            #[allow(unused_mut)]
            let mut entry_4787 = list_4786.entry();
            entry_4787.string(item_4785);
        }
        list_4786.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4788 = writer.prefix("Value");
    if let Some(var_4789) = &input.value {
        scope_4788.string(var_4789);
    }
    #[allow(unused_mut)]
    let mut scope_4790 = writer.prefix("DryRun");
    if let Some(var_4791) = &input.dry_run {
        scope_4790.boolean(*var_4791);
    }
    #[allow(unused_mut)]
    let mut scope_4792 = writer.prefix("OrganizationArn");
    if let Some(var_4793) = &input.organization_arns {
        let mut list_4795 = scope_4792.start_list(true, Some("OrganizationArn"));
        for item_4794 in var_4793 {
            #[allow(unused_mut)]
            let mut entry_4796 = list_4795.entry();
            entry_4796.string(item_4794);
        }
        list_4795.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4797 = writer.prefix("OrganizationalUnitArn");
    if let Some(var_4798) = &input.organizational_unit_arns {
        let mut list_4800 = scope_4797.start_list(true, Some("OrganizationalUnitArn"));
        for item_4799 in var_4798 {
            #[allow(unused_mut)]
            let mut entry_4801 = list_4800.entry();
            entry_4801.string(item_4799);
        }
        list_4800.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_instance_attribute(
    input: &crate::input::ModifyInstanceAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyInstanceAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4802 = writer.prefix("SourceDestCheck");
    if let Some(var_4803) = &input.source_dest_check {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_4802, var_4803,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4804 = writer.prefix("Attribute");
    if let Some(var_4805) = &input.attribute {
        scope_4804.string(var_4805.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4806 = writer.prefix("BlockDeviceMapping");
    if let Some(var_4807) = &input.block_device_mappings {
        let mut list_4809 = scope_4806.start_list(true, Some("item"));
        for item_4808 in var_4807 {
            #[allow(unused_mut)]
            let mut entry_4810 = list_4809.entry();
            crate::query_ser::serialize_structure_crate_model_instance_block_device_mapping_specification(entry_4810, item_4808)?;
        }
        list_4809.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4811 = writer.prefix("DisableApiTermination");
    if let Some(var_4812) = &input.disable_api_termination {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_4811, var_4812,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4813 = writer.prefix("DryRun");
    if let Some(var_4814) = &input.dry_run {
        scope_4813.boolean(*var_4814);
    }
    #[allow(unused_mut)]
    let mut scope_4815 = writer.prefix("EbsOptimized");
    if let Some(var_4816) = &input.ebs_optimized {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_4815, var_4816,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4817 = writer.prefix("EnaSupport");
    if let Some(var_4818) = &input.ena_support {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_4817, var_4818,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4819 = writer.prefix("GroupId");
    if let Some(var_4820) = &input.groups {
        let mut list_4822 = scope_4819.start_list(true, Some("groupId"));
        for item_4821 in var_4820 {
            #[allow(unused_mut)]
            let mut entry_4823 = list_4822.entry();
            entry_4823.string(item_4821);
        }
        list_4822.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4824 = writer.prefix("InstanceId");
    if let Some(var_4825) = &input.instance_id {
        scope_4824.string(var_4825);
    }
    #[allow(unused_mut)]
    let mut scope_4826 = writer.prefix("InstanceInitiatedShutdownBehavior");
    if let Some(var_4827) = &input.instance_initiated_shutdown_behavior {
        crate::query_ser::serialize_structure_crate_model_attribute_value(scope_4826, var_4827)?;
    }
    #[allow(unused_mut)]
    let mut scope_4828 = writer.prefix("InstanceType");
    if let Some(var_4829) = &input.instance_type {
        crate::query_ser::serialize_structure_crate_model_attribute_value(scope_4828, var_4829)?;
    }
    #[allow(unused_mut)]
    let mut scope_4830 = writer.prefix("Kernel");
    if let Some(var_4831) = &input.kernel {
        crate::query_ser::serialize_structure_crate_model_attribute_value(scope_4830, var_4831)?;
    }
    #[allow(unused_mut)]
    let mut scope_4832 = writer.prefix("Ramdisk");
    if let Some(var_4833) = &input.ramdisk {
        crate::query_ser::serialize_structure_crate_model_attribute_value(scope_4832, var_4833)?;
    }
    #[allow(unused_mut)]
    let mut scope_4834 = writer.prefix("SriovNetSupport");
    if let Some(var_4835) = &input.sriov_net_support {
        crate::query_ser::serialize_structure_crate_model_attribute_value(scope_4834, var_4835)?;
    }
    #[allow(unused_mut)]
    let mut scope_4836 = writer.prefix("UserData");
    if let Some(var_4837) = &input.user_data {
        crate::query_ser::serialize_structure_crate_model_blob_attribute_value(
            scope_4836, var_4837,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4838 = writer.prefix("Value");
    if let Some(var_4839) = &input.value {
        scope_4838.string(var_4839);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_instance_capacity_reservation_attributes(
    input: &crate::input::ModifyInstanceCapacityReservationAttributesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyInstanceCapacityReservationAttributes",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4840 = writer.prefix("InstanceId");
    if let Some(var_4841) = &input.instance_id {
        scope_4840.string(var_4841);
    }
    #[allow(unused_mut)]
    let mut scope_4842 = writer.prefix("CapacityReservationSpecification");
    if let Some(var_4843) = &input.capacity_reservation_specification {
        crate::query_ser::serialize_structure_crate_model_capacity_reservation_specification(
            scope_4842, var_4843,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4844 = writer.prefix("DryRun");
    if let Some(var_4845) = &input.dry_run {
        scope_4844.boolean(*var_4845);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_instance_credit_specification(
    input: &crate::input::ModifyInstanceCreditSpecificationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyInstanceCreditSpecification",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4846 = writer.prefix("DryRun");
    if let Some(var_4847) = &input.dry_run {
        scope_4846.boolean(*var_4847);
    }
    #[allow(unused_mut)]
    let mut scope_4848 = writer.prefix("ClientToken");
    if let Some(var_4849) = &input.client_token {
        scope_4848.string(var_4849);
    }
    #[allow(unused_mut)]
    let mut scope_4850 = writer.prefix("InstanceCreditSpecification");
    if let Some(var_4851) = &input.instance_credit_specifications {
        let mut list_4853 = scope_4850.start_list(true, Some("item"));
        for item_4852 in var_4851 {
            #[allow(unused_mut)]
            let mut entry_4854 = list_4853.entry();
            crate::query_ser::serialize_structure_crate_model_instance_credit_specification_request(entry_4854, item_4852)?;
        }
        list_4853.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_instance_event_start_time(
    input: &crate::input::ModifyInstanceEventStartTimeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyInstanceEventStartTime", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4855 = writer.prefix("DryRun");
    if let Some(var_4856) = &input.dry_run {
        scope_4855.boolean(*var_4856);
    }
    #[allow(unused_mut)]
    let mut scope_4857 = writer.prefix("InstanceId");
    if let Some(var_4858) = &input.instance_id {
        scope_4857.string(var_4858);
    }
    #[allow(unused_mut)]
    let mut scope_4859 = writer.prefix("InstanceEventId");
    if let Some(var_4860) = &input.instance_event_id {
        scope_4859.string(var_4860);
    }
    #[allow(unused_mut)]
    let mut scope_4861 = writer.prefix("NotBefore");
    if let Some(var_4862) = &input.not_before {
        scope_4861.date_time(var_4862, aws_smithy_types::date_time::Format::DateTime)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_instance_event_window(
    input: &crate::input::ModifyInstanceEventWindowInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyInstanceEventWindow", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4863 = writer.prefix("DryRun");
    if let Some(var_4864) = &input.dry_run {
        scope_4863.boolean(*var_4864);
    }
    #[allow(unused_mut)]
    let mut scope_4865 = writer.prefix("Name");
    if let Some(var_4866) = &input.name {
        scope_4865.string(var_4866);
    }
    #[allow(unused_mut)]
    let mut scope_4867 = writer.prefix("InstanceEventWindowId");
    if let Some(var_4868) = &input.instance_event_window_id {
        scope_4867.string(var_4868);
    }
    #[allow(unused_mut)]
    let mut scope_4869 = writer.prefix("TimeRange");
    if let Some(var_4870) = &input.time_ranges {
        let mut list_4872 = scope_4869.start_list(true, None);
        for item_4871 in var_4870 {
            #[allow(unused_mut)]
            let mut entry_4873 = list_4872.entry();
            crate::query_ser::serialize_structure_crate_model_instance_event_window_time_range_request(entry_4873, item_4871)?;
        }
        list_4872.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4874 = writer.prefix("CronExpression");
    if let Some(var_4875) = &input.cron_expression {
        scope_4874.string(var_4875);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_instance_maintenance_options(
    input: &crate::input::ModifyInstanceMaintenanceOptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyInstanceMaintenanceOptions",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4876 = writer.prefix("InstanceId");
    if let Some(var_4877) = &input.instance_id {
        scope_4876.string(var_4877);
    }
    #[allow(unused_mut)]
    let mut scope_4878 = writer.prefix("AutoRecovery");
    if let Some(var_4879) = &input.auto_recovery {
        scope_4878.string(var_4879.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4880 = writer.prefix("DryRun");
    if let Some(var_4881) = &input.dry_run {
        scope_4880.boolean(*var_4881);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_instance_metadata_options(
    input: &crate::input::ModifyInstanceMetadataOptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyInstanceMetadataOptions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4882 = writer.prefix("InstanceId");
    if let Some(var_4883) = &input.instance_id {
        scope_4882.string(var_4883);
    }
    #[allow(unused_mut)]
    let mut scope_4884 = writer.prefix("HttpTokens");
    if let Some(var_4885) = &input.http_tokens {
        scope_4884.string(var_4885.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4886 = writer.prefix("HttpPutResponseHopLimit");
    if let Some(var_4887) = &input.http_put_response_hop_limit {
        scope_4886.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4887).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4888 = writer.prefix("HttpEndpoint");
    if let Some(var_4889) = &input.http_endpoint {
        scope_4888.string(var_4889.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4890 = writer.prefix("DryRun");
    if let Some(var_4891) = &input.dry_run {
        scope_4890.boolean(*var_4891);
    }
    #[allow(unused_mut)]
    let mut scope_4892 = writer.prefix("HttpProtocolIpv6");
    if let Some(var_4893) = &input.http_protocol_ipv6 {
        scope_4892.string(var_4893.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4894 = writer.prefix("InstanceMetadataTags");
    if let Some(var_4895) = &input.instance_metadata_tags {
        scope_4894.string(var_4895.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_instance_placement(
    input: &crate::input::ModifyInstancePlacementInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyInstancePlacement", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4896 = writer.prefix("Affinity");
    if let Some(var_4897) = &input.affinity {
        scope_4896.string(var_4897.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4898 = writer.prefix("GroupName");
    if let Some(var_4899) = &input.group_name {
        scope_4898.string(var_4899);
    }
    #[allow(unused_mut)]
    let mut scope_4900 = writer.prefix("HostId");
    if let Some(var_4901) = &input.host_id {
        scope_4900.string(var_4901);
    }
    #[allow(unused_mut)]
    let mut scope_4902 = writer.prefix("InstanceId");
    if let Some(var_4903) = &input.instance_id {
        scope_4902.string(var_4903);
    }
    #[allow(unused_mut)]
    let mut scope_4904 = writer.prefix("Tenancy");
    if let Some(var_4905) = &input.tenancy {
        scope_4904.string(var_4905.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4906 = writer.prefix("PartitionNumber");
    if let Some(var_4907) = &input.partition_number {
        scope_4906.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4907).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4908 = writer.prefix("HostResourceGroupArn");
    if let Some(var_4909) = &input.host_resource_group_arn {
        scope_4908.string(var_4909);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_ipam(
    input: &crate::input::ModifyIpamInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyIpam", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4910 = writer.prefix("DryRun");
    if let Some(var_4911) = &input.dry_run {
        scope_4910.boolean(*var_4911);
    }
    #[allow(unused_mut)]
    let mut scope_4912 = writer.prefix("IpamId");
    if let Some(var_4913) = &input.ipam_id {
        scope_4912.string(var_4913);
    }
    #[allow(unused_mut)]
    let mut scope_4914 = writer.prefix("Description");
    if let Some(var_4915) = &input.description {
        scope_4914.string(var_4915);
    }
    #[allow(unused_mut)]
    let mut scope_4916 = writer.prefix("AddOperatingRegion");
    if let Some(var_4917) = &input.add_operating_regions {
        let mut list_4919 = scope_4916.start_list(true, None);
        for item_4918 in var_4917 {
            #[allow(unused_mut)]
            let mut entry_4920 = list_4919.entry();
            crate::query_ser::serialize_structure_crate_model_add_ipam_operating_region(
                entry_4920, item_4918,
            )?;
        }
        list_4919.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4921 = writer.prefix("RemoveOperatingRegion");
    if let Some(var_4922) = &input.remove_operating_regions {
        let mut list_4924 = scope_4921.start_list(true, None);
        for item_4923 in var_4922 {
            #[allow(unused_mut)]
            let mut entry_4925 = list_4924.entry();
            crate::query_ser::serialize_structure_crate_model_remove_ipam_operating_region(
                entry_4925, item_4923,
            )?;
        }
        list_4924.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_ipam_pool(
    input: &crate::input::ModifyIpamPoolInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyIpamPool", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4926 = writer.prefix("DryRun");
    if let Some(var_4927) = &input.dry_run {
        scope_4926.boolean(*var_4927);
    }
    #[allow(unused_mut)]
    let mut scope_4928 = writer.prefix("IpamPoolId");
    if let Some(var_4929) = &input.ipam_pool_id {
        scope_4928.string(var_4929);
    }
    #[allow(unused_mut)]
    let mut scope_4930 = writer.prefix("Description");
    if let Some(var_4931) = &input.description {
        scope_4930.string(var_4931);
    }
    #[allow(unused_mut)]
    let mut scope_4932 = writer.prefix("AutoImport");
    if let Some(var_4933) = &input.auto_import {
        scope_4932.boolean(*var_4933);
    }
    #[allow(unused_mut)]
    let mut scope_4934 = writer.prefix("AllocationMinNetmaskLength");
    if let Some(var_4935) = &input.allocation_min_netmask_length {
        scope_4934.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4935).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4936 = writer.prefix("AllocationMaxNetmaskLength");
    if let Some(var_4937) = &input.allocation_max_netmask_length {
        scope_4936.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4937).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4938 = writer.prefix("AllocationDefaultNetmaskLength");
    if let Some(var_4939) = &input.allocation_default_netmask_length {
        scope_4938.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4939).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4940 = writer.prefix("ClearAllocationDefaultNetmaskLength");
    if let Some(var_4941) = &input.clear_allocation_default_netmask_length {
        scope_4940.boolean(*var_4941);
    }
    #[allow(unused_mut)]
    let mut scope_4942 = writer.prefix("AddAllocationResourceTag");
    if let Some(var_4943) = &input.add_allocation_resource_tags {
        let mut list_4945 = scope_4942.start_list(true, Some("item"));
        for item_4944 in var_4943 {
            #[allow(unused_mut)]
            let mut entry_4946 = list_4945.entry();
            crate::query_ser::serialize_structure_crate_model_request_ipam_resource_tag(
                entry_4946, item_4944,
            )?;
        }
        list_4945.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4947 = writer.prefix("RemoveAllocationResourceTag");
    if let Some(var_4948) = &input.remove_allocation_resource_tags {
        let mut list_4950 = scope_4947.start_list(true, Some("item"));
        for item_4949 in var_4948 {
            #[allow(unused_mut)]
            let mut entry_4951 = list_4950.entry();
            crate::query_ser::serialize_structure_crate_model_request_ipam_resource_tag(
                entry_4951, item_4949,
            )?;
        }
        list_4950.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_ipam_resource_cidr(
    input: &crate::input::ModifyIpamResourceCidrInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyIpamResourceCidr", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4952 = writer.prefix("DryRun");
    if let Some(var_4953) = &input.dry_run {
        scope_4952.boolean(*var_4953);
    }
    #[allow(unused_mut)]
    let mut scope_4954 = writer.prefix("ResourceId");
    if let Some(var_4955) = &input.resource_id {
        scope_4954.string(var_4955);
    }
    #[allow(unused_mut)]
    let mut scope_4956 = writer.prefix("ResourceCidr");
    if let Some(var_4957) = &input.resource_cidr {
        scope_4956.string(var_4957);
    }
    #[allow(unused_mut)]
    let mut scope_4958 = writer.prefix("ResourceRegion");
    if let Some(var_4959) = &input.resource_region {
        scope_4958.string(var_4959);
    }
    #[allow(unused_mut)]
    let mut scope_4960 = writer.prefix("CurrentIpamScopeId");
    if let Some(var_4961) = &input.current_ipam_scope_id {
        scope_4960.string(var_4961);
    }
    #[allow(unused_mut)]
    let mut scope_4962 = writer.prefix("DestinationIpamScopeId");
    if let Some(var_4963) = &input.destination_ipam_scope_id {
        scope_4962.string(var_4963);
    }
    #[allow(unused_mut)]
    let mut scope_4964 = writer.prefix("Monitored");
    if let Some(var_4965) = &input.monitored {
        scope_4964.boolean(*var_4965);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_ipam_scope(
    input: &crate::input::ModifyIpamScopeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyIpamScope", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4966 = writer.prefix("DryRun");
    if let Some(var_4967) = &input.dry_run {
        scope_4966.boolean(*var_4967);
    }
    #[allow(unused_mut)]
    let mut scope_4968 = writer.prefix("IpamScopeId");
    if let Some(var_4969) = &input.ipam_scope_id {
        scope_4968.string(var_4969);
    }
    #[allow(unused_mut)]
    let mut scope_4970 = writer.prefix("Description");
    if let Some(var_4971) = &input.description {
        scope_4970.string(var_4971);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_launch_template(
    input: &crate::input::ModifyLaunchTemplateInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyLaunchTemplate", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4972 = writer.prefix("DryRun");
    if let Some(var_4973) = &input.dry_run {
        scope_4972.boolean(*var_4973);
    }
    #[allow(unused_mut)]
    let mut scope_4974 = writer.prefix("ClientToken");
    if let Some(var_4975) = &input.client_token {
        scope_4974.string(var_4975);
    }
    #[allow(unused_mut)]
    let mut scope_4976 = writer.prefix("LaunchTemplateId");
    if let Some(var_4977) = &input.launch_template_id {
        scope_4976.string(var_4977);
    }
    #[allow(unused_mut)]
    let mut scope_4978 = writer.prefix("LaunchTemplateName");
    if let Some(var_4979) = &input.launch_template_name {
        scope_4978.string(var_4979);
    }
    #[allow(unused_mut)]
    let mut scope_4980 = writer.prefix("SetDefaultVersion");
    if let Some(var_4981) = &input.default_version {
        scope_4980.string(var_4981);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_managed_prefix_list(
    input: &crate::input::ModifyManagedPrefixListInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyManagedPrefixList", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4982 = writer.prefix("DryRun");
    if let Some(var_4983) = &input.dry_run {
        scope_4982.boolean(*var_4983);
    }
    #[allow(unused_mut)]
    let mut scope_4984 = writer.prefix("PrefixListId");
    if let Some(var_4985) = &input.prefix_list_id {
        scope_4984.string(var_4985);
    }
    #[allow(unused_mut)]
    let mut scope_4986 = writer.prefix("CurrentVersion");
    if let Some(var_4987) = &input.current_version {
        scope_4986.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4987).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4988 = writer.prefix("PrefixListName");
    if let Some(var_4989) = &input.prefix_list_name {
        scope_4988.string(var_4989);
    }
    #[allow(unused_mut)]
    let mut scope_4990 = writer.prefix("AddEntry");
    if let Some(var_4991) = &input.add_entries {
        let mut list_4993 = scope_4990.start_list(true, None);
        for item_4992 in var_4991 {
            #[allow(unused_mut)]
            let mut entry_4994 = list_4993.entry();
            crate::query_ser::serialize_structure_crate_model_add_prefix_list_entry(
                entry_4994, item_4992,
            )?;
        }
        list_4993.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4995 = writer.prefix("RemoveEntry");
    if let Some(var_4996) = &input.remove_entries {
        let mut list_4998 = scope_4995.start_list(true, None);
        for item_4997 in var_4996 {
            #[allow(unused_mut)]
            let mut entry_4999 = list_4998.entry();
            crate::query_ser::serialize_structure_crate_model_remove_prefix_list_entry(
                entry_4999, item_4997,
            )?;
        }
        list_4998.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5000 = writer.prefix("MaxEntries");
    if let Some(var_5001) = &input.max_entries {
        scope_5000.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5001).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_network_interface_attribute(
    input: &crate::input::ModifyNetworkInterfaceAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyNetworkInterfaceAttribute",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5002 = writer.prefix("Attachment");
    if let Some(var_5003) = &input.attachment {
        crate::query_ser::serialize_structure_crate_model_network_interface_attachment_changes(
            scope_5002, var_5003,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5004 = writer.prefix("Description");
    if let Some(var_5005) = &input.description {
        crate::query_ser::serialize_structure_crate_model_attribute_value(scope_5004, var_5005)?;
    }
    #[allow(unused_mut)]
    let mut scope_5006 = writer.prefix("DryRun");
    if let Some(var_5007) = &input.dry_run {
        scope_5006.boolean(*var_5007);
    }
    #[allow(unused_mut)]
    let mut scope_5008 = writer.prefix("SecurityGroupId");
    if let Some(var_5009) = &input.groups {
        let mut list_5011 = scope_5008.start_list(true, Some("SecurityGroupId"));
        for item_5010 in var_5009 {
            #[allow(unused_mut)]
            let mut entry_5012 = list_5011.entry();
            entry_5012.string(item_5010);
        }
        list_5011.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5013 = writer.prefix("NetworkInterfaceId");
    if let Some(var_5014) = &input.network_interface_id {
        scope_5013.string(var_5014);
    }
    #[allow(unused_mut)]
    let mut scope_5015 = writer.prefix("SourceDestCheck");
    if let Some(var_5016) = &input.source_dest_check {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_5015, var_5016,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_private_dns_name_options(
    input: &crate::input::ModifyPrivateDnsNameOptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyPrivateDnsNameOptions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5017 = writer.prefix("DryRun");
    if let Some(var_5018) = &input.dry_run {
        scope_5017.boolean(*var_5018);
    }
    #[allow(unused_mut)]
    let mut scope_5019 = writer.prefix("InstanceId");
    if let Some(var_5020) = &input.instance_id {
        scope_5019.string(var_5020);
    }
    #[allow(unused_mut)]
    let mut scope_5021 = writer.prefix("PrivateDnsHostnameType");
    if let Some(var_5022) = &input.private_dns_hostname_type {
        scope_5021.string(var_5022.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5023 = writer.prefix("EnableResourceNameDnsARecord");
    if let Some(var_5024) = &input.enable_resource_name_dns_a_record {
        scope_5023.boolean(*var_5024);
    }
    #[allow(unused_mut)]
    let mut scope_5025 = writer.prefix("EnableResourceNameDnsAAAARecord");
    if let Some(var_5026) = &input.enable_resource_name_dns_aaaa_record {
        scope_5025.boolean(*var_5026);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_reserved_instances(
    input: &crate::input::ModifyReservedInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyReservedInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5027 = writer.prefix("ReservedInstancesId");
    if let Some(var_5028) = &input.reserved_instances_ids {
        let mut list_5030 = scope_5027.start_list(true, Some("ReservedInstancesId"));
        for item_5029 in var_5028 {
            #[allow(unused_mut)]
            let mut entry_5031 = list_5030.entry();
            entry_5031.string(item_5029);
        }
        list_5030.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5032 = writer.prefix("ClientToken");
    if let Some(var_5033) = &input.client_token {
        scope_5032.string(var_5033);
    }
    #[allow(unused_mut)]
    let mut scope_5034 = writer.prefix("ReservedInstancesConfigurationSetItemType");
    if let Some(var_5035) = &input.target_configurations {
        let mut list_5037 = scope_5034.start_list(true, Some("item"));
        for item_5036 in var_5035 {
            #[allow(unused_mut)]
            let mut entry_5038 = list_5037.entry();
            crate::query_ser::serialize_structure_crate_model_reserved_instances_configuration(
                entry_5038, item_5036,
            )?;
        }
        list_5037.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_security_group_rules(
    input: &crate::input::ModifySecurityGroupRulesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifySecurityGroupRules", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5039 = writer.prefix("GroupId");
    if let Some(var_5040) = &input.group_id {
        scope_5039.string(var_5040);
    }
    #[allow(unused_mut)]
    let mut scope_5041 = writer.prefix("SecurityGroupRule");
    if let Some(var_5042) = &input.security_group_rules {
        let mut list_5044 = scope_5041.start_list(true, Some("item"));
        for item_5043 in var_5042 {
            #[allow(unused_mut)]
            let mut entry_5045 = list_5044.entry();
            crate::query_ser::serialize_structure_crate_model_security_group_rule_update(
                entry_5045, item_5043,
            )?;
        }
        list_5044.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5046 = writer.prefix("DryRun");
    if let Some(var_5047) = &input.dry_run {
        scope_5046.boolean(*var_5047);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_snapshot_attribute(
    input: &crate::input::ModifySnapshotAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifySnapshotAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5048 = writer.prefix("Attribute");
    if let Some(var_5049) = &input.attribute {
        scope_5048.string(var_5049.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5050 = writer.prefix("CreateVolumePermission");
    if let Some(var_5051) = &input.create_volume_permission {
        crate::query_ser::serialize_structure_crate_model_create_volume_permission_modifications(
            scope_5050, var_5051,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5052 = writer.prefix("UserGroup");
    if let Some(var_5053) = &input.group_names {
        let mut list_5055 = scope_5052.start_list(true, Some("GroupName"));
        for item_5054 in var_5053 {
            #[allow(unused_mut)]
            let mut entry_5056 = list_5055.entry();
            entry_5056.string(item_5054);
        }
        list_5055.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5057 = writer.prefix("OperationType");
    if let Some(var_5058) = &input.operation_type {
        scope_5057.string(var_5058.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5059 = writer.prefix("SnapshotId");
    if let Some(var_5060) = &input.snapshot_id {
        scope_5059.string(var_5060);
    }
    #[allow(unused_mut)]
    let mut scope_5061 = writer.prefix("UserId");
    if let Some(var_5062) = &input.user_ids {
        let mut list_5064 = scope_5061.start_list(true, Some("UserId"));
        for item_5063 in var_5062 {
            #[allow(unused_mut)]
            let mut entry_5065 = list_5064.entry();
            entry_5065.string(item_5063);
        }
        list_5064.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5066 = writer.prefix("DryRun");
    if let Some(var_5067) = &input.dry_run {
        scope_5066.boolean(*var_5067);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_snapshot_tier(
    input: &crate::input::ModifySnapshotTierInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifySnapshotTier", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5068 = writer.prefix("SnapshotId");
    if let Some(var_5069) = &input.snapshot_id {
        scope_5068.string(var_5069);
    }
    #[allow(unused_mut)]
    let mut scope_5070 = writer.prefix("StorageTier");
    if let Some(var_5071) = &input.storage_tier {
        scope_5070.string(var_5071.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5072 = writer.prefix("DryRun");
    if let Some(var_5073) = &input.dry_run {
        scope_5072.boolean(*var_5073);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_spot_fleet_request(
    input: &crate::input::ModifySpotFleetRequestInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifySpotFleetRequest", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5074 = writer.prefix("ExcessCapacityTerminationPolicy");
    if let Some(var_5075) = &input.excess_capacity_termination_policy {
        scope_5074.string(var_5075.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5076 = writer.prefix("LaunchTemplateConfig");
    if let Some(var_5077) = &input.launch_template_configs {
        let mut list_5079 = scope_5076.start_list(true, Some("item"));
        for item_5078 in var_5077 {
            #[allow(unused_mut)]
            let mut entry_5080 = list_5079.entry();
            crate::query_ser::serialize_structure_crate_model_launch_template_config(
                entry_5080, item_5078,
            )?;
        }
        list_5079.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5081 = writer.prefix("SpotFleetRequestId");
    if let Some(var_5082) = &input.spot_fleet_request_id {
        scope_5081.string(var_5082);
    }
    #[allow(unused_mut)]
    let mut scope_5083 = writer.prefix("TargetCapacity");
    if let Some(var_5084) = &input.target_capacity {
        scope_5083.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5084).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5085 = writer.prefix("OnDemandTargetCapacity");
    if let Some(var_5086) = &input.on_demand_target_capacity {
        scope_5085.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5086).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5087 = writer.prefix("Context");
    if let Some(var_5088) = &input.context {
        scope_5087.string(var_5088);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_subnet_attribute(
    input: &crate::input::ModifySubnetAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifySubnetAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5089 = writer.prefix("AssignIpv6AddressOnCreation");
    if let Some(var_5090) = &input.assign_ipv6_address_on_creation {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_5089, var_5090,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5091 = writer.prefix("MapPublicIpOnLaunch");
    if let Some(var_5092) = &input.map_public_ip_on_launch {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_5091, var_5092,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5093 = writer.prefix("SubnetId");
    if let Some(var_5094) = &input.subnet_id {
        scope_5093.string(var_5094);
    }
    #[allow(unused_mut)]
    let mut scope_5095 = writer.prefix("MapCustomerOwnedIpOnLaunch");
    if let Some(var_5096) = &input.map_customer_owned_ip_on_launch {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_5095, var_5096,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5097 = writer.prefix("CustomerOwnedIpv4Pool");
    if let Some(var_5098) = &input.customer_owned_ipv4_pool {
        scope_5097.string(var_5098);
    }
    #[allow(unused_mut)]
    let mut scope_5099 = writer.prefix("EnableDns64");
    if let Some(var_5100) = &input.enable_dns64 {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_5099, var_5100,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5101 = writer.prefix("PrivateDnsHostnameTypeOnLaunch");
    if let Some(var_5102) = &input.private_dns_hostname_type_on_launch {
        scope_5101.string(var_5102.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5103 = writer.prefix("EnableResourceNameDnsARecordOnLaunch");
    if let Some(var_5104) = &input.enable_resource_name_dns_a_record_on_launch {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_5103, var_5104,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5105 = writer.prefix("EnableResourceNameDnsAAAARecordOnLaunch");
    if let Some(var_5106) = &input.enable_resource_name_dns_aaaa_record_on_launch {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_5105, var_5106,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5107 = writer.prefix("EnableLniAtDeviceIndex");
    if let Some(var_5108) = &input.enable_lni_at_device_index {
        scope_5107.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5108).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5109 = writer.prefix("DisableLniAtDeviceIndex");
    if let Some(var_5110) = &input.disable_lni_at_device_index {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_5109, var_5110,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_traffic_mirror_filter_network_services(
    input: &crate::input::ModifyTrafficMirrorFilterNetworkServicesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyTrafficMirrorFilterNetworkServices",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5111 = writer.prefix("TrafficMirrorFilterId");
    if let Some(var_5112) = &input.traffic_mirror_filter_id {
        scope_5111.string(var_5112);
    }
    #[allow(unused_mut)]
    let mut scope_5113 = writer.prefix("AddNetworkService");
    if let Some(var_5114) = &input.add_network_services {
        let mut list_5116 = scope_5113.start_list(true, Some("item"));
        for item_5115 in var_5114 {
            #[allow(unused_mut)]
            let mut entry_5117 = list_5116.entry();
            entry_5117.string(item_5115.as_str());
        }
        list_5116.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5118 = writer.prefix("RemoveNetworkService");
    if let Some(var_5119) = &input.remove_network_services {
        let mut list_5121 = scope_5118.start_list(true, Some("item"));
        for item_5120 in var_5119 {
            #[allow(unused_mut)]
            let mut entry_5122 = list_5121.entry();
            entry_5122.string(item_5120.as_str());
        }
        list_5121.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5123 = writer.prefix("DryRun");
    if let Some(var_5124) = &input.dry_run {
        scope_5123.boolean(*var_5124);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_traffic_mirror_filter_rule(
    input: &crate::input::ModifyTrafficMirrorFilterRuleInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyTrafficMirrorFilterRule", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5125 = writer.prefix("TrafficMirrorFilterRuleId");
    if let Some(var_5126) = &input.traffic_mirror_filter_rule_id {
        scope_5125.string(var_5126);
    }
    #[allow(unused_mut)]
    let mut scope_5127 = writer.prefix("TrafficDirection");
    if let Some(var_5128) = &input.traffic_direction {
        scope_5127.string(var_5128.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5129 = writer.prefix("RuleNumber");
    if let Some(var_5130) = &input.rule_number {
        scope_5129.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5130).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5131 = writer.prefix("RuleAction");
    if let Some(var_5132) = &input.rule_action {
        scope_5131.string(var_5132.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5133 = writer.prefix("DestinationPortRange");
    if let Some(var_5134) = &input.destination_port_range {
        crate::query_ser::serialize_structure_crate_model_traffic_mirror_port_range_request(
            scope_5133, var_5134,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5135 = writer.prefix("SourcePortRange");
    if let Some(var_5136) = &input.source_port_range {
        crate::query_ser::serialize_structure_crate_model_traffic_mirror_port_range_request(
            scope_5135, var_5136,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5137 = writer.prefix("Protocol");
    if let Some(var_5138) = &input.protocol {
        scope_5137.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5138).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5139 = writer.prefix("DestinationCidrBlock");
    if let Some(var_5140) = &input.destination_cidr_block {
        scope_5139.string(var_5140);
    }
    #[allow(unused_mut)]
    let mut scope_5141 = writer.prefix("SourceCidrBlock");
    if let Some(var_5142) = &input.source_cidr_block {
        scope_5141.string(var_5142);
    }
    #[allow(unused_mut)]
    let mut scope_5143 = writer.prefix("Description");
    if let Some(var_5144) = &input.description {
        scope_5143.string(var_5144);
    }
    #[allow(unused_mut)]
    let mut scope_5145 = writer.prefix("RemoveField");
    if let Some(var_5146) = &input.remove_fields {
        let mut list_5148 = scope_5145.start_list(true, None);
        for item_5147 in var_5146 {
            #[allow(unused_mut)]
            let mut entry_5149 = list_5148.entry();
            entry_5149.string(item_5147.as_str());
        }
        list_5148.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5150 = writer.prefix("DryRun");
    if let Some(var_5151) = &input.dry_run {
        scope_5150.boolean(*var_5151);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_traffic_mirror_session(
    input: &crate::input::ModifyTrafficMirrorSessionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyTrafficMirrorSession", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5152 = writer.prefix("TrafficMirrorSessionId");
    if let Some(var_5153) = &input.traffic_mirror_session_id {
        scope_5152.string(var_5153);
    }
    #[allow(unused_mut)]
    let mut scope_5154 = writer.prefix("TrafficMirrorTargetId");
    if let Some(var_5155) = &input.traffic_mirror_target_id {
        scope_5154.string(var_5155);
    }
    #[allow(unused_mut)]
    let mut scope_5156 = writer.prefix("TrafficMirrorFilterId");
    if let Some(var_5157) = &input.traffic_mirror_filter_id {
        scope_5156.string(var_5157);
    }
    #[allow(unused_mut)]
    let mut scope_5158 = writer.prefix("PacketLength");
    if let Some(var_5159) = &input.packet_length {
        scope_5158.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5159).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5160 = writer.prefix("SessionNumber");
    if let Some(var_5161) = &input.session_number {
        scope_5160.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5161).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5162 = writer.prefix("VirtualNetworkId");
    if let Some(var_5163) = &input.virtual_network_id {
        scope_5162.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5163).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5164 = writer.prefix("Description");
    if let Some(var_5165) = &input.description {
        scope_5164.string(var_5165);
    }
    #[allow(unused_mut)]
    let mut scope_5166 = writer.prefix("RemoveField");
    if let Some(var_5167) = &input.remove_fields {
        let mut list_5169 = scope_5166.start_list(true, None);
        for item_5168 in var_5167 {
            #[allow(unused_mut)]
            let mut entry_5170 = list_5169.entry();
            entry_5170.string(item_5168.as_str());
        }
        list_5169.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5171 = writer.prefix("DryRun");
    if let Some(var_5172) = &input.dry_run {
        scope_5171.boolean(*var_5172);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_transit_gateway(
    input: &crate::input::ModifyTransitGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyTransitGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5173 = writer.prefix("TransitGatewayId");
    if let Some(var_5174) = &input.transit_gateway_id {
        scope_5173.string(var_5174);
    }
    #[allow(unused_mut)]
    let mut scope_5175 = writer.prefix("Description");
    if let Some(var_5176) = &input.description {
        scope_5175.string(var_5176);
    }
    #[allow(unused_mut)]
    let mut scope_5177 = writer.prefix("Options");
    if let Some(var_5178) = &input.options {
        crate::query_ser::serialize_structure_crate_model_modify_transit_gateway_options(
            scope_5177, var_5178,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5179 = writer.prefix("DryRun");
    if let Some(var_5180) = &input.dry_run {
        scope_5179.boolean(*var_5180);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_transit_gateway_prefix_list_reference(
    input: &crate::input::ModifyTransitGatewayPrefixListReferenceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyTransitGatewayPrefixListReference",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5181 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_5182) = &input.transit_gateway_route_table_id {
        scope_5181.string(var_5182);
    }
    #[allow(unused_mut)]
    let mut scope_5183 = writer.prefix("PrefixListId");
    if let Some(var_5184) = &input.prefix_list_id {
        scope_5183.string(var_5184);
    }
    #[allow(unused_mut)]
    let mut scope_5185 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_5186) = &input.transit_gateway_attachment_id {
        scope_5185.string(var_5186);
    }
    #[allow(unused_mut)]
    let mut scope_5187 = writer.prefix("Blackhole");
    if let Some(var_5188) = &input.blackhole {
        scope_5187.boolean(*var_5188);
    }
    #[allow(unused_mut)]
    let mut scope_5189 = writer.prefix("DryRun");
    if let Some(var_5190) = &input.dry_run {
        scope_5189.boolean(*var_5190);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_transit_gateway_vpc_attachment(
    input: &crate::input::ModifyTransitGatewayVpcAttachmentInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyTransitGatewayVpcAttachment",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5191 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_5192) = &input.transit_gateway_attachment_id {
        scope_5191.string(var_5192);
    }
    #[allow(unused_mut)]
    let mut scope_5193 = writer.prefix("AddSubnetIds");
    if let Some(var_5194) = &input.add_subnet_ids {
        let mut list_5196 = scope_5193.start_list(true, Some("item"));
        for item_5195 in var_5194 {
            #[allow(unused_mut)]
            let mut entry_5197 = list_5196.entry();
            entry_5197.string(item_5195);
        }
        list_5196.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5198 = writer.prefix("RemoveSubnetIds");
    if let Some(var_5199) = &input.remove_subnet_ids {
        let mut list_5201 = scope_5198.start_list(true, Some("item"));
        for item_5200 in var_5199 {
            #[allow(unused_mut)]
            let mut entry_5202 = list_5201.entry();
            entry_5202.string(item_5200);
        }
        list_5201.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5203 = writer.prefix("Options");
    if let Some(var_5204) = &input.options {
        crate::query_ser::serialize_structure_crate_model_modify_transit_gateway_vpc_attachment_request_options(scope_5203, var_5204)?;
    }
    #[allow(unused_mut)]
    let mut scope_5205 = writer.prefix("DryRun");
    if let Some(var_5206) = &input.dry_run {
        scope_5205.boolean(*var_5206);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_volume(
    input: &crate::input::ModifyVolumeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyVolume", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5207 = writer.prefix("DryRun");
    if let Some(var_5208) = &input.dry_run {
        scope_5207.boolean(*var_5208);
    }
    #[allow(unused_mut)]
    let mut scope_5209 = writer.prefix("VolumeId");
    if let Some(var_5210) = &input.volume_id {
        scope_5209.string(var_5210);
    }
    #[allow(unused_mut)]
    let mut scope_5211 = writer.prefix("Size");
    if let Some(var_5212) = &input.size {
        scope_5211.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5212).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5213 = writer.prefix("VolumeType");
    if let Some(var_5214) = &input.volume_type {
        scope_5213.string(var_5214.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5215 = writer.prefix("Iops");
    if let Some(var_5216) = &input.iops {
        scope_5215.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5216).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5217 = writer.prefix("Throughput");
    if let Some(var_5218) = &input.throughput {
        scope_5217.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5218).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5219 = writer.prefix("MultiAttachEnabled");
    if let Some(var_5220) = &input.multi_attach_enabled {
        scope_5219.boolean(*var_5220);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_volume_attribute(
    input: &crate::input::ModifyVolumeAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyVolumeAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5221 = writer.prefix("AutoEnableIO");
    if let Some(var_5222) = &input.auto_enable_io {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_5221, var_5222,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5223 = writer.prefix("VolumeId");
    if let Some(var_5224) = &input.volume_id {
        scope_5223.string(var_5224);
    }
    #[allow(unused_mut)]
    let mut scope_5225 = writer.prefix("DryRun");
    if let Some(var_5226) = &input.dry_run {
        scope_5225.boolean(*var_5226);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpc_attribute(
    input: &crate::input::ModifyVpcAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyVpcAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5227 = writer.prefix("EnableDnsHostnames");
    if let Some(var_5228) = &input.enable_dns_hostnames {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_5227, var_5228,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5229 = writer.prefix("EnableDnsSupport");
    if let Some(var_5230) = &input.enable_dns_support {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_5229, var_5230,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5231 = writer.prefix("VpcId");
    if let Some(var_5232) = &input.vpc_id {
        scope_5231.string(var_5232);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpc_endpoint(
    input: &crate::input::ModifyVpcEndpointInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyVpcEndpoint", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5233 = writer.prefix("DryRun");
    if let Some(var_5234) = &input.dry_run {
        scope_5233.boolean(*var_5234);
    }
    #[allow(unused_mut)]
    let mut scope_5235 = writer.prefix("VpcEndpointId");
    if let Some(var_5236) = &input.vpc_endpoint_id {
        scope_5235.string(var_5236);
    }
    #[allow(unused_mut)]
    let mut scope_5237 = writer.prefix("ResetPolicy");
    if let Some(var_5238) = &input.reset_policy {
        scope_5237.boolean(*var_5238);
    }
    #[allow(unused_mut)]
    let mut scope_5239 = writer.prefix("PolicyDocument");
    if let Some(var_5240) = &input.policy_document {
        scope_5239.string(var_5240);
    }
    #[allow(unused_mut)]
    let mut scope_5241 = writer.prefix("AddRouteTableId");
    if let Some(var_5242) = &input.add_route_table_ids {
        let mut list_5244 = scope_5241.start_list(true, Some("item"));
        for item_5243 in var_5242 {
            #[allow(unused_mut)]
            let mut entry_5245 = list_5244.entry();
            entry_5245.string(item_5243);
        }
        list_5244.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5246 = writer.prefix("RemoveRouteTableId");
    if let Some(var_5247) = &input.remove_route_table_ids {
        let mut list_5249 = scope_5246.start_list(true, Some("item"));
        for item_5248 in var_5247 {
            #[allow(unused_mut)]
            let mut entry_5250 = list_5249.entry();
            entry_5250.string(item_5248);
        }
        list_5249.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5251 = writer.prefix("AddSubnetId");
    if let Some(var_5252) = &input.add_subnet_ids {
        let mut list_5254 = scope_5251.start_list(true, Some("item"));
        for item_5253 in var_5252 {
            #[allow(unused_mut)]
            let mut entry_5255 = list_5254.entry();
            entry_5255.string(item_5253);
        }
        list_5254.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5256 = writer.prefix("RemoveSubnetId");
    if let Some(var_5257) = &input.remove_subnet_ids {
        let mut list_5259 = scope_5256.start_list(true, Some("item"));
        for item_5258 in var_5257 {
            #[allow(unused_mut)]
            let mut entry_5260 = list_5259.entry();
            entry_5260.string(item_5258);
        }
        list_5259.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5261 = writer.prefix("AddSecurityGroupId");
    if let Some(var_5262) = &input.add_security_group_ids {
        let mut list_5264 = scope_5261.start_list(true, Some("item"));
        for item_5263 in var_5262 {
            #[allow(unused_mut)]
            let mut entry_5265 = list_5264.entry();
            entry_5265.string(item_5263);
        }
        list_5264.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5266 = writer.prefix("RemoveSecurityGroupId");
    if let Some(var_5267) = &input.remove_security_group_ids {
        let mut list_5269 = scope_5266.start_list(true, Some("item"));
        for item_5268 in var_5267 {
            #[allow(unused_mut)]
            let mut entry_5270 = list_5269.entry();
            entry_5270.string(item_5268);
        }
        list_5269.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5271 = writer.prefix("PrivateDnsEnabled");
    if let Some(var_5272) = &input.private_dns_enabled {
        scope_5271.boolean(*var_5272);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpc_endpoint_connection_notification(
    input: &crate::input::ModifyVpcEndpointConnectionNotificationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyVpcEndpointConnectionNotification",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5273 = writer.prefix("DryRun");
    if let Some(var_5274) = &input.dry_run {
        scope_5273.boolean(*var_5274);
    }
    #[allow(unused_mut)]
    let mut scope_5275 = writer.prefix("ConnectionNotificationId");
    if let Some(var_5276) = &input.connection_notification_id {
        scope_5275.string(var_5276);
    }
    #[allow(unused_mut)]
    let mut scope_5277 = writer.prefix("ConnectionNotificationArn");
    if let Some(var_5278) = &input.connection_notification_arn {
        scope_5277.string(var_5278);
    }
    #[allow(unused_mut)]
    let mut scope_5279 = writer.prefix("ConnectionEvents");
    if let Some(var_5280) = &input.connection_events {
        let mut list_5282 = scope_5279.start_list(true, Some("item"));
        for item_5281 in var_5280 {
            #[allow(unused_mut)]
            let mut entry_5283 = list_5282.entry();
            entry_5283.string(item_5281);
        }
        list_5282.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpc_endpoint_service_configuration(
    input: &crate::input::ModifyVpcEndpointServiceConfigurationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyVpcEndpointServiceConfiguration",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5284 = writer.prefix("DryRun");
    if let Some(var_5285) = &input.dry_run {
        scope_5284.boolean(*var_5285);
    }
    #[allow(unused_mut)]
    let mut scope_5286 = writer.prefix("ServiceId");
    if let Some(var_5287) = &input.service_id {
        scope_5286.string(var_5287);
    }
    #[allow(unused_mut)]
    let mut scope_5288 = writer.prefix("PrivateDnsName");
    if let Some(var_5289) = &input.private_dns_name {
        scope_5288.string(var_5289);
    }
    #[allow(unused_mut)]
    let mut scope_5290 = writer.prefix("RemovePrivateDnsName");
    if let Some(var_5291) = &input.remove_private_dns_name {
        scope_5290.boolean(*var_5291);
    }
    #[allow(unused_mut)]
    let mut scope_5292 = writer.prefix("AcceptanceRequired");
    if let Some(var_5293) = &input.acceptance_required {
        scope_5292.boolean(*var_5293);
    }
    #[allow(unused_mut)]
    let mut scope_5294 = writer.prefix("AddNetworkLoadBalancerArn");
    if let Some(var_5295) = &input.add_network_load_balancer_arns {
        let mut list_5297 = scope_5294.start_list(true, Some("item"));
        for item_5296 in var_5295 {
            #[allow(unused_mut)]
            let mut entry_5298 = list_5297.entry();
            entry_5298.string(item_5296);
        }
        list_5297.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5299 = writer.prefix("RemoveNetworkLoadBalancerArn");
    if let Some(var_5300) = &input.remove_network_load_balancer_arns {
        let mut list_5302 = scope_5299.start_list(true, Some("item"));
        for item_5301 in var_5300 {
            #[allow(unused_mut)]
            let mut entry_5303 = list_5302.entry();
            entry_5303.string(item_5301);
        }
        list_5302.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5304 = writer.prefix("AddGatewayLoadBalancerArn");
    if let Some(var_5305) = &input.add_gateway_load_balancer_arns {
        let mut list_5307 = scope_5304.start_list(true, Some("item"));
        for item_5306 in var_5305 {
            #[allow(unused_mut)]
            let mut entry_5308 = list_5307.entry();
            entry_5308.string(item_5306);
        }
        list_5307.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5309 = writer.prefix("RemoveGatewayLoadBalancerArn");
    if let Some(var_5310) = &input.remove_gateway_load_balancer_arns {
        let mut list_5312 = scope_5309.start_list(true, Some("item"));
        for item_5311 in var_5310 {
            #[allow(unused_mut)]
            let mut entry_5313 = list_5312.entry();
            entry_5313.string(item_5311);
        }
        list_5312.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpc_endpoint_service_payer_responsibility(
    input: &crate::input::ModifyVpcEndpointServicePayerResponsibilityInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyVpcEndpointServicePayerResponsibility",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5314 = writer.prefix("DryRun");
    if let Some(var_5315) = &input.dry_run {
        scope_5314.boolean(*var_5315);
    }
    #[allow(unused_mut)]
    let mut scope_5316 = writer.prefix("ServiceId");
    if let Some(var_5317) = &input.service_id {
        scope_5316.string(var_5317);
    }
    #[allow(unused_mut)]
    let mut scope_5318 = writer.prefix("PayerResponsibility");
    if let Some(var_5319) = &input.payer_responsibility {
        scope_5318.string(var_5319.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpc_endpoint_service_permissions(
    input: &crate::input::ModifyVpcEndpointServicePermissionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyVpcEndpointServicePermissions",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5320 = writer.prefix("DryRun");
    if let Some(var_5321) = &input.dry_run {
        scope_5320.boolean(*var_5321);
    }
    #[allow(unused_mut)]
    let mut scope_5322 = writer.prefix("ServiceId");
    if let Some(var_5323) = &input.service_id {
        scope_5322.string(var_5323);
    }
    #[allow(unused_mut)]
    let mut scope_5324 = writer.prefix("AddAllowedPrincipals");
    if let Some(var_5325) = &input.add_allowed_principals {
        let mut list_5327 = scope_5324.start_list(true, Some("item"));
        for item_5326 in var_5325 {
            #[allow(unused_mut)]
            let mut entry_5328 = list_5327.entry();
            entry_5328.string(item_5326);
        }
        list_5327.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5329 = writer.prefix("RemoveAllowedPrincipals");
    if let Some(var_5330) = &input.remove_allowed_principals {
        let mut list_5332 = scope_5329.start_list(true, Some("item"));
        for item_5331 in var_5330 {
            #[allow(unused_mut)]
            let mut entry_5333 = list_5332.entry();
            entry_5333.string(item_5331);
        }
        list_5332.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpc_peering_connection_options(
    input: &crate::input::ModifyVpcPeeringConnectionOptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyVpcPeeringConnectionOptions",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5334 = writer.prefix("AccepterPeeringConnectionOptions");
    if let Some(var_5335) = &input.accepter_peering_connection_options {
        crate::query_ser::serialize_structure_crate_model_peering_connection_options_request(
            scope_5334, var_5335,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5336 = writer.prefix("DryRun");
    if let Some(var_5337) = &input.dry_run {
        scope_5336.boolean(*var_5337);
    }
    #[allow(unused_mut)]
    let mut scope_5338 = writer.prefix("RequesterPeeringConnectionOptions");
    if let Some(var_5339) = &input.requester_peering_connection_options {
        crate::query_ser::serialize_structure_crate_model_peering_connection_options_request(
            scope_5338, var_5339,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5340 = writer.prefix("VpcPeeringConnectionId");
    if let Some(var_5341) = &input.vpc_peering_connection_id {
        scope_5340.string(var_5341);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpc_tenancy(
    input: &crate::input::ModifyVpcTenancyInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyVpcTenancy", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5342 = writer.prefix("VpcId");
    if let Some(var_5343) = &input.vpc_id {
        scope_5342.string(var_5343);
    }
    #[allow(unused_mut)]
    let mut scope_5344 = writer.prefix("InstanceTenancy");
    if let Some(var_5345) = &input.instance_tenancy {
        scope_5344.string(var_5345.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5346 = writer.prefix("DryRun");
    if let Some(var_5347) = &input.dry_run {
        scope_5346.boolean(*var_5347);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpn_connection(
    input: &crate::input::ModifyVpnConnectionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyVpnConnection", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5348 = writer.prefix("VpnConnectionId");
    if let Some(var_5349) = &input.vpn_connection_id {
        scope_5348.string(var_5349);
    }
    #[allow(unused_mut)]
    let mut scope_5350 = writer.prefix("TransitGatewayId");
    if let Some(var_5351) = &input.transit_gateway_id {
        scope_5350.string(var_5351);
    }
    #[allow(unused_mut)]
    let mut scope_5352 = writer.prefix("CustomerGatewayId");
    if let Some(var_5353) = &input.customer_gateway_id {
        scope_5352.string(var_5353);
    }
    #[allow(unused_mut)]
    let mut scope_5354 = writer.prefix("VpnGatewayId");
    if let Some(var_5355) = &input.vpn_gateway_id {
        scope_5354.string(var_5355);
    }
    #[allow(unused_mut)]
    let mut scope_5356 = writer.prefix("DryRun");
    if let Some(var_5357) = &input.dry_run {
        scope_5356.boolean(*var_5357);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpn_connection_options(
    input: &crate::input::ModifyVpnConnectionOptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyVpnConnectionOptions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5358 = writer.prefix("VpnConnectionId");
    if let Some(var_5359) = &input.vpn_connection_id {
        scope_5358.string(var_5359);
    }
    #[allow(unused_mut)]
    let mut scope_5360 = writer.prefix("LocalIpv4NetworkCidr");
    if let Some(var_5361) = &input.local_ipv4_network_cidr {
        scope_5360.string(var_5361);
    }
    #[allow(unused_mut)]
    let mut scope_5362 = writer.prefix("RemoteIpv4NetworkCidr");
    if let Some(var_5363) = &input.remote_ipv4_network_cidr {
        scope_5362.string(var_5363);
    }
    #[allow(unused_mut)]
    let mut scope_5364 = writer.prefix("LocalIpv6NetworkCidr");
    if let Some(var_5365) = &input.local_ipv6_network_cidr {
        scope_5364.string(var_5365);
    }
    #[allow(unused_mut)]
    let mut scope_5366 = writer.prefix("RemoteIpv6NetworkCidr");
    if let Some(var_5367) = &input.remote_ipv6_network_cidr {
        scope_5366.string(var_5367);
    }
    #[allow(unused_mut)]
    let mut scope_5368 = writer.prefix("DryRun");
    if let Some(var_5369) = &input.dry_run {
        scope_5368.boolean(*var_5369);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpn_tunnel_certificate(
    input: &crate::input::ModifyVpnTunnelCertificateInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyVpnTunnelCertificate", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5370 = writer.prefix("VpnConnectionId");
    if let Some(var_5371) = &input.vpn_connection_id {
        scope_5370.string(var_5371);
    }
    #[allow(unused_mut)]
    let mut scope_5372 = writer.prefix("VpnTunnelOutsideIpAddress");
    if let Some(var_5373) = &input.vpn_tunnel_outside_ip_address {
        scope_5372.string(var_5373);
    }
    #[allow(unused_mut)]
    let mut scope_5374 = writer.prefix("DryRun");
    if let Some(var_5375) = &input.dry_run {
        scope_5374.boolean(*var_5375);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpn_tunnel_options(
    input: &crate::input::ModifyVpnTunnelOptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyVpnTunnelOptions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5376 = writer.prefix("VpnConnectionId");
    if let Some(var_5377) = &input.vpn_connection_id {
        scope_5376.string(var_5377);
    }
    #[allow(unused_mut)]
    let mut scope_5378 = writer.prefix("VpnTunnelOutsideIpAddress");
    if let Some(var_5379) = &input.vpn_tunnel_outside_ip_address {
        scope_5378.string(var_5379);
    }
    #[allow(unused_mut)]
    let mut scope_5380 = writer.prefix("TunnelOptions");
    if let Some(var_5381) = &input.tunnel_options {
        crate::query_ser::serialize_structure_crate_model_modify_vpn_tunnel_options_specification(
            scope_5380, var_5381,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5382 = writer.prefix("DryRun");
    if let Some(var_5383) = &input.dry_run {
        scope_5382.boolean(*var_5383);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_monitor_instances(
    input: &crate::input::MonitorInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "MonitorInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5384 = writer.prefix("InstanceId");
    if let Some(var_5385) = &input.instance_ids {
        let mut list_5387 = scope_5384.start_list(true, Some("InstanceId"));
        for item_5386 in var_5385 {
            #[allow(unused_mut)]
            let mut entry_5388 = list_5387.entry();
            entry_5388.string(item_5386);
        }
        list_5387.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5389 = writer.prefix("DryRun");
    if let Some(var_5390) = &input.dry_run {
        scope_5389.boolean(*var_5390);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_move_address_to_vpc(
    input: &crate::input::MoveAddressToVpcInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "MoveAddressToVpc", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5391 = writer.prefix("DryRun");
    if let Some(var_5392) = &input.dry_run {
        scope_5391.boolean(*var_5392);
    }
    #[allow(unused_mut)]
    let mut scope_5393 = writer.prefix("PublicIp");
    if let Some(var_5394) = &input.public_ip {
        scope_5393.string(var_5394);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_move_byoip_cidr_to_ipam(
    input: &crate::input::MoveByoipCidrToIpamInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "MoveByoipCidrToIpam", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5395 = writer.prefix("DryRun");
    if let Some(var_5396) = &input.dry_run {
        scope_5395.boolean(*var_5396);
    }
    #[allow(unused_mut)]
    let mut scope_5397 = writer.prefix("Cidr");
    if let Some(var_5398) = &input.cidr {
        scope_5397.string(var_5398);
    }
    #[allow(unused_mut)]
    let mut scope_5399 = writer.prefix("IpamPoolId");
    if let Some(var_5400) = &input.ipam_pool_id {
        scope_5399.string(var_5400);
    }
    #[allow(unused_mut)]
    let mut scope_5401 = writer.prefix("IpamPoolOwner");
    if let Some(var_5402) = &input.ipam_pool_owner {
        scope_5401.string(var_5402);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_provision_byoip_cidr(
    input: &crate::input::ProvisionByoipCidrInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ProvisionByoipCidr", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5403 = writer.prefix("Cidr");
    if let Some(var_5404) = &input.cidr {
        scope_5403.string(var_5404);
    }
    #[allow(unused_mut)]
    let mut scope_5405 = writer.prefix("CidrAuthorizationContext");
    if let Some(var_5406) = &input.cidr_authorization_context {
        crate::query_ser::serialize_structure_crate_model_cidr_authorization_context(
            scope_5405, var_5406,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5407 = writer.prefix("PubliclyAdvertisable");
    if let Some(var_5408) = &input.publicly_advertisable {
        scope_5407.boolean(*var_5408);
    }
    #[allow(unused_mut)]
    let mut scope_5409 = writer.prefix("Description");
    if let Some(var_5410) = &input.description {
        scope_5409.string(var_5410);
    }
    #[allow(unused_mut)]
    let mut scope_5411 = writer.prefix("DryRun");
    if let Some(var_5412) = &input.dry_run {
        scope_5411.boolean(*var_5412);
    }
    #[allow(unused_mut)]
    let mut scope_5413 = writer.prefix("PoolTagSpecification");
    if let Some(var_5414) = &input.pool_tag_specifications {
        let mut list_5416 = scope_5413.start_list(true, Some("item"));
        for item_5415 in var_5414 {
            #[allow(unused_mut)]
            let mut entry_5417 = list_5416.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_5417, item_5415,
            )?;
        }
        list_5416.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5418 = writer.prefix("MultiRegion");
    if let Some(var_5419) = &input.multi_region {
        scope_5418.boolean(*var_5419);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_provision_ipam_pool_cidr(
    input: &crate::input::ProvisionIpamPoolCidrInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ProvisionIpamPoolCidr", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5420 = writer.prefix("DryRun");
    if let Some(var_5421) = &input.dry_run {
        scope_5420.boolean(*var_5421);
    }
    #[allow(unused_mut)]
    let mut scope_5422 = writer.prefix("IpamPoolId");
    if let Some(var_5423) = &input.ipam_pool_id {
        scope_5422.string(var_5423);
    }
    #[allow(unused_mut)]
    let mut scope_5424 = writer.prefix("Cidr");
    if let Some(var_5425) = &input.cidr {
        scope_5424.string(var_5425);
    }
    #[allow(unused_mut)]
    let mut scope_5426 = writer.prefix("CidrAuthorizationContext");
    if let Some(var_5427) = &input.cidr_authorization_context {
        crate::query_ser::serialize_structure_crate_model_ipam_cidr_authorization_context(
            scope_5426, var_5427,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_provision_public_ipv4_pool_cidr(
    input: &crate::input::ProvisionPublicIpv4PoolCidrInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ProvisionPublicIpv4PoolCidr", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5428 = writer.prefix("DryRun");
    if let Some(var_5429) = &input.dry_run {
        scope_5428.boolean(*var_5429);
    }
    #[allow(unused_mut)]
    let mut scope_5430 = writer.prefix("IpamPoolId");
    if let Some(var_5431) = &input.ipam_pool_id {
        scope_5430.string(var_5431);
    }
    #[allow(unused_mut)]
    let mut scope_5432 = writer.prefix("PoolId");
    if let Some(var_5433) = &input.pool_id {
        scope_5432.string(var_5433);
    }
    #[allow(unused_mut)]
    let mut scope_5434 = writer.prefix("NetmaskLength");
    if let Some(var_5435) = &input.netmask_length {
        scope_5434.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5435).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_purchase_host_reservation(
    input: &crate::input::PurchaseHostReservationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "PurchaseHostReservation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5436 = writer.prefix("ClientToken");
    if let Some(var_5437) = &input.client_token {
        scope_5436.string(var_5437);
    }
    #[allow(unused_mut)]
    let mut scope_5438 = writer.prefix("CurrencyCode");
    if let Some(var_5439) = &input.currency_code {
        scope_5438.string(var_5439.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5440 = writer.prefix("HostIdSet");
    if let Some(var_5441) = &input.host_id_set {
        let mut list_5443 = scope_5440.start_list(true, Some("item"));
        for item_5442 in var_5441 {
            #[allow(unused_mut)]
            let mut entry_5444 = list_5443.entry();
            entry_5444.string(item_5442);
        }
        list_5443.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5445 = writer.prefix("LimitPrice");
    if let Some(var_5446) = &input.limit_price {
        scope_5445.string(var_5446);
    }
    #[allow(unused_mut)]
    let mut scope_5447 = writer.prefix("OfferingId");
    if let Some(var_5448) = &input.offering_id {
        scope_5447.string(var_5448);
    }
    #[allow(unused_mut)]
    let mut scope_5449 = writer.prefix("TagSpecification");
    if let Some(var_5450) = &input.tag_specifications {
        let mut list_5452 = scope_5449.start_list(true, Some("item"));
        for item_5451 in var_5450 {
            #[allow(unused_mut)]
            let mut entry_5453 = list_5452.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_5453, item_5451,
            )?;
        }
        list_5452.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_purchase_reserved_instances_offering(
    input: &crate::input::PurchaseReservedInstancesOfferingInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "PurchaseReservedInstancesOffering",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5454 = writer.prefix("InstanceCount");
    if let Some(var_5455) = &input.instance_count {
        scope_5454.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5455).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5456 = writer.prefix("ReservedInstancesOfferingId");
    if let Some(var_5457) = &input.reserved_instances_offering_id {
        scope_5456.string(var_5457);
    }
    #[allow(unused_mut)]
    let mut scope_5458 = writer.prefix("DryRun");
    if let Some(var_5459) = &input.dry_run {
        scope_5458.boolean(*var_5459);
    }
    #[allow(unused_mut)]
    let mut scope_5460 = writer.prefix("LimitPrice");
    if let Some(var_5461) = &input.limit_price {
        crate::query_ser::serialize_structure_crate_model_reserved_instance_limit_price(
            scope_5460, var_5461,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5462 = writer.prefix("PurchaseTime");
    if let Some(var_5463) = &input.purchase_time {
        scope_5462.date_time(var_5463, aws_smithy_types::date_time::Format::DateTime)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_purchase_scheduled_instances(
    input: &crate::input::PurchaseScheduledInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "PurchaseScheduledInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5464 = writer.prefix("ClientToken");
    if let Some(var_5465) = &input.client_token {
        scope_5464.string(var_5465);
    }
    #[allow(unused_mut)]
    let mut scope_5466 = writer.prefix("DryRun");
    if let Some(var_5467) = &input.dry_run {
        scope_5466.boolean(*var_5467);
    }
    #[allow(unused_mut)]
    let mut scope_5468 = writer.prefix("PurchaseRequest");
    if let Some(var_5469) = &input.purchase_requests {
        let mut list_5471 = scope_5468.start_list(true, Some("PurchaseRequest"));
        for item_5470 in var_5469 {
            #[allow(unused_mut)]
            let mut entry_5472 = list_5471.entry();
            crate::query_ser::serialize_structure_crate_model_purchase_request(
                entry_5472, item_5470,
            )?;
        }
        list_5471.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reboot_instances(
    input: &crate::input::RebootInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "RebootInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5473 = writer.prefix("InstanceId");
    if let Some(var_5474) = &input.instance_ids {
        let mut list_5476 = scope_5473.start_list(true, Some("InstanceId"));
        for item_5475 in var_5474 {
            #[allow(unused_mut)]
            let mut entry_5477 = list_5476.entry();
            entry_5477.string(item_5475);
        }
        list_5476.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5478 = writer.prefix("DryRun");
    if let Some(var_5479) = &input.dry_run {
        scope_5478.boolean(*var_5479);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_register_image(
    input: &crate::input::RegisterImageInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "RegisterImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5480 = writer.prefix("ImageLocation");
    if let Some(var_5481) = &input.image_location {
        scope_5480.string(var_5481);
    }
    #[allow(unused_mut)]
    let mut scope_5482 = writer.prefix("Architecture");
    if let Some(var_5483) = &input.architecture {
        scope_5482.string(var_5483.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5484 = writer.prefix("BlockDeviceMapping");
    if let Some(var_5485) = &input.block_device_mappings {
        let mut list_5487 = scope_5484.start_list(true, Some("BlockDeviceMapping"));
        for item_5486 in var_5485 {
            #[allow(unused_mut)]
            let mut entry_5488 = list_5487.entry();
            crate::query_ser::serialize_structure_crate_model_block_device_mapping(
                entry_5488, item_5486,
            )?;
        }
        list_5487.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5489 = writer.prefix("Description");
    if let Some(var_5490) = &input.description {
        scope_5489.string(var_5490);
    }
    #[allow(unused_mut)]
    let mut scope_5491 = writer.prefix("DryRun");
    if let Some(var_5492) = &input.dry_run {
        scope_5491.boolean(*var_5492);
    }
    #[allow(unused_mut)]
    let mut scope_5493 = writer.prefix("EnaSupport");
    if let Some(var_5494) = &input.ena_support {
        scope_5493.boolean(*var_5494);
    }
    #[allow(unused_mut)]
    let mut scope_5495 = writer.prefix("KernelId");
    if let Some(var_5496) = &input.kernel_id {
        scope_5495.string(var_5496);
    }
    #[allow(unused_mut)]
    let mut scope_5497 = writer.prefix("Name");
    if let Some(var_5498) = &input.name {
        scope_5497.string(var_5498);
    }
    #[allow(unused_mut)]
    let mut scope_5499 = writer.prefix("BillingProduct");
    if let Some(var_5500) = &input.billing_products {
        let mut list_5502 = scope_5499.start_list(true, Some("item"));
        for item_5501 in var_5500 {
            #[allow(unused_mut)]
            let mut entry_5503 = list_5502.entry();
            entry_5503.string(item_5501);
        }
        list_5502.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5504 = writer.prefix("RamdiskId");
    if let Some(var_5505) = &input.ramdisk_id {
        scope_5504.string(var_5505);
    }
    #[allow(unused_mut)]
    let mut scope_5506 = writer.prefix("RootDeviceName");
    if let Some(var_5507) = &input.root_device_name {
        scope_5506.string(var_5507);
    }
    #[allow(unused_mut)]
    let mut scope_5508 = writer.prefix("SriovNetSupport");
    if let Some(var_5509) = &input.sriov_net_support {
        scope_5508.string(var_5509);
    }
    #[allow(unused_mut)]
    let mut scope_5510 = writer.prefix("VirtualizationType");
    if let Some(var_5511) = &input.virtualization_type {
        scope_5510.string(var_5511);
    }
    #[allow(unused_mut)]
    let mut scope_5512 = writer.prefix("BootMode");
    if let Some(var_5513) = &input.boot_mode {
        scope_5512.string(var_5513.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_register_instance_event_notification_attributes(
    input: &crate::input::RegisterInstanceEventNotificationAttributesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "RegisterInstanceEventNotificationAttributes",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5514 = writer.prefix("DryRun");
    if let Some(var_5515) = &input.dry_run {
        scope_5514.boolean(*var_5515);
    }
    #[allow(unused_mut)]
    let mut scope_5516 = writer.prefix("InstanceTagAttribute");
    if let Some(var_5517) = &input.instance_tag_attribute {
        crate::query_ser::serialize_structure_crate_model_register_instance_tag_attribute_request(
            scope_5516, var_5517,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_register_transit_gateway_multicast_group_members(
    input: &crate::input::RegisterTransitGatewayMulticastGroupMembersInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "RegisterTransitGatewayMulticastGroupMembers",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5518 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_5519) = &input.transit_gateway_multicast_domain_id {
        scope_5518.string(var_5519);
    }
    #[allow(unused_mut)]
    let mut scope_5520 = writer.prefix("GroupIpAddress");
    if let Some(var_5521) = &input.group_ip_address {
        scope_5520.string(var_5521);
    }
    #[allow(unused_mut)]
    let mut scope_5522 = writer.prefix("NetworkInterfaceIds");
    if let Some(var_5523) = &input.network_interface_ids {
        let mut list_5525 = scope_5522.start_list(true, Some("item"));
        for item_5524 in var_5523 {
            #[allow(unused_mut)]
            let mut entry_5526 = list_5525.entry();
            entry_5526.string(item_5524);
        }
        list_5525.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5527 = writer.prefix("DryRun");
    if let Some(var_5528) = &input.dry_run {
        scope_5527.boolean(*var_5528);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_register_transit_gateway_multicast_group_sources(
    input: &crate::input::RegisterTransitGatewayMulticastGroupSourcesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "RegisterTransitGatewayMulticastGroupSources",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5529 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_5530) = &input.transit_gateway_multicast_domain_id {
        scope_5529.string(var_5530);
    }
    #[allow(unused_mut)]
    let mut scope_5531 = writer.prefix("GroupIpAddress");
    if let Some(var_5532) = &input.group_ip_address {
        scope_5531.string(var_5532);
    }
    #[allow(unused_mut)]
    let mut scope_5533 = writer.prefix("NetworkInterfaceIds");
    if let Some(var_5534) = &input.network_interface_ids {
        let mut list_5536 = scope_5533.start_list(true, Some("item"));
        for item_5535 in var_5534 {
            #[allow(unused_mut)]
            let mut entry_5537 = list_5536.entry();
            entry_5537.string(item_5535);
        }
        list_5536.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5538 = writer.prefix("DryRun");
    if let Some(var_5539) = &input.dry_run {
        scope_5538.boolean(*var_5539);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reject_transit_gateway_multicast_domain_associations(
    input: &crate::input::RejectTransitGatewayMulticastDomainAssociationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "RejectTransitGatewayMulticastDomainAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5540 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_5541) = &input.transit_gateway_multicast_domain_id {
        scope_5540.string(var_5541);
    }
    #[allow(unused_mut)]
    let mut scope_5542 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_5543) = &input.transit_gateway_attachment_id {
        scope_5542.string(var_5543);
    }
    #[allow(unused_mut)]
    let mut scope_5544 = writer.prefix("SubnetIds");
    if let Some(var_5545) = &input.subnet_ids {
        let mut list_5547 = scope_5544.start_list(true, Some("item"));
        for item_5546 in var_5545 {
            #[allow(unused_mut)]
            let mut entry_5548 = list_5547.entry();
            entry_5548.string(item_5546);
        }
        list_5547.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5549 = writer.prefix("DryRun");
    if let Some(var_5550) = &input.dry_run {
        scope_5549.boolean(*var_5550);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reject_transit_gateway_peering_attachment(
    input: &crate::input::RejectTransitGatewayPeeringAttachmentInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "RejectTransitGatewayPeeringAttachment",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5551 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_5552) = &input.transit_gateway_attachment_id {
        scope_5551.string(var_5552);
    }
    #[allow(unused_mut)]
    let mut scope_5553 = writer.prefix("DryRun");
    if let Some(var_5554) = &input.dry_run {
        scope_5553.boolean(*var_5554);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reject_transit_gateway_vpc_attachment(
    input: &crate::input::RejectTransitGatewayVpcAttachmentInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "RejectTransitGatewayVpcAttachment",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5555 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_5556) = &input.transit_gateway_attachment_id {
        scope_5555.string(var_5556);
    }
    #[allow(unused_mut)]
    let mut scope_5557 = writer.prefix("DryRun");
    if let Some(var_5558) = &input.dry_run {
        scope_5557.boolean(*var_5558);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reject_vpc_endpoint_connections(
    input: &crate::input::RejectVpcEndpointConnectionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RejectVpcEndpointConnections", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5559 = writer.prefix("DryRun");
    if let Some(var_5560) = &input.dry_run {
        scope_5559.boolean(*var_5560);
    }
    #[allow(unused_mut)]
    let mut scope_5561 = writer.prefix("ServiceId");
    if let Some(var_5562) = &input.service_id {
        scope_5561.string(var_5562);
    }
    #[allow(unused_mut)]
    let mut scope_5563 = writer.prefix("VpcEndpointId");
    if let Some(var_5564) = &input.vpc_endpoint_ids {
        let mut list_5566 = scope_5563.start_list(true, Some("item"));
        for item_5565 in var_5564 {
            #[allow(unused_mut)]
            let mut entry_5567 = list_5566.entry();
            entry_5567.string(item_5565);
        }
        list_5566.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reject_vpc_peering_connection(
    input: &crate::input::RejectVpcPeeringConnectionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RejectVpcPeeringConnection", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5568 = writer.prefix("DryRun");
    if let Some(var_5569) = &input.dry_run {
        scope_5568.boolean(*var_5569);
    }
    #[allow(unused_mut)]
    let mut scope_5570 = writer.prefix("VpcPeeringConnectionId");
    if let Some(var_5571) = &input.vpc_peering_connection_id {
        scope_5570.string(var_5571);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_release_address(
    input: &crate::input::ReleaseAddressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ReleaseAddress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5572 = writer.prefix("AllocationId");
    if let Some(var_5573) = &input.allocation_id {
        scope_5572.string(var_5573);
    }
    #[allow(unused_mut)]
    let mut scope_5574 = writer.prefix("PublicIp");
    if let Some(var_5575) = &input.public_ip {
        scope_5574.string(var_5575);
    }
    #[allow(unused_mut)]
    let mut scope_5576 = writer.prefix("NetworkBorderGroup");
    if let Some(var_5577) = &input.network_border_group {
        scope_5576.string(var_5577);
    }
    #[allow(unused_mut)]
    let mut scope_5578 = writer.prefix("DryRun");
    if let Some(var_5579) = &input.dry_run {
        scope_5578.boolean(*var_5579);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_release_hosts(
    input: &crate::input::ReleaseHostsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ReleaseHosts", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5580 = writer.prefix("HostId");
    if let Some(var_5581) = &input.host_ids {
        let mut list_5583 = scope_5580.start_list(true, Some("item"));
        for item_5582 in var_5581 {
            #[allow(unused_mut)]
            let mut entry_5584 = list_5583.entry();
            entry_5584.string(item_5582);
        }
        list_5583.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_release_ipam_pool_allocation(
    input: &crate::input::ReleaseIpamPoolAllocationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ReleaseIpamPoolAllocation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5585 = writer.prefix("DryRun");
    if let Some(var_5586) = &input.dry_run {
        scope_5585.boolean(*var_5586);
    }
    #[allow(unused_mut)]
    let mut scope_5587 = writer.prefix("IpamPoolId");
    if let Some(var_5588) = &input.ipam_pool_id {
        scope_5587.string(var_5588);
    }
    #[allow(unused_mut)]
    let mut scope_5589 = writer.prefix("Cidr");
    if let Some(var_5590) = &input.cidr {
        scope_5589.string(var_5590);
    }
    #[allow(unused_mut)]
    let mut scope_5591 = writer.prefix("IpamPoolAllocationId");
    if let Some(var_5592) = &input.ipam_pool_allocation_id {
        scope_5591.string(var_5592);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_replace_iam_instance_profile_association(
    input: &crate::input::ReplaceIamInstanceProfileAssociationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ReplaceIamInstanceProfileAssociation",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5593 = writer.prefix("IamInstanceProfile");
    if let Some(var_5594) = &input.iam_instance_profile {
        crate::query_ser::serialize_structure_crate_model_iam_instance_profile_specification(
            scope_5593, var_5594,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5595 = writer.prefix("AssociationId");
    if let Some(var_5596) = &input.association_id {
        scope_5595.string(var_5596);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_replace_network_acl_association(
    input: &crate::input::ReplaceNetworkAclAssociationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ReplaceNetworkAclAssociation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5597 = writer.prefix("AssociationId");
    if let Some(var_5598) = &input.association_id {
        scope_5597.string(var_5598);
    }
    #[allow(unused_mut)]
    let mut scope_5599 = writer.prefix("DryRun");
    if let Some(var_5600) = &input.dry_run {
        scope_5599.boolean(*var_5600);
    }
    #[allow(unused_mut)]
    let mut scope_5601 = writer.prefix("NetworkAclId");
    if let Some(var_5602) = &input.network_acl_id {
        scope_5601.string(var_5602);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_replace_network_acl_entry(
    input: &crate::input::ReplaceNetworkAclEntryInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ReplaceNetworkAclEntry", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5603 = writer.prefix("CidrBlock");
    if let Some(var_5604) = &input.cidr_block {
        scope_5603.string(var_5604);
    }
    #[allow(unused_mut)]
    let mut scope_5605 = writer.prefix("DryRun");
    if let Some(var_5606) = &input.dry_run {
        scope_5605.boolean(*var_5606);
    }
    #[allow(unused_mut)]
    let mut scope_5607 = writer.prefix("Egress");
    if let Some(var_5608) = &input.egress {
        scope_5607.boolean(*var_5608);
    }
    #[allow(unused_mut)]
    let mut scope_5609 = writer.prefix("Icmp");
    if let Some(var_5610) = &input.icmp_type_code {
        crate::query_ser::serialize_structure_crate_model_icmp_type_code(scope_5609, var_5610)?;
    }
    #[allow(unused_mut)]
    let mut scope_5611 = writer.prefix("Ipv6CidrBlock");
    if let Some(var_5612) = &input.ipv6_cidr_block {
        scope_5611.string(var_5612);
    }
    #[allow(unused_mut)]
    let mut scope_5613 = writer.prefix("NetworkAclId");
    if let Some(var_5614) = &input.network_acl_id {
        scope_5613.string(var_5614);
    }
    #[allow(unused_mut)]
    let mut scope_5615 = writer.prefix("PortRange");
    if let Some(var_5616) = &input.port_range {
        crate::query_ser::serialize_structure_crate_model_port_range(scope_5615, var_5616)?;
    }
    #[allow(unused_mut)]
    let mut scope_5617 = writer.prefix("Protocol");
    if let Some(var_5618) = &input.protocol {
        scope_5617.string(var_5618);
    }
    #[allow(unused_mut)]
    let mut scope_5619 = writer.prefix("RuleAction");
    if let Some(var_5620) = &input.rule_action {
        scope_5619.string(var_5620.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5621 = writer.prefix("RuleNumber");
    if let Some(var_5622) = &input.rule_number {
        scope_5621.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5622).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_replace_route(
    input: &crate::input::ReplaceRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ReplaceRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5623 = writer.prefix("DestinationCidrBlock");
    if let Some(var_5624) = &input.destination_cidr_block {
        scope_5623.string(var_5624);
    }
    #[allow(unused_mut)]
    let mut scope_5625 = writer.prefix("DestinationIpv6CidrBlock");
    if let Some(var_5626) = &input.destination_ipv6_cidr_block {
        scope_5625.string(var_5626);
    }
    #[allow(unused_mut)]
    let mut scope_5627 = writer.prefix("DestinationPrefixListId");
    if let Some(var_5628) = &input.destination_prefix_list_id {
        scope_5627.string(var_5628);
    }
    #[allow(unused_mut)]
    let mut scope_5629 = writer.prefix("DryRun");
    if let Some(var_5630) = &input.dry_run {
        scope_5629.boolean(*var_5630);
    }
    #[allow(unused_mut)]
    let mut scope_5631 = writer.prefix("VpcEndpointId");
    if let Some(var_5632) = &input.vpc_endpoint_id {
        scope_5631.string(var_5632);
    }
    #[allow(unused_mut)]
    let mut scope_5633 = writer.prefix("EgressOnlyInternetGatewayId");
    if let Some(var_5634) = &input.egress_only_internet_gateway_id {
        scope_5633.string(var_5634);
    }
    #[allow(unused_mut)]
    let mut scope_5635 = writer.prefix("GatewayId");
    if let Some(var_5636) = &input.gateway_id {
        scope_5635.string(var_5636);
    }
    #[allow(unused_mut)]
    let mut scope_5637 = writer.prefix("InstanceId");
    if let Some(var_5638) = &input.instance_id {
        scope_5637.string(var_5638);
    }
    #[allow(unused_mut)]
    let mut scope_5639 = writer.prefix("LocalTarget");
    if let Some(var_5640) = &input.local_target {
        scope_5639.boolean(*var_5640);
    }
    #[allow(unused_mut)]
    let mut scope_5641 = writer.prefix("NatGatewayId");
    if let Some(var_5642) = &input.nat_gateway_id {
        scope_5641.string(var_5642);
    }
    #[allow(unused_mut)]
    let mut scope_5643 = writer.prefix("TransitGatewayId");
    if let Some(var_5644) = &input.transit_gateway_id {
        scope_5643.string(var_5644);
    }
    #[allow(unused_mut)]
    let mut scope_5645 = writer.prefix("LocalGatewayId");
    if let Some(var_5646) = &input.local_gateway_id {
        scope_5645.string(var_5646);
    }
    #[allow(unused_mut)]
    let mut scope_5647 = writer.prefix("CarrierGatewayId");
    if let Some(var_5648) = &input.carrier_gateway_id {
        scope_5647.string(var_5648);
    }
    #[allow(unused_mut)]
    let mut scope_5649 = writer.prefix("NetworkInterfaceId");
    if let Some(var_5650) = &input.network_interface_id {
        scope_5649.string(var_5650);
    }
    #[allow(unused_mut)]
    let mut scope_5651 = writer.prefix("RouteTableId");
    if let Some(var_5652) = &input.route_table_id {
        scope_5651.string(var_5652);
    }
    #[allow(unused_mut)]
    let mut scope_5653 = writer.prefix("VpcPeeringConnectionId");
    if let Some(var_5654) = &input.vpc_peering_connection_id {
        scope_5653.string(var_5654);
    }
    #[allow(unused_mut)]
    let mut scope_5655 = writer.prefix("CoreNetworkArn");
    if let Some(var_5656) = &input.core_network_arn {
        scope_5655.string(var_5656);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_replace_route_table_association(
    input: &crate::input::ReplaceRouteTableAssociationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ReplaceRouteTableAssociation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5657 = writer.prefix("AssociationId");
    if let Some(var_5658) = &input.association_id {
        scope_5657.string(var_5658);
    }
    #[allow(unused_mut)]
    let mut scope_5659 = writer.prefix("DryRun");
    if let Some(var_5660) = &input.dry_run {
        scope_5659.boolean(*var_5660);
    }
    #[allow(unused_mut)]
    let mut scope_5661 = writer.prefix("RouteTableId");
    if let Some(var_5662) = &input.route_table_id {
        scope_5661.string(var_5662);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_replace_transit_gateway_route(
    input: &crate::input::ReplaceTransitGatewayRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ReplaceTransitGatewayRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5663 = writer.prefix("DestinationCidrBlock");
    if let Some(var_5664) = &input.destination_cidr_block {
        scope_5663.string(var_5664);
    }
    #[allow(unused_mut)]
    let mut scope_5665 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_5666) = &input.transit_gateway_route_table_id {
        scope_5665.string(var_5666);
    }
    #[allow(unused_mut)]
    let mut scope_5667 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_5668) = &input.transit_gateway_attachment_id {
        scope_5667.string(var_5668);
    }
    #[allow(unused_mut)]
    let mut scope_5669 = writer.prefix("Blackhole");
    if let Some(var_5670) = &input.blackhole {
        scope_5669.boolean(*var_5670);
    }
    #[allow(unused_mut)]
    let mut scope_5671 = writer.prefix("DryRun");
    if let Some(var_5672) = &input.dry_run {
        scope_5671.boolean(*var_5672);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_report_instance_status(
    input: &crate::input::ReportInstanceStatusInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ReportInstanceStatus", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5673 = writer.prefix("Description");
    if let Some(var_5674) = &input.description {
        scope_5673.string(var_5674);
    }
    #[allow(unused_mut)]
    let mut scope_5675 = writer.prefix("DryRun");
    if let Some(var_5676) = &input.dry_run {
        scope_5675.boolean(*var_5676);
    }
    #[allow(unused_mut)]
    let mut scope_5677 = writer.prefix("EndTime");
    if let Some(var_5678) = &input.end_time {
        scope_5677.date_time(var_5678, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_5679 = writer.prefix("InstanceId");
    if let Some(var_5680) = &input.instances {
        let mut list_5682 = scope_5679.start_list(true, Some("InstanceId"));
        for item_5681 in var_5680 {
            #[allow(unused_mut)]
            let mut entry_5683 = list_5682.entry();
            entry_5683.string(item_5681);
        }
        list_5682.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5684 = writer.prefix("ReasonCode");
    if let Some(var_5685) = &input.reason_codes {
        let mut list_5687 = scope_5684.start_list(true, Some("item"));
        for item_5686 in var_5685 {
            #[allow(unused_mut)]
            let mut entry_5688 = list_5687.entry();
            entry_5688.string(item_5686.as_str());
        }
        list_5687.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5689 = writer.prefix("StartTime");
    if let Some(var_5690) = &input.start_time {
        scope_5689.date_time(var_5690, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_5691 = writer.prefix("Status");
    if let Some(var_5692) = &input.status {
        scope_5691.string(var_5692.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_request_spot_fleet(
    input: &crate::input::RequestSpotFleetInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "RequestSpotFleet", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5693 = writer.prefix("DryRun");
    if let Some(var_5694) = &input.dry_run {
        scope_5693.boolean(*var_5694);
    }
    #[allow(unused_mut)]
    let mut scope_5695 = writer.prefix("SpotFleetRequestConfig");
    if let Some(var_5696) = &input.spot_fleet_request_config {
        crate::query_ser::serialize_structure_crate_model_spot_fleet_request_config_data(
            scope_5695, var_5696,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_request_spot_instances(
    input: &crate::input::RequestSpotInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RequestSpotInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5697 = writer.prefix("AvailabilityZoneGroup");
    if let Some(var_5698) = &input.availability_zone_group {
        scope_5697.string(var_5698);
    }
    #[allow(unused_mut)]
    let mut scope_5699 = writer.prefix("BlockDurationMinutes");
    if let Some(var_5700) = &input.block_duration_minutes {
        scope_5699.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5700).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5701 = writer.prefix("ClientToken");
    if let Some(var_5702) = &input.client_token {
        scope_5701.string(var_5702);
    }
    #[allow(unused_mut)]
    let mut scope_5703 = writer.prefix("DryRun");
    if let Some(var_5704) = &input.dry_run {
        scope_5703.boolean(*var_5704);
    }
    #[allow(unused_mut)]
    let mut scope_5705 = writer.prefix("InstanceCount");
    if let Some(var_5706) = &input.instance_count {
        scope_5705.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5706).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5707 = writer.prefix("LaunchGroup");
    if let Some(var_5708) = &input.launch_group {
        scope_5707.string(var_5708);
    }
    #[allow(unused_mut)]
    let mut scope_5709 = writer.prefix("LaunchSpecification");
    if let Some(var_5710) = &input.launch_specification {
        crate::query_ser::serialize_structure_crate_model_request_spot_launch_specification(
            scope_5709, var_5710,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5711 = writer.prefix("SpotPrice");
    if let Some(var_5712) = &input.spot_price {
        scope_5711.string(var_5712);
    }
    #[allow(unused_mut)]
    let mut scope_5713 = writer.prefix("Type");
    if let Some(var_5714) = &input.r#type {
        scope_5713.string(var_5714.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5715 = writer.prefix("ValidFrom");
    if let Some(var_5716) = &input.valid_from {
        scope_5715.date_time(var_5716, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_5717 = writer.prefix("ValidUntil");
    if let Some(var_5718) = &input.valid_until {
        scope_5717.date_time(var_5718, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_5719 = writer.prefix("TagSpecification");
    if let Some(var_5720) = &input.tag_specifications {
        let mut list_5722 = scope_5719.start_list(true, Some("item"));
        for item_5721 in var_5720 {
            #[allow(unused_mut)]
            let mut entry_5723 = list_5722.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_5723, item_5721,
            )?;
        }
        list_5722.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5724 = writer.prefix("InstanceInterruptionBehavior");
    if let Some(var_5725) = &input.instance_interruption_behavior {
        scope_5724.string(var_5725.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reset_address_attribute(
    input: &crate::input::ResetAddressAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ResetAddressAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5726 = writer.prefix("AllocationId");
    if let Some(var_5727) = &input.allocation_id {
        scope_5726.string(var_5727);
    }
    #[allow(unused_mut)]
    let mut scope_5728 = writer.prefix("Attribute");
    if let Some(var_5729) = &input.attribute {
        scope_5728.string(var_5729.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5730 = writer.prefix("DryRun");
    if let Some(var_5731) = &input.dry_run {
        scope_5730.boolean(*var_5731);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reset_ebs_default_kms_key_id(
    input: &crate::input::ResetEbsDefaultKmsKeyIdInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ResetEbsDefaultKmsKeyId", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5732 = writer.prefix("DryRun");
    if let Some(var_5733) = &input.dry_run {
        scope_5732.boolean(*var_5733);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reset_fpga_image_attribute(
    input: &crate::input::ResetFpgaImageAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ResetFpgaImageAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5734 = writer.prefix("DryRun");
    if let Some(var_5735) = &input.dry_run {
        scope_5734.boolean(*var_5735);
    }
    #[allow(unused_mut)]
    let mut scope_5736 = writer.prefix("FpgaImageId");
    if let Some(var_5737) = &input.fpga_image_id {
        scope_5736.string(var_5737);
    }
    #[allow(unused_mut)]
    let mut scope_5738 = writer.prefix("Attribute");
    if let Some(var_5739) = &input.attribute {
        scope_5738.string(var_5739.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reset_image_attribute(
    input: &crate::input::ResetImageAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ResetImageAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5740 = writer.prefix("Attribute");
    if let Some(var_5741) = &input.attribute {
        scope_5740.string(var_5741.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5742 = writer.prefix("ImageId");
    if let Some(var_5743) = &input.image_id {
        scope_5742.string(var_5743);
    }
    #[allow(unused_mut)]
    let mut scope_5744 = writer.prefix("DryRun");
    if let Some(var_5745) = &input.dry_run {
        scope_5744.boolean(*var_5745);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reset_instance_attribute(
    input: &crate::input::ResetInstanceAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ResetInstanceAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5746 = writer.prefix("Attribute");
    if let Some(var_5747) = &input.attribute {
        scope_5746.string(var_5747.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5748 = writer.prefix("DryRun");
    if let Some(var_5749) = &input.dry_run {
        scope_5748.boolean(*var_5749);
    }
    #[allow(unused_mut)]
    let mut scope_5750 = writer.prefix("InstanceId");
    if let Some(var_5751) = &input.instance_id {
        scope_5750.string(var_5751);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reset_network_interface_attribute(
    input: &crate::input::ResetNetworkInterfaceAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ResetNetworkInterfaceAttribute",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5752 = writer.prefix("DryRun");
    if let Some(var_5753) = &input.dry_run {
        scope_5752.boolean(*var_5753);
    }
    #[allow(unused_mut)]
    let mut scope_5754 = writer.prefix("NetworkInterfaceId");
    if let Some(var_5755) = &input.network_interface_id {
        scope_5754.string(var_5755);
    }
    #[allow(unused_mut)]
    let mut scope_5756 = writer.prefix("SourceDestCheck");
    if let Some(var_5757) = &input.source_dest_check {
        scope_5756.string(var_5757);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reset_snapshot_attribute(
    input: &crate::input::ResetSnapshotAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ResetSnapshotAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5758 = writer.prefix("Attribute");
    if let Some(var_5759) = &input.attribute {
        scope_5758.string(var_5759.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5760 = writer.prefix("SnapshotId");
    if let Some(var_5761) = &input.snapshot_id {
        scope_5760.string(var_5761);
    }
    #[allow(unused_mut)]
    let mut scope_5762 = writer.prefix("DryRun");
    if let Some(var_5763) = &input.dry_run {
        scope_5762.boolean(*var_5763);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_restore_address_to_classic(
    input: &crate::input::RestoreAddressToClassicInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RestoreAddressToClassic", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5764 = writer.prefix("DryRun");
    if let Some(var_5765) = &input.dry_run {
        scope_5764.boolean(*var_5765);
    }
    #[allow(unused_mut)]
    let mut scope_5766 = writer.prefix("PublicIp");
    if let Some(var_5767) = &input.public_ip {
        scope_5766.string(var_5767);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_restore_image_from_recycle_bin(
    input: &crate::input::RestoreImageFromRecycleBinInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RestoreImageFromRecycleBin", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5768 = writer.prefix("ImageId");
    if let Some(var_5769) = &input.image_id {
        scope_5768.string(var_5769);
    }
    #[allow(unused_mut)]
    let mut scope_5770 = writer.prefix("DryRun");
    if let Some(var_5771) = &input.dry_run {
        scope_5770.boolean(*var_5771);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_restore_managed_prefix_list_version(
    input: &crate::input::RestoreManagedPrefixListVersionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "RestoreManagedPrefixListVersion",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5772 = writer.prefix("DryRun");
    if let Some(var_5773) = &input.dry_run {
        scope_5772.boolean(*var_5773);
    }
    #[allow(unused_mut)]
    let mut scope_5774 = writer.prefix("PrefixListId");
    if let Some(var_5775) = &input.prefix_list_id {
        scope_5774.string(var_5775);
    }
    #[allow(unused_mut)]
    let mut scope_5776 = writer.prefix("PreviousVersion");
    if let Some(var_5777) = &input.previous_version {
        scope_5776.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5777).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5778 = writer.prefix("CurrentVersion");
    if let Some(var_5779) = &input.current_version {
        scope_5778.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5779).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_restore_snapshot_from_recycle_bin(
    input: &crate::input::RestoreSnapshotFromRecycleBinInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RestoreSnapshotFromRecycleBin", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5780 = writer.prefix("SnapshotId");
    if let Some(var_5781) = &input.snapshot_id {
        scope_5780.string(var_5781);
    }
    #[allow(unused_mut)]
    let mut scope_5782 = writer.prefix("DryRun");
    if let Some(var_5783) = &input.dry_run {
        scope_5782.boolean(*var_5783);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_restore_snapshot_tier(
    input: &crate::input::RestoreSnapshotTierInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RestoreSnapshotTier", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5784 = writer.prefix("SnapshotId");
    if let Some(var_5785) = &input.snapshot_id {
        scope_5784.string(var_5785);
    }
    #[allow(unused_mut)]
    let mut scope_5786 = writer.prefix("TemporaryRestoreDays");
    if let Some(var_5787) = &input.temporary_restore_days {
        scope_5786.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5787).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5788 = writer.prefix("PermanentRestore");
    if let Some(var_5789) = &input.permanent_restore {
        scope_5788.boolean(*var_5789);
    }
    #[allow(unused_mut)]
    let mut scope_5790 = writer.prefix("DryRun");
    if let Some(var_5791) = &input.dry_run {
        scope_5790.boolean(*var_5791);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_revoke_client_vpn_ingress(
    input: &crate::input::RevokeClientVpnIngressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RevokeClientVpnIngress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5792 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_5793) = &input.client_vpn_endpoint_id {
        scope_5792.string(var_5793);
    }
    #[allow(unused_mut)]
    let mut scope_5794 = writer.prefix("TargetNetworkCidr");
    if let Some(var_5795) = &input.target_network_cidr {
        scope_5794.string(var_5795);
    }
    #[allow(unused_mut)]
    let mut scope_5796 = writer.prefix("AccessGroupId");
    if let Some(var_5797) = &input.access_group_id {
        scope_5796.string(var_5797);
    }
    #[allow(unused_mut)]
    let mut scope_5798 = writer.prefix("RevokeAllGroups");
    if let Some(var_5799) = &input.revoke_all_groups {
        scope_5798.boolean(*var_5799);
    }
    #[allow(unused_mut)]
    let mut scope_5800 = writer.prefix("DryRun");
    if let Some(var_5801) = &input.dry_run {
        scope_5800.boolean(*var_5801);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_revoke_security_group_egress(
    input: &crate::input::RevokeSecurityGroupEgressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RevokeSecurityGroupEgress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5802 = writer.prefix("DryRun");
    if let Some(var_5803) = &input.dry_run {
        scope_5802.boolean(*var_5803);
    }
    #[allow(unused_mut)]
    let mut scope_5804 = writer.prefix("GroupId");
    if let Some(var_5805) = &input.group_id {
        scope_5804.string(var_5805);
    }
    #[allow(unused_mut)]
    let mut scope_5806 = writer.prefix("IpPermissions");
    if let Some(var_5807) = &input.ip_permissions {
        let mut list_5809 = scope_5806.start_list(true, Some("item"));
        for item_5808 in var_5807 {
            #[allow(unused_mut)]
            let mut entry_5810 = list_5809.entry();
            crate::query_ser::serialize_structure_crate_model_ip_permission(entry_5810, item_5808)?;
        }
        list_5809.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5811 = writer.prefix("SecurityGroupRuleId");
    if let Some(var_5812) = &input.security_group_rule_ids {
        let mut list_5814 = scope_5811.start_list(true, Some("item"));
        for item_5813 in var_5812 {
            #[allow(unused_mut)]
            let mut entry_5815 = list_5814.entry();
            entry_5815.string(item_5813);
        }
        list_5814.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5816 = writer.prefix("CidrIp");
    if let Some(var_5817) = &input.cidr_ip {
        scope_5816.string(var_5817);
    }
    #[allow(unused_mut)]
    let mut scope_5818 = writer.prefix("FromPort");
    if let Some(var_5819) = &input.from_port {
        scope_5818.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5819).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5820 = writer.prefix("IpProtocol");
    if let Some(var_5821) = &input.ip_protocol {
        scope_5820.string(var_5821);
    }
    #[allow(unused_mut)]
    let mut scope_5822 = writer.prefix("ToPort");
    if let Some(var_5823) = &input.to_port {
        scope_5822.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5823).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5824 = writer.prefix("SourceSecurityGroupName");
    if let Some(var_5825) = &input.source_security_group_name {
        scope_5824.string(var_5825);
    }
    #[allow(unused_mut)]
    let mut scope_5826 = writer.prefix("SourceSecurityGroupOwnerId");
    if let Some(var_5827) = &input.source_security_group_owner_id {
        scope_5826.string(var_5827);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_revoke_security_group_ingress(
    input: &crate::input::RevokeSecurityGroupIngressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RevokeSecurityGroupIngress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5828 = writer.prefix("CidrIp");
    if let Some(var_5829) = &input.cidr_ip {
        scope_5828.string(var_5829);
    }
    #[allow(unused_mut)]
    let mut scope_5830 = writer.prefix("FromPort");
    if let Some(var_5831) = &input.from_port {
        scope_5830.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5831).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5832 = writer.prefix("GroupId");
    if let Some(var_5833) = &input.group_id {
        scope_5832.string(var_5833);
    }
    #[allow(unused_mut)]
    let mut scope_5834 = writer.prefix("GroupName");
    if let Some(var_5835) = &input.group_name {
        scope_5834.string(var_5835);
    }
    #[allow(unused_mut)]
    let mut scope_5836 = writer.prefix("IpPermissions");
    if let Some(var_5837) = &input.ip_permissions {
        let mut list_5839 = scope_5836.start_list(true, Some("item"));
        for item_5838 in var_5837 {
            #[allow(unused_mut)]
            let mut entry_5840 = list_5839.entry();
            crate::query_ser::serialize_structure_crate_model_ip_permission(entry_5840, item_5838)?;
        }
        list_5839.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5841 = writer.prefix("IpProtocol");
    if let Some(var_5842) = &input.ip_protocol {
        scope_5841.string(var_5842);
    }
    #[allow(unused_mut)]
    let mut scope_5843 = writer.prefix("SourceSecurityGroupName");
    if let Some(var_5844) = &input.source_security_group_name {
        scope_5843.string(var_5844);
    }
    #[allow(unused_mut)]
    let mut scope_5845 = writer.prefix("SourceSecurityGroupOwnerId");
    if let Some(var_5846) = &input.source_security_group_owner_id {
        scope_5845.string(var_5846);
    }
    #[allow(unused_mut)]
    let mut scope_5847 = writer.prefix("ToPort");
    if let Some(var_5848) = &input.to_port {
        scope_5847.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5848).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5849 = writer.prefix("DryRun");
    if let Some(var_5850) = &input.dry_run {
        scope_5849.boolean(*var_5850);
    }
    #[allow(unused_mut)]
    let mut scope_5851 = writer.prefix("SecurityGroupRuleId");
    if let Some(var_5852) = &input.security_group_rule_ids {
        let mut list_5854 = scope_5851.start_list(true, Some("item"));
        for item_5853 in var_5852 {
            #[allow(unused_mut)]
            let mut entry_5855 = list_5854.entry();
            entry_5855.string(item_5853);
        }
        list_5854.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_run_instances(
    input: &crate::input::RunInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "RunInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5856 = writer.prefix("BlockDeviceMapping");
    if let Some(var_5857) = &input.block_device_mappings {
        let mut list_5859 = scope_5856.start_list(true, Some("BlockDeviceMapping"));
        for item_5858 in var_5857 {
            #[allow(unused_mut)]
            let mut entry_5860 = list_5859.entry();
            crate::query_ser::serialize_structure_crate_model_block_device_mapping(
                entry_5860, item_5858,
            )?;
        }
        list_5859.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5861 = writer.prefix("ImageId");
    if let Some(var_5862) = &input.image_id {
        scope_5861.string(var_5862);
    }
    #[allow(unused_mut)]
    let mut scope_5863 = writer.prefix("InstanceType");
    if let Some(var_5864) = &input.instance_type {
        scope_5863.string(var_5864.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5865 = writer.prefix("Ipv6AddressCount");
    if let Some(var_5866) = &input.ipv6_address_count {
        scope_5865.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5866).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5867 = writer.prefix("Ipv6Address");
    if let Some(var_5868) = &input.ipv6_addresses {
        let mut list_5870 = scope_5867.start_list(true, Some("item"));
        for item_5869 in var_5868 {
            #[allow(unused_mut)]
            let mut entry_5871 = list_5870.entry();
            crate::query_ser::serialize_structure_crate_model_instance_ipv6_address(
                entry_5871, item_5869,
            )?;
        }
        list_5870.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5872 = writer.prefix("KernelId");
    if let Some(var_5873) = &input.kernel_id {
        scope_5872.string(var_5873);
    }
    #[allow(unused_mut)]
    let mut scope_5874 = writer.prefix("KeyName");
    if let Some(var_5875) = &input.key_name {
        scope_5874.string(var_5875);
    }
    #[allow(unused_mut)]
    let mut scope_5876 = writer.prefix("MaxCount");
    if let Some(var_5877) = &input.max_count {
        scope_5876.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5877).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5878 = writer.prefix("MinCount");
    if let Some(var_5879) = &input.min_count {
        scope_5878.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5879).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5880 = writer.prefix("Monitoring");
    if let Some(var_5881) = &input.monitoring {
        crate::query_ser::serialize_structure_crate_model_run_instances_monitoring_enabled(
            scope_5880, var_5881,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5882 = writer.prefix("Placement");
    if let Some(var_5883) = &input.placement {
        crate::query_ser::serialize_structure_crate_model_placement(scope_5882, var_5883)?;
    }
    #[allow(unused_mut)]
    let mut scope_5884 = writer.prefix("RamdiskId");
    if let Some(var_5885) = &input.ramdisk_id {
        scope_5884.string(var_5885);
    }
    #[allow(unused_mut)]
    let mut scope_5886 = writer.prefix("SecurityGroupId");
    if let Some(var_5887) = &input.security_group_ids {
        let mut list_5889 = scope_5886.start_list(true, Some("SecurityGroupId"));
        for item_5888 in var_5887 {
            #[allow(unused_mut)]
            let mut entry_5890 = list_5889.entry();
            entry_5890.string(item_5888);
        }
        list_5889.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5891 = writer.prefix("SecurityGroup");
    if let Some(var_5892) = &input.security_groups {
        let mut list_5894 = scope_5891.start_list(true, Some("SecurityGroup"));
        for item_5893 in var_5892 {
            #[allow(unused_mut)]
            let mut entry_5895 = list_5894.entry();
            entry_5895.string(item_5893);
        }
        list_5894.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5896 = writer.prefix("SubnetId");
    if let Some(var_5897) = &input.subnet_id {
        scope_5896.string(var_5897);
    }
    #[allow(unused_mut)]
    let mut scope_5898 = writer.prefix("UserData");
    if let Some(var_5899) = &input.user_data {
        scope_5898.string(var_5899);
    }
    #[allow(unused_mut)]
    let mut scope_5900 = writer.prefix("AdditionalInfo");
    if let Some(var_5901) = &input.additional_info {
        scope_5900.string(var_5901);
    }
    #[allow(unused_mut)]
    let mut scope_5902 = writer.prefix("ClientToken");
    if let Some(var_5903) = &input.client_token {
        scope_5902.string(var_5903);
    }
    #[allow(unused_mut)]
    let mut scope_5904 = writer.prefix("DisableApiTermination");
    if let Some(var_5905) = &input.disable_api_termination {
        scope_5904.boolean(*var_5905);
    }
    #[allow(unused_mut)]
    let mut scope_5906 = writer.prefix("DryRun");
    if let Some(var_5907) = &input.dry_run {
        scope_5906.boolean(*var_5907);
    }
    #[allow(unused_mut)]
    let mut scope_5908 = writer.prefix("EbsOptimized");
    if let Some(var_5909) = &input.ebs_optimized {
        scope_5908.boolean(*var_5909);
    }
    #[allow(unused_mut)]
    let mut scope_5910 = writer.prefix("IamInstanceProfile");
    if let Some(var_5911) = &input.iam_instance_profile {
        crate::query_ser::serialize_structure_crate_model_iam_instance_profile_specification(
            scope_5910, var_5911,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5912 = writer.prefix("InstanceInitiatedShutdownBehavior");
    if let Some(var_5913) = &input.instance_initiated_shutdown_behavior {
        scope_5912.string(var_5913.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5914 = writer.prefix("NetworkInterface");
    if let Some(var_5915) = &input.network_interfaces {
        let mut list_5917 = scope_5914.start_list(true, Some("item"));
        for item_5916 in var_5915 {
            #[allow(unused_mut)]
            let mut entry_5918 = list_5917.entry();
            crate::query_ser::serialize_structure_crate_model_instance_network_interface_specification(entry_5918, item_5916)?;
        }
        list_5917.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5919 = writer.prefix("PrivateIpAddress");
    if let Some(var_5920) = &input.private_ip_address {
        scope_5919.string(var_5920);
    }
    #[allow(unused_mut)]
    let mut scope_5921 = writer.prefix("ElasticGpuSpecification");
    if let Some(var_5922) = &input.elastic_gpu_specification {
        let mut list_5924 = scope_5921.start_list(true, Some("item"));
        for item_5923 in var_5922 {
            #[allow(unused_mut)]
            let mut entry_5925 = list_5924.entry();
            crate::query_ser::serialize_structure_crate_model_elastic_gpu_specification(
                entry_5925, item_5923,
            )?;
        }
        list_5924.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5926 = writer.prefix("ElasticInferenceAccelerator");
    if let Some(var_5927) = &input.elastic_inference_accelerators {
        let mut list_5929 = scope_5926.start_list(true, Some("item"));
        for item_5928 in var_5927 {
            #[allow(unused_mut)]
            let mut entry_5930 = list_5929.entry();
            crate::query_ser::serialize_structure_crate_model_elastic_inference_accelerator(
                entry_5930, item_5928,
            )?;
        }
        list_5929.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5931 = writer.prefix("TagSpecification");
    if let Some(var_5932) = &input.tag_specifications {
        let mut list_5934 = scope_5931.start_list(true, Some("item"));
        for item_5933 in var_5932 {
            #[allow(unused_mut)]
            let mut entry_5935 = list_5934.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_5935, item_5933,
            )?;
        }
        list_5934.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5936 = writer.prefix("LaunchTemplate");
    if let Some(var_5937) = &input.launch_template {
        crate::query_ser::serialize_structure_crate_model_launch_template_specification(
            scope_5936, var_5937,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5938 = writer.prefix("InstanceMarketOptions");
    if let Some(var_5939) = &input.instance_market_options {
        crate::query_ser::serialize_structure_crate_model_instance_market_options_request(
            scope_5938, var_5939,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5940 = writer.prefix("CreditSpecification");
    if let Some(var_5941) = &input.credit_specification {
        crate::query_ser::serialize_structure_crate_model_credit_specification_request(
            scope_5940, var_5941,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5942 = writer.prefix("CpuOptions");
    if let Some(var_5943) = &input.cpu_options {
        crate::query_ser::serialize_structure_crate_model_cpu_options_request(
            scope_5942, var_5943,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5944 = writer.prefix("CapacityReservationSpecification");
    if let Some(var_5945) = &input.capacity_reservation_specification {
        crate::query_ser::serialize_structure_crate_model_capacity_reservation_specification(
            scope_5944, var_5945,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5946 = writer.prefix("HibernationOptions");
    if let Some(var_5947) = &input.hibernation_options {
        crate::query_ser::serialize_structure_crate_model_hibernation_options_request(
            scope_5946, var_5947,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5948 = writer.prefix("LicenseSpecification");
    if let Some(var_5949) = &input.license_specifications {
        let mut list_5951 = scope_5948.start_list(true, Some("item"));
        for item_5950 in var_5949 {
            #[allow(unused_mut)]
            let mut entry_5952 = list_5951.entry();
            crate::query_ser::serialize_structure_crate_model_license_configuration_request(
                entry_5952, item_5950,
            )?;
        }
        list_5951.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5953 = writer.prefix("MetadataOptions");
    if let Some(var_5954) = &input.metadata_options {
        crate::query_ser::serialize_structure_crate_model_instance_metadata_options_request(
            scope_5953, var_5954,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5955 = writer.prefix("EnclaveOptions");
    if let Some(var_5956) = &input.enclave_options {
        crate::query_ser::serialize_structure_crate_model_enclave_options_request(
            scope_5955, var_5956,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5957 = writer.prefix("PrivateDnsNameOptions");
    if let Some(var_5958) = &input.private_dns_name_options {
        crate::query_ser::serialize_structure_crate_model_private_dns_name_options_request(
            scope_5957, var_5958,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5959 = writer.prefix("MaintenanceOptions");
    if let Some(var_5960) = &input.maintenance_options {
        crate::query_ser::serialize_structure_crate_model_instance_maintenance_options_request(
            scope_5959, var_5960,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_run_scheduled_instances(
    input: &crate::input::RunScheduledInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RunScheduledInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5961 = writer.prefix("ClientToken");
    if let Some(var_5962) = &input.client_token {
        scope_5961.string(var_5962);
    }
    #[allow(unused_mut)]
    let mut scope_5963 = writer.prefix("DryRun");
    if let Some(var_5964) = &input.dry_run {
        scope_5963.boolean(*var_5964);
    }
    #[allow(unused_mut)]
    let mut scope_5965 = writer.prefix("InstanceCount");
    if let Some(var_5966) = &input.instance_count {
        scope_5965.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5966).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5967 = writer.prefix("LaunchSpecification");
    if let Some(var_5968) = &input.launch_specification {
        crate::query_ser::serialize_structure_crate_model_scheduled_instances_launch_specification(
            scope_5967, var_5968,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5969 = writer.prefix("ScheduledInstanceId");
    if let Some(var_5970) = &input.scheduled_instance_id {
        scope_5969.string(var_5970);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_search_local_gateway_routes(
    input: &crate::input::SearchLocalGatewayRoutesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "SearchLocalGatewayRoutes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5971 = writer.prefix("LocalGatewayRouteTableId");
    if let Some(var_5972) = &input.local_gateway_route_table_id {
        scope_5971.string(var_5972);
    }
    #[allow(unused_mut)]
    let mut scope_5973 = writer.prefix("Filter");
    if let Some(var_5974) = &input.filters {
        let mut list_5976 = scope_5973.start_list(true, Some("Filter"));
        for item_5975 in var_5974 {
            #[allow(unused_mut)]
            let mut entry_5977 = list_5976.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_5977, item_5975)?;
        }
        list_5976.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5978 = writer.prefix("MaxResults");
    if let Some(var_5979) = &input.max_results {
        scope_5978.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5979).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5980 = writer.prefix("NextToken");
    if let Some(var_5981) = &input.next_token {
        scope_5980.string(var_5981);
    }
    #[allow(unused_mut)]
    let mut scope_5982 = writer.prefix("DryRun");
    if let Some(var_5983) = &input.dry_run {
        scope_5982.boolean(*var_5983);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_search_transit_gateway_multicast_groups(
    input: &crate::input::SearchTransitGatewayMulticastGroupsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "SearchTransitGatewayMulticastGroups",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5984 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_5985) = &input.transit_gateway_multicast_domain_id {
        scope_5984.string(var_5985);
    }
    #[allow(unused_mut)]
    let mut scope_5986 = writer.prefix("Filter");
    if let Some(var_5987) = &input.filters {
        let mut list_5989 = scope_5986.start_list(true, Some("Filter"));
        for item_5988 in var_5987 {
            #[allow(unused_mut)]
            let mut entry_5990 = list_5989.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_5990, item_5988)?;
        }
        list_5989.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5991 = writer.prefix("MaxResults");
    if let Some(var_5992) = &input.max_results {
        scope_5991.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5992).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5993 = writer.prefix("NextToken");
    if let Some(var_5994) = &input.next_token {
        scope_5993.string(var_5994);
    }
    #[allow(unused_mut)]
    let mut scope_5995 = writer.prefix("DryRun");
    if let Some(var_5996) = &input.dry_run {
        scope_5995.boolean(*var_5996);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_search_transit_gateway_routes(
    input: &crate::input::SearchTransitGatewayRoutesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "SearchTransitGatewayRoutes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5997 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_5998) = &input.transit_gateway_route_table_id {
        scope_5997.string(var_5998);
    }
    #[allow(unused_mut)]
    let mut scope_5999 = writer.prefix("Filter");
    if let Some(var_6000) = &input.filters {
        let mut list_6002 = scope_5999.start_list(true, Some("Filter"));
        for item_6001 in var_6000 {
            #[allow(unused_mut)]
            let mut entry_6003 = list_6002.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_6003, item_6001)?;
        }
        list_6002.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6004 = writer.prefix("MaxResults");
    if let Some(var_6005) = &input.max_results {
        scope_6004.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_6005).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_6006 = writer.prefix("DryRun");
    if let Some(var_6007) = &input.dry_run {
        scope_6006.boolean(*var_6007);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_send_diagnostic_interrupt(
    input: &crate::input::SendDiagnosticInterruptInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "SendDiagnosticInterrupt", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6008 = writer.prefix("InstanceId");
    if let Some(var_6009) = &input.instance_id {
        scope_6008.string(var_6009);
    }
    #[allow(unused_mut)]
    let mut scope_6010 = writer.prefix("DryRun");
    if let Some(var_6011) = &input.dry_run {
        scope_6010.boolean(*var_6011);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_start_instances(
    input: &crate::input::StartInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "StartInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6012 = writer.prefix("InstanceId");
    if let Some(var_6013) = &input.instance_ids {
        let mut list_6015 = scope_6012.start_list(true, Some("InstanceId"));
        for item_6014 in var_6013 {
            #[allow(unused_mut)]
            let mut entry_6016 = list_6015.entry();
            entry_6016.string(item_6014);
        }
        list_6015.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6017 = writer.prefix("AdditionalInfo");
    if let Some(var_6018) = &input.additional_info {
        scope_6017.string(var_6018);
    }
    #[allow(unused_mut)]
    let mut scope_6019 = writer.prefix("DryRun");
    if let Some(var_6020) = &input.dry_run {
        scope_6019.boolean(*var_6020);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_start_network_insights_access_scope_analysis(
    input: &crate::input::StartNetworkInsightsAccessScopeAnalysisInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "StartNetworkInsightsAccessScopeAnalysis",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_6021 = writer.prefix("NetworkInsightsAccessScopeId");
    if let Some(var_6022) = &input.network_insights_access_scope_id {
        scope_6021.string(var_6022);
    }
    #[allow(unused_mut)]
    let mut scope_6023 = writer.prefix("DryRun");
    if let Some(var_6024) = &input.dry_run {
        scope_6023.boolean(*var_6024);
    }
    #[allow(unused_mut)]
    let mut scope_6025 = writer.prefix("TagSpecification");
    if let Some(var_6026) = &input.tag_specifications {
        let mut list_6028 = scope_6025.start_list(true, Some("item"));
        for item_6027 in var_6026 {
            #[allow(unused_mut)]
            let mut entry_6029 = list_6028.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_6029, item_6027,
            )?;
        }
        list_6028.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6030 = writer.prefix("ClientToken");
    if let Some(var_6031) = &input.client_token {
        scope_6030.string(var_6031);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_start_network_insights_analysis(
    input: &crate::input::StartNetworkInsightsAnalysisInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "StartNetworkInsightsAnalysis", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6032 = writer.prefix("NetworkInsightsPathId");
    if let Some(var_6033) = &input.network_insights_path_id {
        scope_6032.string(var_6033);
    }
    #[allow(unused_mut)]
    let mut scope_6034 = writer.prefix("FilterInArn");
    if let Some(var_6035) = &input.filter_in_arns {
        let mut list_6037 = scope_6034.start_list(true, Some("item"));
        for item_6036 in var_6035 {
            #[allow(unused_mut)]
            let mut entry_6038 = list_6037.entry();
            entry_6038.string(item_6036);
        }
        list_6037.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6039 = writer.prefix("DryRun");
    if let Some(var_6040) = &input.dry_run {
        scope_6039.boolean(*var_6040);
    }
    #[allow(unused_mut)]
    let mut scope_6041 = writer.prefix("TagSpecification");
    if let Some(var_6042) = &input.tag_specifications {
        let mut list_6044 = scope_6041.start_list(true, Some("item"));
        for item_6043 in var_6042 {
            #[allow(unused_mut)]
            let mut entry_6045 = list_6044.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_6045, item_6043,
            )?;
        }
        list_6044.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6046 = writer.prefix("ClientToken");
    if let Some(var_6047) = &input.client_token {
        scope_6046.string(var_6047);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_start_vpc_endpoint_service_private_dns_verification(
    input: &crate::input::StartVpcEndpointServicePrivateDnsVerificationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "StartVpcEndpointServicePrivateDnsVerification",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_6048 = writer.prefix("DryRun");
    if let Some(var_6049) = &input.dry_run {
        scope_6048.boolean(*var_6049);
    }
    #[allow(unused_mut)]
    let mut scope_6050 = writer.prefix("ServiceId");
    if let Some(var_6051) = &input.service_id {
        scope_6050.string(var_6051);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_stop_instances(
    input: &crate::input::StopInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "StopInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6052 = writer.prefix("InstanceId");
    if let Some(var_6053) = &input.instance_ids {
        let mut list_6055 = scope_6052.start_list(true, Some("InstanceId"));
        for item_6054 in var_6053 {
            #[allow(unused_mut)]
            let mut entry_6056 = list_6055.entry();
            entry_6056.string(item_6054);
        }
        list_6055.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6057 = writer.prefix("Hibernate");
    if let Some(var_6058) = &input.hibernate {
        scope_6057.boolean(*var_6058);
    }
    #[allow(unused_mut)]
    let mut scope_6059 = writer.prefix("DryRun");
    if let Some(var_6060) = &input.dry_run {
        scope_6059.boolean(*var_6060);
    }
    #[allow(unused_mut)]
    let mut scope_6061 = writer.prefix("Force");
    if let Some(var_6062) = &input.force {
        scope_6061.boolean(*var_6062);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_terminate_client_vpn_connections(
    input: &crate::input::TerminateClientVpnConnectionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "TerminateClientVpnConnections", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6063 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_6064) = &input.client_vpn_endpoint_id {
        scope_6063.string(var_6064);
    }
    #[allow(unused_mut)]
    let mut scope_6065 = writer.prefix("ConnectionId");
    if let Some(var_6066) = &input.connection_id {
        scope_6065.string(var_6066);
    }
    #[allow(unused_mut)]
    let mut scope_6067 = writer.prefix("Username");
    if let Some(var_6068) = &input.username {
        scope_6067.string(var_6068);
    }
    #[allow(unused_mut)]
    let mut scope_6069 = writer.prefix("DryRun");
    if let Some(var_6070) = &input.dry_run {
        scope_6069.boolean(*var_6070);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_terminate_instances(
    input: &crate::input::TerminateInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "TerminateInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6071 = writer.prefix("InstanceId");
    if let Some(var_6072) = &input.instance_ids {
        let mut list_6074 = scope_6071.start_list(true, Some("InstanceId"));
        for item_6073 in var_6072 {
            #[allow(unused_mut)]
            let mut entry_6075 = list_6074.entry();
            entry_6075.string(item_6073);
        }
        list_6074.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6076 = writer.prefix("DryRun");
    if let Some(var_6077) = &input.dry_run {
        scope_6076.boolean(*var_6077);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_unassign_ipv6_addresses(
    input: &crate::input::UnassignIpv6AddressesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "UnassignIpv6Addresses", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6078 = writer.prefix("Ipv6Addresses");
    if let Some(var_6079) = &input.ipv6_addresses {
        let mut list_6081 = scope_6078.start_list(true, Some("item"));
        for item_6080 in var_6079 {
            #[allow(unused_mut)]
            let mut entry_6082 = list_6081.entry();
            entry_6082.string(item_6080);
        }
        list_6081.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6083 = writer.prefix("Ipv6Prefix");
    if let Some(var_6084) = &input.ipv6_prefixes {
        let mut list_6086 = scope_6083.start_list(true, Some("item"));
        for item_6085 in var_6084 {
            #[allow(unused_mut)]
            let mut entry_6087 = list_6086.entry();
            entry_6087.string(item_6085);
        }
        list_6086.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6088 = writer.prefix("NetworkInterfaceId");
    if let Some(var_6089) = &input.network_interface_id {
        scope_6088.string(var_6089);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_unassign_private_ip_addresses(
    input: &crate::input::UnassignPrivateIpAddressesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "UnassignPrivateIpAddresses", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6090 = writer.prefix("NetworkInterfaceId");
    if let Some(var_6091) = &input.network_interface_id {
        scope_6090.string(var_6091);
    }
    #[allow(unused_mut)]
    let mut scope_6092 = writer.prefix("PrivateIpAddress");
    if let Some(var_6093) = &input.private_ip_addresses {
        let mut list_6095 = scope_6092.start_list(true, Some("PrivateIpAddress"));
        for item_6094 in var_6093 {
            #[allow(unused_mut)]
            let mut entry_6096 = list_6095.entry();
            entry_6096.string(item_6094);
        }
        list_6095.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6097 = writer.prefix("Ipv4Prefix");
    if let Some(var_6098) = &input.ipv4_prefixes {
        let mut list_6100 = scope_6097.start_list(true, Some("item"));
        for item_6099 in var_6098 {
            #[allow(unused_mut)]
            let mut entry_6101 = list_6100.entry();
            entry_6101.string(item_6099);
        }
        list_6100.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_unmonitor_instances(
    input: &crate::input::UnmonitorInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "UnmonitorInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6102 = writer.prefix("InstanceId");
    if let Some(var_6103) = &input.instance_ids {
        let mut list_6105 = scope_6102.start_list(true, Some("InstanceId"));
        for item_6104 in var_6103 {
            #[allow(unused_mut)]
            let mut entry_6106 = list_6105.entry();
            entry_6106.string(item_6104);
        }
        list_6105.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6107 = writer.prefix("DryRun");
    if let Some(var_6108) = &input.dry_run {
        scope_6107.boolean(*var_6108);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_update_security_group_rule_descriptions_egress(
    input: &crate::input::UpdateSecurityGroupRuleDescriptionsEgressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "UpdateSecurityGroupRuleDescriptionsEgress",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_6109 = writer.prefix("DryRun");
    if let Some(var_6110) = &input.dry_run {
        scope_6109.boolean(*var_6110);
    }
    #[allow(unused_mut)]
    let mut scope_6111 = writer.prefix("GroupId");
    if let Some(var_6112) = &input.group_id {
        scope_6111.string(var_6112);
    }
    #[allow(unused_mut)]
    let mut scope_6113 = writer.prefix("GroupName");
    if let Some(var_6114) = &input.group_name {
        scope_6113.string(var_6114);
    }
    #[allow(unused_mut)]
    let mut scope_6115 = writer.prefix("IpPermissions");
    if let Some(var_6116) = &input.ip_permissions {
        let mut list_6118 = scope_6115.start_list(true, Some("item"));
        for item_6117 in var_6116 {
            #[allow(unused_mut)]
            let mut entry_6119 = list_6118.entry();
            crate::query_ser::serialize_structure_crate_model_ip_permission(entry_6119, item_6117)?;
        }
        list_6118.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6120 = writer.prefix("SecurityGroupRuleDescription");
    if let Some(var_6121) = &input.security_group_rule_descriptions {
        let mut list_6123 = scope_6120.start_list(true, Some("item"));
        for item_6122 in var_6121 {
            #[allow(unused_mut)]
            let mut entry_6124 = list_6123.entry();
            crate::query_ser::serialize_structure_crate_model_security_group_rule_description(
                entry_6124, item_6122,
            )?;
        }
        list_6123.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_update_security_group_rule_descriptions_ingress(
    input: &crate::input::UpdateSecurityGroupRuleDescriptionsIngressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "UpdateSecurityGroupRuleDescriptionsIngress",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_6125 = writer.prefix("DryRun");
    if let Some(var_6126) = &input.dry_run {
        scope_6125.boolean(*var_6126);
    }
    #[allow(unused_mut)]
    let mut scope_6127 = writer.prefix("GroupId");
    if let Some(var_6128) = &input.group_id {
        scope_6127.string(var_6128);
    }
    #[allow(unused_mut)]
    let mut scope_6129 = writer.prefix("GroupName");
    if let Some(var_6130) = &input.group_name {
        scope_6129.string(var_6130);
    }
    #[allow(unused_mut)]
    let mut scope_6131 = writer.prefix("IpPermissions");
    if let Some(var_6132) = &input.ip_permissions {
        let mut list_6134 = scope_6131.start_list(true, Some("item"));
        for item_6133 in var_6132 {
            #[allow(unused_mut)]
            let mut entry_6135 = list_6134.entry();
            crate::query_ser::serialize_structure_crate_model_ip_permission(entry_6135, item_6133)?;
        }
        list_6134.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6136 = writer.prefix("SecurityGroupRuleDescription");
    if let Some(var_6137) = &input.security_group_rule_descriptions {
        let mut list_6139 = scope_6136.start_list(true, Some("item"));
        for item_6138 in var_6137 {
            #[allow(unused_mut)]
            let mut entry_6140 = list_6139.entry();
            crate::query_ser::serialize_structure_crate_model_security_group_rule_description(
                entry_6140, item_6138,
            )?;
        }
        list_6139.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_withdraw_byoip_cidr(
    input: &crate::input::WithdrawByoipCidrInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "WithdrawByoipCidr", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6141 = writer.prefix("Cidr");
    if let Some(var_6142) = &input.cidr {
        scope_6141.string(var_6142);
    }
    #[allow(unused_mut)]
    let mut scope_6143 = writer.prefix("DryRun");
    if let Some(var_6144) = &input.dry_run {
        scope_6143.boolean(*var_6144);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}
