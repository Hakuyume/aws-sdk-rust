// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_associate_entities_to_experience_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociateEntitiesToExperienceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1) = &input.id {
        object.key("Id").string(var_1.as_str());
    }
    if let Some(var_2) = &input.index_id {
        object.key("IndexId").string(var_2.as_str());
    }
    if let Some(var_3) = &input.entity_list {
        let mut array_4 = object.key("EntityList").start_array();
        for item_5 in var_3 {
            {
                let mut object_6 = array_4.value().start_object();
                crate::json_ser::serialize_structure_crate_model_entity_configuration(
                    &mut object_6,
                    item_5,
                )?;
                object_6.finish();
            }
        }
        array_4.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_associate_personas_to_entities_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociatePersonasToEntitiesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_7) = &input.id {
        object.key("Id").string(var_7.as_str());
    }
    if let Some(var_8) = &input.index_id {
        object.key("IndexId").string(var_8.as_str());
    }
    if let Some(var_9) = &input.personas {
        let mut array_10 = object.key("Personas").start_array();
        for item_11 in var_9 {
            {
                let mut object_12 = array_10.value().start_object();
                crate::json_ser::serialize_structure_crate_model_entity_persona_configuration(
                    &mut object_12,
                    item_11,
                )?;
                object_12.finish();
            }
        }
        array_10.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_delete_document_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchDeleteDocumentInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_13) = &input.index_id {
        object.key("IndexId").string(var_13.as_str());
    }
    if let Some(var_14) = &input.document_id_list {
        let mut array_15 = object.key("DocumentIdList").start_array();
        for item_16 in var_14 {
            {
                array_15.value().string(item_16.as_str());
            }
        }
        array_15.finish();
    }
    if let Some(var_17) = &input.data_source_sync_job_metric_target {
        let mut object_18 = object.key("DataSourceSyncJobMetricTarget").start_object();
        crate::json_ser::serialize_structure_crate_model_data_source_sync_job_metric_target(
            &mut object_18,
            var_17,
        )?;
        object_18.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_get_document_status_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchGetDocumentStatusInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_19) = &input.index_id {
        object.key("IndexId").string(var_19.as_str());
    }
    if let Some(var_20) = &input.document_info_list {
        let mut array_21 = object.key("DocumentInfoList").start_array();
        for item_22 in var_20 {
            {
                let mut object_23 = array_21.value().start_object();
                crate::json_ser::serialize_structure_crate_model_document_info(
                    &mut object_23,
                    item_22,
                )?;
                object_23.finish();
            }
        }
        array_21.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_put_document_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchPutDocumentInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_24) = &input.index_id {
        object.key("IndexId").string(var_24.as_str());
    }
    if let Some(var_25) = &input.role_arn {
        object.key("RoleArn").string(var_25.as_str());
    }
    if let Some(var_26) = &input.documents {
        let mut array_27 = object.key("Documents").start_array();
        for item_28 in var_26 {
            {
                let mut object_29 = array_27.value().start_object();
                crate::json_ser::serialize_structure_crate_model_document(&mut object_29, item_28)?;
                object_29.finish();
            }
        }
        array_27.finish();
    }
    if let Some(var_30) = &input.custom_document_enrichment_configuration {
        let mut object_31 = object
            .key("CustomDocumentEnrichmentConfiguration")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_custom_document_enrichment_configuration(
            &mut object_31,
            var_30,
        )?;
        object_31.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_clear_query_suggestions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ClearQuerySuggestionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_32) = &input.index_id {
        object.key("IndexId").string(var_32.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_data_source_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDataSourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_33) = &input.name {
        object.key("Name").string(var_33.as_str());
    }
    if let Some(var_34) = &input.index_id {
        object.key("IndexId").string(var_34.as_str());
    }
    if let Some(var_35) = &input.r#type {
        object.key("Type").string(var_35.as_str());
    }
    if let Some(var_36) = &input.configuration {
        let mut object_37 = object.key("Configuration").start_object();
        crate::json_ser::serialize_structure_crate_model_data_source_configuration(
            &mut object_37,
            var_36,
        )?;
        object_37.finish();
    }
    if let Some(var_38) = &input.description {
        object.key("Description").string(var_38.as_str());
    }
    if let Some(var_39) = &input.schedule {
        object.key("Schedule").string(var_39.as_str());
    }
    if let Some(var_40) = &input.role_arn {
        object.key("RoleArn").string(var_40.as_str());
    }
    if let Some(var_41) = &input.tags {
        let mut array_42 = object.key("Tags").start_array();
        for item_43 in var_41 {
            {
                let mut object_44 = array_42.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_44, item_43)?;
                object_44.finish();
            }
        }
        array_42.finish();
    }
    if let Some(var_45) = &input.client_token {
        object.key("ClientToken").string(var_45.as_str());
    }
    if let Some(var_46) = &input.language_code {
        object.key("LanguageCode").string(var_46.as_str());
    }
    if let Some(var_47) = &input.custom_document_enrichment_configuration {
        let mut object_48 = object
            .key("CustomDocumentEnrichmentConfiguration")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_custom_document_enrichment_configuration(
            &mut object_48,
            var_47,
        )?;
        object_48.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_experience_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateExperienceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_49) = &input.name {
        object.key("Name").string(var_49.as_str());
    }
    if let Some(var_50) = &input.index_id {
        object.key("IndexId").string(var_50.as_str());
    }
    if let Some(var_51) = &input.role_arn {
        object.key("RoleArn").string(var_51.as_str());
    }
    if let Some(var_52) = &input.configuration {
        let mut object_53 = object.key("Configuration").start_object();
        crate::json_ser::serialize_structure_crate_model_experience_configuration(
            &mut object_53,
            var_52,
        )?;
        object_53.finish();
    }
    if let Some(var_54) = &input.description {
        object.key("Description").string(var_54.as_str());
    }
    if let Some(var_55) = &input.client_token {
        object.key("ClientToken").string(var_55.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_faq_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateFaqInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_56) = &input.index_id {
        object.key("IndexId").string(var_56.as_str());
    }
    if let Some(var_57) = &input.name {
        object.key("Name").string(var_57.as_str());
    }
    if let Some(var_58) = &input.description {
        object.key("Description").string(var_58.as_str());
    }
    if let Some(var_59) = &input.s3_path {
        let mut object_60 = object.key("S3Path").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_path(&mut object_60, var_59)?;
        object_60.finish();
    }
    if let Some(var_61) = &input.role_arn {
        object.key("RoleArn").string(var_61.as_str());
    }
    if let Some(var_62) = &input.tags {
        let mut array_63 = object.key("Tags").start_array();
        for item_64 in var_62 {
            {
                let mut object_65 = array_63.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_65, item_64)?;
                object_65.finish();
            }
        }
        array_63.finish();
    }
    if let Some(var_66) = &input.file_format {
        object.key("FileFormat").string(var_66.as_str());
    }
    if let Some(var_67) = &input.client_token {
        object.key("ClientToken").string(var_67.as_str());
    }
    if let Some(var_68) = &input.language_code {
        object.key("LanguageCode").string(var_68.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_index_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateIndexInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_69) = &input.name {
        object.key("Name").string(var_69.as_str());
    }
    if let Some(var_70) = &input.edition {
        object.key("Edition").string(var_70.as_str());
    }
    if let Some(var_71) = &input.role_arn {
        object.key("RoleArn").string(var_71.as_str());
    }
    if let Some(var_72) = &input.server_side_encryption_configuration {
        let mut object_73 = object
            .key("ServerSideEncryptionConfiguration")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_server_side_encryption_configuration(
            &mut object_73,
            var_72,
        )?;
        object_73.finish();
    }
    if let Some(var_74) = &input.description {
        object.key("Description").string(var_74.as_str());
    }
    if let Some(var_75) = &input.client_token {
        object.key("ClientToken").string(var_75.as_str());
    }
    if let Some(var_76) = &input.tags {
        let mut array_77 = object.key("Tags").start_array();
        for item_78 in var_76 {
            {
                let mut object_79 = array_77.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_79, item_78)?;
                object_79.finish();
            }
        }
        array_77.finish();
    }
    if let Some(var_80) = &input.user_token_configurations {
        let mut array_81 = object.key("UserTokenConfigurations").start_array();
        for item_82 in var_80 {
            {
                let mut object_83 = array_81.value().start_object();
                crate::json_ser::serialize_structure_crate_model_user_token_configuration(
                    &mut object_83,
                    item_82,
                )?;
                object_83.finish();
            }
        }
        array_81.finish();
    }
    if let Some(var_84) = &input.user_context_policy {
        object.key("UserContextPolicy").string(var_84.as_str());
    }
    if let Some(var_85) = &input.user_group_resolution_configuration {
        let mut object_86 = object
            .key("UserGroupResolutionConfiguration")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_user_group_resolution_configuration(
            &mut object_86,
            var_85,
        )?;
        object_86.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_query_suggestions_block_list_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateQuerySuggestionsBlockListInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_87) = &input.index_id {
        object.key("IndexId").string(var_87.as_str());
    }
    if let Some(var_88) = &input.name {
        object.key("Name").string(var_88.as_str());
    }
    if let Some(var_89) = &input.description {
        object.key("Description").string(var_89.as_str());
    }
    if let Some(var_90) = &input.source_s3_path {
        let mut object_91 = object.key("SourceS3Path").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_path(&mut object_91, var_90)?;
        object_91.finish();
    }
    if let Some(var_92) = &input.client_token {
        object.key("ClientToken").string(var_92.as_str());
    }
    if let Some(var_93) = &input.role_arn {
        object.key("RoleArn").string(var_93.as_str());
    }
    if let Some(var_94) = &input.tags {
        let mut array_95 = object.key("Tags").start_array();
        for item_96 in var_94 {
            {
                let mut object_97 = array_95.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_97, item_96)?;
                object_97.finish();
            }
        }
        array_95.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_thesaurus_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateThesaurusInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_98) = &input.index_id {
        object.key("IndexId").string(var_98.as_str());
    }
    if let Some(var_99) = &input.name {
        object.key("Name").string(var_99.as_str());
    }
    if let Some(var_100) = &input.description {
        object.key("Description").string(var_100.as_str());
    }
    if let Some(var_101) = &input.role_arn {
        object.key("RoleArn").string(var_101.as_str());
    }
    if let Some(var_102) = &input.tags {
        let mut array_103 = object.key("Tags").start_array();
        for item_104 in var_102 {
            {
                let mut object_105 = array_103.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_105, item_104)?;
                object_105.finish();
            }
        }
        array_103.finish();
    }
    if let Some(var_106) = &input.source_s3_path {
        let mut object_107 = object.key("SourceS3Path").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_path(&mut object_107, var_106)?;
        object_107.finish();
    }
    if let Some(var_108) = &input.client_token {
        object.key("ClientToken").string(var_108.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_data_source_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteDataSourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_109) = &input.id {
        object.key("Id").string(var_109.as_str());
    }
    if let Some(var_110) = &input.index_id {
        object.key("IndexId").string(var_110.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_experience_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteExperienceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_111) = &input.id {
        object.key("Id").string(var_111.as_str());
    }
    if let Some(var_112) = &input.index_id {
        object.key("IndexId").string(var_112.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_faq_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteFaqInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_113) = &input.id {
        object.key("Id").string(var_113.as_str());
    }
    if let Some(var_114) = &input.index_id {
        object.key("IndexId").string(var_114.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_index_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteIndexInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_115) = &input.id {
        object.key("Id").string(var_115.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_principal_mapping_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeletePrincipalMappingInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_116) = &input.index_id {
        object.key("IndexId").string(var_116.as_str());
    }
    if let Some(var_117) = &input.data_source_id {
        object.key("DataSourceId").string(var_117.as_str());
    }
    if let Some(var_118) = &input.group_id {
        object.key("GroupId").string(var_118.as_str());
    }
    if let Some(var_119) = &input.ordering_id {
        object.key("OrderingId").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_119).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_query_suggestions_block_list_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteQuerySuggestionsBlockListInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_120) = &input.index_id {
        object.key("IndexId").string(var_120.as_str());
    }
    if let Some(var_121) = &input.id {
        object.key("Id").string(var_121.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_thesaurus_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteThesaurusInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_122) = &input.id {
        object.key("Id").string(var_122.as_str());
    }
    if let Some(var_123) = &input.index_id {
        object.key("IndexId").string(var_123.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_data_source_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeDataSourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_124) = &input.id {
        object.key("Id").string(var_124.as_str());
    }
    if let Some(var_125) = &input.index_id {
        object.key("IndexId").string(var_125.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_experience_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeExperienceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_126) = &input.id {
        object.key("Id").string(var_126.as_str());
    }
    if let Some(var_127) = &input.index_id {
        object.key("IndexId").string(var_127.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_faq_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeFaqInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_128) = &input.id {
        object.key("Id").string(var_128.as_str());
    }
    if let Some(var_129) = &input.index_id {
        object.key("IndexId").string(var_129.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_index_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeIndexInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_130) = &input.id {
        object.key("Id").string(var_130.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_principal_mapping_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribePrincipalMappingInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_131) = &input.index_id {
        object.key("IndexId").string(var_131.as_str());
    }
    if let Some(var_132) = &input.data_source_id {
        object.key("DataSourceId").string(var_132.as_str());
    }
    if let Some(var_133) = &input.group_id {
        object.key("GroupId").string(var_133.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_query_suggestions_block_list_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeQuerySuggestionsBlockListInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_134) = &input.index_id {
        object.key("IndexId").string(var_134.as_str());
    }
    if let Some(var_135) = &input.id {
        object.key("Id").string(var_135.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_query_suggestions_config_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeQuerySuggestionsConfigInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_136) = &input.index_id {
        object.key("IndexId").string(var_136.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_thesaurus_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeThesaurusInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_137) = &input.id {
        object.key("Id").string(var_137.as_str());
    }
    if let Some(var_138) = &input.index_id {
        object.key("IndexId").string(var_138.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_disassociate_entities_from_experience_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DisassociateEntitiesFromExperienceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_139) = &input.id {
        object.key("Id").string(var_139.as_str());
    }
    if let Some(var_140) = &input.index_id {
        object.key("IndexId").string(var_140.as_str());
    }
    if let Some(var_141) = &input.entity_list {
        let mut array_142 = object.key("EntityList").start_array();
        for item_143 in var_141 {
            {
                let mut object_144 = array_142.value().start_object();
                crate::json_ser::serialize_structure_crate_model_entity_configuration(
                    &mut object_144,
                    item_143,
                )?;
                object_144.finish();
            }
        }
        array_142.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_disassociate_personas_from_entities_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DisassociatePersonasFromEntitiesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_145) = &input.id {
        object.key("Id").string(var_145.as_str());
    }
    if let Some(var_146) = &input.index_id {
        object.key("IndexId").string(var_146.as_str());
    }
    if let Some(var_147) = &input.entity_ids {
        let mut array_148 = object.key("EntityIds").start_array();
        for item_149 in var_147 {
            {
                array_148.value().string(item_149.as_str());
            }
        }
        array_148.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_query_suggestions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetQuerySuggestionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_150) = &input.index_id {
        object.key("IndexId").string(var_150.as_str());
    }
    if let Some(var_151) = &input.query_text {
        object.key("QueryText").string(var_151.as_str());
    }
    if let Some(var_152) = &input.max_suggestions_count {
        object.key("MaxSuggestionsCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_152).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_snapshots_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetSnapshotsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_153) = &input.index_id {
        object.key("IndexId").string(var_153.as_str());
    }
    if let Some(var_154) = &input.interval {
        object.key("Interval").string(var_154.as_str());
    }
    if let Some(var_155) = &input.metric_type {
        object.key("MetricType").string(var_155.as_str());
    }
    if let Some(var_156) = &input.next_token {
        object.key("NextToken").string(var_156.as_str());
    }
    if let Some(var_157) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_157).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_data_sources_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListDataSourcesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_158) = &input.index_id {
        object.key("IndexId").string(var_158.as_str());
    }
    if let Some(var_159) = &input.next_token {
        object.key("NextToken").string(var_159.as_str());
    }
    if let Some(var_160) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_160).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_data_source_sync_jobs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListDataSourceSyncJobsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_161) = &input.id {
        object.key("Id").string(var_161.as_str());
    }
    if let Some(var_162) = &input.index_id {
        object.key("IndexId").string(var_162.as_str());
    }
    if let Some(var_163) = &input.next_token {
        object.key("NextToken").string(var_163.as_str());
    }
    if let Some(var_164) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_164).into()),
        );
    }
    if let Some(var_165) = &input.start_time_filter {
        let mut object_166 = object.key("StartTimeFilter").start_object();
        crate::json_ser::serialize_structure_crate_model_time_range(&mut object_166, var_165)?;
        object_166.finish();
    }
    if let Some(var_167) = &input.status_filter {
        object.key("StatusFilter").string(var_167.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_entity_personas_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListEntityPersonasInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_168) = &input.id {
        object.key("Id").string(var_168.as_str());
    }
    if let Some(var_169) = &input.index_id {
        object.key("IndexId").string(var_169.as_str());
    }
    if let Some(var_170) = &input.next_token {
        object.key("NextToken").string(var_170.as_str());
    }
    if let Some(var_171) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_171).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_experience_entities_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListExperienceEntitiesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_172) = &input.id {
        object.key("Id").string(var_172.as_str());
    }
    if let Some(var_173) = &input.index_id {
        object.key("IndexId").string(var_173.as_str());
    }
    if let Some(var_174) = &input.next_token {
        object.key("NextToken").string(var_174.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_experiences_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListExperiencesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_175) = &input.index_id {
        object.key("IndexId").string(var_175.as_str());
    }
    if let Some(var_176) = &input.next_token {
        object.key("NextToken").string(var_176.as_str());
    }
    if let Some(var_177) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_177).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_faqs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListFaqsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_178) = &input.index_id {
        object.key("IndexId").string(var_178.as_str());
    }
    if let Some(var_179) = &input.next_token {
        object.key("NextToken").string(var_179.as_str());
    }
    if let Some(var_180) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_180).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_groups_older_than_ordering_id_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListGroupsOlderThanOrderingIdInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_181) = &input.index_id {
        object.key("IndexId").string(var_181.as_str());
    }
    if let Some(var_182) = &input.data_source_id {
        object.key("DataSourceId").string(var_182.as_str());
    }
    if let Some(var_183) = &input.ordering_id {
        object.key("OrderingId").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_183).into()),
        );
    }
    if let Some(var_184) = &input.next_token {
        object.key("NextToken").string(var_184.as_str());
    }
    if let Some(var_185) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_185).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_indices_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListIndicesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_186) = &input.next_token {
        object.key("NextToken").string(var_186.as_str());
    }
    if let Some(var_187) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_187).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_query_suggestions_block_lists_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListQuerySuggestionsBlockListsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_188) = &input.index_id {
        object.key("IndexId").string(var_188.as_str());
    }
    if let Some(var_189) = &input.next_token {
        object.key("NextToken").string(var_189.as_str());
    }
    if let Some(var_190) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_190).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_tags_for_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTagsForResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_191) = &input.resource_arn {
        object.key("ResourceARN").string(var_191.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_thesauri_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListThesauriInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_192) = &input.index_id {
        object.key("IndexId").string(var_192.as_str());
    }
    if let Some(var_193) = &input.next_token {
        object.key("NextToken").string(var_193.as_str());
    }
    if let Some(var_194) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_194).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_principal_mapping_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutPrincipalMappingInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_195) = &input.index_id {
        object.key("IndexId").string(var_195.as_str());
    }
    if let Some(var_196) = &input.data_source_id {
        object.key("DataSourceId").string(var_196.as_str());
    }
    if let Some(var_197) = &input.group_id {
        object.key("GroupId").string(var_197.as_str());
    }
    if let Some(var_198) = &input.group_members {
        let mut object_199 = object.key("GroupMembers").start_object();
        crate::json_ser::serialize_structure_crate_model_group_members(&mut object_199, var_198)?;
        object_199.finish();
    }
    if let Some(var_200) = &input.ordering_id {
        object.key("OrderingId").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_200).into()),
        );
    }
    if let Some(var_201) = &input.role_arn {
        object.key("RoleArn").string(var_201.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_query_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::QueryInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_202) = &input.index_id {
        object.key("IndexId").string(var_202.as_str());
    }
    if let Some(var_203) = &input.query_text {
        object.key("QueryText").string(var_203.as_str());
    }
    if let Some(var_204) = &input.attribute_filter {
        let mut object_205 = object.key("AttributeFilter").start_object();
        crate::json_ser::serialize_structure_crate_model_attribute_filter(
            &mut object_205,
            var_204,
        )?;
        object_205.finish();
    }
    if let Some(var_206) = &input.facets {
        let mut array_207 = object.key("Facets").start_array();
        for item_208 in var_206 {
            {
                let mut object_209 = array_207.value().start_object();
                crate::json_ser::serialize_structure_crate_model_facet(&mut object_209, item_208)?;
                object_209.finish();
            }
        }
        array_207.finish();
    }
    if let Some(var_210) = &input.requested_document_attributes {
        let mut array_211 = object.key("RequestedDocumentAttributes").start_array();
        for item_212 in var_210 {
            {
                array_211.value().string(item_212.as_str());
            }
        }
        array_211.finish();
    }
    if let Some(var_213) = &input.query_result_type_filter {
        object.key("QueryResultTypeFilter").string(var_213.as_str());
    }
    if let Some(var_214) = &input.document_relevance_override_configurations {
        let mut array_215 = object
            .key("DocumentRelevanceOverrideConfigurations")
            .start_array();
        for item_216 in var_214 {
            {
                let mut object_217 = array_215.value().start_object();
                crate::json_ser::serialize_structure_crate_model_document_relevance_configuration(
                    &mut object_217,
                    item_216,
                )?;
                object_217.finish();
            }
        }
        array_215.finish();
    }
    if let Some(var_218) = &input.page_number {
        object.key("PageNumber").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_218).into()),
        );
    }
    if let Some(var_219) = &input.page_size {
        object.key("PageSize").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_219).into()),
        );
    }
    if let Some(var_220) = &input.sorting_configuration {
        let mut object_221 = object.key("SortingConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_sorting_configuration(
            &mut object_221,
            var_220,
        )?;
        object_221.finish();
    }
    if let Some(var_222) = &input.user_context {
        let mut object_223 = object.key("UserContext").start_object();
        crate::json_ser::serialize_structure_crate_model_user_context(&mut object_223, var_222)?;
        object_223.finish();
    }
    if let Some(var_224) = &input.visitor_id {
        object.key("VisitorId").string(var_224.as_str());
    }
    if let Some(var_225) = &input.spell_correction_configuration {
        let mut object_226 = object.key("SpellCorrectionConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_spell_correction_configuration(
            &mut object_226,
            var_225,
        )?;
        object_226.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_data_source_sync_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartDataSourceSyncJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_227) = &input.id {
        object.key("Id").string(var_227.as_str());
    }
    if let Some(var_228) = &input.index_id {
        object.key("IndexId").string(var_228.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_data_source_sync_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopDataSourceSyncJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_229) = &input.id {
        object.key("Id").string(var_229.as_str());
    }
    if let Some(var_230) = &input.index_id {
        object.key("IndexId").string(var_230.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_submit_feedback_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SubmitFeedbackInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_231) = &input.index_id {
        object.key("IndexId").string(var_231.as_str());
    }
    if let Some(var_232) = &input.query_id {
        object.key("QueryId").string(var_232.as_str());
    }
    if let Some(var_233) = &input.click_feedback_items {
        let mut array_234 = object.key("ClickFeedbackItems").start_array();
        for item_235 in var_233 {
            {
                let mut object_236 = array_234.value().start_object();
                crate::json_ser::serialize_structure_crate_model_click_feedback(
                    &mut object_236,
                    item_235,
                )?;
                object_236.finish();
            }
        }
        array_234.finish();
    }
    if let Some(var_237) = &input.relevance_feedback_items {
        let mut array_238 = object.key("RelevanceFeedbackItems").start_array();
        for item_239 in var_237 {
            {
                let mut object_240 = array_238.value().start_object();
                crate::json_ser::serialize_structure_crate_model_relevance_feedback(
                    &mut object_240,
                    item_239,
                )?;
                object_240.finish();
            }
        }
        array_238.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_tag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_241) = &input.resource_arn {
        object.key("ResourceARN").string(var_241.as_str());
    }
    if let Some(var_242) = &input.tags {
        let mut array_243 = object.key("Tags").start_array();
        for item_244 in var_242 {
            {
                let mut object_245 = array_243.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_245, item_244)?;
                object_245.finish();
            }
        }
        array_243.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_untag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UntagResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_246) = &input.resource_arn {
        object.key("ResourceARN").string(var_246.as_str());
    }
    if let Some(var_247) = &input.tag_keys {
        let mut array_248 = object.key("TagKeys").start_array();
        for item_249 in var_247 {
            {
                array_248.value().string(item_249.as_str());
            }
        }
        array_248.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_data_source_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDataSourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_250) = &input.id {
        object.key("Id").string(var_250.as_str());
    }
    if let Some(var_251) = &input.name {
        object.key("Name").string(var_251.as_str());
    }
    if let Some(var_252) = &input.index_id {
        object.key("IndexId").string(var_252.as_str());
    }
    if let Some(var_253) = &input.configuration {
        let mut object_254 = object.key("Configuration").start_object();
        crate::json_ser::serialize_structure_crate_model_data_source_configuration(
            &mut object_254,
            var_253,
        )?;
        object_254.finish();
    }
    if let Some(var_255) = &input.description {
        object.key("Description").string(var_255.as_str());
    }
    if let Some(var_256) = &input.schedule {
        object.key("Schedule").string(var_256.as_str());
    }
    if let Some(var_257) = &input.role_arn {
        object.key("RoleArn").string(var_257.as_str());
    }
    if let Some(var_258) = &input.language_code {
        object.key("LanguageCode").string(var_258.as_str());
    }
    if let Some(var_259) = &input.custom_document_enrichment_configuration {
        let mut object_260 = object
            .key("CustomDocumentEnrichmentConfiguration")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_custom_document_enrichment_configuration(
            &mut object_260,
            var_259,
        )?;
        object_260.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_experience_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateExperienceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_261) = &input.id {
        object.key("Id").string(var_261.as_str());
    }
    if let Some(var_262) = &input.name {
        object.key("Name").string(var_262.as_str());
    }
    if let Some(var_263) = &input.index_id {
        object.key("IndexId").string(var_263.as_str());
    }
    if let Some(var_264) = &input.role_arn {
        object.key("RoleArn").string(var_264.as_str());
    }
    if let Some(var_265) = &input.configuration {
        let mut object_266 = object.key("Configuration").start_object();
        crate::json_ser::serialize_structure_crate_model_experience_configuration(
            &mut object_266,
            var_265,
        )?;
        object_266.finish();
    }
    if let Some(var_267) = &input.description {
        object.key("Description").string(var_267.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_index_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateIndexInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_268) = &input.id {
        object.key("Id").string(var_268.as_str());
    }
    if let Some(var_269) = &input.name {
        object.key("Name").string(var_269.as_str());
    }
    if let Some(var_270) = &input.role_arn {
        object.key("RoleArn").string(var_270.as_str());
    }
    if let Some(var_271) = &input.description {
        object.key("Description").string(var_271.as_str());
    }
    if let Some(var_272) = &input.document_metadata_configuration_updates {
        let mut array_273 = object
            .key("DocumentMetadataConfigurationUpdates")
            .start_array();
        for item_274 in var_272 {
            {
                let mut object_275 = array_273.value().start_object();
                crate::json_ser::serialize_structure_crate_model_document_metadata_configuration(
                    &mut object_275,
                    item_274,
                )?;
                object_275.finish();
            }
        }
        array_273.finish();
    }
    if let Some(var_276) = &input.capacity_units {
        let mut object_277 = object.key("CapacityUnits").start_object();
        crate::json_ser::serialize_structure_crate_model_capacity_units_configuration(
            &mut object_277,
            var_276,
        )?;
        object_277.finish();
    }
    if let Some(var_278) = &input.user_token_configurations {
        let mut array_279 = object.key("UserTokenConfigurations").start_array();
        for item_280 in var_278 {
            {
                let mut object_281 = array_279.value().start_object();
                crate::json_ser::serialize_structure_crate_model_user_token_configuration(
                    &mut object_281,
                    item_280,
                )?;
                object_281.finish();
            }
        }
        array_279.finish();
    }
    if let Some(var_282) = &input.user_context_policy {
        object.key("UserContextPolicy").string(var_282.as_str());
    }
    if let Some(var_283) = &input.user_group_resolution_configuration {
        let mut object_284 = object
            .key("UserGroupResolutionConfiguration")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_user_group_resolution_configuration(
            &mut object_284,
            var_283,
        )?;
        object_284.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_query_suggestions_block_list_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateQuerySuggestionsBlockListInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_285) = &input.index_id {
        object.key("IndexId").string(var_285.as_str());
    }
    if let Some(var_286) = &input.id {
        object.key("Id").string(var_286.as_str());
    }
    if let Some(var_287) = &input.name {
        object.key("Name").string(var_287.as_str());
    }
    if let Some(var_288) = &input.description {
        object.key("Description").string(var_288.as_str());
    }
    if let Some(var_289) = &input.source_s3_path {
        let mut object_290 = object.key("SourceS3Path").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_path(&mut object_290, var_289)?;
        object_290.finish();
    }
    if let Some(var_291) = &input.role_arn {
        object.key("RoleArn").string(var_291.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_query_suggestions_config_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateQuerySuggestionsConfigInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_292) = &input.index_id {
        object.key("IndexId").string(var_292.as_str());
    }
    if let Some(var_293) = &input.mode {
        object.key("Mode").string(var_293.as_str());
    }
    if let Some(var_294) = &input.query_log_look_back_window_in_days {
        object.key("QueryLogLookBackWindowInDays").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_294).into()),
        );
    }
    if let Some(var_295) = &input.include_queries_without_user_information {
        object
            .key("IncludeQueriesWithoutUserInformation")
            .boolean(*var_295);
    }
    if let Some(var_296) = &input.minimum_number_of_querying_users {
        object.key("MinimumNumberOfQueryingUsers").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_296).into()),
        );
    }
    if let Some(var_297) = &input.minimum_query_count {
        object.key("MinimumQueryCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_297).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_thesaurus_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateThesaurusInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_298) = &input.id {
        object.key("Id").string(var_298.as_str());
    }
    if let Some(var_299) = &input.name {
        object.key("Name").string(var_299.as_str());
    }
    if let Some(var_300) = &input.index_id {
        object.key("IndexId").string(var_300.as_str());
    }
    if let Some(var_301) = &input.description {
        object.key("Description").string(var_301.as_str());
    }
    if let Some(var_302) = &input.role_arn {
        object.key("RoleArn").string(var_302.as_str());
    }
    if let Some(var_303) = &input.source_s3_path {
        let mut object_304 = object.key("SourceS3Path").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_path(&mut object_304, var_303)?;
        object_304.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_entity_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EntityConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_305) = &input.entity_id {
        object.key("EntityId").string(var_305.as_str());
    }
    if let Some(var_306) = &input.entity_type {
        object.key("EntityType").string(var_306.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_entity_persona_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EntityPersonaConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_307) = &input.entity_id {
        object.key("EntityId").string(var_307.as_str());
    }
    if let Some(var_308) = &input.persona {
        object.key("Persona").string(var_308.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_data_source_sync_job_metric_target(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataSourceSyncJobMetricTarget,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_309) = &input.data_source_id {
        object.key("DataSourceId").string(var_309.as_str());
    }
    if let Some(var_310) = &input.data_source_sync_job_id {
        object.key("DataSourceSyncJobId").string(var_310.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_document_info(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DocumentInfo,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_311) = &input.document_id {
        object.key("DocumentId").string(var_311.as_str());
    }
    if let Some(var_312) = &input.attributes {
        let mut array_313 = object.key("Attributes").start_array();
        for item_314 in var_312 {
            {
                let mut object_315 = array_313.value().start_object();
                crate::json_ser::serialize_structure_crate_model_document_attribute(
                    &mut object_315,
                    item_314,
                )?;
                object_315.finish();
            }
        }
        array_313.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_document(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Document,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_316) = &input.id {
        object.key("Id").string(var_316.as_str());
    }
    if let Some(var_317) = &input.title {
        object.key("Title").string(var_317.as_str());
    }
    if let Some(var_318) = &input.blob {
        object
            .key("Blob")
            .string_unchecked(&aws_smithy_types::base64::encode(var_318));
    }
    if let Some(var_319) = &input.s3_path {
        let mut object_320 = object.key("S3Path").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_path(&mut object_320, var_319)?;
        object_320.finish();
    }
    if let Some(var_321) = &input.attributes {
        let mut array_322 = object.key("Attributes").start_array();
        for item_323 in var_321 {
            {
                let mut object_324 = array_322.value().start_object();
                crate::json_ser::serialize_structure_crate_model_document_attribute(
                    &mut object_324,
                    item_323,
                )?;
                object_324.finish();
            }
        }
        array_322.finish();
    }
    if let Some(var_325) = &input.access_control_list {
        let mut array_326 = object.key("AccessControlList").start_array();
        for item_327 in var_325 {
            {
                let mut object_328 = array_326.value().start_object();
                crate::json_ser::serialize_structure_crate_model_principal(
                    &mut object_328,
                    item_327,
                )?;
                object_328.finish();
            }
        }
        array_326.finish();
    }
    if let Some(var_329) = &input.hierarchical_access_control_list {
        let mut array_330 = object.key("HierarchicalAccessControlList").start_array();
        for item_331 in var_329 {
            {
                let mut object_332 = array_330.value().start_object();
                crate::json_ser::serialize_structure_crate_model_hierarchical_principal(
                    &mut object_332,
                    item_331,
                )?;
                object_332.finish();
            }
        }
        array_330.finish();
    }
    if let Some(var_333) = &input.content_type {
        object.key("ContentType").string(var_333.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_custom_document_enrichment_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CustomDocumentEnrichmentConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_334) = &input.inline_configurations {
        let mut array_335 = object.key("InlineConfigurations").start_array();
        for item_336 in var_334 {
            {
                let mut object_337 = array_335.value().start_object();
                crate::json_ser::serialize_structure_crate_model_inline_custom_document_enrichment_configuration(&mut object_337, item_336)?;
                object_337.finish();
            }
        }
        array_335.finish();
    }
    if let Some(var_338) = &input.pre_extraction_hook_configuration {
        let mut object_339 = object.key("PreExtractionHookConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_hook_configuration(
            &mut object_339,
            var_338,
        )?;
        object_339.finish();
    }
    if let Some(var_340) = &input.post_extraction_hook_configuration {
        let mut object_341 = object.key("PostExtractionHookConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_hook_configuration(
            &mut object_341,
            var_340,
        )?;
        object_341.finish();
    }
    if let Some(var_342) = &input.role_arn {
        object.key("RoleArn").string(var_342.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_data_source_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataSourceConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_343) = &input.s3_configuration {
        let mut object_344 = object.key("S3Configuration").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_data_source_configuration(
            &mut object_344,
            var_343,
        )?;
        object_344.finish();
    }
    if let Some(var_345) = &input.share_point_configuration {
        let mut object_346 = object.key("SharePointConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_share_point_configuration(
            &mut object_346,
            var_345,
        )?;
        object_346.finish();
    }
    if let Some(var_347) = &input.database_configuration {
        let mut object_348 = object.key("DatabaseConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_database_configuration(
            &mut object_348,
            var_347,
        )?;
        object_348.finish();
    }
    if let Some(var_349) = &input.salesforce_configuration {
        let mut object_350 = object.key("SalesforceConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_salesforce_configuration(
            &mut object_350,
            var_349,
        )?;
        object_350.finish();
    }
    if let Some(var_351) = &input.one_drive_configuration {
        let mut object_352 = object.key("OneDriveConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_one_drive_configuration(
            &mut object_352,
            var_351,
        )?;
        object_352.finish();
    }
    if let Some(var_353) = &input.service_now_configuration {
        let mut object_354 = object.key("ServiceNowConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_service_now_configuration(
            &mut object_354,
            var_353,
        )?;
        object_354.finish();
    }
    if let Some(var_355) = &input.confluence_configuration {
        let mut object_356 = object.key("ConfluenceConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_confluence_configuration(
            &mut object_356,
            var_355,
        )?;
        object_356.finish();
    }
    if let Some(var_357) = &input.google_drive_configuration {
        let mut object_358 = object.key("GoogleDriveConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_google_drive_configuration(
            &mut object_358,
            var_357,
        )?;
        object_358.finish();
    }
    if let Some(var_359) = &input.web_crawler_configuration {
        let mut object_360 = object.key("WebCrawlerConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_web_crawler_configuration(
            &mut object_360,
            var_359,
        )?;
        object_360.finish();
    }
    if let Some(var_361) = &input.work_docs_configuration {
        let mut object_362 = object.key("WorkDocsConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_work_docs_configuration(
            &mut object_362,
            var_361,
        )?;
        object_362.finish();
    }
    if let Some(var_363) = &input.fsx_configuration {
        let mut object_364 = object.key("FsxConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_fsx_configuration(
            &mut object_364,
            var_363,
        )?;
        object_364.finish();
    }
    if let Some(var_365) = &input.slack_configuration {
        let mut object_366 = object.key("SlackConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_slack_configuration(
            &mut object_366,
            var_365,
        )?;
        object_366.finish();
    }
    if let Some(var_367) = &input.box_configuration {
        let mut object_368 = object.key("BoxConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_box_configuration(
            &mut object_368,
            var_367,
        )?;
        object_368.finish();
    }
    if let Some(var_369) = &input.quip_configuration {
        let mut object_370 = object.key("QuipConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_quip_configuration(
            &mut object_370,
            var_369,
        )?;
        object_370.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_tag(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Tag,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_371) = &input.key {
        object.key("Key").string(var_371.as_str());
    }
    if let Some(var_372) = &input.value {
        object.key("Value").string(var_372.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_experience_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ExperienceConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_373) = &input.content_source_configuration {
        let mut object_374 = object.key("ContentSourceConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_content_source_configuration(
            &mut object_374,
            var_373,
        )?;
        object_374.finish();
    }
    if let Some(var_375) = &input.user_identity_configuration {
        let mut object_376 = object.key("UserIdentityConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_user_identity_configuration(
            &mut object_376,
            var_375,
        )?;
        object_376.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_path(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3Path,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_377) = &input.bucket {
        object.key("Bucket").string(var_377.as_str());
    }
    if let Some(var_378) = &input.key {
        object.key("Key").string(var_378.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_server_side_encryption_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ServerSideEncryptionConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_379) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_379.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_user_token_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UserTokenConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_380) = &input.jwt_token_type_configuration {
        let mut object_381 = object.key("JwtTokenTypeConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_jwt_token_type_configuration(
            &mut object_381,
            var_380,
        )?;
        object_381.finish();
    }
    if let Some(var_382) = &input.json_token_type_configuration {
        let mut object_383 = object.key("JsonTokenTypeConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_json_token_type_configuration(
            &mut object_383,
            var_382,
        )?;
        object_383.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_user_group_resolution_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UserGroupResolutionConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_384) = &input.user_group_resolution_mode {
        object
            .key("UserGroupResolutionMode")
            .string(var_384.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_time_range(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TimeRange,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_385) = &input.start_time {
        object
            .key("StartTime")
            .date_time(var_385, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_386) = &input.end_time {
        object
            .key("EndTime")
            .date_time(var_386, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_model_group_members(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::GroupMembers,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_387) = &input.member_groups {
        let mut array_388 = object.key("MemberGroups").start_array();
        for item_389 in var_387 {
            {
                let mut object_390 = array_388.value().start_object();
                crate::json_ser::serialize_structure_crate_model_member_group(
                    &mut object_390,
                    item_389,
                )?;
                object_390.finish();
            }
        }
        array_388.finish();
    }
    if let Some(var_391) = &input.member_users {
        let mut array_392 = object.key("MemberUsers").start_array();
        for item_393 in var_391 {
            {
                let mut object_394 = array_392.value().start_object();
                crate::json_ser::serialize_structure_crate_model_member_user(
                    &mut object_394,
                    item_393,
                )?;
                object_394.finish();
            }
        }
        array_392.finish();
    }
    if let Some(var_395) = &input.s3_pathfor_group_members {
        let mut object_396 = object.key("S3PathforGroupMembers").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_path(&mut object_396, var_395)?;
        object_396.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_attribute_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AttributeFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_397) = &input.and_all_filters {
        let mut array_398 = object.key("AndAllFilters").start_array();
        for item_399 in var_397 {
            {
                let mut object_400 = array_398.value().start_object();
                crate::json_ser::serialize_structure_crate_model_attribute_filter(
                    &mut object_400,
                    item_399,
                )?;
                object_400.finish();
            }
        }
        array_398.finish();
    }
    if let Some(var_401) = &input.or_all_filters {
        let mut array_402 = object.key("OrAllFilters").start_array();
        for item_403 in var_401 {
            {
                let mut object_404 = array_402.value().start_object();
                crate::json_ser::serialize_structure_crate_model_attribute_filter(
                    &mut object_404,
                    item_403,
                )?;
                object_404.finish();
            }
        }
        array_402.finish();
    }
    if let Some(var_405) = &input.not_filter {
        let mut object_406 = object.key("NotFilter").start_object();
        crate::json_ser::serialize_structure_crate_model_attribute_filter(
            &mut object_406,
            var_405,
        )?;
        object_406.finish();
    }
    if let Some(var_407) = &input.equals_to {
        let mut object_408 = object.key("EqualsTo").start_object();
        crate::json_ser::serialize_structure_crate_model_document_attribute(
            &mut object_408,
            var_407,
        )?;
        object_408.finish();
    }
    if let Some(var_409) = &input.contains_all {
        let mut object_410 = object.key("ContainsAll").start_object();
        crate::json_ser::serialize_structure_crate_model_document_attribute(
            &mut object_410,
            var_409,
        )?;
        object_410.finish();
    }
    if let Some(var_411) = &input.contains_any {
        let mut object_412 = object.key("ContainsAny").start_object();
        crate::json_ser::serialize_structure_crate_model_document_attribute(
            &mut object_412,
            var_411,
        )?;
        object_412.finish();
    }
    if let Some(var_413) = &input.greater_than {
        let mut object_414 = object.key("GreaterThan").start_object();
        crate::json_ser::serialize_structure_crate_model_document_attribute(
            &mut object_414,
            var_413,
        )?;
        object_414.finish();
    }
    if let Some(var_415) = &input.greater_than_or_equals {
        let mut object_416 = object.key("GreaterThanOrEquals").start_object();
        crate::json_ser::serialize_structure_crate_model_document_attribute(
            &mut object_416,
            var_415,
        )?;
        object_416.finish();
    }
    if let Some(var_417) = &input.less_than {
        let mut object_418 = object.key("LessThan").start_object();
        crate::json_ser::serialize_structure_crate_model_document_attribute(
            &mut object_418,
            var_417,
        )?;
        object_418.finish();
    }
    if let Some(var_419) = &input.less_than_or_equals {
        let mut object_420 = object.key("LessThanOrEquals").start_object();
        crate::json_ser::serialize_structure_crate_model_document_attribute(
            &mut object_420,
            var_419,
        )?;
        object_420.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_facet(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Facet,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_421) = &input.document_attribute_key {
        object.key("DocumentAttributeKey").string(var_421.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_document_relevance_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DocumentRelevanceConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_422) = &input.name {
        object.key("Name").string(var_422.as_str());
    }
    if let Some(var_423) = &input.relevance {
        let mut object_424 = object.key("Relevance").start_object();
        crate::json_ser::serialize_structure_crate_model_relevance(&mut object_424, var_423)?;
        object_424.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_sorting_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SortingConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_425) = &input.document_attribute_key {
        object.key("DocumentAttributeKey").string(var_425.as_str());
    }
    if let Some(var_426) = &input.sort_order {
        object.key("SortOrder").string(var_426.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_user_context(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UserContext,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_427) = &input.token {
        object.key("Token").string(var_427.as_str());
    }
    if let Some(var_428) = &input.user_id {
        object.key("UserId").string(var_428.as_str());
    }
    if let Some(var_429) = &input.groups {
        let mut array_430 = object.key("Groups").start_array();
        for item_431 in var_429 {
            {
                array_430.value().string(item_431.as_str());
            }
        }
        array_430.finish();
    }
    if let Some(var_432) = &input.data_source_groups {
        let mut array_433 = object.key("DataSourceGroups").start_array();
        for item_434 in var_432 {
            {
                let mut object_435 = array_433.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_group(
                    &mut object_435,
                    item_434,
                )?;
                object_435.finish();
            }
        }
        array_433.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_spell_correction_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SpellCorrectionConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object
            .key("IncludeQuerySpellCheckSuggestions")
            .boolean(input.include_query_spell_check_suggestions);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_click_feedback(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ClickFeedback,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_436) = &input.result_id {
        object.key("ResultId").string(var_436.as_str());
    }
    if let Some(var_437) = &input.click_time {
        object
            .key("ClickTime")
            .date_time(var_437, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_model_relevance_feedback(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RelevanceFeedback,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_438) = &input.result_id {
        object.key("ResultId").string(var_438.as_str());
    }
    if let Some(var_439) = &input.relevance_value {
        object.key("RelevanceValue").string(var_439.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_document_metadata_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DocumentMetadataConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_440) = &input.name {
        object.key("Name").string(var_440.as_str());
    }
    if let Some(var_441) = &input.r#type {
        object.key("Type").string(var_441.as_str());
    }
    if let Some(var_442) = &input.relevance {
        let mut object_443 = object.key("Relevance").start_object();
        crate::json_ser::serialize_structure_crate_model_relevance(&mut object_443, var_442)?;
        object_443.finish();
    }
    if let Some(var_444) = &input.search {
        let mut object_445 = object.key("Search").start_object();
        crate::json_ser::serialize_structure_crate_model_search(&mut object_445, var_444)?;
        object_445.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_capacity_units_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CapacityUnitsConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_446) = &input.storage_capacity_units {
        object.key("StorageCapacityUnits").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_446).into()),
        );
    }
    if let Some(var_447) = &input.query_capacity_units {
        object.key("QueryCapacityUnits").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_447).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_document_attribute(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DocumentAttribute,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_448) = &input.key {
        object.key("Key").string(var_448.as_str());
    }
    if let Some(var_449) = &input.value {
        let mut object_450 = object.key("Value").start_object();
        crate::json_ser::serialize_structure_crate_model_document_attribute_value(
            &mut object_450,
            var_449,
        )?;
        object_450.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_principal(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Principal,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_451) = &input.name {
        object.key("Name").string(var_451.as_str());
    }
    if let Some(var_452) = &input.r#type {
        object.key("Type").string(var_452.as_str());
    }
    if let Some(var_453) = &input.access {
        object.key("Access").string(var_453.as_str());
    }
    if let Some(var_454) = &input.data_source_id {
        object.key("DataSourceId").string(var_454.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_hierarchical_principal(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HierarchicalPrincipal,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_455) = &input.principal_list {
        let mut array_456 = object.key("PrincipalList").start_array();
        for item_457 in var_455 {
            {
                let mut object_458 = array_456.value().start_object();
                crate::json_ser::serialize_structure_crate_model_principal(
                    &mut object_458,
                    item_457,
                )?;
                object_458.finish();
            }
        }
        array_456.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_inline_custom_document_enrichment_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InlineCustomDocumentEnrichmentConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_459) = &input.condition {
        let mut object_460 = object.key("Condition").start_object();
        crate::json_ser::serialize_structure_crate_model_document_attribute_condition(
            &mut object_460,
            var_459,
        )?;
        object_460.finish();
    }
    if let Some(var_461) = &input.target {
        let mut object_462 = object.key("Target").start_object();
        crate::json_ser::serialize_structure_crate_model_document_attribute_target(
            &mut object_462,
            var_461,
        )?;
        object_462.finish();
    }
    if input.document_content_deletion {
        object
            .key("DocumentContentDeletion")
            .boolean(input.document_content_deletion);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_hook_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HookConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_463) = &input.invocation_condition {
        let mut object_464 = object.key("InvocationCondition").start_object();
        crate::json_ser::serialize_structure_crate_model_document_attribute_condition(
            &mut object_464,
            var_463,
        )?;
        object_464.finish();
    }
    if let Some(var_465) = &input.lambda_arn {
        object.key("LambdaArn").string(var_465.as_str());
    }
    if let Some(var_466) = &input.s3_bucket {
        object.key("S3Bucket").string(var_466.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_data_source_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3DataSourceConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_467) = &input.bucket_name {
        object.key("BucketName").string(var_467.as_str());
    }
    if let Some(var_468) = &input.inclusion_prefixes {
        let mut array_469 = object.key("InclusionPrefixes").start_array();
        for item_470 in var_468 {
            {
                array_469.value().string(item_470.as_str());
            }
        }
        array_469.finish();
    }
    if let Some(var_471) = &input.inclusion_patterns {
        let mut array_472 = object.key("InclusionPatterns").start_array();
        for item_473 in var_471 {
            {
                array_472.value().string(item_473.as_str());
            }
        }
        array_472.finish();
    }
    if let Some(var_474) = &input.exclusion_patterns {
        let mut array_475 = object.key("ExclusionPatterns").start_array();
        for item_476 in var_474 {
            {
                array_475.value().string(item_476.as_str());
            }
        }
        array_475.finish();
    }
    if let Some(var_477) = &input.documents_metadata_configuration {
        let mut object_478 = object.key("DocumentsMetadataConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_documents_metadata_configuration(
            &mut object_478,
            var_477,
        )?;
        object_478.finish();
    }
    if let Some(var_479) = &input.access_control_list_configuration {
        let mut object_480 = object.key("AccessControlListConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_access_control_list_configuration(
            &mut object_480,
            var_479,
        )?;
        object_480.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_share_point_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SharePointConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_481) = &input.share_point_version {
        object.key("SharePointVersion").string(var_481.as_str());
    }
    if let Some(var_482) = &input.urls {
        let mut array_483 = object.key("Urls").start_array();
        for item_484 in var_482 {
            {
                array_483.value().string(item_484.as_str());
            }
        }
        array_483.finish();
    }
    if let Some(var_485) = &input.secret_arn {
        object.key("SecretArn").string(var_485.as_str());
    }
    if input.crawl_attachments {
        object
            .key("CrawlAttachments")
            .boolean(input.crawl_attachments);
    }
    if input.use_change_log {
        object.key("UseChangeLog").boolean(input.use_change_log);
    }
    if let Some(var_486) = &input.inclusion_patterns {
        let mut array_487 = object.key("InclusionPatterns").start_array();
        for item_488 in var_486 {
            {
                array_487.value().string(item_488.as_str());
            }
        }
        array_487.finish();
    }
    if let Some(var_489) = &input.exclusion_patterns {
        let mut array_490 = object.key("ExclusionPatterns").start_array();
        for item_491 in var_489 {
            {
                array_490.value().string(item_491.as_str());
            }
        }
        array_490.finish();
    }
    if let Some(var_492) = &input.vpc_configuration {
        let mut object_493 = object.key("VpcConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_data_source_vpc_configuration(
            &mut object_493,
            var_492,
        )?;
        object_493.finish();
    }
    if let Some(var_494) = &input.field_mappings {
        let mut array_495 = object.key("FieldMappings").start_array();
        for item_496 in var_494 {
            {
                let mut object_497 = array_495.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_497, item_496)?;
                object_497.finish();
            }
        }
        array_495.finish();
    }
    if let Some(var_498) = &input.document_title_field_name {
        object
            .key("DocumentTitleFieldName")
            .string(var_498.as_str());
    }
    if input.disable_local_groups {
        object
            .key("DisableLocalGroups")
            .boolean(input.disable_local_groups);
    }
    if let Some(var_499) = &input.ssl_certificate_s3_path {
        let mut object_500 = object.key("SslCertificateS3Path").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_path(&mut object_500, var_499)?;
        object_500.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_database_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DatabaseConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_501) = &input.database_engine_type {
        object.key("DatabaseEngineType").string(var_501.as_str());
    }
    if let Some(var_502) = &input.connection_configuration {
        let mut object_503 = object.key("ConnectionConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_connection_configuration(
            &mut object_503,
            var_502,
        )?;
        object_503.finish();
    }
    if let Some(var_504) = &input.vpc_configuration {
        let mut object_505 = object.key("VpcConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_data_source_vpc_configuration(
            &mut object_505,
            var_504,
        )?;
        object_505.finish();
    }
    if let Some(var_506) = &input.column_configuration {
        let mut object_507 = object.key("ColumnConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_column_configuration(
            &mut object_507,
            var_506,
        )?;
        object_507.finish();
    }
    if let Some(var_508) = &input.acl_configuration {
        let mut object_509 = object.key("AclConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_acl_configuration(
            &mut object_509,
            var_508,
        )?;
        object_509.finish();
    }
    if let Some(var_510) = &input.sql_configuration {
        let mut object_511 = object.key("SqlConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_sql_configuration(
            &mut object_511,
            var_510,
        )?;
        object_511.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_salesforce_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SalesforceConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_512) = &input.server_url {
        object.key("ServerUrl").string(var_512.as_str());
    }
    if let Some(var_513) = &input.secret_arn {
        object.key("SecretArn").string(var_513.as_str());
    }
    if let Some(var_514) = &input.standard_object_configurations {
        let mut array_515 = object.key("StandardObjectConfigurations").start_array();
        for item_516 in var_514 {
            {
                let mut object_517 = array_515.value().start_object();
                crate::json_ser::serialize_structure_crate_model_salesforce_standard_object_configuration(&mut object_517, item_516)?;
                object_517.finish();
            }
        }
        array_515.finish();
    }
    if let Some(var_518) = &input.knowledge_article_configuration {
        let mut object_519 = object.key("KnowledgeArticleConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_salesforce_knowledge_article_configuration(&mut object_519, var_518)?;
        object_519.finish();
    }
    if let Some(var_520) = &input.chatter_feed_configuration {
        let mut object_521 = object.key("ChatterFeedConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_salesforce_chatter_feed_configuration(
            &mut object_521,
            var_520,
        )?;
        object_521.finish();
    }
    if input.crawl_attachments {
        object
            .key("CrawlAttachments")
            .boolean(input.crawl_attachments);
    }
    if let Some(var_522) = &input.standard_object_attachment_configuration {
        let mut object_523 = object
            .key("StandardObjectAttachmentConfiguration")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_salesforce_standard_object_attachment_configuration(&mut object_523, var_522)?;
        object_523.finish();
    }
    if let Some(var_524) = &input.include_attachment_file_patterns {
        let mut array_525 = object.key("IncludeAttachmentFilePatterns").start_array();
        for item_526 in var_524 {
            {
                array_525.value().string(item_526.as_str());
            }
        }
        array_525.finish();
    }
    if let Some(var_527) = &input.exclude_attachment_file_patterns {
        let mut array_528 = object.key("ExcludeAttachmentFilePatterns").start_array();
        for item_529 in var_527 {
            {
                array_528.value().string(item_529.as_str());
            }
        }
        array_528.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_one_drive_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OneDriveConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_530) = &input.tenant_domain {
        object.key("TenantDomain").string(var_530.as_str());
    }
    if let Some(var_531) = &input.secret_arn {
        object.key("SecretArn").string(var_531.as_str());
    }
    if let Some(var_532) = &input.one_drive_users {
        let mut object_533 = object.key("OneDriveUsers").start_object();
        crate::json_ser::serialize_structure_crate_model_one_drive_users(&mut object_533, var_532)?;
        object_533.finish();
    }
    if let Some(var_534) = &input.inclusion_patterns {
        let mut array_535 = object.key("InclusionPatterns").start_array();
        for item_536 in var_534 {
            {
                array_535.value().string(item_536.as_str());
            }
        }
        array_535.finish();
    }
    if let Some(var_537) = &input.exclusion_patterns {
        let mut array_538 = object.key("ExclusionPatterns").start_array();
        for item_539 in var_537 {
            {
                array_538.value().string(item_539.as_str());
            }
        }
        array_538.finish();
    }
    if let Some(var_540) = &input.field_mappings {
        let mut array_541 = object.key("FieldMappings").start_array();
        for item_542 in var_540 {
            {
                let mut object_543 = array_541.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_543, item_542)?;
                object_543.finish();
            }
        }
        array_541.finish();
    }
    if input.disable_local_groups {
        object
            .key("DisableLocalGroups")
            .boolean(input.disable_local_groups);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_service_now_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ServiceNowConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_544) = &input.host_url {
        object.key("HostUrl").string(var_544.as_str());
    }
    if let Some(var_545) = &input.secret_arn {
        object.key("SecretArn").string(var_545.as_str());
    }
    if let Some(var_546) = &input.service_now_build_version {
        object
            .key("ServiceNowBuildVersion")
            .string(var_546.as_str());
    }
    if let Some(var_547) = &input.knowledge_article_configuration {
        let mut object_548 = object.key("KnowledgeArticleConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_service_now_knowledge_article_configuration(&mut object_548, var_547)?;
        object_548.finish();
    }
    if let Some(var_549) = &input.service_catalog_configuration {
        let mut object_550 = object.key("ServiceCatalogConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_service_now_service_catalog_configuration(
            &mut object_550,
            var_549,
        )?;
        object_550.finish();
    }
    if let Some(var_551) = &input.authentication_type {
        object.key("AuthenticationType").string(var_551.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_confluence_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConfluenceConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_552) = &input.server_url {
        object.key("ServerUrl").string(var_552.as_str());
    }
    if let Some(var_553) = &input.secret_arn {
        object.key("SecretArn").string(var_553.as_str());
    }
    if let Some(var_554) = &input.version {
        object.key("Version").string(var_554.as_str());
    }
    if let Some(var_555) = &input.space_configuration {
        let mut object_556 = object.key("SpaceConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_confluence_space_configuration(
            &mut object_556,
            var_555,
        )?;
        object_556.finish();
    }
    if let Some(var_557) = &input.page_configuration {
        let mut object_558 = object.key("PageConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_confluence_page_configuration(
            &mut object_558,
            var_557,
        )?;
        object_558.finish();
    }
    if let Some(var_559) = &input.blog_configuration {
        let mut object_560 = object.key("BlogConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_confluence_blog_configuration(
            &mut object_560,
            var_559,
        )?;
        object_560.finish();
    }
    if let Some(var_561) = &input.attachment_configuration {
        let mut object_562 = object.key("AttachmentConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_confluence_attachment_configuration(
            &mut object_562,
            var_561,
        )?;
        object_562.finish();
    }
    if let Some(var_563) = &input.vpc_configuration {
        let mut object_564 = object.key("VpcConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_data_source_vpc_configuration(
            &mut object_564,
            var_563,
        )?;
        object_564.finish();
    }
    if let Some(var_565) = &input.inclusion_patterns {
        let mut array_566 = object.key("InclusionPatterns").start_array();
        for item_567 in var_565 {
            {
                array_566.value().string(item_567.as_str());
            }
        }
        array_566.finish();
    }
    if let Some(var_568) = &input.exclusion_patterns {
        let mut array_569 = object.key("ExclusionPatterns").start_array();
        for item_570 in var_568 {
            {
                array_569.value().string(item_570.as_str());
            }
        }
        array_569.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_google_drive_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::GoogleDriveConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_571) = &input.secret_arn {
        object.key("SecretArn").string(var_571.as_str());
    }
    if let Some(var_572) = &input.inclusion_patterns {
        let mut array_573 = object.key("InclusionPatterns").start_array();
        for item_574 in var_572 {
            {
                array_573.value().string(item_574.as_str());
            }
        }
        array_573.finish();
    }
    if let Some(var_575) = &input.exclusion_patterns {
        let mut array_576 = object.key("ExclusionPatterns").start_array();
        for item_577 in var_575 {
            {
                array_576.value().string(item_577.as_str());
            }
        }
        array_576.finish();
    }
    if let Some(var_578) = &input.field_mappings {
        let mut array_579 = object.key("FieldMappings").start_array();
        for item_580 in var_578 {
            {
                let mut object_581 = array_579.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_581, item_580)?;
                object_581.finish();
            }
        }
        array_579.finish();
    }
    if let Some(var_582) = &input.exclude_mime_types {
        let mut array_583 = object.key("ExcludeMimeTypes").start_array();
        for item_584 in var_582 {
            {
                array_583.value().string(item_584.as_str());
            }
        }
        array_583.finish();
    }
    if let Some(var_585) = &input.exclude_user_accounts {
        let mut array_586 = object.key("ExcludeUserAccounts").start_array();
        for item_587 in var_585 {
            {
                array_586.value().string(item_587.as_str());
            }
        }
        array_586.finish();
    }
    if let Some(var_588) = &input.exclude_shared_drives {
        let mut array_589 = object.key("ExcludeSharedDrives").start_array();
        for item_590 in var_588 {
            {
                array_589.value().string(item_590.as_str());
            }
        }
        array_589.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_web_crawler_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::WebCrawlerConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_591) = &input.urls {
        let mut object_592 = object.key("Urls").start_object();
        crate::json_ser::serialize_structure_crate_model_urls(&mut object_592, var_591)?;
        object_592.finish();
    }
    if let Some(var_593) = &input.crawl_depth {
        object.key("CrawlDepth").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_593).into()),
        );
    }
    if let Some(var_594) = &input.max_links_per_page {
        object.key("MaxLinksPerPage").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_594).into()),
        );
    }
    if let Some(var_595) = &input.max_content_size_per_page_in_mega_bytes {
        object.key("MaxContentSizePerPageInMegaBytes").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_595).into()),
        );
    }
    if let Some(var_596) = &input.max_urls_per_minute_crawl_rate {
        object.key("MaxUrlsPerMinuteCrawlRate").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_596).into()),
        );
    }
    if let Some(var_597) = &input.url_inclusion_patterns {
        let mut array_598 = object.key("UrlInclusionPatterns").start_array();
        for item_599 in var_597 {
            {
                array_598.value().string(item_599.as_str());
            }
        }
        array_598.finish();
    }
    if let Some(var_600) = &input.url_exclusion_patterns {
        let mut array_601 = object.key("UrlExclusionPatterns").start_array();
        for item_602 in var_600 {
            {
                array_601.value().string(item_602.as_str());
            }
        }
        array_601.finish();
    }
    if let Some(var_603) = &input.proxy_configuration {
        let mut object_604 = object.key("ProxyConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_proxy_configuration(
            &mut object_604,
            var_603,
        )?;
        object_604.finish();
    }
    if let Some(var_605) = &input.authentication_configuration {
        let mut object_606 = object.key("AuthenticationConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_authentication_configuration(
            &mut object_606,
            var_605,
        )?;
        object_606.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_work_docs_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::WorkDocsConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_607) = &input.organization_id {
        object.key("OrganizationId").string(var_607.as_str());
    }
    if input.crawl_comments {
        object.key("CrawlComments").boolean(input.crawl_comments);
    }
    if input.use_change_log {
        object.key("UseChangeLog").boolean(input.use_change_log);
    }
    if let Some(var_608) = &input.inclusion_patterns {
        let mut array_609 = object.key("InclusionPatterns").start_array();
        for item_610 in var_608 {
            {
                array_609.value().string(item_610.as_str());
            }
        }
        array_609.finish();
    }
    if let Some(var_611) = &input.exclusion_patterns {
        let mut array_612 = object.key("ExclusionPatterns").start_array();
        for item_613 in var_611 {
            {
                array_612.value().string(item_613.as_str());
            }
        }
        array_612.finish();
    }
    if let Some(var_614) = &input.field_mappings {
        let mut array_615 = object.key("FieldMappings").start_array();
        for item_616 in var_614 {
            {
                let mut object_617 = array_615.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_617, item_616)?;
                object_617.finish();
            }
        }
        array_615.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_fsx_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FsxConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_618) = &input.file_system_id {
        object.key("FileSystemId").string(var_618.as_str());
    }
    if let Some(var_619) = &input.file_system_type {
        object.key("FileSystemType").string(var_619.as_str());
    }
    if let Some(var_620) = &input.vpc_configuration {
        let mut object_621 = object.key("VpcConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_data_source_vpc_configuration(
            &mut object_621,
            var_620,
        )?;
        object_621.finish();
    }
    if let Some(var_622) = &input.secret_arn {
        object.key("SecretArn").string(var_622.as_str());
    }
    if let Some(var_623) = &input.inclusion_patterns {
        let mut array_624 = object.key("InclusionPatterns").start_array();
        for item_625 in var_623 {
            {
                array_624.value().string(item_625.as_str());
            }
        }
        array_624.finish();
    }
    if let Some(var_626) = &input.exclusion_patterns {
        let mut array_627 = object.key("ExclusionPatterns").start_array();
        for item_628 in var_626 {
            {
                array_627.value().string(item_628.as_str());
            }
        }
        array_627.finish();
    }
    if let Some(var_629) = &input.field_mappings {
        let mut array_630 = object.key("FieldMappings").start_array();
        for item_631 in var_629 {
            {
                let mut object_632 = array_630.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_632, item_631)?;
                object_632.finish();
            }
        }
        array_630.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_slack_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SlackConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_633) = &input.team_id {
        object.key("TeamId").string(var_633.as_str());
    }
    if let Some(var_634) = &input.secret_arn {
        object.key("SecretArn").string(var_634.as_str());
    }
    if let Some(var_635) = &input.vpc_configuration {
        let mut object_636 = object.key("VpcConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_data_source_vpc_configuration(
            &mut object_636,
            var_635,
        )?;
        object_636.finish();
    }
    if let Some(var_637) = &input.slack_entity_list {
        let mut array_638 = object.key("SlackEntityList").start_array();
        for item_639 in var_637 {
            {
                array_638.value().string(item_639.as_str());
            }
        }
        array_638.finish();
    }
    if input.use_change_log {
        object.key("UseChangeLog").boolean(input.use_change_log);
    }
    if input.crawl_bot_message {
        object
            .key("CrawlBotMessage")
            .boolean(input.crawl_bot_message);
    }
    if input.exclude_archived {
        object
            .key("ExcludeArchived")
            .boolean(input.exclude_archived);
    }
    if let Some(var_640) = &input.since_crawl_date {
        object.key("SinceCrawlDate").string(var_640.as_str());
    }
    if let Some(var_641) = &input.look_back_period {
        object.key("LookBackPeriod").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_641).into()),
        );
    }
    if let Some(var_642) = &input.private_channel_filter {
        let mut array_643 = object.key("PrivateChannelFilter").start_array();
        for item_644 in var_642 {
            {
                array_643.value().string(item_644.as_str());
            }
        }
        array_643.finish();
    }
    if let Some(var_645) = &input.public_channel_filter {
        let mut array_646 = object.key("PublicChannelFilter").start_array();
        for item_647 in var_645 {
            {
                array_646.value().string(item_647.as_str());
            }
        }
        array_646.finish();
    }
    if let Some(var_648) = &input.inclusion_patterns {
        let mut array_649 = object.key("InclusionPatterns").start_array();
        for item_650 in var_648 {
            {
                array_649.value().string(item_650.as_str());
            }
        }
        array_649.finish();
    }
    if let Some(var_651) = &input.exclusion_patterns {
        let mut array_652 = object.key("ExclusionPatterns").start_array();
        for item_653 in var_651 {
            {
                array_652.value().string(item_653.as_str());
            }
        }
        array_652.finish();
    }
    if let Some(var_654) = &input.field_mappings {
        let mut array_655 = object.key("FieldMappings").start_array();
        for item_656 in var_654 {
            {
                let mut object_657 = array_655.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_657, item_656)?;
                object_657.finish();
            }
        }
        array_655.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_box_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BoxConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_658) = &input.enterprise_id {
        object.key("EnterpriseId").string(var_658.as_str());
    }
    if let Some(var_659) = &input.secret_arn {
        object.key("SecretArn").string(var_659.as_str());
    }
    if input.use_change_log {
        object.key("UseChangeLog").boolean(input.use_change_log);
    }
    if input.crawl_comments {
        object.key("CrawlComments").boolean(input.crawl_comments);
    }
    if input.crawl_tasks {
        object.key("CrawlTasks").boolean(input.crawl_tasks);
    }
    if input.crawl_web_links {
        object.key("CrawlWebLinks").boolean(input.crawl_web_links);
    }
    if let Some(var_660) = &input.file_field_mappings {
        let mut array_661 = object.key("FileFieldMappings").start_array();
        for item_662 in var_660 {
            {
                let mut object_663 = array_661.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_663, item_662)?;
                object_663.finish();
            }
        }
        array_661.finish();
    }
    if let Some(var_664) = &input.task_field_mappings {
        let mut array_665 = object.key("TaskFieldMappings").start_array();
        for item_666 in var_664 {
            {
                let mut object_667 = array_665.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_667, item_666)?;
                object_667.finish();
            }
        }
        array_665.finish();
    }
    if let Some(var_668) = &input.comment_field_mappings {
        let mut array_669 = object.key("CommentFieldMappings").start_array();
        for item_670 in var_668 {
            {
                let mut object_671 = array_669.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_671, item_670)?;
                object_671.finish();
            }
        }
        array_669.finish();
    }
    if let Some(var_672) = &input.web_link_field_mappings {
        let mut array_673 = object.key("WebLinkFieldMappings").start_array();
        for item_674 in var_672 {
            {
                let mut object_675 = array_673.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_675, item_674)?;
                object_675.finish();
            }
        }
        array_673.finish();
    }
    if let Some(var_676) = &input.inclusion_patterns {
        let mut array_677 = object.key("InclusionPatterns").start_array();
        for item_678 in var_676 {
            {
                array_677.value().string(item_678.as_str());
            }
        }
        array_677.finish();
    }
    if let Some(var_679) = &input.exclusion_patterns {
        let mut array_680 = object.key("ExclusionPatterns").start_array();
        for item_681 in var_679 {
            {
                array_680.value().string(item_681.as_str());
            }
        }
        array_680.finish();
    }
    if let Some(var_682) = &input.vpc_configuration {
        let mut object_683 = object.key("VpcConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_data_source_vpc_configuration(
            &mut object_683,
            var_682,
        )?;
        object_683.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_quip_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::QuipConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_684) = &input.domain {
        object.key("Domain").string(var_684.as_str());
    }
    if let Some(var_685) = &input.secret_arn {
        object.key("SecretArn").string(var_685.as_str());
    }
    if input.crawl_file_comments {
        object
            .key("CrawlFileComments")
            .boolean(input.crawl_file_comments);
    }
    if input.crawl_chat_rooms {
        object.key("CrawlChatRooms").boolean(input.crawl_chat_rooms);
    }
    if input.crawl_attachments {
        object
            .key("CrawlAttachments")
            .boolean(input.crawl_attachments);
    }
    if let Some(var_686) = &input.folder_ids {
        let mut array_687 = object.key("FolderIds").start_array();
        for item_688 in var_686 {
            {
                array_687.value().string(item_688.as_str());
            }
        }
        array_687.finish();
    }
    if let Some(var_689) = &input.thread_field_mappings {
        let mut array_690 = object.key("ThreadFieldMappings").start_array();
        for item_691 in var_689 {
            {
                let mut object_692 = array_690.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_692, item_691)?;
                object_692.finish();
            }
        }
        array_690.finish();
    }
    if let Some(var_693) = &input.message_field_mappings {
        let mut array_694 = object.key("MessageFieldMappings").start_array();
        for item_695 in var_693 {
            {
                let mut object_696 = array_694.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_696, item_695)?;
                object_696.finish();
            }
        }
        array_694.finish();
    }
    if let Some(var_697) = &input.attachment_field_mappings {
        let mut array_698 = object.key("AttachmentFieldMappings").start_array();
        for item_699 in var_697 {
            {
                let mut object_700 = array_698.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_700, item_699)?;
                object_700.finish();
            }
        }
        array_698.finish();
    }
    if let Some(var_701) = &input.inclusion_patterns {
        let mut array_702 = object.key("InclusionPatterns").start_array();
        for item_703 in var_701 {
            {
                array_702.value().string(item_703.as_str());
            }
        }
        array_702.finish();
    }
    if let Some(var_704) = &input.exclusion_patterns {
        let mut array_705 = object.key("ExclusionPatterns").start_array();
        for item_706 in var_704 {
            {
                array_705.value().string(item_706.as_str());
            }
        }
        array_705.finish();
    }
    if let Some(var_707) = &input.vpc_configuration {
        let mut object_708 = object.key("VpcConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_data_source_vpc_configuration(
            &mut object_708,
            var_707,
        )?;
        object_708.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_content_source_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ContentSourceConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_709) = &input.data_source_ids {
        let mut array_710 = object.key("DataSourceIds").start_array();
        for item_711 in var_709 {
            {
                array_710.value().string(item_711.as_str());
            }
        }
        array_710.finish();
    }
    if let Some(var_712) = &input.faq_ids {
        let mut array_713 = object.key("FaqIds").start_array();
        for item_714 in var_712 {
            {
                array_713.value().string(item_714.as_str());
            }
        }
        array_713.finish();
    }
    if input.direct_put_content {
        object
            .key("DirectPutContent")
            .boolean(input.direct_put_content);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_user_identity_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UserIdentityConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_715) = &input.identity_attribute_name {
        object.key("IdentityAttributeName").string(var_715.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_jwt_token_type_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::JwtTokenTypeConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_716) = &input.key_location {
        object.key("KeyLocation").string(var_716.as_str());
    }
    if let Some(var_717) = &input.url {
        object.key("URL").string(var_717.as_str());
    }
    if let Some(var_718) = &input.secret_manager_arn {
        object.key("SecretManagerArn").string(var_718.as_str());
    }
    if let Some(var_719) = &input.user_name_attribute_field {
        object
            .key("UserNameAttributeField")
            .string(var_719.as_str());
    }
    if let Some(var_720) = &input.group_attribute_field {
        object.key("GroupAttributeField").string(var_720.as_str());
    }
    if let Some(var_721) = &input.issuer {
        object.key("Issuer").string(var_721.as_str());
    }
    if let Some(var_722) = &input.claim_regex {
        object.key("ClaimRegex").string(var_722.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_json_token_type_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::JsonTokenTypeConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_723) = &input.user_name_attribute_field {
        object
            .key("UserNameAttributeField")
            .string(var_723.as_str());
    }
    if let Some(var_724) = &input.group_attribute_field {
        object.key("GroupAttributeField").string(var_724.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_member_group(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MemberGroup,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_725) = &input.group_id {
        object.key("GroupId").string(var_725.as_str());
    }
    if let Some(var_726) = &input.data_source_id {
        object.key("DataSourceId").string(var_726.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_member_user(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MemberUser,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_727) = &input.user_id {
        object.key("UserId").string(var_727.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_relevance(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Relevance,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_728) = &input.freshness {
        object.key("Freshness").boolean(*var_728);
    }
    if let Some(var_729) = &input.importance {
        object.key("Importance").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_729).into()),
        );
    }
    if let Some(var_730) = &input.duration {
        object.key("Duration").string(var_730.as_str());
    }
    if let Some(var_731) = &input.rank_order {
        object.key("RankOrder").string(var_731.as_str());
    }
    if let Some(var_732) = &input.value_importance_map {
        let mut object_733 = object.key("ValueImportanceMap").start_object();
        for (key_734, value_735) in var_732 {
            {
                object_733.key(key_734).number(
                    #[allow(clippy::useless_conversion)]
                    aws_smithy_types::Number::NegInt((*value_735).into()),
                );
            }
        }
        object_733.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_data_source_group(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataSourceGroup,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_736) = &input.group_id {
        object.key("GroupId").string(var_736.as_str());
    }
    if let Some(var_737) = &input.data_source_id {
        object.key("DataSourceId").string(var_737.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_search(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Search,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.facetable {
        object.key("Facetable").boolean(input.facetable);
    }
    if input.searchable {
        object.key("Searchable").boolean(input.searchable);
    }
    if input.displayable {
        object.key("Displayable").boolean(input.displayable);
    }
    if input.sortable {
        object.key("Sortable").boolean(input.sortable);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_document_attribute_value(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DocumentAttributeValue,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_738) = &input.string_value {
        object.key("StringValue").string(var_738.as_str());
    }
    if let Some(var_739) = &input.string_list_value {
        let mut array_740 = object.key("StringListValue").start_array();
        for item_741 in var_739 {
            {
                array_740.value().string(item_741.as_str());
            }
        }
        array_740.finish();
    }
    if let Some(var_742) = &input.long_value {
        object.key("LongValue").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_742).into()),
        );
    }
    if let Some(var_743) = &input.date_value {
        object
            .key("DateValue")
            .date_time(var_743, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_model_document_attribute_condition(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DocumentAttributeCondition,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_744) = &input.condition_document_attribute_key {
        object
            .key("ConditionDocumentAttributeKey")
            .string(var_744.as_str());
    }
    if let Some(var_745) = &input.operator {
        object.key("Operator").string(var_745.as_str());
    }
    if let Some(var_746) = &input.condition_on_value {
        let mut object_747 = object.key("ConditionOnValue").start_object();
        crate::json_ser::serialize_structure_crate_model_document_attribute_value(
            &mut object_747,
            var_746,
        )?;
        object_747.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_document_attribute_target(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DocumentAttributeTarget,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_748) = &input.target_document_attribute_key {
        object
            .key("TargetDocumentAttributeKey")
            .string(var_748.as_str());
    }
    if input.target_document_attribute_value_deletion {
        object
            .key("TargetDocumentAttributeValueDeletion")
            .boolean(input.target_document_attribute_value_deletion);
    }
    if let Some(var_749) = &input.target_document_attribute_value {
        let mut object_750 = object.key("TargetDocumentAttributeValue").start_object();
        crate::json_ser::serialize_structure_crate_model_document_attribute_value(
            &mut object_750,
            var_749,
        )?;
        object_750.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_documents_metadata_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DocumentsMetadataConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_751) = &input.s3_prefix {
        object.key("S3Prefix").string(var_751.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_access_control_list_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AccessControlListConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_752) = &input.key_path {
        object.key("KeyPath").string(var_752.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_data_source_vpc_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataSourceVpcConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_753) = &input.subnet_ids {
        let mut array_754 = object.key("SubnetIds").start_array();
        for item_755 in var_753 {
            {
                array_754.value().string(item_755.as_str());
            }
        }
        array_754.finish();
    }
    if let Some(var_756) = &input.security_group_ids {
        let mut array_757 = object.key("SecurityGroupIds").start_array();
        for item_758 in var_756 {
            {
                array_757.value().string(item_758.as_str());
            }
        }
        array_757.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_data_source_to_index_field_mapping(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataSourceToIndexFieldMapping,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_759) = &input.data_source_field_name {
        object.key("DataSourceFieldName").string(var_759.as_str());
    }
    if let Some(var_760) = &input.date_field_format {
        object.key("DateFieldFormat").string(var_760.as_str());
    }
    if let Some(var_761) = &input.index_field_name {
        object.key("IndexFieldName").string(var_761.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_connection_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConnectionConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_762) = &input.database_host {
        object.key("DatabaseHost").string(var_762.as_str());
    }
    if let Some(var_763) = &input.database_port {
        object.key("DatabasePort").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_763).into()),
        );
    }
    if let Some(var_764) = &input.database_name {
        object.key("DatabaseName").string(var_764.as_str());
    }
    if let Some(var_765) = &input.table_name {
        object.key("TableName").string(var_765.as_str());
    }
    if let Some(var_766) = &input.secret_arn {
        object.key("SecretArn").string(var_766.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_column_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ColumnConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_767) = &input.document_id_column_name {
        object.key("DocumentIdColumnName").string(var_767.as_str());
    }
    if let Some(var_768) = &input.document_data_column_name {
        object
            .key("DocumentDataColumnName")
            .string(var_768.as_str());
    }
    if let Some(var_769) = &input.document_title_column_name {
        object
            .key("DocumentTitleColumnName")
            .string(var_769.as_str());
    }
    if let Some(var_770) = &input.field_mappings {
        let mut array_771 = object.key("FieldMappings").start_array();
        for item_772 in var_770 {
            {
                let mut object_773 = array_771.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_773, item_772)?;
                object_773.finish();
            }
        }
        array_771.finish();
    }
    if let Some(var_774) = &input.change_detecting_columns {
        let mut array_775 = object.key("ChangeDetectingColumns").start_array();
        for item_776 in var_774 {
            {
                array_775.value().string(item_776.as_str());
            }
        }
        array_775.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_acl_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AclConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_777) = &input.allowed_groups_column_name {
        object
            .key("AllowedGroupsColumnName")
            .string(var_777.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_sql_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SqlConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_778) = &input.query_identifiers_enclosing_option {
        object
            .key("QueryIdentifiersEnclosingOption")
            .string(var_778.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_salesforce_standard_object_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SalesforceStandardObjectConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_779) = &input.name {
        object.key("Name").string(var_779.as_str());
    }
    if let Some(var_780) = &input.document_data_field_name {
        object.key("DocumentDataFieldName").string(var_780.as_str());
    }
    if let Some(var_781) = &input.document_title_field_name {
        object
            .key("DocumentTitleFieldName")
            .string(var_781.as_str());
    }
    if let Some(var_782) = &input.field_mappings {
        let mut array_783 = object.key("FieldMappings").start_array();
        for item_784 in var_782 {
            {
                let mut object_785 = array_783.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_785, item_784)?;
                object_785.finish();
            }
        }
        array_783.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_salesforce_knowledge_article_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SalesforceKnowledgeArticleConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_786) = &input.included_states {
        let mut array_787 = object.key("IncludedStates").start_array();
        for item_788 in var_786 {
            {
                array_787.value().string(item_788.as_str());
            }
        }
        array_787.finish();
    }
    if let Some(var_789) = &input.standard_knowledge_article_type_configuration {
        let mut object_790 = object
            .key("StandardKnowledgeArticleTypeConfiguration")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_salesforce_standard_knowledge_article_type_configuration(&mut object_790, var_789)?;
        object_790.finish();
    }
    if let Some(var_791) = &input.custom_knowledge_article_type_configurations {
        let mut array_792 = object
            .key("CustomKnowledgeArticleTypeConfigurations")
            .start_array();
        for item_793 in var_791 {
            {
                let mut object_794 = array_792.value().start_object();
                crate::json_ser::serialize_structure_crate_model_salesforce_custom_knowledge_article_type_configuration(&mut object_794, item_793)?;
                object_794.finish();
            }
        }
        array_792.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_salesforce_chatter_feed_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SalesforceChatterFeedConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_795) = &input.document_data_field_name {
        object.key("DocumentDataFieldName").string(var_795.as_str());
    }
    if let Some(var_796) = &input.document_title_field_name {
        object
            .key("DocumentTitleFieldName")
            .string(var_796.as_str());
    }
    if let Some(var_797) = &input.field_mappings {
        let mut array_798 = object.key("FieldMappings").start_array();
        for item_799 in var_797 {
            {
                let mut object_800 = array_798.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_800, item_799)?;
                object_800.finish();
            }
        }
        array_798.finish();
    }
    if let Some(var_801) = &input.include_filter_types {
        let mut array_802 = object.key("IncludeFilterTypes").start_array();
        for item_803 in var_801 {
            {
                array_802.value().string(item_803.as_str());
            }
        }
        array_802.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_salesforce_standard_object_attachment_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SalesforceStandardObjectAttachmentConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_804) = &input.document_title_field_name {
        object
            .key("DocumentTitleFieldName")
            .string(var_804.as_str());
    }
    if let Some(var_805) = &input.field_mappings {
        let mut array_806 = object.key("FieldMappings").start_array();
        for item_807 in var_805 {
            {
                let mut object_808 = array_806.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_808, item_807)?;
                object_808.finish();
            }
        }
        array_806.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_one_drive_users(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OneDriveUsers,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_809) = &input.one_drive_user_list {
        let mut array_810 = object.key("OneDriveUserList").start_array();
        for item_811 in var_809 {
            {
                array_810.value().string(item_811.as_str());
            }
        }
        array_810.finish();
    }
    if let Some(var_812) = &input.one_drive_user_s3_path {
        let mut object_813 = object.key("OneDriveUserS3Path").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_path(&mut object_813, var_812)?;
        object_813.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_service_now_knowledge_article_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ServiceNowKnowledgeArticleConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.crawl_attachments {
        object
            .key("CrawlAttachments")
            .boolean(input.crawl_attachments);
    }
    if let Some(var_814) = &input.include_attachment_file_patterns {
        let mut array_815 = object.key("IncludeAttachmentFilePatterns").start_array();
        for item_816 in var_814 {
            {
                array_815.value().string(item_816.as_str());
            }
        }
        array_815.finish();
    }
    if let Some(var_817) = &input.exclude_attachment_file_patterns {
        let mut array_818 = object.key("ExcludeAttachmentFilePatterns").start_array();
        for item_819 in var_817 {
            {
                array_818.value().string(item_819.as_str());
            }
        }
        array_818.finish();
    }
    if let Some(var_820) = &input.document_data_field_name {
        object.key("DocumentDataFieldName").string(var_820.as_str());
    }
    if let Some(var_821) = &input.document_title_field_name {
        object
            .key("DocumentTitleFieldName")
            .string(var_821.as_str());
    }
    if let Some(var_822) = &input.field_mappings {
        let mut array_823 = object.key("FieldMappings").start_array();
        for item_824 in var_822 {
            {
                let mut object_825 = array_823.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_825, item_824)?;
                object_825.finish();
            }
        }
        array_823.finish();
    }
    if let Some(var_826) = &input.filter_query {
        object.key("FilterQuery").string(var_826.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_service_now_service_catalog_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ServiceNowServiceCatalogConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.crawl_attachments {
        object
            .key("CrawlAttachments")
            .boolean(input.crawl_attachments);
    }
    if let Some(var_827) = &input.include_attachment_file_patterns {
        let mut array_828 = object.key("IncludeAttachmentFilePatterns").start_array();
        for item_829 in var_827 {
            {
                array_828.value().string(item_829.as_str());
            }
        }
        array_828.finish();
    }
    if let Some(var_830) = &input.exclude_attachment_file_patterns {
        let mut array_831 = object.key("ExcludeAttachmentFilePatterns").start_array();
        for item_832 in var_830 {
            {
                array_831.value().string(item_832.as_str());
            }
        }
        array_831.finish();
    }
    if let Some(var_833) = &input.document_data_field_name {
        object.key("DocumentDataFieldName").string(var_833.as_str());
    }
    if let Some(var_834) = &input.document_title_field_name {
        object
            .key("DocumentTitleFieldName")
            .string(var_834.as_str());
    }
    if let Some(var_835) = &input.field_mappings {
        let mut array_836 = object.key("FieldMappings").start_array();
        for item_837 in var_835 {
            {
                let mut object_838 = array_836.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_838, item_837)?;
                object_838.finish();
            }
        }
        array_836.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_confluence_space_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConfluenceSpaceConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.crawl_personal_spaces {
        object
            .key("CrawlPersonalSpaces")
            .boolean(input.crawl_personal_spaces);
    }
    if input.crawl_archived_spaces {
        object
            .key("CrawlArchivedSpaces")
            .boolean(input.crawl_archived_spaces);
    }
    if let Some(var_839) = &input.include_spaces {
        let mut array_840 = object.key("IncludeSpaces").start_array();
        for item_841 in var_839 {
            {
                array_840.value().string(item_841.as_str());
            }
        }
        array_840.finish();
    }
    if let Some(var_842) = &input.exclude_spaces {
        let mut array_843 = object.key("ExcludeSpaces").start_array();
        for item_844 in var_842 {
            {
                array_843.value().string(item_844.as_str());
            }
        }
        array_843.finish();
    }
    if let Some(var_845) = &input.space_field_mappings {
        let mut array_846 = object.key("SpaceFieldMappings").start_array();
        for item_847 in var_845 {
            {
                let mut object_848 = array_846.value().start_object();
                crate::json_ser::serialize_structure_crate_model_confluence_space_to_index_field_mapping(&mut object_848, item_847)?;
                object_848.finish();
            }
        }
        array_846.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_confluence_page_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConfluencePageConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_849) = &input.page_field_mappings {
        let mut array_850 = object.key("PageFieldMappings").start_array();
        for item_851 in var_849 {
            {
                let mut object_852 = array_850.value().start_object();
                crate::json_ser::serialize_structure_crate_model_confluence_page_to_index_field_mapping(&mut object_852, item_851)?;
                object_852.finish();
            }
        }
        array_850.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_confluence_blog_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConfluenceBlogConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_853) = &input.blog_field_mappings {
        let mut array_854 = object.key("BlogFieldMappings").start_array();
        for item_855 in var_853 {
            {
                let mut object_856 = array_854.value().start_object();
                crate::json_ser::serialize_structure_crate_model_confluence_blog_to_index_field_mapping(&mut object_856, item_855)?;
                object_856.finish();
            }
        }
        array_854.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_confluence_attachment_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConfluenceAttachmentConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.crawl_attachments {
        object
            .key("CrawlAttachments")
            .boolean(input.crawl_attachments);
    }
    if let Some(var_857) = &input.attachment_field_mappings {
        let mut array_858 = object.key("AttachmentFieldMappings").start_array();
        for item_859 in var_857 {
            {
                let mut object_860 = array_858.value().start_object();
                crate::json_ser::serialize_structure_crate_model_confluence_attachment_to_index_field_mapping(&mut object_860, item_859)?;
                object_860.finish();
            }
        }
        array_858.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_urls(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Urls,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_861) = &input.seed_url_configuration {
        let mut object_862 = object.key("SeedUrlConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_seed_url_configuration(
            &mut object_862,
            var_861,
        )?;
        object_862.finish();
    }
    if let Some(var_863) = &input.site_maps_configuration {
        let mut object_864 = object.key("SiteMapsConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_site_maps_configuration(
            &mut object_864,
            var_863,
        )?;
        object_864.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_proxy_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProxyConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_865) = &input.host {
        object.key("Host").string(var_865.as_str());
    }
    if let Some(var_866) = &input.port {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_866).into()),
        );
    }
    if let Some(var_867) = &input.credentials {
        object.key("Credentials").string(var_867.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_authentication_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AuthenticationConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_868) = &input.basic_authentication {
        let mut array_869 = object.key("BasicAuthentication").start_array();
        for item_870 in var_868 {
            {
                let mut object_871 = array_869.value().start_object();
                crate::json_ser::serialize_structure_crate_model_basic_authentication_configuration(&mut object_871, item_870)?;
                object_871.finish();
            }
        }
        array_869.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_salesforce_standard_knowledge_article_type_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SalesforceStandardKnowledgeArticleTypeConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_872) = &input.document_data_field_name {
        object.key("DocumentDataFieldName").string(var_872.as_str());
    }
    if let Some(var_873) = &input.document_title_field_name {
        object
            .key("DocumentTitleFieldName")
            .string(var_873.as_str());
    }
    if let Some(var_874) = &input.field_mappings {
        let mut array_875 = object.key("FieldMappings").start_array();
        for item_876 in var_874 {
            {
                let mut object_877 = array_875.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_877, item_876)?;
                object_877.finish();
            }
        }
        array_875.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_salesforce_custom_knowledge_article_type_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SalesforceCustomKnowledgeArticleTypeConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_878) = &input.name {
        object.key("Name").string(var_878.as_str());
    }
    if let Some(var_879) = &input.document_data_field_name {
        object.key("DocumentDataFieldName").string(var_879.as_str());
    }
    if let Some(var_880) = &input.document_title_field_name {
        object
            .key("DocumentTitleFieldName")
            .string(var_880.as_str());
    }
    if let Some(var_881) = &input.field_mappings {
        let mut array_882 = object.key("FieldMappings").start_array();
        for item_883 in var_881 {
            {
                let mut object_884 = array_882.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_884, item_883)?;
                object_884.finish();
            }
        }
        array_882.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_confluence_space_to_index_field_mapping(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConfluenceSpaceToIndexFieldMapping,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_885) = &input.data_source_field_name {
        object.key("DataSourceFieldName").string(var_885.as_str());
    }
    if let Some(var_886) = &input.date_field_format {
        object.key("DateFieldFormat").string(var_886.as_str());
    }
    if let Some(var_887) = &input.index_field_name {
        object.key("IndexFieldName").string(var_887.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_confluence_page_to_index_field_mapping(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConfluencePageToIndexFieldMapping,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_888) = &input.data_source_field_name {
        object.key("DataSourceFieldName").string(var_888.as_str());
    }
    if let Some(var_889) = &input.date_field_format {
        object.key("DateFieldFormat").string(var_889.as_str());
    }
    if let Some(var_890) = &input.index_field_name {
        object.key("IndexFieldName").string(var_890.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_confluence_blog_to_index_field_mapping(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConfluenceBlogToIndexFieldMapping,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_891) = &input.data_source_field_name {
        object.key("DataSourceFieldName").string(var_891.as_str());
    }
    if let Some(var_892) = &input.date_field_format {
        object.key("DateFieldFormat").string(var_892.as_str());
    }
    if let Some(var_893) = &input.index_field_name {
        object.key("IndexFieldName").string(var_893.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_confluence_attachment_to_index_field_mapping(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConfluenceAttachmentToIndexFieldMapping,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_894) = &input.data_source_field_name {
        object.key("DataSourceFieldName").string(var_894.as_str());
    }
    if let Some(var_895) = &input.date_field_format {
        object.key("DateFieldFormat").string(var_895.as_str());
    }
    if let Some(var_896) = &input.index_field_name {
        object.key("IndexFieldName").string(var_896.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_seed_url_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SeedUrlConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_897) = &input.seed_urls {
        let mut array_898 = object.key("SeedUrls").start_array();
        for item_899 in var_897 {
            {
                array_898.value().string(item_899.as_str());
            }
        }
        array_898.finish();
    }
    if let Some(var_900) = &input.web_crawler_mode {
        object.key("WebCrawlerMode").string(var_900.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_site_maps_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SiteMapsConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_901) = &input.site_maps {
        let mut array_902 = object.key("SiteMaps").start_array();
        for item_903 in var_901 {
            {
                array_902.value().string(item_903.as_str());
            }
        }
        array_902.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_basic_authentication_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BasicAuthenticationConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_904) = &input.host {
        object.key("Host").string(var_904.as_str());
    }
    if let Some(var_905) = &input.port {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_905).into()),
        );
    }
    if let Some(var_906) = &input.credentials {
        object.key("Credentials").string(var_906.as_str());
    }
    Ok(())
}
