// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_associate_aws_account_with_partner_account_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociateAwsAccountWithPartnerAccountInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_1.as_str());
    }
    if let Some(var_2) = &input.sidewalk {
        let mut object_3 = object.key("Sidewalk").start_object();
        crate::json_ser::serialize_structure_crate_model_sidewalk_account_info(
            &mut object_3,
            var_2,
        )?;
        object_3.finish();
    }
    if let Some(var_4) = &input.tags {
        let mut array_5 = object.key("Tags").start_array();
        for item_6 in var_4 {
            {
                let mut object_7 = array_5.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_7, item_6)?;
                object_7.finish();
            }
        }
        array_5.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_associate_multicast_group_with_fuota_task_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociateMulticastGroupWithFuotaTaskInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_8) = &input.multicast_group_id {
        object.key("MulticastGroupId").string(var_8.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_associate_wireless_device_with_fuota_task_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociateWirelessDeviceWithFuotaTaskInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_9) = &input.wireless_device_id {
        object.key("WirelessDeviceId").string(var_9.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_associate_wireless_device_with_multicast_group_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociateWirelessDeviceWithMulticastGroupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_10) = &input.wireless_device_id {
        object.key("WirelessDeviceId").string(var_10.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_associate_wireless_device_with_thing_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociateWirelessDeviceWithThingInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_11) = &input.thing_arn {
        object.key("ThingArn").string(var_11.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_associate_wireless_gateway_with_certificate_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociateWirelessGatewayWithCertificateInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_12) = &input.iot_certificate_id {
        object.key("IotCertificateId").string(var_12.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_associate_wireless_gateway_with_thing_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociateWirelessGatewayWithThingInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_13) = &input.thing_arn {
        object.key("ThingArn").string(var_13.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_destination_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDestinationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_14) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_14.as_str());
    }
    if let Some(var_15) = &input.description {
        object.key("Description").string(var_15.as_str());
    }
    if let Some(var_16) = &input.expression {
        object.key("Expression").string(var_16.as_str());
    }
    if let Some(var_17) = &input.expression_type {
        object.key("ExpressionType").string(var_17.as_str());
    }
    if let Some(var_18) = &input.name {
        object.key("Name").string(var_18.as_str());
    }
    if let Some(var_19) = &input.role_arn {
        object.key("RoleArn").string(var_19.as_str());
    }
    if let Some(var_20) = &input.tags {
        let mut array_21 = object.key("Tags").start_array();
        for item_22 in var_20 {
            {
                let mut object_23 = array_21.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_23, item_22)?;
                object_23.finish();
            }
        }
        array_21.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_device_profile_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDeviceProfileInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_24) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_24.as_str());
    }
    if let Some(var_25) = &input.lo_ra_wan {
        let mut object_26 = object.key("LoRaWAN").start_object();
        crate::json_ser::serialize_structure_crate_model_lo_ra_wan_device_profile(
            &mut object_26,
            var_25,
        )?;
        object_26.finish();
    }
    if let Some(var_27) = &input.name {
        object.key("Name").string(var_27.as_str());
    }
    if let Some(var_28) = &input.tags {
        let mut array_29 = object.key("Tags").start_array();
        for item_30 in var_28 {
            {
                let mut object_31 = array_29.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_31, item_30)?;
                object_31.finish();
            }
        }
        array_29.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_fuota_task_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateFuotaTaskInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_32) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_32.as_str());
    }
    if let Some(var_33) = &input.description {
        object.key("Description").string(var_33.as_str());
    }
    if let Some(var_34) = &input.firmware_update_image {
        object.key("FirmwareUpdateImage").string(var_34.as_str());
    }
    if let Some(var_35) = &input.firmware_update_role {
        object.key("FirmwareUpdateRole").string(var_35.as_str());
    }
    if let Some(var_36) = &input.lo_ra_wan {
        let mut object_37 = object.key("LoRaWAN").start_object();
        crate::json_ser::serialize_structure_crate_model_lo_ra_wan_fuota_task(
            &mut object_37,
            var_36,
        )?;
        object_37.finish();
    }
    if let Some(var_38) = &input.name {
        object.key("Name").string(var_38.as_str());
    }
    if let Some(var_39) = &input.tags {
        let mut array_40 = object.key("Tags").start_array();
        for item_41 in var_39 {
            {
                let mut object_42 = array_40.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_42, item_41)?;
                object_42.finish();
            }
        }
        array_40.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_multicast_group_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateMulticastGroupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_43) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_43.as_str());
    }
    if let Some(var_44) = &input.description {
        object.key("Description").string(var_44.as_str());
    }
    if let Some(var_45) = &input.lo_ra_wan {
        let mut object_46 = object.key("LoRaWAN").start_object();
        crate::json_ser::serialize_structure_crate_model_lo_ra_wan_multicast(
            &mut object_46,
            var_45,
        )?;
        object_46.finish();
    }
    if let Some(var_47) = &input.name {
        object.key("Name").string(var_47.as_str());
    }
    if let Some(var_48) = &input.tags {
        let mut array_49 = object.key("Tags").start_array();
        for item_50 in var_48 {
            {
                let mut object_51 = array_49.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_51, item_50)?;
                object_51.finish();
            }
        }
        array_49.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_network_analyzer_configuration_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateNetworkAnalyzerConfigurationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_52) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_52.as_str());
    }
    if let Some(var_53) = &input.description {
        object.key("Description").string(var_53.as_str());
    }
    if let Some(var_54) = &input.name {
        object.key("Name").string(var_54.as_str());
    }
    if let Some(var_55) = &input.tags {
        let mut array_56 = object.key("Tags").start_array();
        for item_57 in var_55 {
            {
                let mut object_58 = array_56.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_58, item_57)?;
                object_58.finish();
            }
        }
        array_56.finish();
    }
    if let Some(var_59) = &input.trace_content {
        let mut object_60 = object.key("TraceContent").start_object();
        crate::json_ser::serialize_structure_crate_model_trace_content(&mut object_60, var_59)?;
        object_60.finish();
    }
    if let Some(var_61) = &input.wireless_devices {
        let mut array_62 = object.key("WirelessDevices").start_array();
        for item_63 in var_61 {
            {
                array_62.value().string(item_63.as_str());
            }
        }
        array_62.finish();
    }
    if let Some(var_64) = &input.wireless_gateways {
        let mut array_65 = object.key("WirelessGateways").start_array();
        for item_66 in var_64 {
            {
                array_65.value().string(item_66.as_str());
            }
        }
        array_65.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_service_profile_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateServiceProfileInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_67) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_67.as_str());
    }
    if let Some(var_68) = &input.lo_ra_wan {
        let mut object_69 = object.key("LoRaWAN").start_object();
        crate::json_ser::serialize_structure_crate_model_lo_ra_wan_service_profile(
            &mut object_69,
            var_68,
        )?;
        object_69.finish();
    }
    if let Some(var_70) = &input.name {
        object.key("Name").string(var_70.as_str());
    }
    if let Some(var_71) = &input.tags {
        let mut array_72 = object.key("Tags").start_array();
        for item_73 in var_71 {
            {
                let mut object_74 = array_72.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_74, item_73)?;
                object_74.finish();
            }
        }
        array_72.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_wireless_device_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateWirelessDeviceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_75) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_75.as_str());
    }
    if let Some(var_76) = &input.description {
        object.key("Description").string(var_76.as_str());
    }
    if let Some(var_77) = &input.destination_name {
        object.key("DestinationName").string(var_77.as_str());
    }
    if let Some(var_78) = &input.lo_ra_wan {
        let mut object_79 = object.key("LoRaWAN").start_object();
        crate::json_ser::serialize_structure_crate_model_lo_ra_wan_device(&mut object_79, var_78)?;
        object_79.finish();
    }
    if let Some(var_80) = &input.name {
        object.key("Name").string(var_80.as_str());
    }
    if let Some(var_81) = &input.tags {
        let mut array_82 = object.key("Tags").start_array();
        for item_83 in var_81 {
            {
                let mut object_84 = array_82.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_84, item_83)?;
                object_84.finish();
            }
        }
        array_82.finish();
    }
    if let Some(var_85) = &input.r#type {
        object.key("Type").string(var_85.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_wireless_gateway_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateWirelessGatewayInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_86) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_86.as_str());
    }
    if let Some(var_87) = &input.description {
        object.key("Description").string(var_87.as_str());
    }
    if let Some(var_88) = &input.lo_ra_wan {
        let mut object_89 = object.key("LoRaWAN").start_object();
        crate::json_ser::serialize_structure_crate_model_lo_ra_wan_gateway(&mut object_89, var_88)?;
        object_89.finish();
    }
    if let Some(var_90) = &input.name {
        object.key("Name").string(var_90.as_str());
    }
    if let Some(var_91) = &input.tags {
        let mut array_92 = object.key("Tags").start_array();
        for item_93 in var_91 {
            {
                let mut object_94 = array_92.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_94, item_93)?;
                object_94.finish();
            }
        }
        array_92.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_wireless_gateway_task_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateWirelessGatewayTaskInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_95) = &input.wireless_gateway_task_definition_id {
        object
            .key("WirelessGatewayTaskDefinitionId")
            .string(var_95.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_wireless_gateway_task_definition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateWirelessGatewayTaskDefinitionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object
            .key("AutoCreateTasks")
            .boolean(input.auto_create_tasks);
    }
    if let Some(var_96) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_96.as_str());
    }
    if let Some(var_97) = &input.name {
        object.key("Name").string(var_97.as_str());
    }
    if let Some(var_98) = &input.tags {
        let mut array_99 = object.key("Tags").start_array();
        for item_100 in var_98 {
            {
                let mut object_101 = array_99.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_101, item_100)?;
                object_101.finish();
            }
        }
        array_99.finish();
    }
    if let Some(var_102) = &input.update {
        let mut object_103 = object.key("Update").start_object();
        crate::json_ser::serialize_structure_crate_model_update_wireless_gateway_task_create(
            &mut object_103,
            var_102,
        )?;
        object_103.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_resource_log_level_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutResourceLogLevelInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_104) = &input.log_level {
        object.key("LogLevel").string(var_104.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_send_data_to_multicast_group_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SendDataToMulticastGroupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_105) = &input.payload_data {
        object.key("PayloadData").string(var_105.as_str());
    }
    if let Some(var_106) = &input.wireless_metadata {
        let mut object_107 = object.key("WirelessMetadata").start_object();
        crate::json_ser::serialize_structure_crate_model_multicast_wireless_metadata(
            &mut object_107,
            var_106,
        )?;
        object_107.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_send_data_to_wireless_device_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SendDataToWirelessDeviceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_108) = &input.payload_data {
        object.key("PayloadData").string(var_108.as_str());
    }
    if let Some(var_109) = &input.transmit_mode {
        object.key("TransmitMode").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_109).into()),
        );
    }
    if let Some(var_110) = &input.wireless_metadata {
        let mut object_111 = object.key("WirelessMetadata").start_object();
        crate::json_ser::serialize_structure_crate_model_wireless_metadata(
            &mut object_111,
            var_110,
        )?;
        object_111.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_bulk_associate_wireless_device_with_multicast_group_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartBulkAssociateWirelessDeviceWithMulticastGroupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_112) = &input.query_string {
        object.key("QueryString").string(var_112.as_str());
    }
    if let Some(var_113) = &input.tags {
        let mut array_114 = object.key("Tags").start_array();
        for item_115 in var_113 {
            {
                let mut object_116 = array_114.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_116, item_115)?;
                object_116.finish();
            }
        }
        array_114.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_bulk_disassociate_wireless_device_from_multicast_group_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartBulkDisassociateWirelessDeviceFromMulticastGroupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_117) = &input.query_string {
        object.key("QueryString").string(var_117.as_str());
    }
    if let Some(var_118) = &input.tags {
        let mut array_119 = object.key("Tags").start_array();
        for item_120 in var_118 {
            {
                let mut object_121 = array_119.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_121, item_120)?;
                object_121.finish();
            }
        }
        array_119.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_fuota_task_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartFuotaTaskInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_122) = &input.lo_ra_wan {
        let mut object_123 = object.key("LoRaWAN").start_object();
        crate::json_ser::serialize_structure_crate_model_lo_ra_wan_start_fuota_task(
            &mut object_123,
            var_122,
        )?;
        object_123.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_multicast_group_session_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartMulticastGroupSessionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_124) = &input.lo_ra_wan {
        let mut object_125 = object.key("LoRaWAN").start_object();
        crate::json_ser::serialize_structure_crate_model_lo_ra_wan_multicast_session(
            &mut object_125,
            var_124,
        )?;
        object_125.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_tag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_126) = &input.tags {
        let mut array_127 = object.key("Tags").start_array();
        for item_128 in var_126 {
            {
                let mut object_129 = array_127.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_129, item_128)?;
                object_129.finish();
            }
        }
        array_127.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_destination_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDestinationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_130) = &input.description {
        object.key("Description").string(var_130.as_str());
    }
    if let Some(var_131) = &input.expression {
        object.key("Expression").string(var_131.as_str());
    }
    if let Some(var_132) = &input.expression_type {
        object.key("ExpressionType").string(var_132.as_str());
    }
    if let Some(var_133) = &input.role_arn {
        object.key("RoleArn").string(var_133.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_event_configuration_by_resource_types_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateEventConfigurationByResourceTypesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_134) = &input.connection_status {
        let mut object_135 = object.key("ConnectionStatus").start_object();
        crate::json_ser::serialize_structure_crate_model_connection_status_resource_type_event_configuration(&mut object_135, var_134)?;
        object_135.finish();
    }
    if let Some(var_136) = &input.device_registration_state {
        let mut object_137 = object.key("DeviceRegistrationState").start_object();
        crate::json_ser::serialize_structure_crate_model_device_registration_state_resource_type_event_configuration(&mut object_137, var_136)?;
        object_137.finish();
    }
    if let Some(var_138) = &input.join {
        let mut object_139 = object.key("Join").start_object();
        crate::json_ser::serialize_structure_crate_model_join_resource_type_event_configuration(
            &mut object_139,
            var_138,
        )?;
        object_139.finish();
    }
    if let Some(var_140) = &input.proximity {
        let mut object_141 = object.key("Proximity").start_object();
        crate::json_ser::serialize_structure_crate_model_proximity_resource_type_event_configuration(&mut object_141, var_140)?;
        object_141.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_fuota_task_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateFuotaTaskInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_142) = &input.description {
        object.key("Description").string(var_142.as_str());
    }
    if let Some(var_143) = &input.firmware_update_image {
        object.key("FirmwareUpdateImage").string(var_143.as_str());
    }
    if let Some(var_144) = &input.firmware_update_role {
        object.key("FirmwareUpdateRole").string(var_144.as_str());
    }
    if let Some(var_145) = &input.lo_ra_wan {
        let mut object_146 = object.key("LoRaWAN").start_object();
        crate::json_ser::serialize_structure_crate_model_lo_ra_wan_fuota_task(
            &mut object_146,
            var_145,
        )?;
        object_146.finish();
    }
    if let Some(var_147) = &input.name {
        object.key("Name").string(var_147.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_log_levels_by_resource_types_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateLogLevelsByResourceTypesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_148) = &input.default_log_level {
        object.key("DefaultLogLevel").string(var_148.as_str());
    }
    if let Some(var_149) = &input.wireless_device_log_options {
        let mut array_150 = object.key("WirelessDeviceLogOptions").start_array();
        for item_151 in var_149 {
            {
                let mut object_152 = array_150.value().start_object();
                crate::json_ser::serialize_structure_crate_model_wireless_device_log_option(
                    &mut object_152,
                    item_151,
                )?;
                object_152.finish();
            }
        }
        array_150.finish();
    }
    if let Some(var_153) = &input.wireless_gateway_log_options {
        let mut array_154 = object.key("WirelessGatewayLogOptions").start_array();
        for item_155 in var_153 {
            {
                let mut object_156 = array_154.value().start_object();
                crate::json_ser::serialize_structure_crate_model_wireless_gateway_log_option(
                    &mut object_156,
                    item_155,
                )?;
                object_156.finish();
            }
        }
        array_154.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_multicast_group_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateMulticastGroupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_157) = &input.description {
        object.key("Description").string(var_157.as_str());
    }
    if let Some(var_158) = &input.lo_ra_wan {
        let mut object_159 = object.key("LoRaWAN").start_object();
        crate::json_ser::serialize_structure_crate_model_lo_ra_wan_multicast(
            &mut object_159,
            var_158,
        )?;
        object_159.finish();
    }
    if let Some(var_160) = &input.name {
        object.key("Name").string(var_160.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_network_analyzer_configuration_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateNetworkAnalyzerConfigurationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_161) = &input.description {
        object.key("Description").string(var_161.as_str());
    }
    if let Some(var_162) = &input.trace_content {
        let mut object_163 = object.key("TraceContent").start_object();
        crate::json_ser::serialize_structure_crate_model_trace_content(&mut object_163, var_162)?;
        object_163.finish();
    }
    if let Some(var_164) = &input.wireless_devices_to_add {
        let mut array_165 = object.key("WirelessDevicesToAdd").start_array();
        for item_166 in var_164 {
            {
                array_165.value().string(item_166.as_str());
            }
        }
        array_165.finish();
    }
    if let Some(var_167) = &input.wireless_devices_to_remove {
        let mut array_168 = object.key("WirelessDevicesToRemove").start_array();
        for item_169 in var_167 {
            {
                array_168.value().string(item_169.as_str());
            }
        }
        array_168.finish();
    }
    if let Some(var_170) = &input.wireless_gateways_to_add {
        let mut array_171 = object.key("WirelessGatewaysToAdd").start_array();
        for item_172 in var_170 {
            {
                array_171.value().string(item_172.as_str());
            }
        }
        array_171.finish();
    }
    if let Some(var_173) = &input.wireless_gateways_to_remove {
        let mut array_174 = object.key("WirelessGatewaysToRemove").start_array();
        for item_175 in var_173 {
            {
                array_174.value().string(item_175.as_str());
            }
        }
        array_174.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_partner_account_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdatePartnerAccountInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_176) = &input.sidewalk {
        let mut object_177 = object.key("Sidewalk").start_object();
        crate::json_ser::serialize_structure_crate_model_sidewalk_update_account(
            &mut object_177,
            var_176,
        )?;
        object_177.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_resource_event_configuration_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateResourceEventConfigurationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_178) = &input.connection_status {
        let mut object_179 = object.key("ConnectionStatus").start_object();
        crate::json_ser::serialize_structure_crate_model_connection_status_event_configuration(
            &mut object_179,
            var_178,
        )?;
        object_179.finish();
    }
    if let Some(var_180) = &input.device_registration_state {
        let mut object_181 = object.key("DeviceRegistrationState").start_object();
        crate::json_ser::serialize_structure_crate_model_device_registration_state_event_configuration(&mut object_181, var_180)?;
        object_181.finish();
    }
    if let Some(var_182) = &input.join {
        let mut object_183 = object.key("Join").start_object();
        crate::json_ser::serialize_structure_crate_model_join_event_configuration(
            &mut object_183,
            var_182,
        )?;
        object_183.finish();
    }
    if let Some(var_184) = &input.proximity {
        let mut object_185 = object.key("Proximity").start_object();
        crate::json_ser::serialize_structure_crate_model_proximity_event_configuration(
            &mut object_185,
            var_184,
        )?;
        object_185.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_wireless_device_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateWirelessDeviceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_186) = &input.description {
        object.key("Description").string(var_186.as_str());
    }
    if let Some(var_187) = &input.destination_name {
        object.key("DestinationName").string(var_187.as_str());
    }
    if let Some(var_188) = &input.lo_ra_wan {
        let mut object_189 = object.key("LoRaWAN").start_object();
        crate::json_ser::serialize_structure_crate_model_lo_ra_wan_update_device(
            &mut object_189,
            var_188,
        )?;
        object_189.finish();
    }
    if let Some(var_190) = &input.name {
        object.key("Name").string(var_190.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_wireless_gateway_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateWirelessGatewayInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_191) = &input.description {
        object.key("Description").string(var_191.as_str());
    }
    if let Some(var_192) = &input.join_eui_filters {
        let mut array_193 = object.key("JoinEuiFilters").start_array();
        for item_194 in var_192 {
            {
                let mut array_195 = array_193.value().start_array();
                for item_196 in item_194 {
                    {
                        array_195.value().string(item_196.as_str());
                    }
                }
                array_195.finish();
            }
        }
        array_193.finish();
    }
    if let Some(var_197) = &input.name {
        object.key("Name").string(var_197.as_str());
    }
    if let Some(var_198) = &input.net_id_filters {
        let mut array_199 = object.key("NetIdFilters").start_array();
        for item_200 in var_198 {
            {
                array_199.value().string(item_200.as_str());
            }
        }
        array_199.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_sidewalk_account_info(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SidewalkAccountInfo,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_201) = &input.amazon_id {
        object.key("AmazonId").string(var_201.as_str());
    }
    if let Some(var_202) = &input.app_server_private_key {
        object.key("AppServerPrivateKey").string(var_202.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_tag(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Tag,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_203) = &input.key {
        object.key("Key").string(var_203.as_str());
    }
    if let Some(var_204) = &input.value {
        object.key("Value").string(var_204.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_lo_ra_wan_device_profile(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LoRaWanDeviceProfile,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.supports_class_b {
        object.key("SupportsClassB").boolean(input.supports_class_b);
    }
    if let Some(var_205) = &input.class_b_timeout {
        object.key("ClassBTimeout").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_205).into()),
        );
    }
    if let Some(var_206) = &input.ping_slot_period {
        object.key("PingSlotPeriod").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_206).into()),
        );
    }
    if let Some(var_207) = &input.ping_slot_dr {
        object.key("PingSlotDr").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_207).into()),
        );
    }
    if let Some(var_208) = &input.ping_slot_freq {
        object.key("PingSlotFreq").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_208).into()),
        );
    }
    if input.supports_class_c {
        object.key("SupportsClassC").boolean(input.supports_class_c);
    }
    if let Some(var_209) = &input.class_c_timeout {
        object.key("ClassCTimeout").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_209).into()),
        );
    }
    if let Some(var_210) = &input.mac_version {
        object.key("MacVersion").string(var_210.as_str());
    }
    if let Some(var_211) = &input.reg_params_revision {
        object.key("RegParamsRevision").string(var_211.as_str());
    }
    if let Some(var_212) = &input.rx_delay1 {
        object.key("RxDelay1").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_212).into()),
        );
    }
    if let Some(var_213) = &input.rx_dr_offset1 {
        object.key("RxDrOffset1").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_213).into()),
        );
    }
    if let Some(var_214) = &input.rx_data_rate2 {
        object.key("RxDataRate2").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_214).into()),
        );
    }
    if let Some(var_215) = &input.rx_freq2 {
        object.key("RxFreq2").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_215).into()),
        );
    }
    if let Some(var_216) = &input.factory_preset_freqs_list {
        let mut array_217 = object.key("FactoryPresetFreqsList").start_array();
        for item_218 in var_216 {
            {
                array_217.value().number(
                    #[allow(clippy::useless_conversion)]
                    aws_smithy_types::Number::NegInt((*item_218).into()),
                );
            }
        }
        array_217.finish();
    }
    if let Some(var_219) = &input.max_eirp {
        object.key("MaxEirp").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_219).into()),
        );
    }
    if let Some(var_220) = &input.max_duty_cycle {
        object.key("MaxDutyCycle").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_220).into()),
        );
    }
    if let Some(var_221) = &input.rf_region {
        object.key("RfRegion").string(var_221.as_str());
    }
    if let Some(var_222) = &input.supports_join {
        object.key("SupportsJoin").boolean(*var_222);
    }
    if input.supports32_bit_f_cnt {
        object
            .key("Supports32BitFCnt")
            .boolean(input.supports32_bit_f_cnt);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_lo_ra_wan_fuota_task(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LoRaWanFuotaTask,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_223) = &input.rf_region {
        object.key("RfRegion").string(var_223.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_lo_ra_wan_multicast(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LoRaWanMulticast,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_224) = &input.rf_region {
        object.key("RfRegion").string(var_224.as_str());
    }
    if let Some(var_225) = &input.dl_class {
        object.key("DlClass").string(var_225.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_trace_content(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TraceContent,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_226) = &input.wireless_device_frame_info {
        object
            .key("WirelessDeviceFrameInfo")
            .string(var_226.as_str());
    }
    if let Some(var_227) = &input.log_level {
        object.key("LogLevel").string(var_227.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_lo_ra_wan_service_profile(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LoRaWanServiceProfile,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.add_gw_metadata {
        object.key("AddGwMetadata").boolean(input.add_gw_metadata);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_lo_ra_wan_device(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LoRaWanDevice,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_228) = &input.dev_eui {
        object.key("DevEui").string(var_228.as_str());
    }
    if let Some(var_229) = &input.device_profile_id {
        object.key("DeviceProfileId").string(var_229.as_str());
    }
    if let Some(var_230) = &input.service_profile_id {
        object.key("ServiceProfileId").string(var_230.as_str());
    }
    if let Some(var_231) = &input.otaa_v1_1 {
        let mut object_232 = object.key("OtaaV1_1").start_object();
        crate::json_ser::serialize_structure_crate_model_otaa_v11(&mut object_232, var_231)?;
        object_232.finish();
    }
    if let Some(var_233) = &input.otaa_v1_0_x {
        let mut object_234 = object.key("OtaaV1_0_x").start_object();
        crate::json_ser::serialize_structure_crate_model_otaa_v10_x(&mut object_234, var_233)?;
        object_234.finish();
    }
    if let Some(var_235) = &input.abp_v1_1 {
        let mut object_236 = object.key("AbpV1_1").start_object();
        crate::json_ser::serialize_structure_crate_model_abp_v11(&mut object_236, var_235)?;
        object_236.finish();
    }
    if let Some(var_237) = &input.abp_v1_0_x {
        let mut object_238 = object.key("AbpV1_0_x").start_object();
        crate::json_ser::serialize_structure_crate_model_abp_v10_x(&mut object_238, var_237)?;
        object_238.finish();
    }
    if let Some(var_239) = &input.f_ports {
        let mut object_240 = object.key("FPorts").start_object();
        crate::json_ser::serialize_structure_crate_model_f_ports(&mut object_240, var_239)?;
        object_240.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_lo_ra_wan_gateway(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LoRaWanGateway,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_241) = &input.gateway_eui {
        object.key("GatewayEui").string(var_241.as_str());
    }
    if let Some(var_242) = &input.rf_region {
        object.key("RfRegion").string(var_242.as_str());
    }
    if let Some(var_243) = &input.join_eui_filters {
        let mut array_244 = object.key("JoinEuiFilters").start_array();
        for item_245 in var_243 {
            {
                let mut array_246 = array_244.value().start_array();
                for item_247 in item_245 {
                    {
                        array_246.value().string(item_247.as_str());
                    }
                }
                array_246.finish();
            }
        }
        array_244.finish();
    }
    if let Some(var_248) = &input.net_id_filters {
        let mut array_249 = object.key("NetIdFilters").start_array();
        for item_250 in var_248 {
            {
                array_249.value().string(item_250.as_str());
            }
        }
        array_249.finish();
    }
    if let Some(var_251) = &input.sub_bands {
        let mut array_252 = object.key("SubBands").start_array();
        for item_253 in var_251 {
            {
                array_252.value().number(
                    #[allow(clippy::useless_conversion)]
                    aws_smithy_types::Number::NegInt((*item_253).into()),
                );
            }
        }
        array_252.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_update_wireless_gateway_task_create(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UpdateWirelessGatewayTaskCreate,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_254) = &input.update_data_source {
        object.key("UpdateDataSource").string(var_254.as_str());
    }
    if let Some(var_255) = &input.update_data_role {
        object.key("UpdateDataRole").string(var_255.as_str());
    }
    if let Some(var_256) = &input.lo_ra_wan {
        let mut object_257 = object.key("LoRaWAN").start_object();
        crate::json_ser::serialize_structure_crate_model_lo_ra_wan_update_gateway_task_create(
            &mut object_257,
            var_256,
        )?;
        object_257.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_multicast_wireless_metadata(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MulticastWirelessMetadata,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_258) = &input.lo_ra_wan {
        let mut object_259 = object.key("LoRaWAN").start_object();
        crate::json_ser::serialize_structure_crate_model_lo_ra_wan_multicast_metadata(
            &mut object_259,
            var_258,
        )?;
        object_259.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_wireless_metadata(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::WirelessMetadata,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_260) = &input.lo_ra_wan {
        let mut object_261 = object.key("LoRaWAN").start_object();
        crate::json_ser::serialize_structure_crate_model_lo_ra_wan_send_data_to_device(
            &mut object_261,
            var_260,
        )?;
        object_261.finish();
    }
    if let Some(var_262) = &input.sidewalk {
        let mut object_263 = object.key("Sidewalk").start_object();
        crate::json_ser::serialize_structure_crate_model_sidewalk_send_data_to_device(
            &mut object_263,
            var_262,
        )?;
        object_263.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_lo_ra_wan_start_fuota_task(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LoRaWanStartFuotaTask,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_264) = &input.start_time {
        object
            .key("StartTime")
            .date_time(var_264, aws_smithy_types::date_time::Format::DateTime)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_model_lo_ra_wan_multicast_session(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LoRaWanMulticastSession,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_265) = &input.dl_dr {
        object.key("DlDr").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_265).into()),
        );
    }
    if let Some(var_266) = &input.dl_freq {
        object.key("DlFreq").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_266).into()),
        );
    }
    if let Some(var_267) = &input.session_start_time {
        object
            .key("SessionStartTime")
            .date_time(var_267, aws_smithy_types::date_time::Format::DateTime)?;
    }
    if let Some(var_268) = &input.session_timeout {
        object.key("SessionTimeout").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_268).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_connection_status_resource_type_event_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConnectionStatusResourceTypeEventConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_269) = &input.lo_ra_wan {
        let mut object_270 = object.key("LoRaWAN").start_object();
        crate::json_ser::serialize_structure_crate_model_lo_ra_wan_connection_status_resource_type_event_configuration(&mut object_270, var_269)?;
        object_270.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_device_registration_state_resource_type_event_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DeviceRegistrationStateResourceTypeEventConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_271) = &input.sidewalk {
        let mut object_272 = object.key("Sidewalk").start_object();
        crate::json_ser::serialize_structure_crate_model_sidewalk_resource_type_event_configuration(&mut object_272, var_271)?;
        object_272.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_join_resource_type_event_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::JoinResourceTypeEventConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_273) = &input.lo_ra_wan {
        let mut object_274 = object.key("LoRaWAN").start_object();
        crate::json_ser::serialize_structure_crate_model_lo_ra_wan_join_resource_type_event_configuration(&mut object_274, var_273)?;
        object_274.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_proximity_resource_type_event_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProximityResourceTypeEventConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_275) = &input.sidewalk {
        let mut object_276 = object.key("Sidewalk").start_object();
        crate::json_ser::serialize_structure_crate_model_sidewalk_resource_type_event_configuration(&mut object_276, var_275)?;
        object_276.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_wireless_device_log_option(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::WirelessDeviceLogOption,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_277) = &input.r#type {
        object.key("Type").string(var_277.as_str());
    }
    if let Some(var_278) = &input.log_level {
        object.key("LogLevel").string(var_278.as_str());
    }
    if let Some(var_279) = &input.events {
        let mut array_280 = object.key("Events").start_array();
        for item_281 in var_279 {
            {
                let mut object_282 = array_280.value().start_object();
                crate::json_ser::serialize_structure_crate_model_wireless_device_event_log_option(
                    &mut object_282,
                    item_281,
                )?;
                object_282.finish();
            }
        }
        array_280.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_wireless_gateway_log_option(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::WirelessGatewayLogOption,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_283) = &input.r#type {
        object.key("Type").string(var_283.as_str());
    }
    if let Some(var_284) = &input.log_level {
        object.key("LogLevel").string(var_284.as_str());
    }
    if let Some(var_285) = &input.events {
        let mut array_286 = object.key("Events").start_array();
        for item_287 in var_285 {
            {
                let mut object_288 = array_286.value().start_object();
                crate::json_ser::serialize_structure_crate_model_wireless_gateway_event_log_option(
                    &mut object_288,
                    item_287,
                )?;
                object_288.finish();
            }
        }
        array_286.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_sidewalk_update_account(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SidewalkUpdateAccount,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_289) = &input.app_server_private_key {
        object.key("AppServerPrivateKey").string(var_289.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_connection_status_event_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConnectionStatusEventConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_290) = &input.lo_ra_wan {
        let mut object_291 = object.key("LoRaWAN").start_object();
        crate::json_ser::serialize_structure_crate_model_lo_ra_wan_connection_status_event_notification_configurations(&mut object_291, var_290)?;
        object_291.finish();
    }
    if let Some(var_292) = &input.wireless_gateway_id_event_topic {
        object
            .key("WirelessGatewayIdEventTopic")
            .string(var_292.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_device_registration_state_event_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DeviceRegistrationStateEventConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_293) = &input.sidewalk {
        let mut object_294 = object.key("Sidewalk").start_object();
        crate::json_ser::serialize_structure_crate_model_sidewalk_event_notification_configurations(&mut object_294, var_293)?;
        object_294.finish();
    }
    if let Some(var_295) = &input.wireless_device_id_event_topic {
        object
            .key("WirelessDeviceIdEventTopic")
            .string(var_295.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_join_event_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::JoinEventConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_296) = &input.lo_ra_wan {
        let mut object_297 = object.key("LoRaWAN").start_object();
        crate::json_ser::serialize_structure_crate_model_lo_ra_wan_join_event_notification_configurations(&mut object_297, var_296)?;
        object_297.finish();
    }
    if let Some(var_298) = &input.wireless_device_id_event_topic {
        object
            .key("WirelessDeviceIdEventTopic")
            .string(var_298.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_proximity_event_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProximityEventConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_299) = &input.sidewalk {
        let mut object_300 = object.key("Sidewalk").start_object();
        crate::json_ser::serialize_structure_crate_model_sidewalk_event_notification_configurations(&mut object_300, var_299)?;
        object_300.finish();
    }
    if let Some(var_301) = &input.wireless_device_id_event_topic {
        object
            .key("WirelessDeviceIdEventTopic")
            .string(var_301.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_lo_ra_wan_update_device(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LoRaWanUpdateDevice,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_302) = &input.device_profile_id {
        object.key("DeviceProfileId").string(var_302.as_str());
    }
    if let Some(var_303) = &input.service_profile_id {
        object.key("ServiceProfileId").string(var_303.as_str());
    }
    if let Some(var_304) = &input.abp_v1_1 {
        let mut object_305 = object.key("AbpV1_1").start_object();
        crate::json_ser::serialize_structure_crate_model_update_abp_v11(&mut object_305, var_304)?;
        object_305.finish();
    }
    if let Some(var_306) = &input.abp_v1_0_x {
        let mut object_307 = object.key("AbpV1_0_x").start_object();
        crate::json_ser::serialize_structure_crate_model_update_abp_v10_x(
            &mut object_307,
            var_306,
        )?;
        object_307.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_otaa_v11(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OtaaV11,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_308) = &input.app_key {
        object.key("AppKey").string(var_308.as_str());
    }
    if let Some(var_309) = &input.nwk_key {
        object.key("NwkKey").string(var_309.as_str());
    }
    if let Some(var_310) = &input.join_eui {
        object.key("JoinEui").string(var_310.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_otaa_v10_x(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OtaaV10X,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_311) = &input.app_key {
        object.key("AppKey").string(var_311.as_str());
    }
    if let Some(var_312) = &input.app_eui {
        object.key("AppEui").string(var_312.as_str());
    }
    if let Some(var_313) = &input.gen_app_key {
        object.key("GenAppKey").string(var_313.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_abp_v11(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AbpV11,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_314) = &input.dev_addr {
        object.key("DevAddr").string(var_314.as_str());
    }
    if let Some(var_315) = &input.session_keys {
        let mut object_316 = object.key("SessionKeys").start_object();
        crate::json_ser::serialize_structure_crate_model_session_keys_abp_v11(
            &mut object_316,
            var_315,
        )?;
        object_316.finish();
    }
    if let Some(var_317) = &input.f_cnt_start {
        object.key("FCntStart").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_317).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_abp_v10_x(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AbpV10X,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_318) = &input.dev_addr {
        object.key("DevAddr").string(var_318.as_str());
    }
    if let Some(var_319) = &input.session_keys {
        let mut object_320 = object.key("SessionKeys").start_object();
        crate::json_ser::serialize_structure_crate_model_session_keys_abp_v10_x(
            &mut object_320,
            var_319,
        )?;
        object_320.finish();
    }
    if let Some(var_321) = &input.f_cnt_start {
        object.key("FCntStart").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_321).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_f_ports(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FPorts,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_322) = &input.fuota {
        object.key("Fuota").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_322).into()),
        );
    }
    if let Some(var_323) = &input.multicast {
        object.key("Multicast").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_323).into()),
        );
    }
    if let Some(var_324) = &input.clock_sync {
        object.key("ClockSync").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_324).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_lo_ra_wan_update_gateway_task_create(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LoRaWanUpdateGatewayTaskCreate,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_325) = &input.update_signature {
        object.key("UpdateSignature").string(var_325.as_str());
    }
    if let Some(var_326) = &input.sig_key_crc {
        object.key("SigKeyCrc").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_326).into()),
        );
    }
    if let Some(var_327) = &input.current_version {
        let mut object_328 = object.key("CurrentVersion").start_object();
        crate::json_ser::serialize_structure_crate_model_lo_ra_wan_gateway_version(
            &mut object_328,
            var_327,
        )?;
        object_328.finish();
    }
    if let Some(var_329) = &input.update_version {
        let mut object_330 = object.key("UpdateVersion").start_object();
        crate::json_ser::serialize_structure_crate_model_lo_ra_wan_gateway_version(
            &mut object_330,
            var_329,
        )?;
        object_330.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_lo_ra_wan_multicast_metadata(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LoRaWanMulticastMetadata,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_331) = &input.f_port {
        object.key("FPort").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_331).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_lo_ra_wan_send_data_to_device(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LoRaWanSendDataToDevice,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_332) = &input.f_port {
        object.key("FPort").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_332).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_sidewalk_send_data_to_device(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SidewalkSendDataToDevice,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_333) = &input.seq {
        object.key("Seq").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_333).into()),
        );
    }
    if let Some(var_334) = &input.message_type {
        object.key("MessageType").string(var_334.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_lo_ra_wan_connection_status_resource_type_event_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LoRaWanConnectionStatusResourceTypeEventConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_335) = &input.wireless_gateway_event_topic {
        object
            .key("WirelessGatewayEventTopic")
            .string(var_335.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_sidewalk_resource_type_event_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SidewalkResourceTypeEventConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_336) = &input.wireless_device_event_topic {
        object
            .key("WirelessDeviceEventTopic")
            .string(var_336.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_lo_ra_wan_join_resource_type_event_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LoRaWanJoinResourceTypeEventConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_337) = &input.wireless_device_event_topic {
        object
            .key("WirelessDeviceEventTopic")
            .string(var_337.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_wireless_device_event_log_option(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::WirelessDeviceEventLogOption,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_338) = &input.event {
        object.key("Event").string(var_338.as_str());
    }
    if let Some(var_339) = &input.log_level {
        object.key("LogLevel").string(var_339.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_wireless_gateway_event_log_option(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::WirelessGatewayEventLogOption,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_340) = &input.event {
        object.key("Event").string(var_340.as_str());
    }
    if let Some(var_341) = &input.log_level {
        object.key("LogLevel").string(var_341.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_lo_ra_wan_connection_status_event_notification_configurations(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LoRaWanConnectionStatusEventNotificationConfigurations,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_342) = &input.gateway_eui_event_topic {
        object.key("GatewayEuiEventTopic").string(var_342.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_sidewalk_event_notification_configurations(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SidewalkEventNotificationConfigurations,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_343) = &input.amazon_id_event_topic {
        object.key("AmazonIdEventTopic").string(var_343.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_lo_ra_wan_join_event_notification_configurations(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LoRaWanJoinEventNotificationConfigurations,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_344) = &input.dev_eui_event_topic {
        object.key("DevEuiEventTopic").string(var_344.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_update_abp_v11(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UpdateAbpV11,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_345) = &input.f_cnt_start {
        object.key("FCntStart").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_345).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_update_abp_v10_x(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UpdateAbpV10X,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_346) = &input.f_cnt_start {
        object.key("FCntStart").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_346).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_session_keys_abp_v11(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SessionKeysAbpV11,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_347) = &input.f_nwk_s_int_key {
        object.key("FNwkSIntKey").string(var_347.as_str());
    }
    if let Some(var_348) = &input.s_nwk_s_int_key {
        object.key("SNwkSIntKey").string(var_348.as_str());
    }
    if let Some(var_349) = &input.nwk_s_enc_key {
        object.key("NwkSEncKey").string(var_349.as_str());
    }
    if let Some(var_350) = &input.app_s_key {
        object.key("AppSKey").string(var_350.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_session_keys_abp_v10_x(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SessionKeysAbpV10X,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_351) = &input.nwk_s_key {
        object.key("NwkSKey").string(var_351.as_str());
    }
    if let Some(var_352) = &input.app_s_key {
        object.key("AppSKey").string(var_352.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_lo_ra_wan_gateway_version(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LoRaWanGatewayVersion,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_353) = &input.package_version {
        object.key("PackageVersion").string(var_353.as_str());
    }
    if let Some(var_354) = &input.model {
        object.key("Model").string(var_354.as_str());
    }
    if let Some(var_355) = &input.station {
        object.key("Station").string(var_355.as_str());
    }
    Ok(())
}
