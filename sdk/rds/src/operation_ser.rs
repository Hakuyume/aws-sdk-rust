// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_operation_crate_operation_add_role_to_db_cluster(
    input: &crate::input::AddRoleToDbClusterInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AddRoleToDBCluster", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("DBClusterIdentifier");
    if let Some(var_2) = &input.db_cluster_identifier {
        scope_1.string(var_2);
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("RoleArn");
    if let Some(var_4) = &input.role_arn {
        scope_3.string(var_4);
    }
    #[allow(unused_mut)]
    let mut scope_5 = writer.prefix("FeatureName");
    if let Some(var_6) = &input.feature_name {
        scope_5.string(var_6);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_add_role_to_db_instance(
    input: &crate::input::AddRoleToDbInstanceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AddRoleToDBInstance", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_7 = writer.prefix("DBInstanceIdentifier");
    if let Some(var_8) = &input.db_instance_identifier {
        scope_7.string(var_8);
    }
    #[allow(unused_mut)]
    let mut scope_9 = writer.prefix("RoleArn");
    if let Some(var_10) = &input.role_arn {
        scope_9.string(var_10);
    }
    #[allow(unused_mut)]
    let mut scope_11 = writer.prefix("FeatureName");
    if let Some(var_12) = &input.feature_name {
        scope_11.string(var_12);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_add_source_identifier_to_subscription(
    input: &crate::input::AddSourceIdentifierToSubscriptionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "AddSourceIdentifierToSubscription",
        "2014-10-31",
    );
    #[allow(unused_mut)]
    let mut scope_13 = writer.prefix("SubscriptionName");
    if let Some(var_14) = &input.subscription_name {
        scope_13.string(var_14);
    }
    #[allow(unused_mut)]
    let mut scope_15 = writer.prefix("SourceIdentifier");
    if let Some(var_16) = &input.source_identifier {
        scope_15.string(var_16);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_add_tags_to_resource(
    input: &crate::input::AddTagsToResourceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AddTagsToResource", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_17 = writer.prefix("ResourceName");
    if let Some(var_18) = &input.resource_name {
        scope_17.string(var_18);
    }
    #[allow(unused_mut)]
    let mut scope_19 = writer.prefix("Tags");
    if let Some(var_20) = &input.tags {
        let mut list_22 = scope_19.start_list(false, Some("Tag"));
        for item_21 in var_20 {
            #[allow(unused_mut)]
            let mut entry_23 = list_22.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_23, item_21)?;
        }
        list_22.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_apply_pending_maintenance_action(
    input: &crate::input::ApplyPendingMaintenanceActionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ApplyPendingMaintenanceAction", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_24 = writer.prefix("ResourceIdentifier");
    if let Some(var_25) = &input.resource_identifier {
        scope_24.string(var_25);
    }
    #[allow(unused_mut)]
    let mut scope_26 = writer.prefix("ApplyAction");
    if let Some(var_27) = &input.apply_action {
        scope_26.string(var_27);
    }
    #[allow(unused_mut)]
    let mut scope_28 = writer.prefix("OptInType");
    if let Some(var_29) = &input.opt_in_type {
        scope_28.string(var_29);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_authorize_db_security_group_ingress(
    input: &crate::input::AuthorizeDbSecurityGroupIngressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "AuthorizeDBSecurityGroupIngress",
        "2014-10-31",
    );
    #[allow(unused_mut)]
    let mut scope_30 = writer.prefix("DBSecurityGroupName");
    if let Some(var_31) = &input.db_security_group_name {
        scope_30.string(var_31);
    }
    #[allow(unused_mut)]
    let mut scope_32 = writer.prefix("CIDRIP");
    if let Some(var_33) = &input.cidrip {
        scope_32.string(var_33);
    }
    #[allow(unused_mut)]
    let mut scope_34 = writer.prefix("EC2SecurityGroupName");
    if let Some(var_35) = &input.ec2_security_group_name {
        scope_34.string(var_35);
    }
    #[allow(unused_mut)]
    let mut scope_36 = writer.prefix("EC2SecurityGroupId");
    if let Some(var_37) = &input.ec2_security_group_id {
        scope_36.string(var_37);
    }
    #[allow(unused_mut)]
    let mut scope_38 = writer.prefix("EC2SecurityGroupOwnerId");
    if let Some(var_39) = &input.ec2_security_group_owner_id {
        scope_38.string(var_39);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_backtrack_db_cluster(
    input: &crate::input::BacktrackDbClusterInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "BacktrackDBCluster", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_40 = writer.prefix("DBClusterIdentifier");
    if let Some(var_41) = &input.db_cluster_identifier {
        scope_40.string(var_41);
    }
    #[allow(unused_mut)]
    let mut scope_42 = writer.prefix("BacktrackTo");
    if let Some(var_43) = &input.backtrack_to {
        scope_42.date_time(var_43, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_44 = writer.prefix("Force");
    if let Some(var_45) = &input.force {
        scope_44.boolean(*var_45);
    }
    #[allow(unused_mut)]
    let mut scope_46 = writer.prefix("UseEarliestTimeOnPointInTimeUnavailable");
    if let Some(var_47) = &input.use_earliest_time_on_point_in_time_unavailable {
        scope_46.boolean(*var_47);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_export_task(
    input: &crate::input::CancelExportTaskInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CancelExportTask", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_48 = writer.prefix("ExportTaskIdentifier");
    if let Some(var_49) = &input.export_task_identifier {
        scope_48.string(var_49);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_copy_db_cluster_parameter_group(
    input: &crate::input::CopyDbClusterParameterGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CopyDBClusterParameterGroup", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_50 = writer.prefix("SourceDBClusterParameterGroupIdentifier");
    if let Some(var_51) = &input.source_db_cluster_parameter_group_identifier {
        scope_50.string(var_51);
    }
    #[allow(unused_mut)]
    let mut scope_52 = writer.prefix("TargetDBClusterParameterGroupIdentifier");
    if let Some(var_53) = &input.target_db_cluster_parameter_group_identifier {
        scope_52.string(var_53);
    }
    #[allow(unused_mut)]
    let mut scope_54 = writer.prefix("TargetDBClusterParameterGroupDescription");
    if let Some(var_55) = &input.target_db_cluster_parameter_group_description {
        scope_54.string(var_55);
    }
    #[allow(unused_mut)]
    let mut scope_56 = writer.prefix("Tags");
    if let Some(var_57) = &input.tags {
        let mut list_59 = scope_56.start_list(false, Some("Tag"));
        for item_58 in var_57 {
            #[allow(unused_mut)]
            let mut entry_60 = list_59.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_60, item_58)?;
        }
        list_59.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_copy_db_cluster_snapshot(
    input: &crate::input::CopyDbClusterSnapshotInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CopyDBClusterSnapshot", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_61 = writer.prefix("SourceDBClusterSnapshotIdentifier");
    if let Some(var_62) = &input.source_db_cluster_snapshot_identifier {
        scope_61.string(var_62);
    }
    #[allow(unused_mut)]
    let mut scope_63 = writer.prefix("TargetDBClusterSnapshotIdentifier");
    if let Some(var_64) = &input.target_db_cluster_snapshot_identifier {
        scope_63.string(var_64);
    }
    #[allow(unused_mut)]
    let mut scope_65 = writer.prefix("KmsKeyId");
    if let Some(var_66) = &input.kms_key_id {
        scope_65.string(var_66);
    }
    #[allow(unused_mut)]
    let mut scope_67 = writer.prefix("PreSignedUrl");
    if let Some(var_68) = &input.pre_signed_url {
        scope_67.string(var_68);
    }
    #[allow(unused_mut)]
    let mut scope_69 = writer.prefix("CopyTags");
    if let Some(var_70) = &input.copy_tags {
        scope_69.boolean(*var_70);
    }
    #[allow(unused_mut)]
    let mut scope_71 = writer.prefix("Tags");
    if let Some(var_72) = &input.tags {
        let mut list_74 = scope_71.start_list(false, Some("Tag"));
        for item_73 in var_72 {
            #[allow(unused_mut)]
            let mut entry_75 = list_74.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_75, item_73)?;
        }
        list_74.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_copy_db_parameter_group(
    input: &crate::input::CopyDbParameterGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CopyDBParameterGroup", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_76 = writer.prefix("SourceDBParameterGroupIdentifier");
    if let Some(var_77) = &input.source_db_parameter_group_identifier {
        scope_76.string(var_77);
    }
    #[allow(unused_mut)]
    let mut scope_78 = writer.prefix("TargetDBParameterGroupIdentifier");
    if let Some(var_79) = &input.target_db_parameter_group_identifier {
        scope_78.string(var_79);
    }
    #[allow(unused_mut)]
    let mut scope_80 = writer.prefix("TargetDBParameterGroupDescription");
    if let Some(var_81) = &input.target_db_parameter_group_description {
        scope_80.string(var_81);
    }
    #[allow(unused_mut)]
    let mut scope_82 = writer.prefix("Tags");
    if let Some(var_83) = &input.tags {
        let mut list_85 = scope_82.start_list(false, Some("Tag"));
        for item_84 in var_83 {
            #[allow(unused_mut)]
            let mut entry_86 = list_85.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_86, item_84)?;
        }
        list_85.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_copy_db_snapshot(
    input: &crate::input::CopyDbSnapshotInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CopyDBSnapshot", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_87 = writer.prefix("SourceDBSnapshotIdentifier");
    if let Some(var_88) = &input.source_db_snapshot_identifier {
        scope_87.string(var_88);
    }
    #[allow(unused_mut)]
    let mut scope_89 = writer.prefix("TargetDBSnapshotIdentifier");
    if let Some(var_90) = &input.target_db_snapshot_identifier {
        scope_89.string(var_90);
    }
    #[allow(unused_mut)]
    let mut scope_91 = writer.prefix("KmsKeyId");
    if let Some(var_92) = &input.kms_key_id {
        scope_91.string(var_92);
    }
    #[allow(unused_mut)]
    let mut scope_93 = writer.prefix("Tags");
    if let Some(var_94) = &input.tags {
        let mut list_96 = scope_93.start_list(false, Some("Tag"));
        for item_95 in var_94 {
            #[allow(unused_mut)]
            let mut entry_97 = list_96.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_97, item_95)?;
        }
        list_96.finish();
    }
    #[allow(unused_mut)]
    let mut scope_98 = writer.prefix("CopyTags");
    if let Some(var_99) = &input.copy_tags {
        scope_98.boolean(*var_99);
    }
    #[allow(unused_mut)]
    let mut scope_100 = writer.prefix("PreSignedUrl");
    if let Some(var_101) = &input.pre_signed_url {
        scope_100.string(var_101);
    }
    #[allow(unused_mut)]
    let mut scope_102 = writer.prefix("OptionGroupName");
    if let Some(var_103) = &input.option_group_name {
        scope_102.string(var_103);
    }
    #[allow(unused_mut)]
    let mut scope_104 = writer.prefix("TargetCustomAvailabilityZone");
    if let Some(var_105) = &input.target_custom_availability_zone {
        scope_104.string(var_105);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_copy_option_group(
    input: &crate::input::CopyOptionGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CopyOptionGroup", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_106 = writer.prefix("SourceOptionGroupIdentifier");
    if let Some(var_107) = &input.source_option_group_identifier {
        scope_106.string(var_107);
    }
    #[allow(unused_mut)]
    let mut scope_108 = writer.prefix("TargetOptionGroupIdentifier");
    if let Some(var_109) = &input.target_option_group_identifier {
        scope_108.string(var_109);
    }
    #[allow(unused_mut)]
    let mut scope_110 = writer.prefix("TargetOptionGroupDescription");
    if let Some(var_111) = &input.target_option_group_description {
        scope_110.string(var_111);
    }
    #[allow(unused_mut)]
    let mut scope_112 = writer.prefix("Tags");
    if let Some(var_113) = &input.tags {
        let mut list_115 = scope_112.start_list(false, Some("Tag"));
        for item_114 in var_113 {
            #[allow(unused_mut)]
            let mut entry_116 = list_115.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_116, item_114)?;
        }
        list_115.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_custom_db_engine_version(
    input: &crate::input::CreateCustomDbEngineVersionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateCustomDBEngineVersion", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_117 = writer.prefix("Engine");
    if let Some(var_118) = &input.engine {
        scope_117.string(var_118);
    }
    #[allow(unused_mut)]
    let mut scope_119 = writer.prefix("EngineVersion");
    if let Some(var_120) = &input.engine_version {
        scope_119.string(var_120);
    }
    #[allow(unused_mut)]
    let mut scope_121 = writer.prefix("DatabaseInstallationFilesS3BucketName");
    if let Some(var_122) = &input.database_installation_files_s3_bucket_name {
        scope_121.string(var_122);
    }
    #[allow(unused_mut)]
    let mut scope_123 = writer.prefix("DatabaseInstallationFilesS3Prefix");
    if let Some(var_124) = &input.database_installation_files_s3_prefix {
        scope_123.string(var_124);
    }
    #[allow(unused_mut)]
    let mut scope_125 = writer.prefix("KMSKeyId");
    if let Some(var_126) = &input.kms_key_id {
        scope_125.string(var_126);
    }
    #[allow(unused_mut)]
    let mut scope_127 = writer.prefix("Description");
    if let Some(var_128) = &input.description {
        scope_127.string(var_128);
    }
    #[allow(unused_mut)]
    let mut scope_129 = writer.prefix("Manifest");
    if let Some(var_130) = &input.manifest {
        scope_129.string(var_130);
    }
    #[allow(unused_mut)]
    let mut scope_131 = writer.prefix("Tags");
    if let Some(var_132) = &input.tags {
        let mut list_134 = scope_131.start_list(false, Some("Tag"));
        for item_133 in var_132 {
            #[allow(unused_mut)]
            let mut entry_135 = list_134.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_135, item_133)?;
        }
        list_134.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_db_cluster(
    input: &crate::input::CreateDbClusterInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateDBCluster", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_136 = writer.prefix("AvailabilityZones");
    if let Some(var_137) = &input.availability_zones {
        let mut list_139 = scope_136.start_list(false, Some("AvailabilityZone"));
        for item_138 in var_137 {
            #[allow(unused_mut)]
            let mut entry_140 = list_139.entry();
            entry_140.string(item_138);
        }
        list_139.finish();
    }
    #[allow(unused_mut)]
    let mut scope_141 = writer.prefix("BackupRetentionPeriod");
    if let Some(var_142) = &input.backup_retention_period {
        scope_141.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_142).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_143 = writer.prefix("CharacterSetName");
    if let Some(var_144) = &input.character_set_name {
        scope_143.string(var_144);
    }
    #[allow(unused_mut)]
    let mut scope_145 = writer.prefix("DatabaseName");
    if let Some(var_146) = &input.database_name {
        scope_145.string(var_146);
    }
    #[allow(unused_mut)]
    let mut scope_147 = writer.prefix("DBClusterIdentifier");
    if let Some(var_148) = &input.db_cluster_identifier {
        scope_147.string(var_148);
    }
    #[allow(unused_mut)]
    let mut scope_149 = writer.prefix("DBClusterParameterGroupName");
    if let Some(var_150) = &input.db_cluster_parameter_group_name {
        scope_149.string(var_150);
    }
    #[allow(unused_mut)]
    let mut scope_151 = writer.prefix("VpcSecurityGroupIds");
    if let Some(var_152) = &input.vpc_security_group_ids {
        let mut list_154 = scope_151.start_list(false, Some("VpcSecurityGroupId"));
        for item_153 in var_152 {
            #[allow(unused_mut)]
            let mut entry_155 = list_154.entry();
            entry_155.string(item_153);
        }
        list_154.finish();
    }
    #[allow(unused_mut)]
    let mut scope_156 = writer.prefix("DBSubnetGroupName");
    if let Some(var_157) = &input.db_subnet_group_name {
        scope_156.string(var_157);
    }
    #[allow(unused_mut)]
    let mut scope_158 = writer.prefix("Engine");
    if let Some(var_159) = &input.engine {
        scope_158.string(var_159);
    }
    #[allow(unused_mut)]
    let mut scope_160 = writer.prefix("EngineVersion");
    if let Some(var_161) = &input.engine_version {
        scope_160.string(var_161);
    }
    #[allow(unused_mut)]
    let mut scope_162 = writer.prefix("Port");
    if let Some(var_163) = &input.port {
        scope_162.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_163).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_164 = writer.prefix("MasterUsername");
    if let Some(var_165) = &input.master_username {
        scope_164.string(var_165);
    }
    #[allow(unused_mut)]
    let mut scope_166 = writer.prefix("MasterUserPassword");
    if let Some(var_167) = &input.master_user_password {
        scope_166.string(var_167);
    }
    #[allow(unused_mut)]
    let mut scope_168 = writer.prefix("OptionGroupName");
    if let Some(var_169) = &input.option_group_name {
        scope_168.string(var_169);
    }
    #[allow(unused_mut)]
    let mut scope_170 = writer.prefix("PreferredBackupWindow");
    if let Some(var_171) = &input.preferred_backup_window {
        scope_170.string(var_171);
    }
    #[allow(unused_mut)]
    let mut scope_172 = writer.prefix("PreferredMaintenanceWindow");
    if let Some(var_173) = &input.preferred_maintenance_window {
        scope_172.string(var_173);
    }
    #[allow(unused_mut)]
    let mut scope_174 = writer.prefix("ReplicationSourceIdentifier");
    if let Some(var_175) = &input.replication_source_identifier {
        scope_174.string(var_175);
    }
    #[allow(unused_mut)]
    let mut scope_176 = writer.prefix("Tags");
    if let Some(var_177) = &input.tags {
        let mut list_179 = scope_176.start_list(false, Some("Tag"));
        for item_178 in var_177 {
            #[allow(unused_mut)]
            let mut entry_180 = list_179.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_180, item_178)?;
        }
        list_179.finish();
    }
    #[allow(unused_mut)]
    let mut scope_181 = writer.prefix("StorageEncrypted");
    if let Some(var_182) = &input.storage_encrypted {
        scope_181.boolean(*var_182);
    }
    #[allow(unused_mut)]
    let mut scope_183 = writer.prefix("KmsKeyId");
    if let Some(var_184) = &input.kms_key_id {
        scope_183.string(var_184);
    }
    #[allow(unused_mut)]
    let mut scope_185 = writer.prefix("PreSignedUrl");
    if let Some(var_186) = &input.pre_signed_url {
        scope_185.string(var_186);
    }
    #[allow(unused_mut)]
    let mut scope_187 = writer.prefix("EnableIAMDatabaseAuthentication");
    if let Some(var_188) = &input.enable_iam_database_authentication {
        scope_187.boolean(*var_188);
    }
    #[allow(unused_mut)]
    let mut scope_189 = writer.prefix("BacktrackWindow");
    if let Some(var_190) = &input.backtrack_window {
        scope_189.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_190).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_191 = writer.prefix("EnableCloudwatchLogsExports");
    if let Some(var_192) = &input.enable_cloudwatch_logs_exports {
        let mut list_194 = scope_191.start_list(false, None);
        for item_193 in var_192 {
            #[allow(unused_mut)]
            let mut entry_195 = list_194.entry();
            entry_195.string(item_193);
        }
        list_194.finish();
    }
    #[allow(unused_mut)]
    let mut scope_196 = writer.prefix("EngineMode");
    if let Some(var_197) = &input.engine_mode {
        scope_196.string(var_197);
    }
    #[allow(unused_mut)]
    let mut scope_198 = writer.prefix("ScalingConfiguration");
    if let Some(var_199) = &input.scaling_configuration {
        crate::query_ser::serialize_structure_crate_model_scaling_configuration(
            scope_198, var_199,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_200 = writer.prefix("DeletionProtection");
    if let Some(var_201) = &input.deletion_protection {
        scope_200.boolean(*var_201);
    }
    #[allow(unused_mut)]
    let mut scope_202 = writer.prefix("GlobalClusterIdentifier");
    if let Some(var_203) = &input.global_cluster_identifier {
        scope_202.string(var_203);
    }
    #[allow(unused_mut)]
    let mut scope_204 = writer.prefix("EnableHttpEndpoint");
    if let Some(var_205) = &input.enable_http_endpoint {
        scope_204.boolean(*var_205);
    }
    #[allow(unused_mut)]
    let mut scope_206 = writer.prefix("CopyTagsToSnapshot");
    if let Some(var_207) = &input.copy_tags_to_snapshot {
        scope_206.boolean(*var_207);
    }
    #[allow(unused_mut)]
    let mut scope_208 = writer.prefix("Domain");
    if let Some(var_209) = &input.domain {
        scope_208.string(var_209);
    }
    #[allow(unused_mut)]
    let mut scope_210 = writer.prefix("DomainIAMRoleName");
    if let Some(var_211) = &input.domain_iam_role_name {
        scope_210.string(var_211);
    }
    #[allow(unused_mut)]
    let mut scope_212 = writer.prefix("EnableGlobalWriteForwarding");
    if let Some(var_213) = &input.enable_global_write_forwarding {
        scope_212.boolean(*var_213);
    }
    #[allow(unused_mut)]
    let mut scope_214 = writer.prefix("DBClusterInstanceClass");
    if let Some(var_215) = &input.db_cluster_instance_class {
        scope_214.string(var_215);
    }
    #[allow(unused_mut)]
    let mut scope_216 = writer.prefix("AllocatedStorage");
    if let Some(var_217) = &input.allocated_storage {
        scope_216.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_217).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_218 = writer.prefix("StorageType");
    if let Some(var_219) = &input.storage_type {
        scope_218.string(var_219);
    }
    #[allow(unused_mut)]
    let mut scope_220 = writer.prefix("Iops");
    if let Some(var_221) = &input.iops {
        scope_220.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_221).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_222 = writer.prefix("PubliclyAccessible");
    if let Some(var_223) = &input.publicly_accessible {
        scope_222.boolean(*var_223);
    }
    #[allow(unused_mut)]
    let mut scope_224 = writer.prefix("AutoMinorVersionUpgrade");
    if let Some(var_225) = &input.auto_minor_version_upgrade {
        scope_224.boolean(*var_225);
    }
    #[allow(unused_mut)]
    let mut scope_226 = writer.prefix("MonitoringInterval");
    if let Some(var_227) = &input.monitoring_interval {
        scope_226.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_227).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_228 = writer.prefix("MonitoringRoleArn");
    if let Some(var_229) = &input.monitoring_role_arn {
        scope_228.string(var_229);
    }
    #[allow(unused_mut)]
    let mut scope_230 = writer.prefix("EnablePerformanceInsights");
    if let Some(var_231) = &input.enable_performance_insights {
        scope_230.boolean(*var_231);
    }
    #[allow(unused_mut)]
    let mut scope_232 = writer.prefix("PerformanceInsightsKMSKeyId");
    if let Some(var_233) = &input.performance_insights_kms_key_id {
        scope_232.string(var_233);
    }
    #[allow(unused_mut)]
    let mut scope_234 = writer.prefix("PerformanceInsightsRetentionPeriod");
    if let Some(var_235) = &input.performance_insights_retention_period {
        scope_234.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_235).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_236 = writer.prefix("ServerlessV2ScalingConfiguration");
    if let Some(var_237) = &input.serverless_v2_scaling_configuration {
        crate::query_ser::serialize_structure_crate_model_serverless_v2_scaling_configuration(
            scope_236, var_237,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_db_cluster_endpoint(
    input: &crate::input::CreateDbClusterEndpointInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateDBClusterEndpoint", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_238 = writer.prefix("DBClusterIdentifier");
    if let Some(var_239) = &input.db_cluster_identifier {
        scope_238.string(var_239);
    }
    #[allow(unused_mut)]
    let mut scope_240 = writer.prefix("DBClusterEndpointIdentifier");
    if let Some(var_241) = &input.db_cluster_endpoint_identifier {
        scope_240.string(var_241);
    }
    #[allow(unused_mut)]
    let mut scope_242 = writer.prefix("EndpointType");
    if let Some(var_243) = &input.endpoint_type {
        scope_242.string(var_243);
    }
    #[allow(unused_mut)]
    let mut scope_244 = writer.prefix("StaticMembers");
    if let Some(var_245) = &input.static_members {
        let mut list_247 = scope_244.start_list(false, None);
        for item_246 in var_245 {
            #[allow(unused_mut)]
            let mut entry_248 = list_247.entry();
            entry_248.string(item_246);
        }
        list_247.finish();
    }
    #[allow(unused_mut)]
    let mut scope_249 = writer.prefix("ExcludedMembers");
    if let Some(var_250) = &input.excluded_members {
        let mut list_252 = scope_249.start_list(false, None);
        for item_251 in var_250 {
            #[allow(unused_mut)]
            let mut entry_253 = list_252.entry();
            entry_253.string(item_251);
        }
        list_252.finish();
    }
    #[allow(unused_mut)]
    let mut scope_254 = writer.prefix("Tags");
    if let Some(var_255) = &input.tags {
        let mut list_257 = scope_254.start_list(false, Some("Tag"));
        for item_256 in var_255 {
            #[allow(unused_mut)]
            let mut entry_258 = list_257.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_258, item_256)?;
        }
        list_257.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_db_cluster_parameter_group(
    input: &crate::input::CreateDbClusterParameterGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateDBClusterParameterGroup", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_259 = writer.prefix("DBClusterParameterGroupName");
    if let Some(var_260) = &input.db_cluster_parameter_group_name {
        scope_259.string(var_260);
    }
    #[allow(unused_mut)]
    let mut scope_261 = writer.prefix("DBParameterGroupFamily");
    if let Some(var_262) = &input.db_parameter_group_family {
        scope_261.string(var_262);
    }
    #[allow(unused_mut)]
    let mut scope_263 = writer.prefix("Description");
    if let Some(var_264) = &input.description {
        scope_263.string(var_264);
    }
    #[allow(unused_mut)]
    let mut scope_265 = writer.prefix("Tags");
    if let Some(var_266) = &input.tags {
        let mut list_268 = scope_265.start_list(false, Some("Tag"));
        for item_267 in var_266 {
            #[allow(unused_mut)]
            let mut entry_269 = list_268.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_269, item_267)?;
        }
        list_268.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_db_cluster_snapshot(
    input: &crate::input::CreateDbClusterSnapshotInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateDBClusterSnapshot", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_270 = writer.prefix("DBClusterSnapshotIdentifier");
    if let Some(var_271) = &input.db_cluster_snapshot_identifier {
        scope_270.string(var_271);
    }
    #[allow(unused_mut)]
    let mut scope_272 = writer.prefix("DBClusterIdentifier");
    if let Some(var_273) = &input.db_cluster_identifier {
        scope_272.string(var_273);
    }
    #[allow(unused_mut)]
    let mut scope_274 = writer.prefix("Tags");
    if let Some(var_275) = &input.tags {
        let mut list_277 = scope_274.start_list(false, Some("Tag"));
        for item_276 in var_275 {
            #[allow(unused_mut)]
            let mut entry_278 = list_277.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_278, item_276)?;
        }
        list_277.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_db_instance(
    input: &crate::input::CreateDbInstanceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateDBInstance", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_279 = writer.prefix("DBName");
    if let Some(var_280) = &input.db_name {
        scope_279.string(var_280);
    }
    #[allow(unused_mut)]
    let mut scope_281 = writer.prefix("DBInstanceIdentifier");
    if let Some(var_282) = &input.db_instance_identifier {
        scope_281.string(var_282);
    }
    #[allow(unused_mut)]
    let mut scope_283 = writer.prefix("AllocatedStorage");
    if let Some(var_284) = &input.allocated_storage {
        scope_283.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_284).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_285 = writer.prefix("DBInstanceClass");
    if let Some(var_286) = &input.db_instance_class {
        scope_285.string(var_286);
    }
    #[allow(unused_mut)]
    let mut scope_287 = writer.prefix("Engine");
    if let Some(var_288) = &input.engine {
        scope_287.string(var_288);
    }
    #[allow(unused_mut)]
    let mut scope_289 = writer.prefix("MasterUsername");
    if let Some(var_290) = &input.master_username {
        scope_289.string(var_290);
    }
    #[allow(unused_mut)]
    let mut scope_291 = writer.prefix("MasterUserPassword");
    if let Some(var_292) = &input.master_user_password {
        scope_291.string(var_292);
    }
    #[allow(unused_mut)]
    let mut scope_293 = writer.prefix("DBSecurityGroups");
    if let Some(var_294) = &input.db_security_groups {
        let mut list_296 = scope_293.start_list(false, Some("DBSecurityGroupName"));
        for item_295 in var_294 {
            #[allow(unused_mut)]
            let mut entry_297 = list_296.entry();
            entry_297.string(item_295);
        }
        list_296.finish();
    }
    #[allow(unused_mut)]
    let mut scope_298 = writer.prefix("VpcSecurityGroupIds");
    if let Some(var_299) = &input.vpc_security_group_ids {
        let mut list_301 = scope_298.start_list(false, Some("VpcSecurityGroupId"));
        for item_300 in var_299 {
            #[allow(unused_mut)]
            let mut entry_302 = list_301.entry();
            entry_302.string(item_300);
        }
        list_301.finish();
    }
    #[allow(unused_mut)]
    let mut scope_303 = writer.prefix("AvailabilityZone");
    if let Some(var_304) = &input.availability_zone {
        scope_303.string(var_304);
    }
    #[allow(unused_mut)]
    let mut scope_305 = writer.prefix("DBSubnetGroupName");
    if let Some(var_306) = &input.db_subnet_group_name {
        scope_305.string(var_306);
    }
    #[allow(unused_mut)]
    let mut scope_307 = writer.prefix("PreferredMaintenanceWindow");
    if let Some(var_308) = &input.preferred_maintenance_window {
        scope_307.string(var_308);
    }
    #[allow(unused_mut)]
    let mut scope_309 = writer.prefix("DBParameterGroupName");
    if let Some(var_310) = &input.db_parameter_group_name {
        scope_309.string(var_310);
    }
    #[allow(unused_mut)]
    let mut scope_311 = writer.prefix("BackupRetentionPeriod");
    if let Some(var_312) = &input.backup_retention_period {
        scope_311.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_312).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_313 = writer.prefix("PreferredBackupWindow");
    if let Some(var_314) = &input.preferred_backup_window {
        scope_313.string(var_314);
    }
    #[allow(unused_mut)]
    let mut scope_315 = writer.prefix("Port");
    if let Some(var_316) = &input.port {
        scope_315.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_316).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_317 = writer.prefix("MultiAZ");
    if let Some(var_318) = &input.multi_az {
        scope_317.boolean(*var_318);
    }
    #[allow(unused_mut)]
    let mut scope_319 = writer.prefix("EngineVersion");
    if let Some(var_320) = &input.engine_version {
        scope_319.string(var_320);
    }
    #[allow(unused_mut)]
    let mut scope_321 = writer.prefix("AutoMinorVersionUpgrade");
    if let Some(var_322) = &input.auto_minor_version_upgrade {
        scope_321.boolean(*var_322);
    }
    #[allow(unused_mut)]
    let mut scope_323 = writer.prefix("LicenseModel");
    if let Some(var_324) = &input.license_model {
        scope_323.string(var_324);
    }
    #[allow(unused_mut)]
    let mut scope_325 = writer.prefix("Iops");
    if let Some(var_326) = &input.iops {
        scope_325.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_326).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_327 = writer.prefix("OptionGroupName");
    if let Some(var_328) = &input.option_group_name {
        scope_327.string(var_328);
    }
    #[allow(unused_mut)]
    let mut scope_329 = writer.prefix("CharacterSetName");
    if let Some(var_330) = &input.character_set_name {
        scope_329.string(var_330);
    }
    #[allow(unused_mut)]
    let mut scope_331 = writer.prefix("NcharCharacterSetName");
    if let Some(var_332) = &input.nchar_character_set_name {
        scope_331.string(var_332);
    }
    #[allow(unused_mut)]
    let mut scope_333 = writer.prefix("PubliclyAccessible");
    if let Some(var_334) = &input.publicly_accessible {
        scope_333.boolean(*var_334);
    }
    #[allow(unused_mut)]
    let mut scope_335 = writer.prefix("Tags");
    if let Some(var_336) = &input.tags {
        let mut list_338 = scope_335.start_list(false, Some("Tag"));
        for item_337 in var_336 {
            #[allow(unused_mut)]
            let mut entry_339 = list_338.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_339, item_337)?;
        }
        list_338.finish();
    }
    #[allow(unused_mut)]
    let mut scope_340 = writer.prefix("DBClusterIdentifier");
    if let Some(var_341) = &input.db_cluster_identifier {
        scope_340.string(var_341);
    }
    #[allow(unused_mut)]
    let mut scope_342 = writer.prefix("StorageType");
    if let Some(var_343) = &input.storage_type {
        scope_342.string(var_343);
    }
    #[allow(unused_mut)]
    let mut scope_344 = writer.prefix("TdeCredentialArn");
    if let Some(var_345) = &input.tde_credential_arn {
        scope_344.string(var_345);
    }
    #[allow(unused_mut)]
    let mut scope_346 = writer.prefix("TdeCredentialPassword");
    if let Some(var_347) = &input.tde_credential_password {
        scope_346.string(var_347);
    }
    #[allow(unused_mut)]
    let mut scope_348 = writer.prefix("StorageEncrypted");
    if let Some(var_349) = &input.storage_encrypted {
        scope_348.boolean(*var_349);
    }
    #[allow(unused_mut)]
    let mut scope_350 = writer.prefix("KmsKeyId");
    if let Some(var_351) = &input.kms_key_id {
        scope_350.string(var_351);
    }
    #[allow(unused_mut)]
    let mut scope_352 = writer.prefix("Domain");
    if let Some(var_353) = &input.domain {
        scope_352.string(var_353);
    }
    #[allow(unused_mut)]
    let mut scope_354 = writer.prefix("CopyTagsToSnapshot");
    if let Some(var_355) = &input.copy_tags_to_snapshot {
        scope_354.boolean(*var_355);
    }
    #[allow(unused_mut)]
    let mut scope_356 = writer.prefix("MonitoringInterval");
    if let Some(var_357) = &input.monitoring_interval {
        scope_356.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_357).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_358 = writer.prefix("MonitoringRoleArn");
    if let Some(var_359) = &input.monitoring_role_arn {
        scope_358.string(var_359);
    }
    #[allow(unused_mut)]
    let mut scope_360 = writer.prefix("DomainIAMRoleName");
    if let Some(var_361) = &input.domain_iam_role_name {
        scope_360.string(var_361);
    }
    #[allow(unused_mut)]
    let mut scope_362 = writer.prefix("PromotionTier");
    if let Some(var_363) = &input.promotion_tier {
        scope_362.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_363).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_364 = writer.prefix("Timezone");
    if let Some(var_365) = &input.timezone {
        scope_364.string(var_365);
    }
    #[allow(unused_mut)]
    let mut scope_366 = writer.prefix("EnableIAMDatabaseAuthentication");
    if let Some(var_367) = &input.enable_iam_database_authentication {
        scope_366.boolean(*var_367);
    }
    #[allow(unused_mut)]
    let mut scope_368 = writer.prefix("EnablePerformanceInsights");
    if let Some(var_369) = &input.enable_performance_insights {
        scope_368.boolean(*var_369);
    }
    #[allow(unused_mut)]
    let mut scope_370 = writer.prefix("PerformanceInsightsKMSKeyId");
    if let Some(var_371) = &input.performance_insights_kms_key_id {
        scope_370.string(var_371);
    }
    #[allow(unused_mut)]
    let mut scope_372 = writer.prefix("PerformanceInsightsRetentionPeriod");
    if let Some(var_373) = &input.performance_insights_retention_period {
        scope_372.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_373).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_374 = writer.prefix("EnableCloudwatchLogsExports");
    if let Some(var_375) = &input.enable_cloudwatch_logs_exports {
        let mut list_377 = scope_374.start_list(false, None);
        for item_376 in var_375 {
            #[allow(unused_mut)]
            let mut entry_378 = list_377.entry();
            entry_378.string(item_376);
        }
        list_377.finish();
    }
    #[allow(unused_mut)]
    let mut scope_379 = writer.prefix("ProcessorFeatures");
    if let Some(var_380) = &input.processor_features {
        let mut list_382 = scope_379.start_list(false, Some("ProcessorFeature"));
        for item_381 in var_380 {
            #[allow(unused_mut)]
            let mut entry_383 = list_382.entry();
            crate::query_ser::serialize_structure_crate_model_processor_feature(
                entry_383, item_381,
            )?;
        }
        list_382.finish();
    }
    #[allow(unused_mut)]
    let mut scope_384 = writer.prefix("DeletionProtection");
    if let Some(var_385) = &input.deletion_protection {
        scope_384.boolean(*var_385);
    }
    #[allow(unused_mut)]
    let mut scope_386 = writer.prefix("MaxAllocatedStorage");
    if let Some(var_387) = &input.max_allocated_storage {
        scope_386.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_387).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_388 = writer.prefix("EnableCustomerOwnedIp");
    if let Some(var_389) = &input.enable_customer_owned_ip {
        scope_388.boolean(*var_389);
    }
    #[allow(unused_mut)]
    let mut scope_390 = writer.prefix("CustomIamInstanceProfile");
    if let Some(var_391) = &input.custom_iam_instance_profile {
        scope_390.string(var_391);
    }
    #[allow(unused_mut)]
    let mut scope_392 = writer.prefix("BackupTarget");
    if let Some(var_393) = &input.backup_target {
        scope_392.string(var_393);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_db_instance_read_replica(
    input: &crate::input::CreateDbInstanceReadReplicaInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateDBInstanceReadReplica", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_394 = writer.prefix("DBInstanceIdentifier");
    if let Some(var_395) = &input.db_instance_identifier {
        scope_394.string(var_395);
    }
    #[allow(unused_mut)]
    let mut scope_396 = writer.prefix("SourceDBInstanceIdentifier");
    if let Some(var_397) = &input.source_db_instance_identifier {
        scope_396.string(var_397);
    }
    #[allow(unused_mut)]
    let mut scope_398 = writer.prefix("DBInstanceClass");
    if let Some(var_399) = &input.db_instance_class {
        scope_398.string(var_399);
    }
    #[allow(unused_mut)]
    let mut scope_400 = writer.prefix("AvailabilityZone");
    if let Some(var_401) = &input.availability_zone {
        scope_400.string(var_401);
    }
    #[allow(unused_mut)]
    let mut scope_402 = writer.prefix("Port");
    if let Some(var_403) = &input.port {
        scope_402.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_403).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_404 = writer.prefix("MultiAZ");
    if let Some(var_405) = &input.multi_az {
        scope_404.boolean(*var_405);
    }
    #[allow(unused_mut)]
    let mut scope_406 = writer.prefix("AutoMinorVersionUpgrade");
    if let Some(var_407) = &input.auto_minor_version_upgrade {
        scope_406.boolean(*var_407);
    }
    #[allow(unused_mut)]
    let mut scope_408 = writer.prefix("Iops");
    if let Some(var_409) = &input.iops {
        scope_408.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_409).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_410 = writer.prefix("OptionGroupName");
    if let Some(var_411) = &input.option_group_name {
        scope_410.string(var_411);
    }
    #[allow(unused_mut)]
    let mut scope_412 = writer.prefix("DBParameterGroupName");
    if let Some(var_413) = &input.db_parameter_group_name {
        scope_412.string(var_413);
    }
    #[allow(unused_mut)]
    let mut scope_414 = writer.prefix("PubliclyAccessible");
    if let Some(var_415) = &input.publicly_accessible {
        scope_414.boolean(*var_415);
    }
    #[allow(unused_mut)]
    let mut scope_416 = writer.prefix("Tags");
    if let Some(var_417) = &input.tags {
        let mut list_419 = scope_416.start_list(false, Some("Tag"));
        for item_418 in var_417 {
            #[allow(unused_mut)]
            let mut entry_420 = list_419.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_420, item_418)?;
        }
        list_419.finish();
    }
    #[allow(unused_mut)]
    let mut scope_421 = writer.prefix("DBSubnetGroupName");
    if let Some(var_422) = &input.db_subnet_group_name {
        scope_421.string(var_422);
    }
    #[allow(unused_mut)]
    let mut scope_423 = writer.prefix("VpcSecurityGroupIds");
    if let Some(var_424) = &input.vpc_security_group_ids {
        let mut list_426 = scope_423.start_list(false, Some("VpcSecurityGroupId"));
        for item_425 in var_424 {
            #[allow(unused_mut)]
            let mut entry_427 = list_426.entry();
            entry_427.string(item_425);
        }
        list_426.finish();
    }
    #[allow(unused_mut)]
    let mut scope_428 = writer.prefix("StorageType");
    if let Some(var_429) = &input.storage_type {
        scope_428.string(var_429);
    }
    #[allow(unused_mut)]
    let mut scope_430 = writer.prefix("CopyTagsToSnapshot");
    if let Some(var_431) = &input.copy_tags_to_snapshot {
        scope_430.boolean(*var_431);
    }
    #[allow(unused_mut)]
    let mut scope_432 = writer.prefix("MonitoringInterval");
    if let Some(var_433) = &input.monitoring_interval {
        scope_432.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_433).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_434 = writer.prefix("MonitoringRoleArn");
    if let Some(var_435) = &input.monitoring_role_arn {
        scope_434.string(var_435);
    }
    #[allow(unused_mut)]
    let mut scope_436 = writer.prefix("KmsKeyId");
    if let Some(var_437) = &input.kms_key_id {
        scope_436.string(var_437);
    }
    #[allow(unused_mut)]
    let mut scope_438 = writer.prefix("PreSignedUrl");
    if let Some(var_439) = &input.pre_signed_url {
        scope_438.string(var_439);
    }
    #[allow(unused_mut)]
    let mut scope_440 = writer.prefix("EnableIAMDatabaseAuthentication");
    if let Some(var_441) = &input.enable_iam_database_authentication {
        scope_440.boolean(*var_441);
    }
    #[allow(unused_mut)]
    let mut scope_442 = writer.prefix("EnablePerformanceInsights");
    if let Some(var_443) = &input.enable_performance_insights {
        scope_442.boolean(*var_443);
    }
    #[allow(unused_mut)]
    let mut scope_444 = writer.prefix("PerformanceInsightsKMSKeyId");
    if let Some(var_445) = &input.performance_insights_kms_key_id {
        scope_444.string(var_445);
    }
    #[allow(unused_mut)]
    let mut scope_446 = writer.prefix("PerformanceInsightsRetentionPeriod");
    if let Some(var_447) = &input.performance_insights_retention_period {
        scope_446.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_447).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_448 = writer.prefix("EnableCloudwatchLogsExports");
    if let Some(var_449) = &input.enable_cloudwatch_logs_exports {
        let mut list_451 = scope_448.start_list(false, None);
        for item_450 in var_449 {
            #[allow(unused_mut)]
            let mut entry_452 = list_451.entry();
            entry_452.string(item_450);
        }
        list_451.finish();
    }
    #[allow(unused_mut)]
    let mut scope_453 = writer.prefix("ProcessorFeatures");
    if let Some(var_454) = &input.processor_features {
        let mut list_456 = scope_453.start_list(false, Some("ProcessorFeature"));
        for item_455 in var_454 {
            #[allow(unused_mut)]
            let mut entry_457 = list_456.entry();
            crate::query_ser::serialize_structure_crate_model_processor_feature(
                entry_457, item_455,
            )?;
        }
        list_456.finish();
    }
    #[allow(unused_mut)]
    let mut scope_458 = writer.prefix("UseDefaultProcessorFeatures");
    if let Some(var_459) = &input.use_default_processor_features {
        scope_458.boolean(*var_459);
    }
    #[allow(unused_mut)]
    let mut scope_460 = writer.prefix("DeletionProtection");
    if let Some(var_461) = &input.deletion_protection {
        scope_460.boolean(*var_461);
    }
    #[allow(unused_mut)]
    let mut scope_462 = writer.prefix("Domain");
    if let Some(var_463) = &input.domain {
        scope_462.string(var_463);
    }
    #[allow(unused_mut)]
    let mut scope_464 = writer.prefix("DomainIAMRoleName");
    if let Some(var_465) = &input.domain_iam_role_name {
        scope_464.string(var_465);
    }
    #[allow(unused_mut)]
    let mut scope_466 = writer.prefix("ReplicaMode");
    if let Some(var_467) = &input.replica_mode {
        scope_466.string(var_467.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_468 = writer.prefix("MaxAllocatedStorage");
    if let Some(var_469) = &input.max_allocated_storage {
        scope_468.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_469).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_470 = writer.prefix("CustomIamInstanceProfile");
    if let Some(var_471) = &input.custom_iam_instance_profile {
        scope_470.string(var_471);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_db_parameter_group(
    input: &crate::input::CreateDbParameterGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateDBParameterGroup", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_472 = writer.prefix("DBParameterGroupName");
    if let Some(var_473) = &input.db_parameter_group_name {
        scope_472.string(var_473);
    }
    #[allow(unused_mut)]
    let mut scope_474 = writer.prefix("DBParameterGroupFamily");
    if let Some(var_475) = &input.db_parameter_group_family {
        scope_474.string(var_475);
    }
    #[allow(unused_mut)]
    let mut scope_476 = writer.prefix("Description");
    if let Some(var_477) = &input.description {
        scope_476.string(var_477);
    }
    #[allow(unused_mut)]
    let mut scope_478 = writer.prefix("Tags");
    if let Some(var_479) = &input.tags {
        let mut list_481 = scope_478.start_list(false, Some("Tag"));
        for item_480 in var_479 {
            #[allow(unused_mut)]
            let mut entry_482 = list_481.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_482, item_480)?;
        }
        list_481.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_db_proxy(
    input: &crate::input::CreateDbProxyInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateDBProxy", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_483 = writer.prefix("DBProxyName");
    if let Some(var_484) = &input.db_proxy_name {
        scope_483.string(var_484);
    }
    #[allow(unused_mut)]
    let mut scope_485 = writer.prefix("EngineFamily");
    if let Some(var_486) = &input.engine_family {
        scope_485.string(var_486.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_487 = writer.prefix("Auth");
    if let Some(var_488) = &input.auth {
        let mut list_490 = scope_487.start_list(false, None);
        for item_489 in var_488 {
            #[allow(unused_mut)]
            let mut entry_491 = list_490.entry();
            crate::query_ser::serialize_structure_crate_model_user_auth_config(
                entry_491, item_489,
            )?;
        }
        list_490.finish();
    }
    #[allow(unused_mut)]
    let mut scope_492 = writer.prefix("RoleArn");
    if let Some(var_493) = &input.role_arn {
        scope_492.string(var_493);
    }
    #[allow(unused_mut)]
    let mut scope_494 = writer.prefix("VpcSubnetIds");
    if let Some(var_495) = &input.vpc_subnet_ids {
        let mut list_497 = scope_494.start_list(false, None);
        for item_496 in var_495 {
            #[allow(unused_mut)]
            let mut entry_498 = list_497.entry();
            entry_498.string(item_496);
        }
        list_497.finish();
    }
    #[allow(unused_mut)]
    let mut scope_499 = writer.prefix("VpcSecurityGroupIds");
    if let Some(var_500) = &input.vpc_security_group_ids {
        let mut list_502 = scope_499.start_list(false, None);
        for item_501 in var_500 {
            #[allow(unused_mut)]
            let mut entry_503 = list_502.entry();
            entry_503.string(item_501);
        }
        list_502.finish();
    }
    #[allow(unused_mut)]
    let mut scope_504 = writer.prefix("RequireTLS");
    if input.require_tls {
        scope_504.boolean(input.require_tls);
    }
    #[allow(unused_mut)]
    let mut scope_505 = writer.prefix("IdleClientTimeout");
    if let Some(var_506) = &input.idle_client_timeout {
        scope_505.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_506).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_507 = writer.prefix("DebugLogging");
    if input.debug_logging {
        scope_507.boolean(input.debug_logging);
    }
    #[allow(unused_mut)]
    let mut scope_508 = writer.prefix("Tags");
    if let Some(var_509) = &input.tags {
        let mut list_511 = scope_508.start_list(false, Some("Tag"));
        for item_510 in var_509 {
            #[allow(unused_mut)]
            let mut entry_512 = list_511.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_512, item_510)?;
        }
        list_511.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_db_proxy_endpoint(
    input: &crate::input::CreateDbProxyEndpointInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateDBProxyEndpoint", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_513 = writer.prefix("DBProxyName");
    if let Some(var_514) = &input.db_proxy_name {
        scope_513.string(var_514);
    }
    #[allow(unused_mut)]
    let mut scope_515 = writer.prefix("DBProxyEndpointName");
    if let Some(var_516) = &input.db_proxy_endpoint_name {
        scope_515.string(var_516);
    }
    #[allow(unused_mut)]
    let mut scope_517 = writer.prefix("VpcSubnetIds");
    if let Some(var_518) = &input.vpc_subnet_ids {
        let mut list_520 = scope_517.start_list(false, None);
        for item_519 in var_518 {
            #[allow(unused_mut)]
            let mut entry_521 = list_520.entry();
            entry_521.string(item_519);
        }
        list_520.finish();
    }
    #[allow(unused_mut)]
    let mut scope_522 = writer.prefix("VpcSecurityGroupIds");
    if let Some(var_523) = &input.vpc_security_group_ids {
        let mut list_525 = scope_522.start_list(false, None);
        for item_524 in var_523 {
            #[allow(unused_mut)]
            let mut entry_526 = list_525.entry();
            entry_526.string(item_524);
        }
        list_525.finish();
    }
    #[allow(unused_mut)]
    let mut scope_527 = writer.prefix("TargetRole");
    if let Some(var_528) = &input.target_role {
        scope_527.string(var_528.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_529 = writer.prefix("Tags");
    if let Some(var_530) = &input.tags {
        let mut list_532 = scope_529.start_list(false, Some("Tag"));
        for item_531 in var_530 {
            #[allow(unused_mut)]
            let mut entry_533 = list_532.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_533, item_531)?;
        }
        list_532.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_db_security_group(
    input: &crate::input::CreateDbSecurityGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateDBSecurityGroup", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_534 = writer.prefix("DBSecurityGroupName");
    if let Some(var_535) = &input.db_security_group_name {
        scope_534.string(var_535);
    }
    #[allow(unused_mut)]
    let mut scope_536 = writer.prefix("DBSecurityGroupDescription");
    if let Some(var_537) = &input.db_security_group_description {
        scope_536.string(var_537);
    }
    #[allow(unused_mut)]
    let mut scope_538 = writer.prefix("Tags");
    if let Some(var_539) = &input.tags {
        let mut list_541 = scope_538.start_list(false, Some("Tag"));
        for item_540 in var_539 {
            #[allow(unused_mut)]
            let mut entry_542 = list_541.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_542, item_540)?;
        }
        list_541.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_db_snapshot(
    input: &crate::input::CreateDbSnapshotInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateDBSnapshot", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_543 = writer.prefix("DBSnapshotIdentifier");
    if let Some(var_544) = &input.db_snapshot_identifier {
        scope_543.string(var_544);
    }
    #[allow(unused_mut)]
    let mut scope_545 = writer.prefix("DBInstanceIdentifier");
    if let Some(var_546) = &input.db_instance_identifier {
        scope_545.string(var_546);
    }
    #[allow(unused_mut)]
    let mut scope_547 = writer.prefix("Tags");
    if let Some(var_548) = &input.tags {
        let mut list_550 = scope_547.start_list(false, Some("Tag"));
        for item_549 in var_548 {
            #[allow(unused_mut)]
            let mut entry_551 = list_550.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_551, item_549)?;
        }
        list_550.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_db_subnet_group(
    input: &crate::input::CreateDbSubnetGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateDBSubnetGroup", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_552 = writer.prefix("DBSubnetGroupName");
    if let Some(var_553) = &input.db_subnet_group_name {
        scope_552.string(var_553);
    }
    #[allow(unused_mut)]
    let mut scope_554 = writer.prefix("DBSubnetGroupDescription");
    if let Some(var_555) = &input.db_subnet_group_description {
        scope_554.string(var_555);
    }
    #[allow(unused_mut)]
    let mut scope_556 = writer.prefix("SubnetIds");
    if let Some(var_557) = &input.subnet_ids {
        let mut list_559 = scope_556.start_list(false, Some("SubnetIdentifier"));
        for item_558 in var_557 {
            #[allow(unused_mut)]
            let mut entry_560 = list_559.entry();
            entry_560.string(item_558);
        }
        list_559.finish();
    }
    #[allow(unused_mut)]
    let mut scope_561 = writer.prefix("Tags");
    if let Some(var_562) = &input.tags {
        let mut list_564 = scope_561.start_list(false, Some("Tag"));
        for item_563 in var_562 {
            #[allow(unused_mut)]
            let mut entry_565 = list_564.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_565, item_563)?;
        }
        list_564.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_event_subscription(
    input: &crate::input::CreateEventSubscriptionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateEventSubscription", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_566 = writer.prefix("SubscriptionName");
    if let Some(var_567) = &input.subscription_name {
        scope_566.string(var_567);
    }
    #[allow(unused_mut)]
    let mut scope_568 = writer.prefix("SnsTopicArn");
    if let Some(var_569) = &input.sns_topic_arn {
        scope_568.string(var_569);
    }
    #[allow(unused_mut)]
    let mut scope_570 = writer.prefix("SourceType");
    if let Some(var_571) = &input.source_type {
        scope_570.string(var_571);
    }
    #[allow(unused_mut)]
    let mut scope_572 = writer.prefix("EventCategories");
    if let Some(var_573) = &input.event_categories {
        let mut list_575 = scope_572.start_list(false, Some("EventCategory"));
        for item_574 in var_573 {
            #[allow(unused_mut)]
            let mut entry_576 = list_575.entry();
            entry_576.string(item_574);
        }
        list_575.finish();
    }
    #[allow(unused_mut)]
    let mut scope_577 = writer.prefix("SourceIds");
    if let Some(var_578) = &input.source_ids {
        let mut list_580 = scope_577.start_list(false, Some("SourceId"));
        for item_579 in var_578 {
            #[allow(unused_mut)]
            let mut entry_581 = list_580.entry();
            entry_581.string(item_579);
        }
        list_580.finish();
    }
    #[allow(unused_mut)]
    let mut scope_582 = writer.prefix("Enabled");
    if let Some(var_583) = &input.enabled {
        scope_582.boolean(*var_583);
    }
    #[allow(unused_mut)]
    let mut scope_584 = writer.prefix("Tags");
    if let Some(var_585) = &input.tags {
        let mut list_587 = scope_584.start_list(false, Some("Tag"));
        for item_586 in var_585 {
            #[allow(unused_mut)]
            let mut entry_588 = list_587.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_588, item_586)?;
        }
        list_587.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_global_cluster(
    input: &crate::input::CreateGlobalClusterInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateGlobalCluster", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_589 = writer.prefix("GlobalClusterIdentifier");
    if let Some(var_590) = &input.global_cluster_identifier {
        scope_589.string(var_590);
    }
    #[allow(unused_mut)]
    let mut scope_591 = writer.prefix("SourceDBClusterIdentifier");
    if let Some(var_592) = &input.source_db_cluster_identifier {
        scope_591.string(var_592);
    }
    #[allow(unused_mut)]
    let mut scope_593 = writer.prefix("Engine");
    if let Some(var_594) = &input.engine {
        scope_593.string(var_594);
    }
    #[allow(unused_mut)]
    let mut scope_595 = writer.prefix("EngineVersion");
    if let Some(var_596) = &input.engine_version {
        scope_595.string(var_596);
    }
    #[allow(unused_mut)]
    let mut scope_597 = writer.prefix("DeletionProtection");
    if let Some(var_598) = &input.deletion_protection {
        scope_597.boolean(*var_598);
    }
    #[allow(unused_mut)]
    let mut scope_599 = writer.prefix("DatabaseName");
    if let Some(var_600) = &input.database_name {
        scope_599.string(var_600);
    }
    #[allow(unused_mut)]
    let mut scope_601 = writer.prefix("StorageEncrypted");
    if let Some(var_602) = &input.storage_encrypted {
        scope_601.boolean(*var_602);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_option_group(
    input: &crate::input::CreateOptionGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateOptionGroup", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_603 = writer.prefix("OptionGroupName");
    if let Some(var_604) = &input.option_group_name {
        scope_603.string(var_604);
    }
    #[allow(unused_mut)]
    let mut scope_605 = writer.prefix("EngineName");
    if let Some(var_606) = &input.engine_name {
        scope_605.string(var_606);
    }
    #[allow(unused_mut)]
    let mut scope_607 = writer.prefix("MajorEngineVersion");
    if let Some(var_608) = &input.major_engine_version {
        scope_607.string(var_608);
    }
    #[allow(unused_mut)]
    let mut scope_609 = writer.prefix("OptionGroupDescription");
    if let Some(var_610) = &input.option_group_description {
        scope_609.string(var_610);
    }
    #[allow(unused_mut)]
    let mut scope_611 = writer.prefix("Tags");
    if let Some(var_612) = &input.tags {
        let mut list_614 = scope_611.start_list(false, Some("Tag"));
        for item_613 in var_612 {
            #[allow(unused_mut)]
            let mut entry_615 = list_614.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_615, item_613)?;
        }
        list_614.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_custom_db_engine_version(
    input: &crate::input::DeleteCustomDbEngineVersionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteCustomDBEngineVersion", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_616 = writer.prefix("Engine");
    if let Some(var_617) = &input.engine {
        scope_616.string(var_617);
    }
    #[allow(unused_mut)]
    let mut scope_618 = writer.prefix("EngineVersion");
    if let Some(var_619) = &input.engine_version {
        scope_618.string(var_619);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_db_cluster(
    input: &crate::input::DeleteDbClusterInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteDBCluster", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_620 = writer.prefix("DBClusterIdentifier");
    if let Some(var_621) = &input.db_cluster_identifier {
        scope_620.string(var_621);
    }
    #[allow(unused_mut)]
    let mut scope_622 = writer.prefix("SkipFinalSnapshot");
    if input.skip_final_snapshot {
        scope_622.boolean(input.skip_final_snapshot);
    }
    #[allow(unused_mut)]
    let mut scope_623 = writer.prefix("FinalDBSnapshotIdentifier");
    if let Some(var_624) = &input.final_db_snapshot_identifier {
        scope_623.string(var_624);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_db_cluster_endpoint(
    input: &crate::input::DeleteDbClusterEndpointInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteDBClusterEndpoint", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_625 = writer.prefix("DBClusterEndpointIdentifier");
    if let Some(var_626) = &input.db_cluster_endpoint_identifier {
        scope_625.string(var_626);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_db_cluster_parameter_group(
    input: &crate::input::DeleteDbClusterParameterGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteDBClusterParameterGroup", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_627 = writer.prefix("DBClusterParameterGroupName");
    if let Some(var_628) = &input.db_cluster_parameter_group_name {
        scope_627.string(var_628);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_db_cluster_snapshot(
    input: &crate::input::DeleteDbClusterSnapshotInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteDBClusterSnapshot", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_629 = writer.prefix("DBClusterSnapshotIdentifier");
    if let Some(var_630) = &input.db_cluster_snapshot_identifier {
        scope_629.string(var_630);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_db_instance(
    input: &crate::input::DeleteDbInstanceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteDBInstance", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_631 = writer.prefix("DBInstanceIdentifier");
    if let Some(var_632) = &input.db_instance_identifier {
        scope_631.string(var_632);
    }
    #[allow(unused_mut)]
    let mut scope_633 = writer.prefix("SkipFinalSnapshot");
    if input.skip_final_snapshot {
        scope_633.boolean(input.skip_final_snapshot);
    }
    #[allow(unused_mut)]
    let mut scope_634 = writer.prefix("FinalDBSnapshotIdentifier");
    if let Some(var_635) = &input.final_db_snapshot_identifier {
        scope_634.string(var_635);
    }
    #[allow(unused_mut)]
    let mut scope_636 = writer.prefix("DeleteAutomatedBackups");
    if let Some(var_637) = &input.delete_automated_backups {
        scope_636.boolean(*var_637);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_db_instance_automated_backup(
    input: &crate::input::DeleteDbInstanceAutomatedBackupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteDBInstanceAutomatedBackup",
        "2014-10-31",
    );
    #[allow(unused_mut)]
    let mut scope_638 = writer.prefix("DbiResourceId");
    if let Some(var_639) = &input.dbi_resource_id {
        scope_638.string(var_639);
    }
    #[allow(unused_mut)]
    let mut scope_640 = writer.prefix("DBInstanceAutomatedBackupsArn");
    if let Some(var_641) = &input.db_instance_automated_backups_arn {
        scope_640.string(var_641);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_db_parameter_group(
    input: &crate::input::DeleteDbParameterGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteDBParameterGroup", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_642 = writer.prefix("DBParameterGroupName");
    if let Some(var_643) = &input.db_parameter_group_name {
        scope_642.string(var_643);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_db_proxy(
    input: &crate::input::DeleteDbProxyInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteDBProxy", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_644 = writer.prefix("DBProxyName");
    if let Some(var_645) = &input.db_proxy_name {
        scope_644.string(var_645);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_db_proxy_endpoint(
    input: &crate::input::DeleteDbProxyEndpointInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteDBProxyEndpoint", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_646 = writer.prefix("DBProxyEndpointName");
    if let Some(var_647) = &input.db_proxy_endpoint_name {
        scope_646.string(var_647);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_db_security_group(
    input: &crate::input::DeleteDbSecurityGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteDBSecurityGroup", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_648 = writer.prefix("DBSecurityGroupName");
    if let Some(var_649) = &input.db_security_group_name {
        scope_648.string(var_649);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_db_snapshot(
    input: &crate::input::DeleteDbSnapshotInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteDBSnapshot", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_650 = writer.prefix("DBSnapshotIdentifier");
    if let Some(var_651) = &input.db_snapshot_identifier {
        scope_650.string(var_651);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_db_subnet_group(
    input: &crate::input::DeleteDbSubnetGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteDBSubnetGroup", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_652 = writer.prefix("DBSubnetGroupName");
    if let Some(var_653) = &input.db_subnet_group_name {
        scope_652.string(var_653);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_event_subscription(
    input: &crate::input::DeleteEventSubscriptionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteEventSubscription", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_654 = writer.prefix("SubscriptionName");
    if let Some(var_655) = &input.subscription_name {
        scope_654.string(var_655);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_global_cluster(
    input: &crate::input::DeleteGlobalClusterInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteGlobalCluster", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_656 = writer.prefix("GlobalClusterIdentifier");
    if let Some(var_657) = &input.global_cluster_identifier {
        scope_656.string(var_657);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_option_group(
    input: &crate::input::DeleteOptionGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteOptionGroup", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_658 = writer.prefix("OptionGroupName");
    if let Some(var_659) = &input.option_group_name {
        scope_658.string(var_659);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_deregister_db_proxy_targets(
    input: &crate::input::DeregisterDbProxyTargetsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeregisterDBProxyTargets", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_660 = writer.prefix("DBProxyName");
    if let Some(var_661) = &input.db_proxy_name {
        scope_660.string(var_661);
    }
    #[allow(unused_mut)]
    let mut scope_662 = writer.prefix("TargetGroupName");
    if let Some(var_663) = &input.target_group_name {
        scope_662.string(var_663);
    }
    #[allow(unused_mut)]
    let mut scope_664 = writer.prefix("DBInstanceIdentifiers");
    if let Some(var_665) = &input.db_instance_identifiers {
        let mut list_667 = scope_664.start_list(false, None);
        for item_666 in var_665 {
            #[allow(unused_mut)]
            let mut entry_668 = list_667.entry();
            entry_668.string(item_666);
        }
        list_667.finish();
    }
    #[allow(unused_mut)]
    let mut scope_669 = writer.prefix("DBClusterIdentifiers");
    if let Some(var_670) = &input.db_cluster_identifiers {
        let mut list_672 = scope_669.start_list(false, None);
        for item_671 in var_670 {
            #[allow(unused_mut)]
            let mut entry_673 = list_672.entry();
            entry_673.string(item_671);
        }
        list_672.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_account_attributes(
    input: &crate::input::DescribeAccountAttributesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let _ = input;
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeAccountAttributes", "2014-10-31");
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_certificates(
    input: &crate::input::DescribeCertificatesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeCertificates", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_674 = writer.prefix("CertificateIdentifier");
    if let Some(var_675) = &input.certificate_identifier {
        scope_674.string(var_675);
    }
    #[allow(unused_mut)]
    let mut scope_676 = writer.prefix("Filters");
    if let Some(var_677) = &input.filters {
        let mut list_679 = scope_676.start_list(false, Some("Filter"));
        for item_678 in var_677 {
            #[allow(unused_mut)]
            let mut entry_680 = list_679.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_680, item_678)?;
        }
        list_679.finish();
    }
    #[allow(unused_mut)]
    let mut scope_681 = writer.prefix("MaxRecords");
    if let Some(var_682) = &input.max_records {
        scope_681.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_682).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_683 = writer.prefix("Marker");
    if let Some(var_684) = &input.marker {
        scope_683.string(var_684);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_db_cluster_backtracks(
    input: &crate::input::DescribeDbClusterBacktracksInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeDBClusterBacktracks", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_685 = writer.prefix("DBClusterIdentifier");
    if let Some(var_686) = &input.db_cluster_identifier {
        scope_685.string(var_686);
    }
    #[allow(unused_mut)]
    let mut scope_687 = writer.prefix("BacktrackIdentifier");
    if let Some(var_688) = &input.backtrack_identifier {
        scope_687.string(var_688);
    }
    #[allow(unused_mut)]
    let mut scope_689 = writer.prefix("Filters");
    if let Some(var_690) = &input.filters {
        let mut list_692 = scope_689.start_list(false, Some("Filter"));
        for item_691 in var_690 {
            #[allow(unused_mut)]
            let mut entry_693 = list_692.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_693, item_691)?;
        }
        list_692.finish();
    }
    #[allow(unused_mut)]
    let mut scope_694 = writer.prefix("MaxRecords");
    if let Some(var_695) = &input.max_records {
        scope_694.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_695).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_696 = writer.prefix("Marker");
    if let Some(var_697) = &input.marker {
        scope_696.string(var_697);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_db_cluster_endpoints(
    input: &crate::input::DescribeDbClusterEndpointsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeDBClusterEndpoints", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_698 = writer.prefix("DBClusterIdentifier");
    if let Some(var_699) = &input.db_cluster_identifier {
        scope_698.string(var_699);
    }
    #[allow(unused_mut)]
    let mut scope_700 = writer.prefix("DBClusterEndpointIdentifier");
    if let Some(var_701) = &input.db_cluster_endpoint_identifier {
        scope_700.string(var_701);
    }
    #[allow(unused_mut)]
    let mut scope_702 = writer.prefix("Filters");
    if let Some(var_703) = &input.filters {
        let mut list_705 = scope_702.start_list(false, Some("Filter"));
        for item_704 in var_703 {
            #[allow(unused_mut)]
            let mut entry_706 = list_705.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_706, item_704)?;
        }
        list_705.finish();
    }
    #[allow(unused_mut)]
    let mut scope_707 = writer.prefix("MaxRecords");
    if let Some(var_708) = &input.max_records {
        scope_707.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_708).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_709 = writer.prefix("Marker");
    if let Some(var_710) = &input.marker {
        scope_709.string(var_710);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_db_cluster_parameter_groups(
    input: &crate::input::DescribeDbClusterParameterGroupsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeDBClusterParameterGroups",
        "2014-10-31",
    );
    #[allow(unused_mut)]
    let mut scope_711 = writer.prefix("DBClusterParameterGroupName");
    if let Some(var_712) = &input.db_cluster_parameter_group_name {
        scope_711.string(var_712);
    }
    #[allow(unused_mut)]
    let mut scope_713 = writer.prefix("Filters");
    if let Some(var_714) = &input.filters {
        let mut list_716 = scope_713.start_list(false, Some("Filter"));
        for item_715 in var_714 {
            #[allow(unused_mut)]
            let mut entry_717 = list_716.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_717, item_715)?;
        }
        list_716.finish();
    }
    #[allow(unused_mut)]
    let mut scope_718 = writer.prefix("MaxRecords");
    if let Some(var_719) = &input.max_records {
        scope_718.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_719).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_720 = writer.prefix("Marker");
    if let Some(var_721) = &input.marker {
        scope_720.string(var_721);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_db_cluster_parameters(
    input: &crate::input::DescribeDbClusterParametersInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeDBClusterParameters", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_722 = writer.prefix("DBClusterParameterGroupName");
    if let Some(var_723) = &input.db_cluster_parameter_group_name {
        scope_722.string(var_723);
    }
    #[allow(unused_mut)]
    let mut scope_724 = writer.prefix("Source");
    if let Some(var_725) = &input.source {
        scope_724.string(var_725);
    }
    #[allow(unused_mut)]
    let mut scope_726 = writer.prefix("Filters");
    if let Some(var_727) = &input.filters {
        let mut list_729 = scope_726.start_list(false, Some("Filter"));
        for item_728 in var_727 {
            #[allow(unused_mut)]
            let mut entry_730 = list_729.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_730, item_728)?;
        }
        list_729.finish();
    }
    #[allow(unused_mut)]
    let mut scope_731 = writer.prefix("MaxRecords");
    if let Some(var_732) = &input.max_records {
        scope_731.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_732).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_733 = writer.prefix("Marker");
    if let Some(var_734) = &input.marker {
        scope_733.string(var_734);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_db_clusters(
    input: &crate::input::DescribeDbClustersInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeDBClusters", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_735 = writer.prefix("DBClusterIdentifier");
    if let Some(var_736) = &input.db_cluster_identifier {
        scope_735.string(var_736);
    }
    #[allow(unused_mut)]
    let mut scope_737 = writer.prefix("Filters");
    if let Some(var_738) = &input.filters {
        let mut list_740 = scope_737.start_list(false, Some("Filter"));
        for item_739 in var_738 {
            #[allow(unused_mut)]
            let mut entry_741 = list_740.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_741, item_739)?;
        }
        list_740.finish();
    }
    #[allow(unused_mut)]
    let mut scope_742 = writer.prefix("MaxRecords");
    if let Some(var_743) = &input.max_records {
        scope_742.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_743).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_744 = writer.prefix("Marker");
    if let Some(var_745) = &input.marker {
        scope_744.string(var_745);
    }
    #[allow(unused_mut)]
    let mut scope_746 = writer.prefix("IncludeShared");
    if input.include_shared {
        scope_746.boolean(input.include_shared);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_db_cluster_snapshot_attributes(
    input: &crate::input::DescribeDbClusterSnapshotAttributesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeDBClusterSnapshotAttributes",
        "2014-10-31",
    );
    #[allow(unused_mut)]
    let mut scope_747 = writer.prefix("DBClusterSnapshotIdentifier");
    if let Some(var_748) = &input.db_cluster_snapshot_identifier {
        scope_747.string(var_748);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_db_cluster_snapshots(
    input: &crate::input::DescribeDbClusterSnapshotsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeDBClusterSnapshots", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_749 = writer.prefix("DBClusterIdentifier");
    if let Some(var_750) = &input.db_cluster_identifier {
        scope_749.string(var_750);
    }
    #[allow(unused_mut)]
    let mut scope_751 = writer.prefix("DBClusterSnapshotIdentifier");
    if let Some(var_752) = &input.db_cluster_snapshot_identifier {
        scope_751.string(var_752);
    }
    #[allow(unused_mut)]
    let mut scope_753 = writer.prefix("SnapshotType");
    if let Some(var_754) = &input.snapshot_type {
        scope_753.string(var_754);
    }
    #[allow(unused_mut)]
    let mut scope_755 = writer.prefix("Filters");
    if let Some(var_756) = &input.filters {
        let mut list_758 = scope_755.start_list(false, Some("Filter"));
        for item_757 in var_756 {
            #[allow(unused_mut)]
            let mut entry_759 = list_758.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_759, item_757)?;
        }
        list_758.finish();
    }
    #[allow(unused_mut)]
    let mut scope_760 = writer.prefix("MaxRecords");
    if let Some(var_761) = &input.max_records {
        scope_760.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_761).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_762 = writer.prefix("Marker");
    if let Some(var_763) = &input.marker {
        scope_762.string(var_763);
    }
    #[allow(unused_mut)]
    let mut scope_764 = writer.prefix("IncludeShared");
    if input.include_shared {
        scope_764.boolean(input.include_shared);
    }
    #[allow(unused_mut)]
    let mut scope_765 = writer.prefix("IncludePublic");
    if input.include_public {
        scope_765.boolean(input.include_public);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_db_engine_versions(
    input: &crate::input::DescribeDbEngineVersionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeDBEngineVersions", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_766 = writer.prefix("Engine");
    if let Some(var_767) = &input.engine {
        scope_766.string(var_767);
    }
    #[allow(unused_mut)]
    let mut scope_768 = writer.prefix("EngineVersion");
    if let Some(var_769) = &input.engine_version {
        scope_768.string(var_769);
    }
    #[allow(unused_mut)]
    let mut scope_770 = writer.prefix("DBParameterGroupFamily");
    if let Some(var_771) = &input.db_parameter_group_family {
        scope_770.string(var_771);
    }
    #[allow(unused_mut)]
    let mut scope_772 = writer.prefix("Filters");
    if let Some(var_773) = &input.filters {
        let mut list_775 = scope_772.start_list(false, Some("Filter"));
        for item_774 in var_773 {
            #[allow(unused_mut)]
            let mut entry_776 = list_775.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_776, item_774)?;
        }
        list_775.finish();
    }
    #[allow(unused_mut)]
    let mut scope_777 = writer.prefix("MaxRecords");
    if let Some(var_778) = &input.max_records {
        scope_777.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_778).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_779 = writer.prefix("Marker");
    if let Some(var_780) = &input.marker {
        scope_779.string(var_780);
    }
    #[allow(unused_mut)]
    let mut scope_781 = writer.prefix("DefaultOnly");
    if input.default_only {
        scope_781.boolean(input.default_only);
    }
    #[allow(unused_mut)]
    let mut scope_782 = writer.prefix("ListSupportedCharacterSets");
    if let Some(var_783) = &input.list_supported_character_sets {
        scope_782.boolean(*var_783);
    }
    #[allow(unused_mut)]
    let mut scope_784 = writer.prefix("ListSupportedTimezones");
    if let Some(var_785) = &input.list_supported_timezones {
        scope_784.boolean(*var_785);
    }
    #[allow(unused_mut)]
    let mut scope_786 = writer.prefix("IncludeAll");
    if let Some(var_787) = &input.include_all {
        scope_786.boolean(*var_787);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_db_instance_automated_backups(
    input: &crate::input::DescribeDbInstanceAutomatedBackupsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeDBInstanceAutomatedBackups",
        "2014-10-31",
    );
    #[allow(unused_mut)]
    let mut scope_788 = writer.prefix("DbiResourceId");
    if let Some(var_789) = &input.dbi_resource_id {
        scope_788.string(var_789);
    }
    #[allow(unused_mut)]
    let mut scope_790 = writer.prefix("DBInstanceIdentifier");
    if let Some(var_791) = &input.db_instance_identifier {
        scope_790.string(var_791);
    }
    #[allow(unused_mut)]
    let mut scope_792 = writer.prefix("Filters");
    if let Some(var_793) = &input.filters {
        let mut list_795 = scope_792.start_list(false, Some("Filter"));
        for item_794 in var_793 {
            #[allow(unused_mut)]
            let mut entry_796 = list_795.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_796, item_794)?;
        }
        list_795.finish();
    }
    #[allow(unused_mut)]
    let mut scope_797 = writer.prefix("MaxRecords");
    if let Some(var_798) = &input.max_records {
        scope_797.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_798).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_799 = writer.prefix("Marker");
    if let Some(var_800) = &input.marker {
        scope_799.string(var_800);
    }
    #[allow(unused_mut)]
    let mut scope_801 = writer.prefix("DBInstanceAutomatedBackupsArn");
    if let Some(var_802) = &input.db_instance_automated_backups_arn {
        scope_801.string(var_802);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_db_instances(
    input: &crate::input::DescribeDbInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeDBInstances", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_803 = writer.prefix("DBInstanceIdentifier");
    if let Some(var_804) = &input.db_instance_identifier {
        scope_803.string(var_804);
    }
    #[allow(unused_mut)]
    let mut scope_805 = writer.prefix("Filters");
    if let Some(var_806) = &input.filters {
        let mut list_808 = scope_805.start_list(false, Some("Filter"));
        for item_807 in var_806 {
            #[allow(unused_mut)]
            let mut entry_809 = list_808.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_809, item_807)?;
        }
        list_808.finish();
    }
    #[allow(unused_mut)]
    let mut scope_810 = writer.prefix("MaxRecords");
    if let Some(var_811) = &input.max_records {
        scope_810.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_811).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_812 = writer.prefix("Marker");
    if let Some(var_813) = &input.marker {
        scope_812.string(var_813);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_db_log_files(
    input: &crate::input::DescribeDbLogFilesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeDBLogFiles", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_814 = writer.prefix("DBInstanceIdentifier");
    if let Some(var_815) = &input.db_instance_identifier {
        scope_814.string(var_815);
    }
    #[allow(unused_mut)]
    let mut scope_816 = writer.prefix("FilenameContains");
    if let Some(var_817) = &input.filename_contains {
        scope_816.string(var_817);
    }
    #[allow(unused_mut)]
    let mut scope_818 = writer.prefix("FileLastWritten");
    if input.file_last_written != 0 {
        scope_818.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.file_last_written).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_819 = writer.prefix("FileSize");
    if input.file_size != 0 {
        scope_819.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.file_size).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_820 = writer.prefix("Filters");
    if let Some(var_821) = &input.filters {
        let mut list_823 = scope_820.start_list(false, Some("Filter"));
        for item_822 in var_821 {
            #[allow(unused_mut)]
            let mut entry_824 = list_823.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_824, item_822)?;
        }
        list_823.finish();
    }
    #[allow(unused_mut)]
    let mut scope_825 = writer.prefix("MaxRecords");
    if let Some(var_826) = &input.max_records {
        scope_825.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_826).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_827 = writer.prefix("Marker");
    if let Some(var_828) = &input.marker {
        scope_827.string(var_828);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_db_parameter_groups(
    input: &crate::input::DescribeDbParameterGroupsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeDBParameterGroups", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_829 = writer.prefix("DBParameterGroupName");
    if let Some(var_830) = &input.db_parameter_group_name {
        scope_829.string(var_830);
    }
    #[allow(unused_mut)]
    let mut scope_831 = writer.prefix("Filters");
    if let Some(var_832) = &input.filters {
        let mut list_834 = scope_831.start_list(false, Some("Filter"));
        for item_833 in var_832 {
            #[allow(unused_mut)]
            let mut entry_835 = list_834.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_835, item_833)?;
        }
        list_834.finish();
    }
    #[allow(unused_mut)]
    let mut scope_836 = writer.prefix("MaxRecords");
    if let Some(var_837) = &input.max_records {
        scope_836.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_837).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_838 = writer.prefix("Marker");
    if let Some(var_839) = &input.marker {
        scope_838.string(var_839);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_db_parameters(
    input: &crate::input::DescribeDbParametersInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeDBParameters", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_840 = writer.prefix("DBParameterGroupName");
    if let Some(var_841) = &input.db_parameter_group_name {
        scope_840.string(var_841);
    }
    #[allow(unused_mut)]
    let mut scope_842 = writer.prefix("Source");
    if let Some(var_843) = &input.source {
        scope_842.string(var_843);
    }
    #[allow(unused_mut)]
    let mut scope_844 = writer.prefix("Filters");
    if let Some(var_845) = &input.filters {
        let mut list_847 = scope_844.start_list(false, Some("Filter"));
        for item_846 in var_845 {
            #[allow(unused_mut)]
            let mut entry_848 = list_847.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_848, item_846)?;
        }
        list_847.finish();
    }
    #[allow(unused_mut)]
    let mut scope_849 = writer.prefix("MaxRecords");
    if let Some(var_850) = &input.max_records {
        scope_849.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_850).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_851 = writer.prefix("Marker");
    if let Some(var_852) = &input.marker {
        scope_851.string(var_852);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_db_proxies(
    input: &crate::input::DescribeDbProxiesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeDBProxies", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_853 = writer.prefix("DBProxyName");
    if let Some(var_854) = &input.db_proxy_name {
        scope_853.string(var_854);
    }
    #[allow(unused_mut)]
    let mut scope_855 = writer.prefix("Filters");
    if let Some(var_856) = &input.filters {
        let mut list_858 = scope_855.start_list(false, Some("Filter"));
        for item_857 in var_856 {
            #[allow(unused_mut)]
            let mut entry_859 = list_858.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_859, item_857)?;
        }
        list_858.finish();
    }
    #[allow(unused_mut)]
    let mut scope_860 = writer.prefix("Marker");
    if let Some(var_861) = &input.marker {
        scope_860.string(var_861);
    }
    #[allow(unused_mut)]
    let mut scope_862 = writer.prefix("MaxRecords");
    if let Some(var_863) = &input.max_records {
        scope_862.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_863).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_db_proxy_endpoints(
    input: &crate::input::DescribeDbProxyEndpointsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeDBProxyEndpoints", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_864 = writer.prefix("DBProxyName");
    if let Some(var_865) = &input.db_proxy_name {
        scope_864.string(var_865);
    }
    #[allow(unused_mut)]
    let mut scope_866 = writer.prefix("DBProxyEndpointName");
    if let Some(var_867) = &input.db_proxy_endpoint_name {
        scope_866.string(var_867);
    }
    #[allow(unused_mut)]
    let mut scope_868 = writer.prefix("Filters");
    if let Some(var_869) = &input.filters {
        let mut list_871 = scope_868.start_list(false, Some("Filter"));
        for item_870 in var_869 {
            #[allow(unused_mut)]
            let mut entry_872 = list_871.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_872, item_870)?;
        }
        list_871.finish();
    }
    #[allow(unused_mut)]
    let mut scope_873 = writer.prefix("Marker");
    if let Some(var_874) = &input.marker {
        scope_873.string(var_874);
    }
    #[allow(unused_mut)]
    let mut scope_875 = writer.prefix("MaxRecords");
    if let Some(var_876) = &input.max_records {
        scope_875.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_876).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_db_proxy_target_groups(
    input: &crate::input::DescribeDbProxyTargetGroupsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeDBProxyTargetGroups", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_877 = writer.prefix("DBProxyName");
    if let Some(var_878) = &input.db_proxy_name {
        scope_877.string(var_878);
    }
    #[allow(unused_mut)]
    let mut scope_879 = writer.prefix("TargetGroupName");
    if let Some(var_880) = &input.target_group_name {
        scope_879.string(var_880);
    }
    #[allow(unused_mut)]
    let mut scope_881 = writer.prefix("Filters");
    if let Some(var_882) = &input.filters {
        let mut list_884 = scope_881.start_list(false, Some("Filter"));
        for item_883 in var_882 {
            #[allow(unused_mut)]
            let mut entry_885 = list_884.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_885, item_883)?;
        }
        list_884.finish();
    }
    #[allow(unused_mut)]
    let mut scope_886 = writer.prefix("Marker");
    if let Some(var_887) = &input.marker {
        scope_886.string(var_887);
    }
    #[allow(unused_mut)]
    let mut scope_888 = writer.prefix("MaxRecords");
    if let Some(var_889) = &input.max_records {
        scope_888.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_889).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_db_proxy_targets(
    input: &crate::input::DescribeDbProxyTargetsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeDBProxyTargets", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_890 = writer.prefix("DBProxyName");
    if let Some(var_891) = &input.db_proxy_name {
        scope_890.string(var_891);
    }
    #[allow(unused_mut)]
    let mut scope_892 = writer.prefix("TargetGroupName");
    if let Some(var_893) = &input.target_group_name {
        scope_892.string(var_893);
    }
    #[allow(unused_mut)]
    let mut scope_894 = writer.prefix("Filters");
    if let Some(var_895) = &input.filters {
        let mut list_897 = scope_894.start_list(false, Some("Filter"));
        for item_896 in var_895 {
            #[allow(unused_mut)]
            let mut entry_898 = list_897.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_898, item_896)?;
        }
        list_897.finish();
    }
    #[allow(unused_mut)]
    let mut scope_899 = writer.prefix("Marker");
    if let Some(var_900) = &input.marker {
        scope_899.string(var_900);
    }
    #[allow(unused_mut)]
    let mut scope_901 = writer.prefix("MaxRecords");
    if let Some(var_902) = &input.max_records {
        scope_901.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_902).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_db_security_groups(
    input: &crate::input::DescribeDbSecurityGroupsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeDBSecurityGroups", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_903 = writer.prefix("DBSecurityGroupName");
    if let Some(var_904) = &input.db_security_group_name {
        scope_903.string(var_904);
    }
    #[allow(unused_mut)]
    let mut scope_905 = writer.prefix("Filters");
    if let Some(var_906) = &input.filters {
        let mut list_908 = scope_905.start_list(false, Some("Filter"));
        for item_907 in var_906 {
            #[allow(unused_mut)]
            let mut entry_909 = list_908.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_909, item_907)?;
        }
        list_908.finish();
    }
    #[allow(unused_mut)]
    let mut scope_910 = writer.prefix("MaxRecords");
    if let Some(var_911) = &input.max_records {
        scope_910.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_911).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_912 = writer.prefix("Marker");
    if let Some(var_913) = &input.marker {
        scope_912.string(var_913);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_db_snapshot_attributes(
    input: &crate::input::DescribeDbSnapshotAttributesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeDBSnapshotAttributes", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_914 = writer.prefix("DBSnapshotIdentifier");
    if let Some(var_915) = &input.db_snapshot_identifier {
        scope_914.string(var_915);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_db_snapshots(
    input: &crate::input::DescribeDbSnapshotsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeDBSnapshots", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_916 = writer.prefix("DBInstanceIdentifier");
    if let Some(var_917) = &input.db_instance_identifier {
        scope_916.string(var_917);
    }
    #[allow(unused_mut)]
    let mut scope_918 = writer.prefix("DBSnapshotIdentifier");
    if let Some(var_919) = &input.db_snapshot_identifier {
        scope_918.string(var_919);
    }
    #[allow(unused_mut)]
    let mut scope_920 = writer.prefix("SnapshotType");
    if let Some(var_921) = &input.snapshot_type {
        scope_920.string(var_921);
    }
    #[allow(unused_mut)]
    let mut scope_922 = writer.prefix("Filters");
    if let Some(var_923) = &input.filters {
        let mut list_925 = scope_922.start_list(false, Some("Filter"));
        for item_924 in var_923 {
            #[allow(unused_mut)]
            let mut entry_926 = list_925.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_926, item_924)?;
        }
        list_925.finish();
    }
    #[allow(unused_mut)]
    let mut scope_927 = writer.prefix("MaxRecords");
    if let Some(var_928) = &input.max_records {
        scope_927.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_928).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_929 = writer.prefix("Marker");
    if let Some(var_930) = &input.marker {
        scope_929.string(var_930);
    }
    #[allow(unused_mut)]
    let mut scope_931 = writer.prefix("IncludeShared");
    if input.include_shared {
        scope_931.boolean(input.include_shared);
    }
    #[allow(unused_mut)]
    let mut scope_932 = writer.prefix("IncludePublic");
    if input.include_public {
        scope_932.boolean(input.include_public);
    }
    #[allow(unused_mut)]
    let mut scope_933 = writer.prefix("DbiResourceId");
    if let Some(var_934) = &input.dbi_resource_id {
        scope_933.string(var_934);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_db_subnet_groups(
    input: &crate::input::DescribeDbSubnetGroupsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeDBSubnetGroups", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_935 = writer.prefix("DBSubnetGroupName");
    if let Some(var_936) = &input.db_subnet_group_name {
        scope_935.string(var_936);
    }
    #[allow(unused_mut)]
    let mut scope_937 = writer.prefix("Filters");
    if let Some(var_938) = &input.filters {
        let mut list_940 = scope_937.start_list(false, Some("Filter"));
        for item_939 in var_938 {
            #[allow(unused_mut)]
            let mut entry_941 = list_940.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_941, item_939)?;
        }
        list_940.finish();
    }
    #[allow(unused_mut)]
    let mut scope_942 = writer.prefix("MaxRecords");
    if let Some(var_943) = &input.max_records {
        scope_942.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_943).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_944 = writer.prefix("Marker");
    if let Some(var_945) = &input.marker {
        scope_944.string(var_945);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_engine_default_cluster_parameters(
    input: &crate::input::DescribeEngineDefaultClusterParametersInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeEngineDefaultClusterParameters",
        "2014-10-31",
    );
    #[allow(unused_mut)]
    let mut scope_946 = writer.prefix("DBParameterGroupFamily");
    if let Some(var_947) = &input.db_parameter_group_family {
        scope_946.string(var_947);
    }
    #[allow(unused_mut)]
    let mut scope_948 = writer.prefix("Filters");
    if let Some(var_949) = &input.filters {
        let mut list_951 = scope_948.start_list(false, Some("Filter"));
        for item_950 in var_949 {
            #[allow(unused_mut)]
            let mut entry_952 = list_951.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_952, item_950)?;
        }
        list_951.finish();
    }
    #[allow(unused_mut)]
    let mut scope_953 = writer.prefix("MaxRecords");
    if let Some(var_954) = &input.max_records {
        scope_953.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_954).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_955 = writer.prefix("Marker");
    if let Some(var_956) = &input.marker {
        scope_955.string(var_956);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_engine_default_parameters(
    input: &crate::input::DescribeEngineDefaultParametersInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeEngineDefaultParameters",
        "2014-10-31",
    );
    #[allow(unused_mut)]
    let mut scope_957 = writer.prefix("DBParameterGroupFamily");
    if let Some(var_958) = &input.db_parameter_group_family {
        scope_957.string(var_958);
    }
    #[allow(unused_mut)]
    let mut scope_959 = writer.prefix("Filters");
    if let Some(var_960) = &input.filters {
        let mut list_962 = scope_959.start_list(false, Some("Filter"));
        for item_961 in var_960 {
            #[allow(unused_mut)]
            let mut entry_963 = list_962.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_963, item_961)?;
        }
        list_962.finish();
    }
    #[allow(unused_mut)]
    let mut scope_964 = writer.prefix("MaxRecords");
    if let Some(var_965) = &input.max_records {
        scope_964.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_965).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_966 = writer.prefix("Marker");
    if let Some(var_967) = &input.marker {
        scope_966.string(var_967);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_event_categories(
    input: &crate::input::DescribeEventCategoriesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeEventCategories", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_968 = writer.prefix("SourceType");
    if let Some(var_969) = &input.source_type {
        scope_968.string(var_969);
    }
    #[allow(unused_mut)]
    let mut scope_970 = writer.prefix("Filters");
    if let Some(var_971) = &input.filters {
        let mut list_973 = scope_970.start_list(false, Some("Filter"));
        for item_972 in var_971 {
            #[allow(unused_mut)]
            let mut entry_974 = list_973.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_974, item_972)?;
        }
        list_973.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_events(
    input: &crate::input::DescribeEventsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeEvents", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_975 = writer.prefix("SourceIdentifier");
    if let Some(var_976) = &input.source_identifier {
        scope_975.string(var_976);
    }
    #[allow(unused_mut)]
    let mut scope_977 = writer.prefix("SourceType");
    if let Some(var_978) = &input.source_type {
        scope_977.string(var_978.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_979 = writer.prefix("StartTime");
    if let Some(var_980) = &input.start_time {
        scope_979.date_time(var_980, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_981 = writer.prefix("EndTime");
    if let Some(var_982) = &input.end_time {
        scope_981.date_time(var_982, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_983 = writer.prefix("Duration");
    if let Some(var_984) = &input.duration {
        scope_983.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_984).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_985 = writer.prefix("EventCategories");
    if let Some(var_986) = &input.event_categories {
        let mut list_988 = scope_985.start_list(false, Some("EventCategory"));
        for item_987 in var_986 {
            #[allow(unused_mut)]
            let mut entry_989 = list_988.entry();
            entry_989.string(item_987);
        }
        list_988.finish();
    }
    #[allow(unused_mut)]
    let mut scope_990 = writer.prefix("Filters");
    if let Some(var_991) = &input.filters {
        let mut list_993 = scope_990.start_list(false, Some("Filter"));
        for item_992 in var_991 {
            #[allow(unused_mut)]
            let mut entry_994 = list_993.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_994, item_992)?;
        }
        list_993.finish();
    }
    #[allow(unused_mut)]
    let mut scope_995 = writer.prefix("MaxRecords");
    if let Some(var_996) = &input.max_records {
        scope_995.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_996).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_997 = writer.prefix("Marker");
    if let Some(var_998) = &input.marker {
        scope_997.string(var_998);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_event_subscriptions(
    input: &crate::input::DescribeEventSubscriptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeEventSubscriptions", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_999 = writer.prefix("SubscriptionName");
    if let Some(var_1000) = &input.subscription_name {
        scope_999.string(var_1000);
    }
    #[allow(unused_mut)]
    let mut scope_1001 = writer.prefix("Filters");
    if let Some(var_1002) = &input.filters {
        let mut list_1004 = scope_1001.start_list(false, Some("Filter"));
        for item_1003 in var_1002 {
            #[allow(unused_mut)]
            let mut entry_1005 = list_1004.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_1005, item_1003)?;
        }
        list_1004.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1006 = writer.prefix("MaxRecords");
    if let Some(var_1007) = &input.max_records {
        scope_1006.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1007).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1008 = writer.prefix("Marker");
    if let Some(var_1009) = &input.marker {
        scope_1008.string(var_1009);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_export_tasks(
    input: &crate::input::DescribeExportTasksInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeExportTasks", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1010 = writer.prefix("ExportTaskIdentifier");
    if let Some(var_1011) = &input.export_task_identifier {
        scope_1010.string(var_1011);
    }
    #[allow(unused_mut)]
    let mut scope_1012 = writer.prefix("SourceArn");
    if let Some(var_1013) = &input.source_arn {
        scope_1012.string(var_1013);
    }
    #[allow(unused_mut)]
    let mut scope_1014 = writer.prefix("Filters");
    if let Some(var_1015) = &input.filters {
        let mut list_1017 = scope_1014.start_list(false, Some("Filter"));
        for item_1016 in var_1015 {
            #[allow(unused_mut)]
            let mut entry_1018 = list_1017.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_1018, item_1016)?;
        }
        list_1017.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1019 = writer.prefix("Marker");
    if let Some(var_1020) = &input.marker {
        scope_1019.string(var_1020);
    }
    #[allow(unused_mut)]
    let mut scope_1021 = writer.prefix("MaxRecords");
    if let Some(var_1022) = &input.max_records {
        scope_1021.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1022).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_global_clusters(
    input: &crate::input::DescribeGlobalClustersInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeGlobalClusters", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1023 = writer.prefix("GlobalClusterIdentifier");
    if let Some(var_1024) = &input.global_cluster_identifier {
        scope_1023.string(var_1024);
    }
    #[allow(unused_mut)]
    let mut scope_1025 = writer.prefix("Filters");
    if let Some(var_1026) = &input.filters {
        let mut list_1028 = scope_1025.start_list(false, Some("Filter"));
        for item_1027 in var_1026 {
            #[allow(unused_mut)]
            let mut entry_1029 = list_1028.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_1029, item_1027)?;
        }
        list_1028.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1030 = writer.prefix("MaxRecords");
    if let Some(var_1031) = &input.max_records {
        scope_1030.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1031).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1032 = writer.prefix("Marker");
    if let Some(var_1033) = &input.marker {
        scope_1032.string(var_1033);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_option_group_options(
    input: &crate::input::DescribeOptionGroupOptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeOptionGroupOptions", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1034 = writer.prefix("EngineName");
    if let Some(var_1035) = &input.engine_name {
        scope_1034.string(var_1035);
    }
    #[allow(unused_mut)]
    let mut scope_1036 = writer.prefix("MajorEngineVersion");
    if let Some(var_1037) = &input.major_engine_version {
        scope_1036.string(var_1037);
    }
    #[allow(unused_mut)]
    let mut scope_1038 = writer.prefix("Filters");
    if let Some(var_1039) = &input.filters {
        let mut list_1041 = scope_1038.start_list(false, Some("Filter"));
        for item_1040 in var_1039 {
            #[allow(unused_mut)]
            let mut entry_1042 = list_1041.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_1042, item_1040)?;
        }
        list_1041.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1043 = writer.prefix("MaxRecords");
    if let Some(var_1044) = &input.max_records {
        scope_1043.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1044).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1045 = writer.prefix("Marker");
    if let Some(var_1046) = &input.marker {
        scope_1045.string(var_1046);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_option_groups(
    input: &crate::input::DescribeOptionGroupsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeOptionGroups", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1047 = writer.prefix("OptionGroupName");
    if let Some(var_1048) = &input.option_group_name {
        scope_1047.string(var_1048);
    }
    #[allow(unused_mut)]
    let mut scope_1049 = writer.prefix("Filters");
    if let Some(var_1050) = &input.filters {
        let mut list_1052 = scope_1049.start_list(false, Some("Filter"));
        for item_1051 in var_1050 {
            #[allow(unused_mut)]
            let mut entry_1053 = list_1052.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_1053, item_1051)?;
        }
        list_1052.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1054 = writer.prefix("Marker");
    if let Some(var_1055) = &input.marker {
        scope_1054.string(var_1055);
    }
    #[allow(unused_mut)]
    let mut scope_1056 = writer.prefix("MaxRecords");
    if let Some(var_1057) = &input.max_records {
        scope_1056.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1057).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1058 = writer.prefix("EngineName");
    if let Some(var_1059) = &input.engine_name {
        scope_1058.string(var_1059);
    }
    #[allow(unused_mut)]
    let mut scope_1060 = writer.prefix("MajorEngineVersion");
    if let Some(var_1061) = &input.major_engine_version {
        scope_1060.string(var_1061);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_orderable_db_instance_options(
    input: &crate::input::DescribeOrderableDbInstanceOptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeOrderableDBInstanceOptions",
        "2014-10-31",
    );
    #[allow(unused_mut)]
    let mut scope_1062 = writer.prefix("Engine");
    if let Some(var_1063) = &input.engine {
        scope_1062.string(var_1063);
    }
    #[allow(unused_mut)]
    let mut scope_1064 = writer.prefix("EngineVersion");
    if let Some(var_1065) = &input.engine_version {
        scope_1064.string(var_1065);
    }
    #[allow(unused_mut)]
    let mut scope_1066 = writer.prefix("DBInstanceClass");
    if let Some(var_1067) = &input.db_instance_class {
        scope_1066.string(var_1067);
    }
    #[allow(unused_mut)]
    let mut scope_1068 = writer.prefix("LicenseModel");
    if let Some(var_1069) = &input.license_model {
        scope_1068.string(var_1069);
    }
    #[allow(unused_mut)]
    let mut scope_1070 = writer.prefix("AvailabilityZoneGroup");
    if let Some(var_1071) = &input.availability_zone_group {
        scope_1070.string(var_1071);
    }
    #[allow(unused_mut)]
    let mut scope_1072 = writer.prefix("Vpc");
    if let Some(var_1073) = &input.vpc {
        scope_1072.boolean(*var_1073);
    }
    #[allow(unused_mut)]
    let mut scope_1074 = writer.prefix("Filters");
    if let Some(var_1075) = &input.filters {
        let mut list_1077 = scope_1074.start_list(false, Some("Filter"));
        for item_1076 in var_1075 {
            #[allow(unused_mut)]
            let mut entry_1078 = list_1077.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_1078, item_1076)?;
        }
        list_1077.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1079 = writer.prefix("MaxRecords");
    if let Some(var_1080) = &input.max_records {
        scope_1079.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1080).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1081 = writer.prefix("Marker");
    if let Some(var_1082) = &input.marker {
        scope_1081.string(var_1082);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_pending_maintenance_actions(
    input: &crate::input::DescribePendingMaintenanceActionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribePendingMaintenanceActions",
        "2014-10-31",
    );
    #[allow(unused_mut)]
    let mut scope_1083 = writer.prefix("ResourceIdentifier");
    if let Some(var_1084) = &input.resource_identifier {
        scope_1083.string(var_1084);
    }
    #[allow(unused_mut)]
    let mut scope_1085 = writer.prefix("Filters");
    if let Some(var_1086) = &input.filters {
        let mut list_1088 = scope_1085.start_list(false, Some("Filter"));
        for item_1087 in var_1086 {
            #[allow(unused_mut)]
            let mut entry_1089 = list_1088.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_1089, item_1087)?;
        }
        list_1088.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1090 = writer.prefix("Marker");
    if let Some(var_1091) = &input.marker {
        scope_1090.string(var_1091);
    }
    #[allow(unused_mut)]
    let mut scope_1092 = writer.prefix("MaxRecords");
    if let Some(var_1093) = &input.max_records {
        scope_1092.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1093).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_reserved_db_instances(
    input: &crate::input::DescribeReservedDbInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeReservedDBInstances", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1094 = writer.prefix("ReservedDBInstanceId");
    if let Some(var_1095) = &input.reserved_db_instance_id {
        scope_1094.string(var_1095);
    }
    #[allow(unused_mut)]
    let mut scope_1096 = writer.prefix("ReservedDBInstancesOfferingId");
    if let Some(var_1097) = &input.reserved_db_instances_offering_id {
        scope_1096.string(var_1097);
    }
    #[allow(unused_mut)]
    let mut scope_1098 = writer.prefix("DBInstanceClass");
    if let Some(var_1099) = &input.db_instance_class {
        scope_1098.string(var_1099);
    }
    #[allow(unused_mut)]
    let mut scope_1100 = writer.prefix("Duration");
    if let Some(var_1101) = &input.duration {
        scope_1100.string(var_1101);
    }
    #[allow(unused_mut)]
    let mut scope_1102 = writer.prefix("ProductDescription");
    if let Some(var_1103) = &input.product_description {
        scope_1102.string(var_1103);
    }
    #[allow(unused_mut)]
    let mut scope_1104 = writer.prefix("OfferingType");
    if let Some(var_1105) = &input.offering_type {
        scope_1104.string(var_1105);
    }
    #[allow(unused_mut)]
    let mut scope_1106 = writer.prefix("MultiAZ");
    if let Some(var_1107) = &input.multi_az {
        scope_1106.boolean(*var_1107);
    }
    #[allow(unused_mut)]
    let mut scope_1108 = writer.prefix("LeaseId");
    if let Some(var_1109) = &input.lease_id {
        scope_1108.string(var_1109);
    }
    #[allow(unused_mut)]
    let mut scope_1110 = writer.prefix("Filters");
    if let Some(var_1111) = &input.filters {
        let mut list_1113 = scope_1110.start_list(false, Some("Filter"));
        for item_1112 in var_1111 {
            #[allow(unused_mut)]
            let mut entry_1114 = list_1113.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_1114, item_1112)?;
        }
        list_1113.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1115 = writer.prefix("MaxRecords");
    if let Some(var_1116) = &input.max_records {
        scope_1115.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1116).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1117 = writer.prefix("Marker");
    if let Some(var_1118) = &input.marker {
        scope_1117.string(var_1118);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_reserved_db_instances_offerings(
    input: &crate::input::DescribeReservedDbInstancesOfferingsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeReservedDBInstancesOfferings",
        "2014-10-31",
    );
    #[allow(unused_mut)]
    let mut scope_1119 = writer.prefix("ReservedDBInstancesOfferingId");
    if let Some(var_1120) = &input.reserved_db_instances_offering_id {
        scope_1119.string(var_1120);
    }
    #[allow(unused_mut)]
    let mut scope_1121 = writer.prefix("DBInstanceClass");
    if let Some(var_1122) = &input.db_instance_class {
        scope_1121.string(var_1122);
    }
    #[allow(unused_mut)]
    let mut scope_1123 = writer.prefix("Duration");
    if let Some(var_1124) = &input.duration {
        scope_1123.string(var_1124);
    }
    #[allow(unused_mut)]
    let mut scope_1125 = writer.prefix("ProductDescription");
    if let Some(var_1126) = &input.product_description {
        scope_1125.string(var_1126);
    }
    #[allow(unused_mut)]
    let mut scope_1127 = writer.prefix("OfferingType");
    if let Some(var_1128) = &input.offering_type {
        scope_1127.string(var_1128);
    }
    #[allow(unused_mut)]
    let mut scope_1129 = writer.prefix("MultiAZ");
    if let Some(var_1130) = &input.multi_az {
        scope_1129.boolean(*var_1130);
    }
    #[allow(unused_mut)]
    let mut scope_1131 = writer.prefix("Filters");
    if let Some(var_1132) = &input.filters {
        let mut list_1134 = scope_1131.start_list(false, Some("Filter"));
        for item_1133 in var_1132 {
            #[allow(unused_mut)]
            let mut entry_1135 = list_1134.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_1135, item_1133)?;
        }
        list_1134.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1136 = writer.prefix("MaxRecords");
    if let Some(var_1137) = &input.max_records {
        scope_1136.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1137).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1138 = writer.prefix("Marker");
    if let Some(var_1139) = &input.marker {
        scope_1138.string(var_1139);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_source_regions(
    input: &crate::input::DescribeSourceRegionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeSourceRegions", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1140 = writer.prefix("RegionName");
    if let Some(var_1141) = &input.region_name {
        scope_1140.string(var_1141);
    }
    #[allow(unused_mut)]
    let mut scope_1142 = writer.prefix("MaxRecords");
    if let Some(var_1143) = &input.max_records {
        scope_1142.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1143).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1144 = writer.prefix("Marker");
    if let Some(var_1145) = &input.marker {
        scope_1144.string(var_1145);
    }
    #[allow(unused_mut)]
    let mut scope_1146 = writer.prefix("Filters");
    if let Some(var_1147) = &input.filters {
        let mut list_1149 = scope_1146.start_list(false, Some("Filter"));
        for item_1148 in var_1147 {
            #[allow(unused_mut)]
            let mut entry_1150 = list_1149.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_1150, item_1148)?;
        }
        list_1149.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_valid_db_instance_modifications(
    input: &crate::input::DescribeValidDbInstanceModificationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeValidDBInstanceModifications",
        "2014-10-31",
    );
    #[allow(unused_mut)]
    let mut scope_1151 = writer.prefix("DBInstanceIdentifier");
    if let Some(var_1152) = &input.db_instance_identifier {
        scope_1151.string(var_1152);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_download_db_log_file_portion(
    input: &crate::input::DownloadDbLogFilePortionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DownloadDBLogFilePortion", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1153 = writer.prefix("DBInstanceIdentifier");
    if let Some(var_1154) = &input.db_instance_identifier {
        scope_1153.string(var_1154);
    }
    #[allow(unused_mut)]
    let mut scope_1155 = writer.prefix("LogFileName");
    if let Some(var_1156) = &input.log_file_name {
        scope_1155.string(var_1156);
    }
    #[allow(unused_mut)]
    let mut scope_1157 = writer.prefix("Marker");
    if let Some(var_1158) = &input.marker {
        scope_1157.string(var_1158);
    }
    #[allow(unused_mut)]
    let mut scope_1159 = writer.prefix("NumberOfLines");
    if input.number_of_lines != 0 {
        scope_1159.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.number_of_lines).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_failover_db_cluster(
    input: &crate::input::FailoverDbClusterInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "FailoverDBCluster", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1160 = writer.prefix("DBClusterIdentifier");
    if let Some(var_1161) = &input.db_cluster_identifier {
        scope_1160.string(var_1161);
    }
    #[allow(unused_mut)]
    let mut scope_1162 = writer.prefix("TargetDBInstanceIdentifier");
    if let Some(var_1163) = &input.target_db_instance_identifier {
        scope_1162.string(var_1163);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_failover_global_cluster(
    input: &crate::input::FailoverGlobalClusterInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "FailoverGlobalCluster", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1164 = writer.prefix("GlobalClusterIdentifier");
    if let Some(var_1165) = &input.global_cluster_identifier {
        scope_1164.string(var_1165);
    }
    #[allow(unused_mut)]
    let mut scope_1166 = writer.prefix("TargetDbClusterIdentifier");
    if let Some(var_1167) = &input.target_db_cluster_identifier {
        scope_1166.string(var_1167);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_list_tags_for_resource(
    input: &crate::input::ListTagsForResourceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ListTagsForResource", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1168 = writer.prefix("ResourceName");
    if let Some(var_1169) = &input.resource_name {
        scope_1168.string(var_1169);
    }
    #[allow(unused_mut)]
    let mut scope_1170 = writer.prefix("Filters");
    if let Some(var_1171) = &input.filters {
        let mut list_1173 = scope_1170.start_list(false, Some("Filter"));
        for item_1172 in var_1171 {
            #[allow(unused_mut)]
            let mut entry_1174 = list_1173.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_1174, item_1172)?;
        }
        list_1173.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_certificates(
    input: &crate::input::ModifyCertificatesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyCertificates", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1175 = writer.prefix("CertificateIdentifier");
    if let Some(var_1176) = &input.certificate_identifier {
        scope_1175.string(var_1176);
    }
    #[allow(unused_mut)]
    let mut scope_1177 = writer.prefix("RemoveCustomerOverride");
    if let Some(var_1178) = &input.remove_customer_override {
        scope_1177.boolean(*var_1178);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_current_db_cluster_capacity(
    input: &crate::input::ModifyCurrentDbClusterCapacityInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyCurrentDBClusterCapacity",
        "2014-10-31",
    );
    #[allow(unused_mut)]
    let mut scope_1179 = writer.prefix("DBClusterIdentifier");
    if let Some(var_1180) = &input.db_cluster_identifier {
        scope_1179.string(var_1180);
    }
    #[allow(unused_mut)]
    let mut scope_1181 = writer.prefix("Capacity");
    if let Some(var_1182) = &input.capacity {
        scope_1181.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1182).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1183 = writer.prefix("SecondsBeforeTimeout");
    if let Some(var_1184) = &input.seconds_before_timeout {
        scope_1183.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1184).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1185 = writer.prefix("TimeoutAction");
    if let Some(var_1186) = &input.timeout_action {
        scope_1185.string(var_1186);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_custom_db_engine_version(
    input: &crate::input::ModifyCustomDbEngineVersionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyCustomDBEngineVersion", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1187 = writer.prefix("Engine");
    if let Some(var_1188) = &input.engine {
        scope_1187.string(var_1188);
    }
    #[allow(unused_mut)]
    let mut scope_1189 = writer.prefix("EngineVersion");
    if let Some(var_1190) = &input.engine_version {
        scope_1189.string(var_1190);
    }
    #[allow(unused_mut)]
    let mut scope_1191 = writer.prefix("Description");
    if let Some(var_1192) = &input.description {
        scope_1191.string(var_1192);
    }
    #[allow(unused_mut)]
    let mut scope_1193 = writer.prefix("Status");
    if let Some(var_1194) = &input.status {
        scope_1193.string(var_1194.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_db_cluster(
    input: &crate::input::ModifyDbClusterInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyDBCluster", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1195 = writer.prefix("DBClusterIdentifier");
    if let Some(var_1196) = &input.db_cluster_identifier {
        scope_1195.string(var_1196);
    }
    #[allow(unused_mut)]
    let mut scope_1197 = writer.prefix("NewDBClusterIdentifier");
    if let Some(var_1198) = &input.new_db_cluster_identifier {
        scope_1197.string(var_1198);
    }
    #[allow(unused_mut)]
    let mut scope_1199 = writer.prefix("ApplyImmediately");
    if input.apply_immediately {
        scope_1199.boolean(input.apply_immediately);
    }
    #[allow(unused_mut)]
    let mut scope_1200 = writer.prefix("BackupRetentionPeriod");
    if let Some(var_1201) = &input.backup_retention_period {
        scope_1200.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1201).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1202 = writer.prefix("DBClusterParameterGroupName");
    if let Some(var_1203) = &input.db_cluster_parameter_group_name {
        scope_1202.string(var_1203);
    }
    #[allow(unused_mut)]
    let mut scope_1204 = writer.prefix("VpcSecurityGroupIds");
    if let Some(var_1205) = &input.vpc_security_group_ids {
        let mut list_1207 = scope_1204.start_list(false, Some("VpcSecurityGroupId"));
        for item_1206 in var_1205 {
            #[allow(unused_mut)]
            let mut entry_1208 = list_1207.entry();
            entry_1208.string(item_1206);
        }
        list_1207.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1209 = writer.prefix("Port");
    if let Some(var_1210) = &input.port {
        scope_1209.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1210).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1211 = writer.prefix("MasterUserPassword");
    if let Some(var_1212) = &input.master_user_password {
        scope_1211.string(var_1212);
    }
    #[allow(unused_mut)]
    let mut scope_1213 = writer.prefix("OptionGroupName");
    if let Some(var_1214) = &input.option_group_name {
        scope_1213.string(var_1214);
    }
    #[allow(unused_mut)]
    let mut scope_1215 = writer.prefix("PreferredBackupWindow");
    if let Some(var_1216) = &input.preferred_backup_window {
        scope_1215.string(var_1216);
    }
    #[allow(unused_mut)]
    let mut scope_1217 = writer.prefix("PreferredMaintenanceWindow");
    if let Some(var_1218) = &input.preferred_maintenance_window {
        scope_1217.string(var_1218);
    }
    #[allow(unused_mut)]
    let mut scope_1219 = writer.prefix("EnableIAMDatabaseAuthentication");
    if let Some(var_1220) = &input.enable_iam_database_authentication {
        scope_1219.boolean(*var_1220);
    }
    #[allow(unused_mut)]
    let mut scope_1221 = writer.prefix("BacktrackWindow");
    if let Some(var_1222) = &input.backtrack_window {
        scope_1221.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1222).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1223 = writer.prefix("CloudwatchLogsExportConfiguration");
    if let Some(var_1224) = &input.cloudwatch_logs_export_configuration {
        crate::query_ser::serialize_structure_crate_model_cloudwatch_logs_export_configuration(
            scope_1223, var_1224,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1225 = writer.prefix("EngineVersion");
    if let Some(var_1226) = &input.engine_version {
        scope_1225.string(var_1226);
    }
    #[allow(unused_mut)]
    let mut scope_1227 = writer.prefix("AllowMajorVersionUpgrade");
    if input.allow_major_version_upgrade {
        scope_1227.boolean(input.allow_major_version_upgrade);
    }
    #[allow(unused_mut)]
    let mut scope_1228 = writer.prefix("DBInstanceParameterGroupName");
    if let Some(var_1229) = &input.db_instance_parameter_group_name {
        scope_1228.string(var_1229);
    }
    #[allow(unused_mut)]
    let mut scope_1230 = writer.prefix("Domain");
    if let Some(var_1231) = &input.domain {
        scope_1230.string(var_1231);
    }
    #[allow(unused_mut)]
    let mut scope_1232 = writer.prefix("DomainIAMRoleName");
    if let Some(var_1233) = &input.domain_iam_role_name {
        scope_1232.string(var_1233);
    }
    #[allow(unused_mut)]
    let mut scope_1234 = writer.prefix("ScalingConfiguration");
    if let Some(var_1235) = &input.scaling_configuration {
        crate::query_ser::serialize_structure_crate_model_scaling_configuration(
            scope_1234, var_1235,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1236 = writer.prefix("DeletionProtection");
    if let Some(var_1237) = &input.deletion_protection {
        scope_1236.boolean(*var_1237);
    }
    #[allow(unused_mut)]
    let mut scope_1238 = writer.prefix("EnableHttpEndpoint");
    if let Some(var_1239) = &input.enable_http_endpoint {
        scope_1238.boolean(*var_1239);
    }
    #[allow(unused_mut)]
    let mut scope_1240 = writer.prefix("CopyTagsToSnapshot");
    if let Some(var_1241) = &input.copy_tags_to_snapshot {
        scope_1240.boolean(*var_1241);
    }
    #[allow(unused_mut)]
    let mut scope_1242 = writer.prefix("EnableGlobalWriteForwarding");
    if let Some(var_1243) = &input.enable_global_write_forwarding {
        scope_1242.boolean(*var_1243);
    }
    #[allow(unused_mut)]
    let mut scope_1244 = writer.prefix("DBClusterInstanceClass");
    if let Some(var_1245) = &input.db_cluster_instance_class {
        scope_1244.string(var_1245);
    }
    #[allow(unused_mut)]
    let mut scope_1246 = writer.prefix("AllocatedStorage");
    if let Some(var_1247) = &input.allocated_storage {
        scope_1246.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1247).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1248 = writer.prefix("StorageType");
    if let Some(var_1249) = &input.storage_type {
        scope_1248.string(var_1249);
    }
    #[allow(unused_mut)]
    let mut scope_1250 = writer.prefix("Iops");
    if let Some(var_1251) = &input.iops {
        scope_1250.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1251).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1252 = writer.prefix("AutoMinorVersionUpgrade");
    if let Some(var_1253) = &input.auto_minor_version_upgrade {
        scope_1252.boolean(*var_1253);
    }
    #[allow(unused_mut)]
    let mut scope_1254 = writer.prefix("MonitoringInterval");
    if let Some(var_1255) = &input.monitoring_interval {
        scope_1254.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1255).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1256 = writer.prefix("MonitoringRoleArn");
    if let Some(var_1257) = &input.monitoring_role_arn {
        scope_1256.string(var_1257);
    }
    #[allow(unused_mut)]
    let mut scope_1258 = writer.prefix("EnablePerformanceInsights");
    if let Some(var_1259) = &input.enable_performance_insights {
        scope_1258.boolean(*var_1259);
    }
    #[allow(unused_mut)]
    let mut scope_1260 = writer.prefix("PerformanceInsightsKMSKeyId");
    if let Some(var_1261) = &input.performance_insights_kms_key_id {
        scope_1260.string(var_1261);
    }
    #[allow(unused_mut)]
    let mut scope_1262 = writer.prefix("PerformanceInsightsRetentionPeriod");
    if let Some(var_1263) = &input.performance_insights_retention_period {
        scope_1262.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1263).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1264 = writer.prefix("ServerlessV2ScalingConfiguration");
    if let Some(var_1265) = &input.serverless_v2_scaling_configuration {
        crate::query_ser::serialize_structure_crate_model_serverless_v2_scaling_configuration(
            scope_1264, var_1265,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_db_cluster_endpoint(
    input: &crate::input::ModifyDbClusterEndpointInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyDBClusterEndpoint", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1266 = writer.prefix("DBClusterEndpointIdentifier");
    if let Some(var_1267) = &input.db_cluster_endpoint_identifier {
        scope_1266.string(var_1267);
    }
    #[allow(unused_mut)]
    let mut scope_1268 = writer.prefix("EndpointType");
    if let Some(var_1269) = &input.endpoint_type {
        scope_1268.string(var_1269);
    }
    #[allow(unused_mut)]
    let mut scope_1270 = writer.prefix("StaticMembers");
    if let Some(var_1271) = &input.static_members {
        let mut list_1273 = scope_1270.start_list(false, None);
        for item_1272 in var_1271 {
            #[allow(unused_mut)]
            let mut entry_1274 = list_1273.entry();
            entry_1274.string(item_1272);
        }
        list_1273.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1275 = writer.prefix("ExcludedMembers");
    if let Some(var_1276) = &input.excluded_members {
        let mut list_1278 = scope_1275.start_list(false, None);
        for item_1277 in var_1276 {
            #[allow(unused_mut)]
            let mut entry_1279 = list_1278.entry();
            entry_1279.string(item_1277);
        }
        list_1278.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_db_cluster_parameter_group(
    input: &crate::input::ModifyDbClusterParameterGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyDBClusterParameterGroup", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1280 = writer.prefix("DBClusterParameterGroupName");
    if let Some(var_1281) = &input.db_cluster_parameter_group_name {
        scope_1280.string(var_1281);
    }
    #[allow(unused_mut)]
    let mut scope_1282 = writer.prefix("Parameters");
    if let Some(var_1283) = &input.parameters {
        let mut list_1285 = scope_1282.start_list(false, Some("Parameter"));
        for item_1284 in var_1283 {
            #[allow(unused_mut)]
            let mut entry_1286 = list_1285.entry();
            crate::query_ser::serialize_structure_crate_model_parameter(entry_1286, item_1284)?;
        }
        list_1285.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_db_cluster_snapshot_attribute(
    input: &crate::input::ModifyDbClusterSnapshotAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyDBClusterSnapshotAttribute",
        "2014-10-31",
    );
    #[allow(unused_mut)]
    let mut scope_1287 = writer.prefix("DBClusterSnapshotIdentifier");
    if let Some(var_1288) = &input.db_cluster_snapshot_identifier {
        scope_1287.string(var_1288);
    }
    #[allow(unused_mut)]
    let mut scope_1289 = writer.prefix("AttributeName");
    if let Some(var_1290) = &input.attribute_name {
        scope_1289.string(var_1290);
    }
    #[allow(unused_mut)]
    let mut scope_1291 = writer.prefix("ValuesToAdd");
    if let Some(var_1292) = &input.values_to_add {
        let mut list_1294 = scope_1291.start_list(false, Some("AttributeValue"));
        for item_1293 in var_1292 {
            #[allow(unused_mut)]
            let mut entry_1295 = list_1294.entry();
            entry_1295.string(item_1293);
        }
        list_1294.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1296 = writer.prefix("ValuesToRemove");
    if let Some(var_1297) = &input.values_to_remove {
        let mut list_1299 = scope_1296.start_list(false, Some("AttributeValue"));
        for item_1298 in var_1297 {
            #[allow(unused_mut)]
            let mut entry_1300 = list_1299.entry();
            entry_1300.string(item_1298);
        }
        list_1299.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_db_instance(
    input: &crate::input::ModifyDbInstanceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyDBInstance", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1301 = writer.prefix("DBInstanceIdentifier");
    if let Some(var_1302) = &input.db_instance_identifier {
        scope_1301.string(var_1302);
    }
    #[allow(unused_mut)]
    let mut scope_1303 = writer.prefix("AllocatedStorage");
    if let Some(var_1304) = &input.allocated_storage {
        scope_1303.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1304).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1305 = writer.prefix("DBInstanceClass");
    if let Some(var_1306) = &input.db_instance_class {
        scope_1305.string(var_1306);
    }
    #[allow(unused_mut)]
    let mut scope_1307 = writer.prefix("DBSubnetGroupName");
    if let Some(var_1308) = &input.db_subnet_group_name {
        scope_1307.string(var_1308);
    }
    #[allow(unused_mut)]
    let mut scope_1309 = writer.prefix("DBSecurityGroups");
    if let Some(var_1310) = &input.db_security_groups {
        let mut list_1312 = scope_1309.start_list(false, Some("DBSecurityGroupName"));
        for item_1311 in var_1310 {
            #[allow(unused_mut)]
            let mut entry_1313 = list_1312.entry();
            entry_1313.string(item_1311);
        }
        list_1312.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1314 = writer.prefix("VpcSecurityGroupIds");
    if let Some(var_1315) = &input.vpc_security_group_ids {
        let mut list_1317 = scope_1314.start_list(false, Some("VpcSecurityGroupId"));
        for item_1316 in var_1315 {
            #[allow(unused_mut)]
            let mut entry_1318 = list_1317.entry();
            entry_1318.string(item_1316);
        }
        list_1317.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1319 = writer.prefix("ApplyImmediately");
    if input.apply_immediately {
        scope_1319.boolean(input.apply_immediately);
    }
    #[allow(unused_mut)]
    let mut scope_1320 = writer.prefix("MasterUserPassword");
    if let Some(var_1321) = &input.master_user_password {
        scope_1320.string(var_1321);
    }
    #[allow(unused_mut)]
    let mut scope_1322 = writer.prefix("DBParameterGroupName");
    if let Some(var_1323) = &input.db_parameter_group_name {
        scope_1322.string(var_1323);
    }
    #[allow(unused_mut)]
    let mut scope_1324 = writer.prefix("BackupRetentionPeriod");
    if let Some(var_1325) = &input.backup_retention_period {
        scope_1324.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1325).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1326 = writer.prefix("PreferredBackupWindow");
    if let Some(var_1327) = &input.preferred_backup_window {
        scope_1326.string(var_1327);
    }
    #[allow(unused_mut)]
    let mut scope_1328 = writer.prefix("PreferredMaintenanceWindow");
    if let Some(var_1329) = &input.preferred_maintenance_window {
        scope_1328.string(var_1329);
    }
    #[allow(unused_mut)]
    let mut scope_1330 = writer.prefix("MultiAZ");
    if let Some(var_1331) = &input.multi_az {
        scope_1330.boolean(*var_1331);
    }
    #[allow(unused_mut)]
    let mut scope_1332 = writer.prefix("EngineVersion");
    if let Some(var_1333) = &input.engine_version {
        scope_1332.string(var_1333);
    }
    #[allow(unused_mut)]
    let mut scope_1334 = writer.prefix("AllowMajorVersionUpgrade");
    if input.allow_major_version_upgrade {
        scope_1334.boolean(input.allow_major_version_upgrade);
    }
    #[allow(unused_mut)]
    let mut scope_1335 = writer.prefix("AutoMinorVersionUpgrade");
    if let Some(var_1336) = &input.auto_minor_version_upgrade {
        scope_1335.boolean(*var_1336);
    }
    #[allow(unused_mut)]
    let mut scope_1337 = writer.prefix("LicenseModel");
    if let Some(var_1338) = &input.license_model {
        scope_1337.string(var_1338);
    }
    #[allow(unused_mut)]
    let mut scope_1339 = writer.prefix("Iops");
    if let Some(var_1340) = &input.iops {
        scope_1339.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1340).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1341 = writer.prefix("OptionGroupName");
    if let Some(var_1342) = &input.option_group_name {
        scope_1341.string(var_1342);
    }
    #[allow(unused_mut)]
    let mut scope_1343 = writer.prefix("NewDBInstanceIdentifier");
    if let Some(var_1344) = &input.new_db_instance_identifier {
        scope_1343.string(var_1344);
    }
    #[allow(unused_mut)]
    let mut scope_1345 = writer.prefix("StorageType");
    if let Some(var_1346) = &input.storage_type {
        scope_1345.string(var_1346);
    }
    #[allow(unused_mut)]
    let mut scope_1347 = writer.prefix("TdeCredentialArn");
    if let Some(var_1348) = &input.tde_credential_arn {
        scope_1347.string(var_1348);
    }
    #[allow(unused_mut)]
    let mut scope_1349 = writer.prefix("TdeCredentialPassword");
    if let Some(var_1350) = &input.tde_credential_password {
        scope_1349.string(var_1350);
    }
    #[allow(unused_mut)]
    let mut scope_1351 = writer.prefix("CACertificateIdentifier");
    if let Some(var_1352) = &input.ca_certificate_identifier {
        scope_1351.string(var_1352);
    }
    #[allow(unused_mut)]
    let mut scope_1353 = writer.prefix("Domain");
    if let Some(var_1354) = &input.domain {
        scope_1353.string(var_1354);
    }
    #[allow(unused_mut)]
    let mut scope_1355 = writer.prefix("CopyTagsToSnapshot");
    if let Some(var_1356) = &input.copy_tags_to_snapshot {
        scope_1355.boolean(*var_1356);
    }
    #[allow(unused_mut)]
    let mut scope_1357 = writer.prefix("MonitoringInterval");
    if let Some(var_1358) = &input.monitoring_interval {
        scope_1357.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1358).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1359 = writer.prefix("DBPortNumber");
    if let Some(var_1360) = &input.db_port_number {
        scope_1359.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1360).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1361 = writer.prefix("PubliclyAccessible");
    if let Some(var_1362) = &input.publicly_accessible {
        scope_1361.boolean(*var_1362);
    }
    #[allow(unused_mut)]
    let mut scope_1363 = writer.prefix("MonitoringRoleArn");
    if let Some(var_1364) = &input.monitoring_role_arn {
        scope_1363.string(var_1364);
    }
    #[allow(unused_mut)]
    let mut scope_1365 = writer.prefix("DomainIAMRoleName");
    if let Some(var_1366) = &input.domain_iam_role_name {
        scope_1365.string(var_1366);
    }
    #[allow(unused_mut)]
    let mut scope_1367 = writer.prefix("PromotionTier");
    if let Some(var_1368) = &input.promotion_tier {
        scope_1367.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1368).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1369 = writer.prefix("EnableIAMDatabaseAuthentication");
    if let Some(var_1370) = &input.enable_iam_database_authentication {
        scope_1369.boolean(*var_1370);
    }
    #[allow(unused_mut)]
    let mut scope_1371 = writer.prefix("EnablePerformanceInsights");
    if let Some(var_1372) = &input.enable_performance_insights {
        scope_1371.boolean(*var_1372);
    }
    #[allow(unused_mut)]
    let mut scope_1373 = writer.prefix("PerformanceInsightsKMSKeyId");
    if let Some(var_1374) = &input.performance_insights_kms_key_id {
        scope_1373.string(var_1374);
    }
    #[allow(unused_mut)]
    let mut scope_1375 = writer.prefix("PerformanceInsightsRetentionPeriod");
    if let Some(var_1376) = &input.performance_insights_retention_period {
        scope_1375.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1376).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1377 = writer.prefix("CloudwatchLogsExportConfiguration");
    if let Some(var_1378) = &input.cloudwatch_logs_export_configuration {
        crate::query_ser::serialize_structure_crate_model_cloudwatch_logs_export_configuration(
            scope_1377, var_1378,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1379 = writer.prefix("ProcessorFeatures");
    if let Some(var_1380) = &input.processor_features {
        let mut list_1382 = scope_1379.start_list(false, Some("ProcessorFeature"));
        for item_1381 in var_1380 {
            #[allow(unused_mut)]
            let mut entry_1383 = list_1382.entry();
            crate::query_ser::serialize_structure_crate_model_processor_feature(
                entry_1383, item_1381,
            )?;
        }
        list_1382.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1384 = writer.prefix("UseDefaultProcessorFeatures");
    if let Some(var_1385) = &input.use_default_processor_features {
        scope_1384.boolean(*var_1385);
    }
    #[allow(unused_mut)]
    let mut scope_1386 = writer.prefix("DeletionProtection");
    if let Some(var_1387) = &input.deletion_protection {
        scope_1386.boolean(*var_1387);
    }
    #[allow(unused_mut)]
    let mut scope_1388 = writer.prefix("MaxAllocatedStorage");
    if let Some(var_1389) = &input.max_allocated_storage {
        scope_1388.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1389).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1390 = writer.prefix("CertificateRotationRestart");
    if let Some(var_1391) = &input.certificate_rotation_restart {
        scope_1390.boolean(*var_1391);
    }
    #[allow(unused_mut)]
    let mut scope_1392 = writer.prefix("ReplicaMode");
    if let Some(var_1393) = &input.replica_mode {
        scope_1392.string(var_1393.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1394 = writer.prefix("EnableCustomerOwnedIp");
    if let Some(var_1395) = &input.enable_customer_owned_ip {
        scope_1394.boolean(*var_1395);
    }
    #[allow(unused_mut)]
    let mut scope_1396 = writer.prefix("AwsBackupRecoveryPointArn");
    if let Some(var_1397) = &input.aws_backup_recovery_point_arn {
        scope_1396.string(var_1397);
    }
    #[allow(unused_mut)]
    let mut scope_1398 = writer.prefix("AutomationMode");
    if let Some(var_1399) = &input.automation_mode {
        scope_1398.string(var_1399.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1400 = writer.prefix("ResumeFullAutomationModeMinutes");
    if let Some(var_1401) = &input.resume_full_automation_mode_minutes {
        scope_1400.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1401).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_db_parameter_group(
    input: &crate::input::ModifyDbParameterGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyDBParameterGroup", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1402 = writer.prefix("DBParameterGroupName");
    if let Some(var_1403) = &input.db_parameter_group_name {
        scope_1402.string(var_1403);
    }
    #[allow(unused_mut)]
    let mut scope_1404 = writer.prefix("Parameters");
    if let Some(var_1405) = &input.parameters {
        let mut list_1407 = scope_1404.start_list(false, Some("Parameter"));
        for item_1406 in var_1405 {
            #[allow(unused_mut)]
            let mut entry_1408 = list_1407.entry();
            crate::query_ser::serialize_structure_crate_model_parameter(entry_1408, item_1406)?;
        }
        list_1407.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_db_proxy(
    input: &crate::input::ModifyDbProxyInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyDBProxy", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1409 = writer.prefix("DBProxyName");
    if let Some(var_1410) = &input.db_proxy_name {
        scope_1409.string(var_1410);
    }
    #[allow(unused_mut)]
    let mut scope_1411 = writer.prefix("NewDBProxyName");
    if let Some(var_1412) = &input.new_db_proxy_name {
        scope_1411.string(var_1412);
    }
    #[allow(unused_mut)]
    let mut scope_1413 = writer.prefix("Auth");
    if let Some(var_1414) = &input.auth {
        let mut list_1416 = scope_1413.start_list(false, None);
        for item_1415 in var_1414 {
            #[allow(unused_mut)]
            let mut entry_1417 = list_1416.entry();
            crate::query_ser::serialize_structure_crate_model_user_auth_config(
                entry_1417, item_1415,
            )?;
        }
        list_1416.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1418 = writer.prefix("RequireTLS");
    if let Some(var_1419) = &input.require_tls {
        scope_1418.boolean(*var_1419);
    }
    #[allow(unused_mut)]
    let mut scope_1420 = writer.prefix("IdleClientTimeout");
    if let Some(var_1421) = &input.idle_client_timeout {
        scope_1420.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1421).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1422 = writer.prefix("DebugLogging");
    if let Some(var_1423) = &input.debug_logging {
        scope_1422.boolean(*var_1423);
    }
    #[allow(unused_mut)]
    let mut scope_1424 = writer.prefix("RoleArn");
    if let Some(var_1425) = &input.role_arn {
        scope_1424.string(var_1425);
    }
    #[allow(unused_mut)]
    let mut scope_1426 = writer.prefix("SecurityGroups");
    if let Some(var_1427) = &input.security_groups {
        let mut list_1429 = scope_1426.start_list(false, None);
        for item_1428 in var_1427 {
            #[allow(unused_mut)]
            let mut entry_1430 = list_1429.entry();
            entry_1430.string(item_1428);
        }
        list_1429.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_db_proxy_endpoint(
    input: &crate::input::ModifyDbProxyEndpointInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyDBProxyEndpoint", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1431 = writer.prefix("DBProxyEndpointName");
    if let Some(var_1432) = &input.db_proxy_endpoint_name {
        scope_1431.string(var_1432);
    }
    #[allow(unused_mut)]
    let mut scope_1433 = writer.prefix("NewDBProxyEndpointName");
    if let Some(var_1434) = &input.new_db_proxy_endpoint_name {
        scope_1433.string(var_1434);
    }
    #[allow(unused_mut)]
    let mut scope_1435 = writer.prefix("VpcSecurityGroupIds");
    if let Some(var_1436) = &input.vpc_security_group_ids {
        let mut list_1438 = scope_1435.start_list(false, None);
        for item_1437 in var_1436 {
            #[allow(unused_mut)]
            let mut entry_1439 = list_1438.entry();
            entry_1439.string(item_1437);
        }
        list_1438.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_db_proxy_target_group(
    input: &crate::input::ModifyDbProxyTargetGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyDBProxyTargetGroup", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1440 = writer.prefix("TargetGroupName");
    if let Some(var_1441) = &input.target_group_name {
        scope_1440.string(var_1441);
    }
    #[allow(unused_mut)]
    let mut scope_1442 = writer.prefix("DBProxyName");
    if let Some(var_1443) = &input.db_proxy_name {
        scope_1442.string(var_1443);
    }
    #[allow(unused_mut)]
    let mut scope_1444 = writer.prefix("ConnectionPoolConfig");
    if let Some(var_1445) = &input.connection_pool_config {
        crate::query_ser::serialize_structure_crate_model_connection_pool_configuration(
            scope_1444, var_1445,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1446 = writer.prefix("NewName");
    if let Some(var_1447) = &input.new_name {
        scope_1446.string(var_1447);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_db_snapshot(
    input: &crate::input::ModifyDbSnapshotInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyDBSnapshot", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1448 = writer.prefix("DBSnapshotIdentifier");
    if let Some(var_1449) = &input.db_snapshot_identifier {
        scope_1448.string(var_1449);
    }
    #[allow(unused_mut)]
    let mut scope_1450 = writer.prefix("EngineVersion");
    if let Some(var_1451) = &input.engine_version {
        scope_1450.string(var_1451);
    }
    #[allow(unused_mut)]
    let mut scope_1452 = writer.prefix("OptionGroupName");
    if let Some(var_1453) = &input.option_group_name {
        scope_1452.string(var_1453);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_db_snapshot_attribute(
    input: &crate::input::ModifyDbSnapshotAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyDBSnapshotAttribute", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1454 = writer.prefix("DBSnapshotIdentifier");
    if let Some(var_1455) = &input.db_snapshot_identifier {
        scope_1454.string(var_1455);
    }
    #[allow(unused_mut)]
    let mut scope_1456 = writer.prefix("AttributeName");
    if let Some(var_1457) = &input.attribute_name {
        scope_1456.string(var_1457);
    }
    #[allow(unused_mut)]
    let mut scope_1458 = writer.prefix("ValuesToAdd");
    if let Some(var_1459) = &input.values_to_add {
        let mut list_1461 = scope_1458.start_list(false, Some("AttributeValue"));
        for item_1460 in var_1459 {
            #[allow(unused_mut)]
            let mut entry_1462 = list_1461.entry();
            entry_1462.string(item_1460);
        }
        list_1461.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1463 = writer.prefix("ValuesToRemove");
    if let Some(var_1464) = &input.values_to_remove {
        let mut list_1466 = scope_1463.start_list(false, Some("AttributeValue"));
        for item_1465 in var_1464 {
            #[allow(unused_mut)]
            let mut entry_1467 = list_1466.entry();
            entry_1467.string(item_1465);
        }
        list_1466.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_db_subnet_group(
    input: &crate::input::ModifyDbSubnetGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyDBSubnetGroup", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1468 = writer.prefix("DBSubnetGroupName");
    if let Some(var_1469) = &input.db_subnet_group_name {
        scope_1468.string(var_1469);
    }
    #[allow(unused_mut)]
    let mut scope_1470 = writer.prefix("DBSubnetGroupDescription");
    if let Some(var_1471) = &input.db_subnet_group_description {
        scope_1470.string(var_1471);
    }
    #[allow(unused_mut)]
    let mut scope_1472 = writer.prefix("SubnetIds");
    if let Some(var_1473) = &input.subnet_ids {
        let mut list_1475 = scope_1472.start_list(false, Some("SubnetIdentifier"));
        for item_1474 in var_1473 {
            #[allow(unused_mut)]
            let mut entry_1476 = list_1475.entry();
            entry_1476.string(item_1474);
        }
        list_1475.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_event_subscription(
    input: &crate::input::ModifyEventSubscriptionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyEventSubscription", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1477 = writer.prefix("SubscriptionName");
    if let Some(var_1478) = &input.subscription_name {
        scope_1477.string(var_1478);
    }
    #[allow(unused_mut)]
    let mut scope_1479 = writer.prefix("SnsTopicArn");
    if let Some(var_1480) = &input.sns_topic_arn {
        scope_1479.string(var_1480);
    }
    #[allow(unused_mut)]
    let mut scope_1481 = writer.prefix("SourceType");
    if let Some(var_1482) = &input.source_type {
        scope_1481.string(var_1482);
    }
    #[allow(unused_mut)]
    let mut scope_1483 = writer.prefix("EventCategories");
    if let Some(var_1484) = &input.event_categories {
        let mut list_1486 = scope_1483.start_list(false, Some("EventCategory"));
        for item_1485 in var_1484 {
            #[allow(unused_mut)]
            let mut entry_1487 = list_1486.entry();
            entry_1487.string(item_1485);
        }
        list_1486.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1488 = writer.prefix("Enabled");
    if let Some(var_1489) = &input.enabled {
        scope_1488.boolean(*var_1489);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_global_cluster(
    input: &crate::input::ModifyGlobalClusterInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyGlobalCluster", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1490 = writer.prefix("GlobalClusterIdentifier");
    if let Some(var_1491) = &input.global_cluster_identifier {
        scope_1490.string(var_1491);
    }
    #[allow(unused_mut)]
    let mut scope_1492 = writer.prefix("NewGlobalClusterIdentifier");
    if let Some(var_1493) = &input.new_global_cluster_identifier {
        scope_1492.string(var_1493);
    }
    #[allow(unused_mut)]
    let mut scope_1494 = writer.prefix("DeletionProtection");
    if let Some(var_1495) = &input.deletion_protection {
        scope_1494.boolean(*var_1495);
    }
    #[allow(unused_mut)]
    let mut scope_1496 = writer.prefix("EngineVersion");
    if let Some(var_1497) = &input.engine_version {
        scope_1496.string(var_1497);
    }
    #[allow(unused_mut)]
    let mut scope_1498 = writer.prefix("AllowMajorVersionUpgrade");
    if let Some(var_1499) = &input.allow_major_version_upgrade {
        scope_1498.boolean(*var_1499);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_option_group(
    input: &crate::input::ModifyOptionGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyOptionGroup", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1500 = writer.prefix("OptionGroupName");
    if let Some(var_1501) = &input.option_group_name {
        scope_1500.string(var_1501);
    }
    #[allow(unused_mut)]
    let mut scope_1502 = writer.prefix("OptionsToInclude");
    if let Some(var_1503) = &input.options_to_include {
        let mut list_1505 = scope_1502.start_list(false, Some("OptionConfiguration"));
        for item_1504 in var_1503 {
            #[allow(unused_mut)]
            let mut entry_1506 = list_1505.entry();
            crate::query_ser::serialize_structure_crate_model_option_configuration(
                entry_1506, item_1504,
            )?;
        }
        list_1505.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1507 = writer.prefix("OptionsToRemove");
    if let Some(var_1508) = &input.options_to_remove {
        let mut list_1510 = scope_1507.start_list(false, None);
        for item_1509 in var_1508 {
            #[allow(unused_mut)]
            let mut entry_1511 = list_1510.entry();
            entry_1511.string(item_1509);
        }
        list_1510.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1512 = writer.prefix("ApplyImmediately");
    if input.apply_immediately {
        scope_1512.boolean(input.apply_immediately);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_promote_read_replica(
    input: &crate::input::PromoteReadReplicaInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "PromoteReadReplica", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1513 = writer.prefix("DBInstanceIdentifier");
    if let Some(var_1514) = &input.db_instance_identifier {
        scope_1513.string(var_1514);
    }
    #[allow(unused_mut)]
    let mut scope_1515 = writer.prefix("BackupRetentionPeriod");
    if let Some(var_1516) = &input.backup_retention_period {
        scope_1515.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1516).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1517 = writer.prefix("PreferredBackupWindow");
    if let Some(var_1518) = &input.preferred_backup_window {
        scope_1517.string(var_1518);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_promote_read_replica_db_cluster(
    input: &crate::input::PromoteReadReplicaDbClusterInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "PromoteReadReplicaDBCluster", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1519 = writer.prefix("DBClusterIdentifier");
    if let Some(var_1520) = &input.db_cluster_identifier {
        scope_1519.string(var_1520);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_purchase_reserved_db_instances_offering(
    input: &crate::input::PurchaseReservedDbInstancesOfferingInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "PurchaseReservedDBInstancesOffering",
        "2014-10-31",
    );
    #[allow(unused_mut)]
    let mut scope_1521 = writer.prefix("ReservedDBInstancesOfferingId");
    if let Some(var_1522) = &input.reserved_db_instances_offering_id {
        scope_1521.string(var_1522);
    }
    #[allow(unused_mut)]
    let mut scope_1523 = writer.prefix("ReservedDBInstanceId");
    if let Some(var_1524) = &input.reserved_db_instance_id {
        scope_1523.string(var_1524);
    }
    #[allow(unused_mut)]
    let mut scope_1525 = writer.prefix("DBInstanceCount");
    if let Some(var_1526) = &input.db_instance_count {
        scope_1525.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1526).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1527 = writer.prefix("Tags");
    if let Some(var_1528) = &input.tags {
        let mut list_1530 = scope_1527.start_list(false, Some("Tag"));
        for item_1529 in var_1528 {
            #[allow(unused_mut)]
            let mut entry_1531 = list_1530.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_1531, item_1529)?;
        }
        list_1530.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reboot_db_cluster(
    input: &crate::input::RebootDbClusterInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "RebootDBCluster", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1532 = writer.prefix("DBClusterIdentifier");
    if let Some(var_1533) = &input.db_cluster_identifier {
        scope_1532.string(var_1533);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reboot_db_instance(
    input: &crate::input::RebootDbInstanceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "RebootDBInstance", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1534 = writer.prefix("DBInstanceIdentifier");
    if let Some(var_1535) = &input.db_instance_identifier {
        scope_1534.string(var_1535);
    }
    #[allow(unused_mut)]
    let mut scope_1536 = writer.prefix("ForceFailover");
    if let Some(var_1537) = &input.force_failover {
        scope_1536.boolean(*var_1537);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_register_db_proxy_targets(
    input: &crate::input::RegisterDbProxyTargetsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RegisterDBProxyTargets", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1538 = writer.prefix("DBProxyName");
    if let Some(var_1539) = &input.db_proxy_name {
        scope_1538.string(var_1539);
    }
    #[allow(unused_mut)]
    let mut scope_1540 = writer.prefix("TargetGroupName");
    if let Some(var_1541) = &input.target_group_name {
        scope_1540.string(var_1541);
    }
    #[allow(unused_mut)]
    let mut scope_1542 = writer.prefix("DBInstanceIdentifiers");
    if let Some(var_1543) = &input.db_instance_identifiers {
        let mut list_1545 = scope_1542.start_list(false, None);
        for item_1544 in var_1543 {
            #[allow(unused_mut)]
            let mut entry_1546 = list_1545.entry();
            entry_1546.string(item_1544);
        }
        list_1545.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1547 = writer.prefix("DBClusterIdentifiers");
    if let Some(var_1548) = &input.db_cluster_identifiers {
        let mut list_1550 = scope_1547.start_list(false, None);
        for item_1549 in var_1548 {
            #[allow(unused_mut)]
            let mut entry_1551 = list_1550.entry();
            entry_1551.string(item_1549);
        }
        list_1550.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_remove_from_global_cluster(
    input: &crate::input::RemoveFromGlobalClusterInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RemoveFromGlobalCluster", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1552 = writer.prefix("GlobalClusterIdentifier");
    if let Some(var_1553) = &input.global_cluster_identifier {
        scope_1552.string(var_1553);
    }
    #[allow(unused_mut)]
    let mut scope_1554 = writer.prefix("DbClusterIdentifier");
    if let Some(var_1555) = &input.db_cluster_identifier {
        scope_1554.string(var_1555);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_remove_role_from_db_cluster(
    input: &crate::input::RemoveRoleFromDbClusterInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RemoveRoleFromDBCluster", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1556 = writer.prefix("DBClusterIdentifier");
    if let Some(var_1557) = &input.db_cluster_identifier {
        scope_1556.string(var_1557);
    }
    #[allow(unused_mut)]
    let mut scope_1558 = writer.prefix("RoleArn");
    if let Some(var_1559) = &input.role_arn {
        scope_1558.string(var_1559);
    }
    #[allow(unused_mut)]
    let mut scope_1560 = writer.prefix("FeatureName");
    if let Some(var_1561) = &input.feature_name {
        scope_1560.string(var_1561);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_remove_role_from_db_instance(
    input: &crate::input::RemoveRoleFromDbInstanceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RemoveRoleFromDBInstance", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1562 = writer.prefix("DBInstanceIdentifier");
    if let Some(var_1563) = &input.db_instance_identifier {
        scope_1562.string(var_1563);
    }
    #[allow(unused_mut)]
    let mut scope_1564 = writer.prefix("RoleArn");
    if let Some(var_1565) = &input.role_arn {
        scope_1564.string(var_1565);
    }
    #[allow(unused_mut)]
    let mut scope_1566 = writer.prefix("FeatureName");
    if let Some(var_1567) = &input.feature_name {
        scope_1566.string(var_1567);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_remove_source_identifier_from_subscription(
    input: &crate::input::RemoveSourceIdentifierFromSubscriptionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "RemoveSourceIdentifierFromSubscription",
        "2014-10-31",
    );
    #[allow(unused_mut)]
    let mut scope_1568 = writer.prefix("SubscriptionName");
    if let Some(var_1569) = &input.subscription_name {
        scope_1568.string(var_1569);
    }
    #[allow(unused_mut)]
    let mut scope_1570 = writer.prefix("SourceIdentifier");
    if let Some(var_1571) = &input.source_identifier {
        scope_1570.string(var_1571);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_remove_tags_from_resource(
    input: &crate::input::RemoveTagsFromResourceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RemoveTagsFromResource", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1572 = writer.prefix("ResourceName");
    if let Some(var_1573) = &input.resource_name {
        scope_1572.string(var_1573);
    }
    #[allow(unused_mut)]
    let mut scope_1574 = writer.prefix("TagKeys");
    if let Some(var_1575) = &input.tag_keys {
        let mut list_1577 = scope_1574.start_list(false, None);
        for item_1576 in var_1575 {
            #[allow(unused_mut)]
            let mut entry_1578 = list_1577.entry();
            entry_1578.string(item_1576);
        }
        list_1577.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reset_db_cluster_parameter_group(
    input: &crate::input::ResetDbClusterParameterGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ResetDBClusterParameterGroup", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1579 = writer.prefix("DBClusterParameterGroupName");
    if let Some(var_1580) = &input.db_cluster_parameter_group_name {
        scope_1579.string(var_1580);
    }
    #[allow(unused_mut)]
    let mut scope_1581 = writer.prefix("ResetAllParameters");
    if input.reset_all_parameters {
        scope_1581.boolean(input.reset_all_parameters);
    }
    #[allow(unused_mut)]
    let mut scope_1582 = writer.prefix("Parameters");
    if let Some(var_1583) = &input.parameters {
        let mut list_1585 = scope_1582.start_list(false, Some("Parameter"));
        for item_1584 in var_1583 {
            #[allow(unused_mut)]
            let mut entry_1586 = list_1585.entry();
            crate::query_ser::serialize_structure_crate_model_parameter(entry_1586, item_1584)?;
        }
        list_1585.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reset_db_parameter_group(
    input: &crate::input::ResetDbParameterGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ResetDBParameterGroup", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1587 = writer.prefix("DBParameterGroupName");
    if let Some(var_1588) = &input.db_parameter_group_name {
        scope_1587.string(var_1588);
    }
    #[allow(unused_mut)]
    let mut scope_1589 = writer.prefix("ResetAllParameters");
    if input.reset_all_parameters {
        scope_1589.boolean(input.reset_all_parameters);
    }
    #[allow(unused_mut)]
    let mut scope_1590 = writer.prefix("Parameters");
    if let Some(var_1591) = &input.parameters {
        let mut list_1593 = scope_1590.start_list(false, Some("Parameter"));
        for item_1592 in var_1591 {
            #[allow(unused_mut)]
            let mut entry_1594 = list_1593.entry();
            crate::query_ser::serialize_structure_crate_model_parameter(entry_1594, item_1592)?;
        }
        list_1593.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_restore_db_cluster_from_s3(
    input: &crate::input::RestoreDbClusterFromS3Input,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RestoreDBClusterFromS3", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1595 = writer.prefix("AvailabilityZones");
    if let Some(var_1596) = &input.availability_zones {
        let mut list_1598 = scope_1595.start_list(false, Some("AvailabilityZone"));
        for item_1597 in var_1596 {
            #[allow(unused_mut)]
            let mut entry_1599 = list_1598.entry();
            entry_1599.string(item_1597);
        }
        list_1598.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1600 = writer.prefix("BackupRetentionPeriod");
    if let Some(var_1601) = &input.backup_retention_period {
        scope_1600.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1601).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1602 = writer.prefix("CharacterSetName");
    if let Some(var_1603) = &input.character_set_name {
        scope_1602.string(var_1603);
    }
    #[allow(unused_mut)]
    let mut scope_1604 = writer.prefix("DatabaseName");
    if let Some(var_1605) = &input.database_name {
        scope_1604.string(var_1605);
    }
    #[allow(unused_mut)]
    let mut scope_1606 = writer.prefix("DBClusterIdentifier");
    if let Some(var_1607) = &input.db_cluster_identifier {
        scope_1606.string(var_1607);
    }
    #[allow(unused_mut)]
    let mut scope_1608 = writer.prefix("DBClusterParameterGroupName");
    if let Some(var_1609) = &input.db_cluster_parameter_group_name {
        scope_1608.string(var_1609);
    }
    #[allow(unused_mut)]
    let mut scope_1610 = writer.prefix("VpcSecurityGroupIds");
    if let Some(var_1611) = &input.vpc_security_group_ids {
        let mut list_1613 = scope_1610.start_list(false, Some("VpcSecurityGroupId"));
        for item_1612 in var_1611 {
            #[allow(unused_mut)]
            let mut entry_1614 = list_1613.entry();
            entry_1614.string(item_1612);
        }
        list_1613.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1615 = writer.prefix("DBSubnetGroupName");
    if let Some(var_1616) = &input.db_subnet_group_name {
        scope_1615.string(var_1616);
    }
    #[allow(unused_mut)]
    let mut scope_1617 = writer.prefix("Engine");
    if let Some(var_1618) = &input.engine {
        scope_1617.string(var_1618);
    }
    #[allow(unused_mut)]
    let mut scope_1619 = writer.prefix("EngineVersion");
    if let Some(var_1620) = &input.engine_version {
        scope_1619.string(var_1620);
    }
    #[allow(unused_mut)]
    let mut scope_1621 = writer.prefix("Port");
    if let Some(var_1622) = &input.port {
        scope_1621.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1622).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1623 = writer.prefix("MasterUsername");
    if let Some(var_1624) = &input.master_username {
        scope_1623.string(var_1624);
    }
    #[allow(unused_mut)]
    let mut scope_1625 = writer.prefix("MasterUserPassword");
    if let Some(var_1626) = &input.master_user_password {
        scope_1625.string(var_1626);
    }
    #[allow(unused_mut)]
    let mut scope_1627 = writer.prefix("OptionGroupName");
    if let Some(var_1628) = &input.option_group_name {
        scope_1627.string(var_1628);
    }
    #[allow(unused_mut)]
    let mut scope_1629 = writer.prefix("PreferredBackupWindow");
    if let Some(var_1630) = &input.preferred_backup_window {
        scope_1629.string(var_1630);
    }
    #[allow(unused_mut)]
    let mut scope_1631 = writer.prefix("PreferredMaintenanceWindow");
    if let Some(var_1632) = &input.preferred_maintenance_window {
        scope_1631.string(var_1632);
    }
    #[allow(unused_mut)]
    let mut scope_1633 = writer.prefix("Tags");
    if let Some(var_1634) = &input.tags {
        let mut list_1636 = scope_1633.start_list(false, Some("Tag"));
        for item_1635 in var_1634 {
            #[allow(unused_mut)]
            let mut entry_1637 = list_1636.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_1637, item_1635)?;
        }
        list_1636.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1638 = writer.prefix("StorageEncrypted");
    if let Some(var_1639) = &input.storage_encrypted {
        scope_1638.boolean(*var_1639);
    }
    #[allow(unused_mut)]
    let mut scope_1640 = writer.prefix("KmsKeyId");
    if let Some(var_1641) = &input.kms_key_id {
        scope_1640.string(var_1641);
    }
    #[allow(unused_mut)]
    let mut scope_1642 = writer.prefix("EnableIAMDatabaseAuthentication");
    if let Some(var_1643) = &input.enable_iam_database_authentication {
        scope_1642.boolean(*var_1643);
    }
    #[allow(unused_mut)]
    let mut scope_1644 = writer.prefix("SourceEngine");
    if let Some(var_1645) = &input.source_engine {
        scope_1644.string(var_1645);
    }
    #[allow(unused_mut)]
    let mut scope_1646 = writer.prefix("SourceEngineVersion");
    if let Some(var_1647) = &input.source_engine_version {
        scope_1646.string(var_1647);
    }
    #[allow(unused_mut)]
    let mut scope_1648 = writer.prefix("S3BucketName");
    if let Some(var_1649) = &input.s3_bucket_name {
        scope_1648.string(var_1649);
    }
    #[allow(unused_mut)]
    let mut scope_1650 = writer.prefix("S3Prefix");
    if let Some(var_1651) = &input.s3_prefix {
        scope_1650.string(var_1651);
    }
    #[allow(unused_mut)]
    let mut scope_1652 = writer.prefix("S3IngestionRoleArn");
    if let Some(var_1653) = &input.s3_ingestion_role_arn {
        scope_1652.string(var_1653);
    }
    #[allow(unused_mut)]
    let mut scope_1654 = writer.prefix("BacktrackWindow");
    if let Some(var_1655) = &input.backtrack_window {
        scope_1654.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1655).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1656 = writer.prefix("EnableCloudwatchLogsExports");
    if let Some(var_1657) = &input.enable_cloudwatch_logs_exports {
        let mut list_1659 = scope_1656.start_list(false, None);
        for item_1658 in var_1657 {
            #[allow(unused_mut)]
            let mut entry_1660 = list_1659.entry();
            entry_1660.string(item_1658);
        }
        list_1659.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1661 = writer.prefix("DeletionProtection");
    if let Some(var_1662) = &input.deletion_protection {
        scope_1661.boolean(*var_1662);
    }
    #[allow(unused_mut)]
    let mut scope_1663 = writer.prefix("CopyTagsToSnapshot");
    if let Some(var_1664) = &input.copy_tags_to_snapshot {
        scope_1663.boolean(*var_1664);
    }
    #[allow(unused_mut)]
    let mut scope_1665 = writer.prefix("Domain");
    if let Some(var_1666) = &input.domain {
        scope_1665.string(var_1666);
    }
    #[allow(unused_mut)]
    let mut scope_1667 = writer.prefix("DomainIAMRoleName");
    if let Some(var_1668) = &input.domain_iam_role_name {
        scope_1667.string(var_1668);
    }
    #[allow(unused_mut)]
    let mut scope_1669 = writer.prefix("ServerlessV2ScalingConfiguration");
    if let Some(var_1670) = &input.serverless_v2_scaling_configuration {
        crate::query_ser::serialize_structure_crate_model_serverless_v2_scaling_configuration(
            scope_1669, var_1670,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_restore_db_cluster_from_snapshot(
    input: &crate::input::RestoreDbClusterFromSnapshotInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RestoreDBClusterFromSnapshot", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1671 = writer.prefix("AvailabilityZones");
    if let Some(var_1672) = &input.availability_zones {
        let mut list_1674 = scope_1671.start_list(false, Some("AvailabilityZone"));
        for item_1673 in var_1672 {
            #[allow(unused_mut)]
            let mut entry_1675 = list_1674.entry();
            entry_1675.string(item_1673);
        }
        list_1674.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1676 = writer.prefix("DBClusterIdentifier");
    if let Some(var_1677) = &input.db_cluster_identifier {
        scope_1676.string(var_1677);
    }
    #[allow(unused_mut)]
    let mut scope_1678 = writer.prefix("SnapshotIdentifier");
    if let Some(var_1679) = &input.snapshot_identifier {
        scope_1678.string(var_1679);
    }
    #[allow(unused_mut)]
    let mut scope_1680 = writer.prefix("Engine");
    if let Some(var_1681) = &input.engine {
        scope_1680.string(var_1681);
    }
    #[allow(unused_mut)]
    let mut scope_1682 = writer.prefix("EngineVersion");
    if let Some(var_1683) = &input.engine_version {
        scope_1682.string(var_1683);
    }
    #[allow(unused_mut)]
    let mut scope_1684 = writer.prefix("Port");
    if let Some(var_1685) = &input.port {
        scope_1684.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1685).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1686 = writer.prefix("DBSubnetGroupName");
    if let Some(var_1687) = &input.db_subnet_group_name {
        scope_1686.string(var_1687);
    }
    #[allow(unused_mut)]
    let mut scope_1688 = writer.prefix("DatabaseName");
    if let Some(var_1689) = &input.database_name {
        scope_1688.string(var_1689);
    }
    #[allow(unused_mut)]
    let mut scope_1690 = writer.prefix("OptionGroupName");
    if let Some(var_1691) = &input.option_group_name {
        scope_1690.string(var_1691);
    }
    #[allow(unused_mut)]
    let mut scope_1692 = writer.prefix("VpcSecurityGroupIds");
    if let Some(var_1693) = &input.vpc_security_group_ids {
        let mut list_1695 = scope_1692.start_list(false, Some("VpcSecurityGroupId"));
        for item_1694 in var_1693 {
            #[allow(unused_mut)]
            let mut entry_1696 = list_1695.entry();
            entry_1696.string(item_1694);
        }
        list_1695.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1697 = writer.prefix("Tags");
    if let Some(var_1698) = &input.tags {
        let mut list_1700 = scope_1697.start_list(false, Some("Tag"));
        for item_1699 in var_1698 {
            #[allow(unused_mut)]
            let mut entry_1701 = list_1700.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_1701, item_1699)?;
        }
        list_1700.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1702 = writer.prefix("KmsKeyId");
    if let Some(var_1703) = &input.kms_key_id {
        scope_1702.string(var_1703);
    }
    #[allow(unused_mut)]
    let mut scope_1704 = writer.prefix("EnableIAMDatabaseAuthentication");
    if let Some(var_1705) = &input.enable_iam_database_authentication {
        scope_1704.boolean(*var_1705);
    }
    #[allow(unused_mut)]
    let mut scope_1706 = writer.prefix("BacktrackWindow");
    if let Some(var_1707) = &input.backtrack_window {
        scope_1706.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1707).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1708 = writer.prefix("EnableCloudwatchLogsExports");
    if let Some(var_1709) = &input.enable_cloudwatch_logs_exports {
        let mut list_1711 = scope_1708.start_list(false, None);
        for item_1710 in var_1709 {
            #[allow(unused_mut)]
            let mut entry_1712 = list_1711.entry();
            entry_1712.string(item_1710);
        }
        list_1711.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1713 = writer.prefix("EngineMode");
    if let Some(var_1714) = &input.engine_mode {
        scope_1713.string(var_1714);
    }
    #[allow(unused_mut)]
    let mut scope_1715 = writer.prefix("ScalingConfiguration");
    if let Some(var_1716) = &input.scaling_configuration {
        crate::query_ser::serialize_structure_crate_model_scaling_configuration(
            scope_1715, var_1716,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1717 = writer.prefix("DBClusterParameterGroupName");
    if let Some(var_1718) = &input.db_cluster_parameter_group_name {
        scope_1717.string(var_1718);
    }
    #[allow(unused_mut)]
    let mut scope_1719 = writer.prefix("DeletionProtection");
    if let Some(var_1720) = &input.deletion_protection {
        scope_1719.boolean(*var_1720);
    }
    #[allow(unused_mut)]
    let mut scope_1721 = writer.prefix("CopyTagsToSnapshot");
    if let Some(var_1722) = &input.copy_tags_to_snapshot {
        scope_1721.boolean(*var_1722);
    }
    #[allow(unused_mut)]
    let mut scope_1723 = writer.prefix("Domain");
    if let Some(var_1724) = &input.domain {
        scope_1723.string(var_1724);
    }
    #[allow(unused_mut)]
    let mut scope_1725 = writer.prefix("DomainIAMRoleName");
    if let Some(var_1726) = &input.domain_iam_role_name {
        scope_1725.string(var_1726);
    }
    #[allow(unused_mut)]
    let mut scope_1727 = writer.prefix("DBClusterInstanceClass");
    if let Some(var_1728) = &input.db_cluster_instance_class {
        scope_1727.string(var_1728);
    }
    #[allow(unused_mut)]
    let mut scope_1729 = writer.prefix("StorageType");
    if let Some(var_1730) = &input.storage_type {
        scope_1729.string(var_1730);
    }
    #[allow(unused_mut)]
    let mut scope_1731 = writer.prefix("Iops");
    if let Some(var_1732) = &input.iops {
        scope_1731.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1732).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1733 = writer.prefix("PubliclyAccessible");
    if let Some(var_1734) = &input.publicly_accessible {
        scope_1733.boolean(*var_1734);
    }
    #[allow(unused_mut)]
    let mut scope_1735 = writer.prefix("ServerlessV2ScalingConfiguration");
    if let Some(var_1736) = &input.serverless_v2_scaling_configuration {
        crate::query_ser::serialize_structure_crate_model_serverless_v2_scaling_configuration(
            scope_1735, var_1736,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_restore_db_cluster_to_point_in_time(
    input: &crate::input::RestoreDbClusterToPointInTimeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RestoreDBClusterToPointInTime", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1737 = writer.prefix("DBClusterIdentifier");
    if let Some(var_1738) = &input.db_cluster_identifier {
        scope_1737.string(var_1738);
    }
    #[allow(unused_mut)]
    let mut scope_1739 = writer.prefix("RestoreType");
    if let Some(var_1740) = &input.restore_type {
        scope_1739.string(var_1740);
    }
    #[allow(unused_mut)]
    let mut scope_1741 = writer.prefix("SourceDBClusterIdentifier");
    if let Some(var_1742) = &input.source_db_cluster_identifier {
        scope_1741.string(var_1742);
    }
    #[allow(unused_mut)]
    let mut scope_1743 = writer.prefix("RestoreToTime");
    if let Some(var_1744) = &input.restore_to_time {
        scope_1743.date_time(var_1744, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_1745 = writer.prefix("UseLatestRestorableTime");
    if input.use_latest_restorable_time {
        scope_1745.boolean(input.use_latest_restorable_time);
    }
    #[allow(unused_mut)]
    let mut scope_1746 = writer.prefix("Port");
    if let Some(var_1747) = &input.port {
        scope_1746.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1747).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1748 = writer.prefix("DBSubnetGroupName");
    if let Some(var_1749) = &input.db_subnet_group_name {
        scope_1748.string(var_1749);
    }
    #[allow(unused_mut)]
    let mut scope_1750 = writer.prefix("OptionGroupName");
    if let Some(var_1751) = &input.option_group_name {
        scope_1750.string(var_1751);
    }
    #[allow(unused_mut)]
    let mut scope_1752 = writer.prefix("VpcSecurityGroupIds");
    if let Some(var_1753) = &input.vpc_security_group_ids {
        let mut list_1755 = scope_1752.start_list(false, Some("VpcSecurityGroupId"));
        for item_1754 in var_1753 {
            #[allow(unused_mut)]
            let mut entry_1756 = list_1755.entry();
            entry_1756.string(item_1754);
        }
        list_1755.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1757 = writer.prefix("Tags");
    if let Some(var_1758) = &input.tags {
        let mut list_1760 = scope_1757.start_list(false, Some("Tag"));
        for item_1759 in var_1758 {
            #[allow(unused_mut)]
            let mut entry_1761 = list_1760.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_1761, item_1759)?;
        }
        list_1760.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1762 = writer.prefix("KmsKeyId");
    if let Some(var_1763) = &input.kms_key_id {
        scope_1762.string(var_1763);
    }
    #[allow(unused_mut)]
    let mut scope_1764 = writer.prefix("EnableIAMDatabaseAuthentication");
    if let Some(var_1765) = &input.enable_iam_database_authentication {
        scope_1764.boolean(*var_1765);
    }
    #[allow(unused_mut)]
    let mut scope_1766 = writer.prefix("BacktrackWindow");
    if let Some(var_1767) = &input.backtrack_window {
        scope_1766.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1767).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1768 = writer.prefix("EnableCloudwatchLogsExports");
    if let Some(var_1769) = &input.enable_cloudwatch_logs_exports {
        let mut list_1771 = scope_1768.start_list(false, None);
        for item_1770 in var_1769 {
            #[allow(unused_mut)]
            let mut entry_1772 = list_1771.entry();
            entry_1772.string(item_1770);
        }
        list_1771.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1773 = writer.prefix("DBClusterParameterGroupName");
    if let Some(var_1774) = &input.db_cluster_parameter_group_name {
        scope_1773.string(var_1774);
    }
    #[allow(unused_mut)]
    let mut scope_1775 = writer.prefix("DeletionProtection");
    if let Some(var_1776) = &input.deletion_protection {
        scope_1775.boolean(*var_1776);
    }
    #[allow(unused_mut)]
    let mut scope_1777 = writer.prefix("CopyTagsToSnapshot");
    if let Some(var_1778) = &input.copy_tags_to_snapshot {
        scope_1777.boolean(*var_1778);
    }
    #[allow(unused_mut)]
    let mut scope_1779 = writer.prefix("Domain");
    if let Some(var_1780) = &input.domain {
        scope_1779.string(var_1780);
    }
    #[allow(unused_mut)]
    let mut scope_1781 = writer.prefix("DomainIAMRoleName");
    if let Some(var_1782) = &input.domain_iam_role_name {
        scope_1781.string(var_1782);
    }
    #[allow(unused_mut)]
    let mut scope_1783 = writer.prefix("ScalingConfiguration");
    if let Some(var_1784) = &input.scaling_configuration {
        crate::query_ser::serialize_structure_crate_model_scaling_configuration(
            scope_1783, var_1784,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1785 = writer.prefix("EngineMode");
    if let Some(var_1786) = &input.engine_mode {
        scope_1785.string(var_1786);
    }
    #[allow(unused_mut)]
    let mut scope_1787 = writer.prefix("DBClusterInstanceClass");
    if let Some(var_1788) = &input.db_cluster_instance_class {
        scope_1787.string(var_1788);
    }
    #[allow(unused_mut)]
    let mut scope_1789 = writer.prefix("StorageType");
    if let Some(var_1790) = &input.storage_type {
        scope_1789.string(var_1790);
    }
    #[allow(unused_mut)]
    let mut scope_1791 = writer.prefix("PubliclyAccessible");
    if let Some(var_1792) = &input.publicly_accessible {
        scope_1791.boolean(*var_1792);
    }
    #[allow(unused_mut)]
    let mut scope_1793 = writer.prefix("Iops");
    if let Some(var_1794) = &input.iops {
        scope_1793.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1794).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1795 = writer.prefix("ServerlessV2ScalingConfiguration");
    if let Some(var_1796) = &input.serverless_v2_scaling_configuration {
        crate::query_ser::serialize_structure_crate_model_serverless_v2_scaling_configuration(
            scope_1795, var_1796,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_restore_db_instance_from_db_snapshot(
    input: &crate::input::RestoreDbInstanceFromDbSnapshotInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "RestoreDBInstanceFromDBSnapshot",
        "2014-10-31",
    );
    #[allow(unused_mut)]
    let mut scope_1797 = writer.prefix("DBInstanceIdentifier");
    if let Some(var_1798) = &input.db_instance_identifier {
        scope_1797.string(var_1798);
    }
    #[allow(unused_mut)]
    let mut scope_1799 = writer.prefix("DBSnapshotIdentifier");
    if let Some(var_1800) = &input.db_snapshot_identifier {
        scope_1799.string(var_1800);
    }
    #[allow(unused_mut)]
    let mut scope_1801 = writer.prefix("DBInstanceClass");
    if let Some(var_1802) = &input.db_instance_class {
        scope_1801.string(var_1802);
    }
    #[allow(unused_mut)]
    let mut scope_1803 = writer.prefix("Port");
    if let Some(var_1804) = &input.port {
        scope_1803.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1804).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1805 = writer.prefix("AvailabilityZone");
    if let Some(var_1806) = &input.availability_zone {
        scope_1805.string(var_1806);
    }
    #[allow(unused_mut)]
    let mut scope_1807 = writer.prefix("DBSubnetGroupName");
    if let Some(var_1808) = &input.db_subnet_group_name {
        scope_1807.string(var_1808);
    }
    #[allow(unused_mut)]
    let mut scope_1809 = writer.prefix("MultiAZ");
    if let Some(var_1810) = &input.multi_az {
        scope_1809.boolean(*var_1810);
    }
    #[allow(unused_mut)]
    let mut scope_1811 = writer.prefix("PubliclyAccessible");
    if let Some(var_1812) = &input.publicly_accessible {
        scope_1811.boolean(*var_1812);
    }
    #[allow(unused_mut)]
    let mut scope_1813 = writer.prefix("AutoMinorVersionUpgrade");
    if let Some(var_1814) = &input.auto_minor_version_upgrade {
        scope_1813.boolean(*var_1814);
    }
    #[allow(unused_mut)]
    let mut scope_1815 = writer.prefix("LicenseModel");
    if let Some(var_1816) = &input.license_model {
        scope_1815.string(var_1816);
    }
    #[allow(unused_mut)]
    let mut scope_1817 = writer.prefix("DBName");
    if let Some(var_1818) = &input.db_name {
        scope_1817.string(var_1818);
    }
    #[allow(unused_mut)]
    let mut scope_1819 = writer.prefix("Engine");
    if let Some(var_1820) = &input.engine {
        scope_1819.string(var_1820);
    }
    #[allow(unused_mut)]
    let mut scope_1821 = writer.prefix("Iops");
    if let Some(var_1822) = &input.iops {
        scope_1821.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1822).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1823 = writer.prefix("OptionGroupName");
    if let Some(var_1824) = &input.option_group_name {
        scope_1823.string(var_1824);
    }
    #[allow(unused_mut)]
    let mut scope_1825 = writer.prefix("Tags");
    if let Some(var_1826) = &input.tags {
        let mut list_1828 = scope_1825.start_list(false, Some("Tag"));
        for item_1827 in var_1826 {
            #[allow(unused_mut)]
            let mut entry_1829 = list_1828.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_1829, item_1827)?;
        }
        list_1828.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1830 = writer.prefix("StorageType");
    if let Some(var_1831) = &input.storage_type {
        scope_1830.string(var_1831);
    }
    #[allow(unused_mut)]
    let mut scope_1832 = writer.prefix("TdeCredentialArn");
    if let Some(var_1833) = &input.tde_credential_arn {
        scope_1832.string(var_1833);
    }
    #[allow(unused_mut)]
    let mut scope_1834 = writer.prefix("TdeCredentialPassword");
    if let Some(var_1835) = &input.tde_credential_password {
        scope_1834.string(var_1835);
    }
    #[allow(unused_mut)]
    let mut scope_1836 = writer.prefix("VpcSecurityGroupIds");
    if let Some(var_1837) = &input.vpc_security_group_ids {
        let mut list_1839 = scope_1836.start_list(false, Some("VpcSecurityGroupId"));
        for item_1838 in var_1837 {
            #[allow(unused_mut)]
            let mut entry_1840 = list_1839.entry();
            entry_1840.string(item_1838);
        }
        list_1839.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1841 = writer.prefix("Domain");
    if let Some(var_1842) = &input.domain {
        scope_1841.string(var_1842);
    }
    #[allow(unused_mut)]
    let mut scope_1843 = writer.prefix("CopyTagsToSnapshot");
    if let Some(var_1844) = &input.copy_tags_to_snapshot {
        scope_1843.boolean(*var_1844);
    }
    #[allow(unused_mut)]
    let mut scope_1845 = writer.prefix("DomainIAMRoleName");
    if let Some(var_1846) = &input.domain_iam_role_name {
        scope_1845.string(var_1846);
    }
    #[allow(unused_mut)]
    let mut scope_1847 = writer.prefix("EnableIAMDatabaseAuthentication");
    if let Some(var_1848) = &input.enable_iam_database_authentication {
        scope_1847.boolean(*var_1848);
    }
    #[allow(unused_mut)]
    let mut scope_1849 = writer.prefix("EnableCloudwatchLogsExports");
    if let Some(var_1850) = &input.enable_cloudwatch_logs_exports {
        let mut list_1852 = scope_1849.start_list(false, None);
        for item_1851 in var_1850 {
            #[allow(unused_mut)]
            let mut entry_1853 = list_1852.entry();
            entry_1853.string(item_1851);
        }
        list_1852.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1854 = writer.prefix("ProcessorFeatures");
    if let Some(var_1855) = &input.processor_features {
        let mut list_1857 = scope_1854.start_list(false, Some("ProcessorFeature"));
        for item_1856 in var_1855 {
            #[allow(unused_mut)]
            let mut entry_1858 = list_1857.entry();
            crate::query_ser::serialize_structure_crate_model_processor_feature(
                entry_1858, item_1856,
            )?;
        }
        list_1857.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1859 = writer.prefix("UseDefaultProcessorFeatures");
    if let Some(var_1860) = &input.use_default_processor_features {
        scope_1859.boolean(*var_1860);
    }
    #[allow(unused_mut)]
    let mut scope_1861 = writer.prefix("DBParameterGroupName");
    if let Some(var_1862) = &input.db_parameter_group_name {
        scope_1861.string(var_1862);
    }
    #[allow(unused_mut)]
    let mut scope_1863 = writer.prefix("DeletionProtection");
    if let Some(var_1864) = &input.deletion_protection {
        scope_1863.boolean(*var_1864);
    }
    #[allow(unused_mut)]
    let mut scope_1865 = writer.prefix("EnableCustomerOwnedIp");
    if let Some(var_1866) = &input.enable_customer_owned_ip {
        scope_1865.boolean(*var_1866);
    }
    #[allow(unused_mut)]
    let mut scope_1867 = writer.prefix("CustomIamInstanceProfile");
    if let Some(var_1868) = &input.custom_iam_instance_profile {
        scope_1867.string(var_1868);
    }
    #[allow(unused_mut)]
    let mut scope_1869 = writer.prefix("BackupTarget");
    if let Some(var_1870) = &input.backup_target {
        scope_1869.string(var_1870);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_restore_db_instance_from_s3(
    input: &crate::input::RestoreDbInstanceFromS3Input,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RestoreDBInstanceFromS3", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1871 = writer.prefix("DBName");
    if let Some(var_1872) = &input.db_name {
        scope_1871.string(var_1872);
    }
    #[allow(unused_mut)]
    let mut scope_1873 = writer.prefix("DBInstanceIdentifier");
    if let Some(var_1874) = &input.db_instance_identifier {
        scope_1873.string(var_1874);
    }
    #[allow(unused_mut)]
    let mut scope_1875 = writer.prefix("AllocatedStorage");
    if let Some(var_1876) = &input.allocated_storage {
        scope_1875.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1876).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1877 = writer.prefix("DBInstanceClass");
    if let Some(var_1878) = &input.db_instance_class {
        scope_1877.string(var_1878);
    }
    #[allow(unused_mut)]
    let mut scope_1879 = writer.prefix("Engine");
    if let Some(var_1880) = &input.engine {
        scope_1879.string(var_1880);
    }
    #[allow(unused_mut)]
    let mut scope_1881 = writer.prefix("MasterUsername");
    if let Some(var_1882) = &input.master_username {
        scope_1881.string(var_1882);
    }
    #[allow(unused_mut)]
    let mut scope_1883 = writer.prefix("MasterUserPassword");
    if let Some(var_1884) = &input.master_user_password {
        scope_1883.string(var_1884);
    }
    #[allow(unused_mut)]
    let mut scope_1885 = writer.prefix("DBSecurityGroups");
    if let Some(var_1886) = &input.db_security_groups {
        let mut list_1888 = scope_1885.start_list(false, Some("DBSecurityGroupName"));
        for item_1887 in var_1886 {
            #[allow(unused_mut)]
            let mut entry_1889 = list_1888.entry();
            entry_1889.string(item_1887);
        }
        list_1888.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1890 = writer.prefix("VpcSecurityGroupIds");
    if let Some(var_1891) = &input.vpc_security_group_ids {
        let mut list_1893 = scope_1890.start_list(false, Some("VpcSecurityGroupId"));
        for item_1892 in var_1891 {
            #[allow(unused_mut)]
            let mut entry_1894 = list_1893.entry();
            entry_1894.string(item_1892);
        }
        list_1893.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1895 = writer.prefix("AvailabilityZone");
    if let Some(var_1896) = &input.availability_zone {
        scope_1895.string(var_1896);
    }
    #[allow(unused_mut)]
    let mut scope_1897 = writer.prefix("DBSubnetGroupName");
    if let Some(var_1898) = &input.db_subnet_group_name {
        scope_1897.string(var_1898);
    }
    #[allow(unused_mut)]
    let mut scope_1899 = writer.prefix("PreferredMaintenanceWindow");
    if let Some(var_1900) = &input.preferred_maintenance_window {
        scope_1899.string(var_1900);
    }
    #[allow(unused_mut)]
    let mut scope_1901 = writer.prefix("DBParameterGroupName");
    if let Some(var_1902) = &input.db_parameter_group_name {
        scope_1901.string(var_1902);
    }
    #[allow(unused_mut)]
    let mut scope_1903 = writer.prefix("BackupRetentionPeriod");
    if let Some(var_1904) = &input.backup_retention_period {
        scope_1903.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1904).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1905 = writer.prefix("PreferredBackupWindow");
    if let Some(var_1906) = &input.preferred_backup_window {
        scope_1905.string(var_1906);
    }
    #[allow(unused_mut)]
    let mut scope_1907 = writer.prefix("Port");
    if let Some(var_1908) = &input.port {
        scope_1907.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1908).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1909 = writer.prefix("MultiAZ");
    if let Some(var_1910) = &input.multi_az {
        scope_1909.boolean(*var_1910);
    }
    #[allow(unused_mut)]
    let mut scope_1911 = writer.prefix("EngineVersion");
    if let Some(var_1912) = &input.engine_version {
        scope_1911.string(var_1912);
    }
    #[allow(unused_mut)]
    let mut scope_1913 = writer.prefix("AutoMinorVersionUpgrade");
    if let Some(var_1914) = &input.auto_minor_version_upgrade {
        scope_1913.boolean(*var_1914);
    }
    #[allow(unused_mut)]
    let mut scope_1915 = writer.prefix("LicenseModel");
    if let Some(var_1916) = &input.license_model {
        scope_1915.string(var_1916);
    }
    #[allow(unused_mut)]
    let mut scope_1917 = writer.prefix("Iops");
    if let Some(var_1918) = &input.iops {
        scope_1917.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1918).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1919 = writer.prefix("OptionGroupName");
    if let Some(var_1920) = &input.option_group_name {
        scope_1919.string(var_1920);
    }
    #[allow(unused_mut)]
    let mut scope_1921 = writer.prefix("PubliclyAccessible");
    if let Some(var_1922) = &input.publicly_accessible {
        scope_1921.boolean(*var_1922);
    }
    #[allow(unused_mut)]
    let mut scope_1923 = writer.prefix("Tags");
    if let Some(var_1924) = &input.tags {
        let mut list_1926 = scope_1923.start_list(false, Some("Tag"));
        for item_1925 in var_1924 {
            #[allow(unused_mut)]
            let mut entry_1927 = list_1926.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_1927, item_1925)?;
        }
        list_1926.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1928 = writer.prefix("StorageType");
    if let Some(var_1929) = &input.storage_type {
        scope_1928.string(var_1929);
    }
    #[allow(unused_mut)]
    let mut scope_1930 = writer.prefix("StorageEncrypted");
    if let Some(var_1931) = &input.storage_encrypted {
        scope_1930.boolean(*var_1931);
    }
    #[allow(unused_mut)]
    let mut scope_1932 = writer.prefix("KmsKeyId");
    if let Some(var_1933) = &input.kms_key_id {
        scope_1932.string(var_1933);
    }
    #[allow(unused_mut)]
    let mut scope_1934 = writer.prefix("CopyTagsToSnapshot");
    if let Some(var_1935) = &input.copy_tags_to_snapshot {
        scope_1934.boolean(*var_1935);
    }
    #[allow(unused_mut)]
    let mut scope_1936 = writer.prefix("MonitoringInterval");
    if let Some(var_1937) = &input.monitoring_interval {
        scope_1936.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1937).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1938 = writer.prefix("MonitoringRoleArn");
    if let Some(var_1939) = &input.monitoring_role_arn {
        scope_1938.string(var_1939);
    }
    #[allow(unused_mut)]
    let mut scope_1940 = writer.prefix("EnableIAMDatabaseAuthentication");
    if let Some(var_1941) = &input.enable_iam_database_authentication {
        scope_1940.boolean(*var_1941);
    }
    #[allow(unused_mut)]
    let mut scope_1942 = writer.prefix("SourceEngine");
    if let Some(var_1943) = &input.source_engine {
        scope_1942.string(var_1943);
    }
    #[allow(unused_mut)]
    let mut scope_1944 = writer.prefix("SourceEngineVersion");
    if let Some(var_1945) = &input.source_engine_version {
        scope_1944.string(var_1945);
    }
    #[allow(unused_mut)]
    let mut scope_1946 = writer.prefix("S3BucketName");
    if let Some(var_1947) = &input.s3_bucket_name {
        scope_1946.string(var_1947);
    }
    #[allow(unused_mut)]
    let mut scope_1948 = writer.prefix("S3Prefix");
    if let Some(var_1949) = &input.s3_prefix {
        scope_1948.string(var_1949);
    }
    #[allow(unused_mut)]
    let mut scope_1950 = writer.prefix("S3IngestionRoleArn");
    if let Some(var_1951) = &input.s3_ingestion_role_arn {
        scope_1950.string(var_1951);
    }
    #[allow(unused_mut)]
    let mut scope_1952 = writer.prefix("EnablePerformanceInsights");
    if let Some(var_1953) = &input.enable_performance_insights {
        scope_1952.boolean(*var_1953);
    }
    #[allow(unused_mut)]
    let mut scope_1954 = writer.prefix("PerformanceInsightsKMSKeyId");
    if let Some(var_1955) = &input.performance_insights_kms_key_id {
        scope_1954.string(var_1955);
    }
    #[allow(unused_mut)]
    let mut scope_1956 = writer.prefix("PerformanceInsightsRetentionPeriod");
    if let Some(var_1957) = &input.performance_insights_retention_period {
        scope_1956.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1957).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1958 = writer.prefix("EnableCloudwatchLogsExports");
    if let Some(var_1959) = &input.enable_cloudwatch_logs_exports {
        let mut list_1961 = scope_1958.start_list(false, None);
        for item_1960 in var_1959 {
            #[allow(unused_mut)]
            let mut entry_1962 = list_1961.entry();
            entry_1962.string(item_1960);
        }
        list_1961.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1963 = writer.prefix("ProcessorFeatures");
    if let Some(var_1964) = &input.processor_features {
        let mut list_1966 = scope_1963.start_list(false, Some("ProcessorFeature"));
        for item_1965 in var_1964 {
            #[allow(unused_mut)]
            let mut entry_1967 = list_1966.entry();
            crate::query_ser::serialize_structure_crate_model_processor_feature(
                entry_1967, item_1965,
            )?;
        }
        list_1966.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1968 = writer.prefix("UseDefaultProcessorFeatures");
    if let Some(var_1969) = &input.use_default_processor_features {
        scope_1968.boolean(*var_1969);
    }
    #[allow(unused_mut)]
    let mut scope_1970 = writer.prefix("DeletionProtection");
    if let Some(var_1971) = &input.deletion_protection {
        scope_1970.boolean(*var_1971);
    }
    #[allow(unused_mut)]
    let mut scope_1972 = writer.prefix("MaxAllocatedStorage");
    if let Some(var_1973) = &input.max_allocated_storage {
        scope_1972.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1973).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_restore_db_instance_to_point_in_time(
    input: &crate::input::RestoreDbInstanceToPointInTimeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "RestoreDBInstanceToPointInTime",
        "2014-10-31",
    );
    #[allow(unused_mut)]
    let mut scope_1974 = writer.prefix("SourceDBInstanceIdentifier");
    if let Some(var_1975) = &input.source_db_instance_identifier {
        scope_1974.string(var_1975);
    }
    #[allow(unused_mut)]
    let mut scope_1976 = writer.prefix("TargetDBInstanceIdentifier");
    if let Some(var_1977) = &input.target_db_instance_identifier {
        scope_1976.string(var_1977);
    }
    #[allow(unused_mut)]
    let mut scope_1978 = writer.prefix("RestoreTime");
    if let Some(var_1979) = &input.restore_time {
        scope_1978.date_time(var_1979, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_1980 = writer.prefix("UseLatestRestorableTime");
    if input.use_latest_restorable_time {
        scope_1980.boolean(input.use_latest_restorable_time);
    }
    #[allow(unused_mut)]
    let mut scope_1981 = writer.prefix("DBInstanceClass");
    if let Some(var_1982) = &input.db_instance_class {
        scope_1981.string(var_1982);
    }
    #[allow(unused_mut)]
    let mut scope_1983 = writer.prefix("Port");
    if let Some(var_1984) = &input.port {
        scope_1983.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1984).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1985 = writer.prefix("AvailabilityZone");
    if let Some(var_1986) = &input.availability_zone {
        scope_1985.string(var_1986);
    }
    #[allow(unused_mut)]
    let mut scope_1987 = writer.prefix("DBSubnetGroupName");
    if let Some(var_1988) = &input.db_subnet_group_name {
        scope_1987.string(var_1988);
    }
    #[allow(unused_mut)]
    let mut scope_1989 = writer.prefix("MultiAZ");
    if let Some(var_1990) = &input.multi_az {
        scope_1989.boolean(*var_1990);
    }
    #[allow(unused_mut)]
    let mut scope_1991 = writer.prefix("PubliclyAccessible");
    if let Some(var_1992) = &input.publicly_accessible {
        scope_1991.boolean(*var_1992);
    }
    #[allow(unused_mut)]
    let mut scope_1993 = writer.prefix("AutoMinorVersionUpgrade");
    if let Some(var_1994) = &input.auto_minor_version_upgrade {
        scope_1993.boolean(*var_1994);
    }
    #[allow(unused_mut)]
    let mut scope_1995 = writer.prefix("LicenseModel");
    if let Some(var_1996) = &input.license_model {
        scope_1995.string(var_1996);
    }
    #[allow(unused_mut)]
    let mut scope_1997 = writer.prefix("DBName");
    if let Some(var_1998) = &input.db_name {
        scope_1997.string(var_1998);
    }
    #[allow(unused_mut)]
    let mut scope_1999 = writer.prefix("Engine");
    if let Some(var_2000) = &input.engine {
        scope_1999.string(var_2000);
    }
    #[allow(unused_mut)]
    let mut scope_2001 = writer.prefix("Iops");
    if let Some(var_2002) = &input.iops {
        scope_2001.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2002).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2003 = writer.prefix("OptionGroupName");
    if let Some(var_2004) = &input.option_group_name {
        scope_2003.string(var_2004);
    }
    #[allow(unused_mut)]
    let mut scope_2005 = writer.prefix("CopyTagsToSnapshot");
    if let Some(var_2006) = &input.copy_tags_to_snapshot {
        scope_2005.boolean(*var_2006);
    }
    #[allow(unused_mut)]
    let mut scope_2007 = writer.prefix("Tags");
    if let Some(var_2008) = &input.tags {
        let mut list_2010 = scope_2007.start_list(false, Some("Tag"));
        for item_2009 in var_2008 {
            #[allow(unused_mut)]
            let mut entry_2011 = list_2010.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_2011, item_2009)?;
        }
        list_2010.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2012 = writer.prefix("StorageType");
    if let Some(var_2013) = &input.storage_type {
        scope_2012.string(var_2013);
    }
    #[allow(unused_mut)]
    let mut scope_2014 = writer.prefix("TdeCredentialArn");
    if let Some(var_2015) = &input.tde_credential_arn {
        scope_2014.string(var_2015);
    }
    #[allow(unused_mut)]
    let mut scope_2016 = writer.prefix("TdeCredentialPassword");
    if let Some(var_2017) = &input.tde_credential_password {
        scope_2016.string(var_2017);
    }
    #[allow(unused_mut)]
    let mut scope_2018 = writer.prefix("VpcSecurityGroupIds");
    if let Some(var_2019) = &input.vpc_security_group_ids {
        let mut list_2021 = scope_2018.start_list(false, Some("VpcSecurityGroupId"));
        for item_2020 in var_2019 {
            #[allow(unused_mut)]
            let mut entry_2022 = list_2021.entry();
            entry_2022.string(item_2020);
        }
        list_2021.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2023 = writer.prefix("Domain");
    if let Some(var_2024) = &input.domain {
        scope_2023.string(var_2024);
    }
    #[allow(unused_mut)]
    let mut scope_2025 = writer.prefix("DomainIAMRoleName");
    if let Some(var_2026) = &input.domain_iam_role_name {
        scope_2025.string(var_2026);
    }
    #[allow(unused_mut)]
    let mut scope_2027 = writer.prefix("EnableIAMDatabaseAuthentication");
    if let Some(var_2028) = &input.enable_iam_database_authentication {
        scope_2027.boolean(*var_2028);
    }
    #[allow(unused_mut)]
    let mut scope_2029 = writer.prefix("EnableCloudwatchLogsExports");
    if let Some(var_2030) = &input.enable_cloudwatch_logs_exports {
        let mut list_2032 = scope_2029.start_list(false, None);
        for item_2031 in var_2030 {
            #[allow(unused_mut)]
            let mut entry_2033 = list_2032.entry();
            entry_2033.string(item_2031);
        }
        list_2032.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2034 = writer.prefix("ProcessorFeatures");
    if let Some(var_2035) = &input.processor_features {
        let mut list_2037 = scope_2034.start_list(false, Some("ProcessorFeature"));
        for item_2036 in var_2035 {
            #[allow(unused_mut)]
            let mut entry_2038 = list_2037.entry();
            crate::query_ser::serialize_structure_crate_model_processor_feature(
                entry_2038, item_2036,
            )?;
        }
        list_2037.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2039 = writer.prefix("UseDefaultProcessorFeatures");
    if let Some(var_2040) = &input.use_default_processor_features {
        scope_2039.boolean(*var_2040);
    }
    #[allow(unused_mut)]
    let mut scope_2041 = writer.prefix("DBParameterGroupName");
    if let Some(var_2042) = &input.db_parameter_group_name {
        scope_2041.string(var_2042);
    }
    #[allow(unused_mut)]
    let mut scope_2043 = writer.prefix("DeletionProtection");
    if let Some(var_2044) = &input.deletion_protection {
        scope_2043.boolean(*var_2044);
    }
    #[allow(unused_mut)]
    let mut scope_2045 = writer.prefix("SourceDbiResourceId");
    if let Some(var_2046) = &input.source_dbi_resource_id {
        scope_2045.string(var_2046);
    }
    #[allow(unused_mut)]
    let mut scope_2047 = writer.prefix("MaxAllocatedStorage");
    if let Some(var_2048) = &input.max_allocated_storage {
        scope_2047.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2048).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2049 = writer.prefix("SourceDBInstanceAutomatedBackupsArn");
    if let Some(var_2050) = &input.source_db_instance_automated_backups_arn {
        scope_2049.string(var_2050);
    }
    #[allow(unused_mut)]
    let mut scope_2051 = writer.prefix("EnableCustomerOwnedIp");
    if let Some(var_2052) = &input.enable_customer_owned_ip {
        scope_2051.boolean(*var_2052);
    }
    #[allow(unused_mut)]
    let mut scope_2053 = writer.prefix("CustomIamInstanceProfile");
    if let Some(var_2054) = &input.custom_iam_instance_profile {
        scope_2053.string(var_2054);
    }
    #[allow(unused_mut)]
    let mut scope_2055 = writer.prefix("BackupTarget");
    if let Some(var_2056) = &input.backup_target {
        scope_2055.string(var_2056);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_revoke_db_security_group_ingress(
    input: &crate::input::RevokeDbSecurityGroupIngressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RevokeDBSecurityGroupIngress", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_2057 = writer.prefix("DBSecurityGroupName");
    if let Some(var_2058) = &input.db_security_group_name {
        scope_2057.string(var_2058);
    }
    #[allow(unused_mut)]
    let mut scope_2059 = writer.prefix("CIDRIP");
    if let Some(var_2060) = &input.cidrip {
        scope_2059.string(var_2060);
    }
    #[allow(unused_mut)]
    let mut scope_2061 = writer.prefix("EC2SecurityGroupName");
    if let Some(var_2062) = &input.ec2_security_group_name {
        scope_2061.string(var_2062);
    }
    #[allow(unused_mut)]
    let mut scope_2063 = writer.prefix("EC2SecurityGroupId");
    if let Some(var_2064) = &input.ec2_security_group_id {
        scope_2063.string(var_2064);
    }
    #[allow(unused_mut)]
    let mut scope_2065 = writer.prefix("EC2SecurityGroupOwnerId");
    if let Some(var_2066) = &input.ec2_security_group_owner_id {
        scope_2065.string(var_2066);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_start_activity_stream(
    input: &crate::input::StartActivityStreamInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "StartActivityStream", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_2067 = writer.prefix("ResourceArn");
    if let Some(var_2068) = &input.resource_arn {
        scope_2067.string(var_2068);
    }
    #[allow(unused_mut)]
    let mut scope_2069 = writer.prefix("Mode");
    if let Some(var_2070) = &input.mode {
        scope_2069.string(var_2070.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_2071 = writer.prefix("KmsKeyId");
    if let Some(var_2072) = &input.kms_key_id {
        scope_2071.string(var_2072);
    }
    #[allow(unused_mut)]
    let mut scope_2073 = writer.prefix("ApplyImmediately");
    if let Some(var_2074) = &input.apply_immediately {
        scope_2073.boolean(*var_2074);
    }
    #[allow(unused_mut)]
    let mut scope_2075 = writer.prefix("EngineNativeAuditFieldsIncluded");
    if let Some(var_2076) = &input.engine_native_audit_fields_included {
        scope_2075.boolean(*var_2076);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_start_db_cluster(
    input: &crate::input::StartDbClusterInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "StartDBCluster", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_2077 = writer.prefix("DBClusterIdentifier");
    if let Some(var_2078) = &input.db_cluster_identifier {
        scope_2077.string(var_2078);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_start_db_instance(
    input: &crate::input::StartDbInstanceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "StartDBInstance", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_2079 = writer.prefix("DBInstanceIdentifier");
    if let Some(var_2080) = &input.db_instance_identifier {
        scope_2079.string(var_2080);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_start_db_instance_automated_backups_replication(
    input: &crate::input::StartDbInstanceAutomatedBackupsReplicationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "StartDBInstanceAutomatedBackupsReplication",
        "2014-10-31",
    );
    #[allow(unused_mut)]
    let mut scope_2081 = writer.prefix("SourceDBInstanceArn");
    if let Some(var_2082) = &input.source_db_instance_arn {
        scope_2081.string(var_2082);
    }
    #[allow(unused_mut)]
    let mut scope_2083 = writer.prefix("BackupRetentionPeriod");
    if let Some(var_2084) = &input.backup_retention_period {
        scope_2083.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2084).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2085 = writer.prefix("KmsKeyId");
    if let Some(var_2086) = &input.kms_key_id {
        scope_2085.string(var_2086);
    }
    #[allow(unused_mut)]
    let mut scope_2087 = writer.prefix("PreSignedUrl");
    if let Some(var_2088) = &input.pre_signed_url {
        scope_2087.string(var_2088);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_start_export_task(
    input: &crate::input::StartExportTaskInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "StartExportTask", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_2089 = writer.prefix("ExportTaskIdentifier");
    if let Some(var_2090) = &input.export_task_identifier {
        scope_2089.string(var_2090);
    }
    #[allow(unused_mut)]
    let mut scope_2091 = writer.prefix("SourceArn");
    if let Some(var_2092) = &input.source_arn {
        scope_2091.string(var_2092);
    }
    #[allow(unused_mut)]
    let mut scope_2093 = writer.prefix("S3BucketName");
    if let Some(var_2094) = &input.s3_bucket_name {
        scope_2093.string(var_2094);
    }
    #[allow(unused_mut)]
    let mut scope_2095 = writer.prefix("IamRoleArn");
    if let Some(var_2096) = &input.iam_role_arn {
        scope_2095.string(var_2096);
    }
    #[allow(unused_mut)]
    let mut scope_2097 = writer.prefix("KmsKeyId");
    if let Some(var_2098) = &input.kms_key_id {
        scope_2097.string(var_2098);
    }
    #[allow(unused_mut)]
    let mut scope_2099 = writer.prefix("S3Prefix");
    if let Some(var_2100) = &input.s3_prefix {
        scope_2099.string(var_2100);
    }
    #[allow(unused_mut)]
    let mut scope_2101 = writer.prefix("ExportOnly");
    if let Some(var_2102) = &input.export_only {
        let mut list_2104 = scope_2101.start_list(false, None);
        for item_2103 in var_2102 {
            #[allow(unused_mut)]
            let mut entry_2105 = list_2104.entry();
            entry_2105.string(item_2103);
        }
        list_2104.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_stop_activity_stream(
    input: &crate::input::StopActivityStreamInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "StopActivityStream", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_2106 = writer.prefix("ResourceArn");
    if let Some(var_2107) = &input.resource_arn {
        scope_2106.string(var_2107);
    }
    #[allow(unused_mut)]
    let mut scope_2108 = writer.prefix("ApplyImmediately");
    if let Some(var_2109) = &input.apply_immediately {
        scope_2108.boolean(*var_2109);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_stop_db_cluster(
    input: &crate::input::StopDbClusterInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "StopDBCluster", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_2110 = writer.prefix("DBClusterIdentifier");
    if let Some(var_2111) = &input.db_cluster_identifier {
        scope_2110.string(var_2111);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_stop_db_instance(
    input: &crate::input::StopDbInstanceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "StopDBInstance", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_2112 = writer.prefix("DBInstanceIdentifier");
    if let Some(var_2113) = &input.db_instance_identifier {
        scope_2112.string(var_2113);
    }
    #[allow(unused_mut)]
    let mut scope_2114 = writer.prefix("DBSnapshotIdentifier");
    if let Some(var_2115) = &input.db_snapshot_identifier {
        scope_2114.string(var_2115);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_stop_db_instance_automated_backups_replication(
    input: &crate::input::StopDbInstanceAutomatedBackupsReplicationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "StopDBInstanceAutomatedBackupsReplication",
        "2014-10-31",
    );
    #[allow(unused_mut)]
    let mut scope_2116 = writer.prefix("SourceDBInstanceArn");
    if let Some(var_2117) = &input.source_db_instance_arn {
        scope_2116.string(var_2117);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}
